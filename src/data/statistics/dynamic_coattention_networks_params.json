{
    "src/encoder.py": {
        "tensorflow": {
            "LSTMCell_11": {
                "variable": {
                    "value": "lstm",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "basic_lstm_cell",
                    "type": "str",
                    "possible_values": []
                },
                "num_units": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hyperparameters.hidden_size",
                            "Attribute"
                        ],
                        [
                            "hyperparameters.hidden_size",
                            "Attribute"
                        ],
                        [
                            "hyperparameters.hidden_size",
                            "Attribute"
                        ],
                        [
                            "200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_25": {
                "variable": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(embed, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(embed, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(embed, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_rnn_26": {
                "variable": {
                    "value": "(lstm_outputs, final_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.DropoutWrapper(lstm, output_keep_prob=keep_prob)",
                            "Call"
                        ],
                        [
                            "lstm",
                            "Name"
                        ]
                    ]
                },
                "inputs": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(embed, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(embed, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(embed, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "sequence_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_state": {
                    "value": "initial_state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cell.zero_state(batch_size, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_33": {
                "variable": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(embed, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(embed, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(embed, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_rnn_34": {
                "variable": {
                    "value": "(lstm_outputs, final_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.DropoutWrapper(lstm, output_keep_prob=keep_prob)",
                            "Call"
                        ],
                        [
                            "lstm",
                            "Name"
                        ]
                    ]
                },
                "inputs": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(embed, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(embed, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(embed, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "sequence_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_state": {
                    "value": "initial_state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cell.zero_state(batch_size, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_47": {
                "variable": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(embed, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(embed, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(embed, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_96": {
                "variable": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([D, tiled_sentinel_d], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(Q, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_111": {
                "variable": {
                    "value": "A_Q",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(D, tf.transpose(Q, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.add(L, min_float_at_padding)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "int(hyperparameters.softmax_axis)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "softmaxed_L",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_112": {
                "variable": {
                    "value": "A_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.transpose(L, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "int(hyperparameters.softmax_axis)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "softmaxed_L_transpose",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_113": {
                "variable": {
                    "value": "C_Q",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.transpose(D, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "A_Q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(L, axis=int(hyperparameters.softmax_axis), name='softmaxed_L')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_115": {
                "variable": {
                    "value": "C_D_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "C_Q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.transpose(D, perm=[0, 2, 1]), A_Q)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "A_D",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.transpose(L, perm=[0, 2, 1]), axis=int(hyperparameters.softmax_axis), name='softmaxed_L_transpose')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_116": {
                "variable": {
                    "value": "C_Q_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "C_D_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(C_Q, A_D)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "A_Q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(L, axis=int(hyperparameters.softmax_axis), name='softmaxed_L')",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_119": {
                "variable": {
                    "value": "concat_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.transpose(Q, perm=[0, 2, 1]), C_Q]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_120": {
                "variable": {
                    "value": "concat_1_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.transpose(Q, perm=[0, 2, 1]), C_Q, C_Q_2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_127": {
                "variable": {
                    "value": "concat_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.transpose(D, perm=[0, 2, 1]), C_D]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_128": {
                "variable": {
                    "value": "concat_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "concat_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.transpose(D, perm=[0, 2, 1]), C_D], 1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(concat_2, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "concat_2[:, :-1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DropoutWrapper_13": {
                "variable": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "lstm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.LSTMCell(name='basic_lstm_cell', num_units=hidden_size)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "keep_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hyperparameters.keep_prob",
                            "Attribute"
                        ],
                        [
                            "hyperparameters.keep_prob",
                            "Attribute"
                        ],
                        [
                            "hyperparameters.keep_prob",
                            "Attribute"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dense_70": {
                "variable": {
                    "value": "linear_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hyperparameters.hidden_size",
                            "Attribute"
                        ],
                        [
                            "hyperparameters.hidden_size",
                            "Attribute"
                        ],
                        [
                            "hyperparameters.hidden_size",
                            "Attribute"
                        ],
                        [
                            "200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tanh_71": {
                "variable": {
                    "value": "question_enc",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "linear_model(que_lstm_outputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_88": {
                "input": {
                    "value": "sentinel_d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bias_variable([hyperparameters.hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_89": {
                "variable": {
                    "value": "tiled_sentinel_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "expanded_sentinel_d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(sentinel_d, 0), 0)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[hyperparameters.batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_90": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[D, tiled_sentinel_d]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_92": {
                "input": {
                    "value": "sentinel_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bias_variable([hyperparameters.hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_93": {
                "variable": {
                    "value": "tiled_sentinel_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "expanded_sentinel_q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(sentinel_q, 0), 0)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[hyperparameters.batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_94": {
                "variable": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[Q, tiled_sentinel_q]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "subtract_98": {
                "variable": {
                    "value": "document_end_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "documents_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "subtract_99": {
                "variable": {
                    "value": "question_end_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "questions_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_100": {
                "variable": {
                    "value": "doc_words_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.one_hot(document_end_indices, hyperparameters.max_doc_len)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "reverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cumsum_101": {
                "variable": {
                    "value": "que_words_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.one_hot(question_end_indices, hyperparameters.max_que_len)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "reverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_103": {
                "variable": {
                    "value": "sentinel_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hyperparameters.batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_104": {
                "variable": {
                    "value": "doc_words_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[doc_words_mask, sentinel_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_105": {
                "variable": {
                    "value": "que_words_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[que_words_mask, sentinel_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_106": {
                "variable": {
                    "value": "words_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(doc_words_mask, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.expand_dims(que_words_mask, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_107": {
                "variable": {
                    "value": "negative_padding_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "words_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.expand_dims(doc_words_mask, axis=2), tf.expand_dims(que_words_mask, axis=1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_108": {
                "variable": {
                    "value": "min_float_at_padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "negative_padding_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.subtract(words_mask, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(-0.5 * tf.float32.min, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_109": {
                "variable": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(D, tf.transpose(Q, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.add(L, min_float_at_padding)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "min_float_at_padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(negative_padding_mask, tf.cast(-0.5 * tf.float32.min, tf.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_122": {
                "variable": {
                    "value": "C_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.transpose(Q, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "A_D",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.transpose(L, perm=[0, 2, 1]), axis=int(hyperparameters.softmax_axis), name='softmaxed_L_transpose')",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_134": {
                "variable": {
                    "value": "BiLSTM_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "BiLSTM_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(BiLSTM_outputs, keep_prob=hyperparameters.keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.concat([BiLSTM_outputs, impossible_encoding], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "hyperparameters.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_149": {
                "variable": {
                    "value": "BiLSTM_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[BiLSTM_outputs, impossible_encoding]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_63": {
                "name_or_scope": {
                    "value": "lstm",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_66": {
                "variable": {
                    "value": "document_enc",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "document_enc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(document_enc, keep_prob=hyperparameters.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "hyperparameters.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "tanhlayer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_74": {
                "variable": {
                    "value": "question_enc",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "question_enc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.math.tanh(linear_model(que_lstm_outputs))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(question_enc, keep_prob=hyperparameters.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "hyperparameters.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_80": {
                "name": {
                    "value": "sentinels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_96": {
                "a": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([Q, tiled_sentinel_q], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_112": {
                "a": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(D, tf.transpose(Q, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.add(L, min_float_at_padding)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_113": {
                "a": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([D, tiled_sentinel_d], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_124": {
                "variable": {
                    "value": "C_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "concat_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.transpose(Q, perm=[0, 2, 1]), C_Q], 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "A_D",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.transpose(L, perm=[0, 2, 1]), axis=int(hyperparameters.softmax_axis), name='softmaxed_L_transpose')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_155": {
                "name_or_scope": {
                    "value": "doc_que_encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_157": {
                "name_or_scope": {
                    "value": "coattention_encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "sentinel_d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "sentinel_q",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_100": {
                "indices": {
                    "value": "document_end_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.subtract(documents_lengths, 1)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "hyperparameters.max_doc_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_101": {
                "indices": {
                    "value": "question_end_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.subtract(questions_lengths, 1)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "hyperparameters.max_que_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_106": {
                "input": {
                    "value": "que_words_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.math.cumsum(tf.one_hot(question_end_indices, hyperparameters.max_que_len), axis=1, reverse=True)",
                            "Call"
                        ],
                        [
                            "tf.concat([que_words_mask, sentinel_mask], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_108": {
                "x": {
                    "value": "-0.5 * tf.float32.min",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_119": {
                "a": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([Q, tiled_sentinel_q], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_120": {
                "a": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([Q, tiled_sentinel_q], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_122": {
                "a": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([Q, tiled_sentinel_q], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_126": {
                "variable": {
                    "value": "C_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "concat_1_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.transpose(Q, perm=[0, 2, 1]), C_Q, C_Q_2], 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "A_D",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.transpose(L, perm=[0, 2, 1]), axis=int(hyperparameters.softmax_axis), name='softmaxed_L_transpose')",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_127": {
                "a": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([D, tiled_sentinel_d], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_137": {
                "name": {
                    "value": "SQuAD_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_141": {
                "input": {
                    "value": "impossible_encoding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bias_variable([2 * hyperparameters.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(impossible_encoding, axis=0), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(impossible_encoding, [hyperparameters.batch_size, 1, 1])",
                            "Call"
                        ],
                        [
                            "encodings[:, -1]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(impossible_encoding, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_142": {
                "variable": {
                    "value": "impossible_encoding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "impossible_encoding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bias_variable([2 * hyperparameters.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(impossible_encoding, axis=0), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(impossible_encoding, [hyperparameters.batch_size, 1, 1])",
                            "Call"
                        ],
                        [
                            "encodings[:, -1]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(impossible_encoding, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[hyperparameters.batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_148": {
                "variable": {
                    "value": "impossible_encoding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "impossible_encoding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bias_variable([2 * hyperparameters.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(impossible_encoding, axis=0), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(impossible_encoding, [hyperparameters.batch_size, 1, 1])",
                            "Call"
                        ],
                        [
                            "encodings[:, -1]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(impossible_encoding, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/encoder_cudnn.py": {
        "tensorflow": {
            "LSTMCell_12": {
                "variable": {
                    "value": "lstm",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "basic_lstm_cell",
                    "type": "str",
                    "possible_values": []
                },
                "num_units": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hyperparameters.num_units",
                            "Attribute"
                        ],
                        [
                            "hyperparameters.num_units",
                            "Attribute"
                        ],
                        [
                            "hyperparameters.num_units",
                            "Attribute"
                        ],
                        [
                            "200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DropoutWrapper_13": {
                "variable": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "lstm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.LSTMCell(name='basic_lstm_cell', num_units=num_units)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "keep_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hyperparameters.keep_prob",
                            "Attribute"
                        ],
                        [
                            "hyperparameters.keep_prob",
                            "Attribute"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_29": {
                "variable": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(embed, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(embed, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_50": {
                "variable": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(embed, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(embed, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_83": {
                "variable": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(Q, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_85": {
                "variable": {
                    "value": "A_Q",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(D, tf.transpose(Q, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_86": {
                "variable": {
                    "value": "A_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.transpose(L, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_87": {
                "variable": {
                    "value": "C_Q",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.transpose(D, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "A_Q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(L)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_89": {
                "variable": {
                    "value": "concat_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.transpose(Q, perm=[0, 2, 1]), C_Q]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_90": {
                "variable": {
                    "value": "C_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "concat_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.transpose(Q, perm=[0, 2, 1]), C_Q], 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "A_D",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.transpose(L, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_92": {
                "variable": {
                    "value": "concat_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.transpose(D, perm=[0, 2, 1]), C_D]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_93": {
                "variable": {
                    "value": "concat_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "concat_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.transpose(D, perm=[0, 2, 1]), C_D], 1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(concat_2, perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dense_68": {
                "variable": {
                    "value": "linear_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hyperparameters.num_units",
                            "Attribute"
                        ],
                        [
                            "hyperparameters.num_units",
                            "Attribute"
                        ],
                        [
                            "hyperparameters.num_units",
                            "Attribute"
                        ],
                        [
                            "200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tanh_69": {
                "variable": {
                    "value": "question_enc",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "linear_model(que_lstm_outputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_64": {
                "name_or_scope": {
                    "value": "lstm",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_67": {
                "name_or_scope": {
                    "value": "tanhlayer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_83": {
                "a": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_86": {
                "a": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(D, tf.transpose(Q, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_87": {
                "a": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_89": {
                "a": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_92": {
                "a": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "src/highway_max_out.py": {
        "tensorflow": {
            "transpose_8": {
                "variable": {
                    "value": "current_words",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "current_words",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(current_words, perm=[1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "uniform_64": {
                "variable": {
                    "value": "dummy",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[32, 600, 400]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_66": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_12": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[lstm_hidden_state, prev_start_point_guess, prev_end_point_guess]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_10": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_17": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(r, wd)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensordot_31": {
                "variable": {
                    "value": "td_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([lstm_hidden_state, prev_start_point_guess, prev_end_point_guess], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(tf.matmul(r, wd))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w1_r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([h_size, h_size, pool_size])",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[[1], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensordot_32": {
                "variable": {
                    "value": "td_current_words",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "current_words",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(current_words, perm=[1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w1_current_words",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([2 * h_size, h_size, pool_size])",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[[2], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_33": {
                "variable": {
                    "value": "td",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "td_current_words",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tensordot(current_words, w1_current_words, axes=[[2], [0]])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "td_r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tensordot(r, w1_r, axes=[[1], [0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "add_34": {
                "variable": {
                    "value": "mt1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "td",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.math.add(td_current_words, td_r)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "b1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bias_variable([h_size, pool_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_35": {
                "variable": {
                    "value": "mt1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mt1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.math.add(td, b1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(mt1, reduction_indices=[3])",
                            "Call"
                        ]
                    ]
                },
                "reduction_indices": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_43": {
                "variable": {
                    "value": "mt2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.tensordot(mt1, w2, axes=[[2], [0]])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bias_variable([h_size, pool_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_44": {
                "variable": {
                    "value": "mt2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mt2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.math.add(tf.tensordot(mt1, w2, axes=[[2], [0]]), b2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(mt2, reduction_indices=[3])",
                            "Call"
                        ]
                    ]
                },
                "reduction_indices": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_52": {
                "variable": {
                    "value": "mt1_mt2",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mt1, mt2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_54": {
                "variable": {
                    "value": "mt3",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.tensordot(mt1_mt2, w3, axes=[[2], [0]])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bias_variable([pool_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_55": {
                "variable": {
                    "value": "mt3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mt3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.math.add(tf.tensordot(mt1_mt2, w3, axes=[[2], [0]]), b3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(mt3, reduction_indices=[3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.squeeze(mt3, [2]))",
                            "Call"
                        ]
                    ]
                },
                "reduction_indices": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_58": {
                "variable": {
                    "value": "mt3",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.squeeze(mt3, [2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "uniform_65": {
                "shape": {
                    "value": "[32, 2 * h_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_14": {
                "name_or_scope": {
                    "value": "layer1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_20": {
                "name_or_scope": {
                    "value": "layer2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "layer3",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_47": {
                "name_or_scope": {
                    "value": "layer4",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_17": {
                "a": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([lstm_hidden_state, prev_start_point_guess, prev_end_point_guess], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(tf.matmul(r, wd))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "wd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([5 * h_size, h_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_22": {
                "name_or_scope": {
                    "value": "layer2_current_words",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_24": {
                "name_or_scope": {
                    "value": "layer2_r",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensordot_43": {
                "a": {
                    "value": "mt1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.math.add(td, b1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(mt1, reduction_indices=[3])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([h_size, h_size, pool_size])",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[[2], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensordot_54": {
                "a": {
                    "value": "mt1_mt2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([mt1, mt2], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([2 * h_size, 1, pool_size])",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[[2], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_58": {
                "input": {
                    "value": "mt3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.math.add(tf.tensordot(mt1_mt2, w3, axes=[[2], [0]]), b3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(mt3, reduction_indices=[3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.squeeze(mt3, [2]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "src/old_process_data.py": {
        "tensorflow": {}
    },
    "src/process_data.py": {
        "tensorflow": {}
    },
    "src/tfrecord_converter.py": {
        "tensorflow": {
            "Example_16": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordWriter_19": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "path": {
                    "value": "output_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "parse_single_example_34": {
                "variable": {
                    "value": "parsed_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "example_proto",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'D': tf.FixedLenFeature(d_shape, tf.float32), 'Q': tf.FixedLenFeature(q_shape, tf.float32), 'A': tf.FixedLenFeature(a_shape, tf.int64), 'DL': tf.FixedLenFeature(l, tf.int64), 'QL': tf.FixedLenFeature(l, tf.int64), 'ID': tf.FixedLenFeature(l, tf.string)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "TFRecordDataset_47": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "file_names",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Feature_8": {
                "float_list": {
                    "value": "tf.train.FloatList(value=D.flatten())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_9": {
                "float_list": {
                    "value": "tf.train.FloatList(value=Q.flatten())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_10": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=A.flatten())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_11": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=DL.flatten())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_12": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=QL.flatten())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_13": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[d.encode() for d in ID])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FixedLenFeature_27": {
                "shape": {
                    "value": "d_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(640",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_28": {
                "shape": {
                    "value": "q_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(640",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_29": {
                "shape": {
                    "value": "a_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(640",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_30": {
                "shape": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "640",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_31": {
                "shape": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "640",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_32": {
                "shape": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "640",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Features_16": {
                "feature": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'D': tf.train.Feature(float_list=tf.train.FloatList(value=D.flatten())), 'Q': tf.train.Feature(float_list=tf.train.FloatList(value=Q.flatten())), 'A': tf.train.Feature(int64_list=tf.train.Int64List(value=A.flatten())), 'DL': tf.train.Feature(int64_list=tf.train.Int64List(value=DL.flatten())), 'QL': tf.train.Feature(int64_list=tf.train.Int64List(value=QL.flatten())), 'ID': tf.train.Feature(bytes_list=tf.train.BytesList(value=[d.encode() for d in ID]))}",
                            "Dict"
                        ]
                    ]
                }
            },
            "FloatList_8": {
                "value": {
                    "value": "D.flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FloatList_9": {
                "value": {
                    "value": "Q.flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_10": {
                "value": {
                    "value": "A.flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_11": {
                "value": {
                    "value": "DL.flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_12": {
                "value": {
                    "value": "QL.flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BytesList_13": {
                "value": {
                    "value": "[d.encode() for d in ID]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Session_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/train.py": {
        "tensorflow": {
            "placeholder_with_default_26": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.7",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_with_default_27": {
                "variable": {
                    "value": "max_doc_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "600",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_with_default_28": {
                "variable": {
                    "value": "max_que_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "60",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdamOptimizer_247": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "ARGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_270": {
                "variable": {
                    "value": "merged",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_292": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "summary_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(log_dir, 'summaries')",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_295": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_85": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[ARGS.batch_size, None, len(input_d_vecs[0][0])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_86": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[ARGS.batch_size, None, len(input_q_vecs[0][0])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_87": {
                "variable": {
                    "value": "starting_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[ARGS.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_88": {
                "variable": {
                    "value": "ending_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[ARGS.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_89": {
                "variable": {
                    "value": "doc_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[ARGS.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_90": {
                "variable": {
                    "value": "que_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[ARGS.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_94": {
                "variable": {
                    "value": "em_score_log",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_95": {
                "variable": {
                    "value": "f1_score_log",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "one_hot_129": {
                "variable": {
                    "value": "start_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "starting_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, [ARGS.batch_size])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "encoding_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add(max_doc_len, 1)",
                            "Call"
                        ],
                        [
                            "max_doc_len",
                            "Name"
                        ]
                    ]
                }
            },
            "one_hot_130": {
                "variable": {
                    "value": "end_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "ending_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, [ARGS.batch_size])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "encoding_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add(max_doc_len, 1)",
                            "Call"
                        ],
                        [
                            "max_doc_len",
                            "Name"
                        ]
                    ]
                }
            },
            "range_147": {
                "variable": {
                    "value": "batch_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "limit": {
                    "value": "ARGS.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_150": {
                "variable": {
                    "value": "decoding_lstm",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "ARGS.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_154": {
                "variable": {
                    "value": "u_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[ARGS.batch_size, 2 * ARGS.hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_155": {
                "variable": {
                    "value": "u_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[ARGS.batch_size, 2 * ARGS.hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_240": {
                "variable": {
                    "value": "mean_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "iteration_loss if i == 0 else loss + iteration_loss",
                            "IfExp"
                        ],
                        [
                            "masked_iteration_loss if i == 0 else loss + masked_iteration_loss",
                            "IfExp"
                        ]
                    ]
                }
            },
            "divide_242": {
                "variable": {
                    "value": "mean_loss_per_iteration_per_datapoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "total_iteration_count",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros([1])",
                            "Call"
                        ],
                        [
                            "total_iteration_count + tf.reduce_sum(tf.cast(loss_mask, tf.float32))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "multiply_244": {
                "variable": {
                    "value": "mean_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mean_loss_per_iteration_per_datapoint",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.divide(tf.reduce_sum(loss), total_iteration_count)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "ARGS.num_iterations_hmn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_245": {
                "variable": {
                    "value": "mean_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mean_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ],
                        [
                            "tf.multiply(mean_loss_per_iteration_per_datapoint, ARGS.num_iterations_hmn)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(mean_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_246": {
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "mean_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ],
                        [
                            "tf.multiply(mean_loss_per_iteration_per_datapoint, ARGS.num_iterations_hmn)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(mean_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_327": {
                "variable": {
                    "value": "chosen_session",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_74": {
                "name_or_scope": {
                    "value": "data_prep",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "performance_metrics",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_96": {
                "name": {
                    "value": "em_score",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "em_score_log",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, ())",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_97": {
                "name": {
                    "value": "f1_score",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "f1_score_log",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, ())",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "parameters",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_100": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.constant(ARGS.batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_101": {
                "name": {
                    "value": "hidden_size",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.constant(ARGS.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_102": {
                "name": {
                    "value": "pool_size",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.constant(ARGS.pool_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_103": {
                "name": {
                    "value": "keep_prob",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "ARGS.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_104": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.constant(ARGS.learning_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_106": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_122": {
                "variable": {
                    "value": "encoding_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "max_doc_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder_with_default(600, shape=())",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_123": {
                "variable": {
                    "value": "corrected_document_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "doc_l",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, [ARGS.batch_size])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_132": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_135": {
                "variable": {
                    "value": "after_padding_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "corrected_document_lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add(doc_l, 1)",
                            "Call"
                        ],
                        [
                            "doc_l",
                            "Name"
                        ]
                    ]
                },
                "depth": {
                    "value": "encoding_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add(max_doc_len, 1)",
                            "Call"
                        ],
                        [
                            "max_doc_len",
                            "Name"
                        ]
                    ]
                }
            },
            "cumsum_136": {
                "variable": {
                    "value": "padding_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "after_padding_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.one_hot(corrected_document_lengths, encoding_length)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_137": {
                "variable": {
                    "value": "min_float_at_padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "padding_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.math.cumsum(after_padding_mask, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(0.5 * tf.float32.min, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_142": {
                "variable": {
                    "value": "loss_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shape": {
                    "value": "[ARGS.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_143": {
                "variable": {
                    "value": "s_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[ARGS.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_144": {
                "variable": {
                    "value": "e_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[ARGS.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_158": {
                "variable": {
                    "value": "total_iteration_count",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_default_graph_293": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_100": {
                "value": {
                    "value": "ARGS.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_101": {
                "value": {
                    "value": "ARGS.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_102": {
                "value": {
                    "value": "ARGS.pool_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_104": {
                "value": {
                    "value": "ARGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_160": {
                "name_or_scope": {
                    "value": "decoding_loop",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_163": {
                "variable": {
                    "value": "usue",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[u_s, u_e]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_182": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alphas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "highway_max_out.HMN(current_words=encoded, lstm_hidden_state=lstm_output, prev_start_point_guess=u_s, prev_end_point_guess=u_e, pool_size=ARGS.pool_size, h_size=ARGS.hidden_size, name='HMN_start')",
                            "Call"
                        ],
                        [
                            "tf.add(alphas, min_float_at_padding)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_183": {
                "variable": {
                    "value": "s_encoding_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.stack([batch_indices, s])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_nd_184": {
                "variable": {
                    "value": "u_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "encoded",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "s_encoding_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.stack([batch_indices, s]))",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_199": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "betas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "highway_max_out.HMN(current_words=encoded, lstm_hidden_state=lstm_output, prev_start_point_guess=u_s, prev_end_point_guess=u_e, pool_size=ARGS.pool_size, h_size=ARGS.hidden_size, name='HMN_end')",
                            "Call"
                        ],
                        [
                            "tf.add(betas, min_float_at_padding)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_200": {
                "variable": {
                    "value": "e_encoding_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.stack([batch_indices, e])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_nd_201": {
                "variable": {
                    "value": "u_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "encoded",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "e_encoding_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.stack([batch_indices, e]))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_v2_205": {
                "variable": {
                    "value": "s_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "start_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.one_hot(starting_labels, encoding_length)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "alphas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "highway_max_out.HMN(current_words=encoded, lstm_hidden_state=lstm_output, prev_start_point_guess=u_s, prev_end_point_guess=u_e, pool_size=ARGS.pool_size, h_size=ARGS.hidden_size, name='HMN_start')",
                            "Call"
                        ],
                        [
                            "tf.add(alphas, min_float_at_padding)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_v2_209": {
                "variable": {
                    "value": "e_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "end_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.one_hot(ending_labels, encoding_length)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "betas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "highway_max_out.HMN(current_words=encoded, lstm_hidden_state=lstm_output, prev_start_point_guess=u_s, prev_end_point_guess=u_e, pool_size=ARGS.pool_size, h_size=ARGS.hidden_size, name='HMN_end')",
                            "Call"
                        ],
                        [
                            "tf.add(betas, min_float_at_padding)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_242": {
                "input_tensor": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "iteration_loss if i == 0 else loss + iteration_loss",
                            "IfExp"
                        ],
                        [
                            "masked_iteration_loss if i == 0 else loss + masked_iteration_loss",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Session_325": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_137": {
                "x": {
                    "value": "0.5 * tf.float32.min",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_181": {
                "variable": {
                    "value": "alphas",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "alphas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "highway_max_out.HMN(current_words=encoded, lstm_hidden_state=lstm_output, prev_start_point_guess=u_s, prev_end_point_guess=u_e, pool_size=ARGS.pool_size, h_size=ARGS.hidden_size, name='HMN_start')",
                            "Call"
                        ],
                        [
                            "tf.add(alphas, min_float_at_padding)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "min_float_at_padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(padding_mask, tf.cast(0.5 * tf.float32.min, tf.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_198": {
                "variable": {
                    "value": "betas",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "betas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "highway_max_out.HMN(current_words=encoded, lstm_hidden_state=lstm_output, prev_start_point_guess=u_s, prev_end_point_guess=u_e, pool_size=ARGS.pool_size, h_size=ARGS.hidden_size, name='HMN_end')",
                            "Call"
                        ],
                        [
                            "tf.add(betas, min_float_at_padding)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "min_float_at_padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(padding_mask, tf.cast(0.5 * tf.float32.min, tf.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_330": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_169": {
                "name_or_scope": {
                    "value": "start_estimator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_183": {
                "values": {
                    "value": "[batch_indices, s]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_186": {
                "name_or_scope": {
                    "value": "end_estimator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_200": {
                "values": {
                    "value": "[batch_indices, e]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_217": {
                "variable": {
                    "value": "s_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(alphas, axis=1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "s_prev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(-1, dtype=tf.int32, shape=[ARGS.batch_size])",
                            "Call"
                        ],
                        [
                            "s",
                            "Name"
                        ]
                    ]
                }
            },
            "equal_218": {
                "variable": {
                    "value": "e_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(betas, axis=1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "e_prev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(-1, dtype=tf.int32, shape=[ARGS.batch_size])",
                            "Call"
                        ],
                        [
                            "e",
                            "Name"
                        ]
                    ]
                }
            },
            "logical_and_219": {
                "variable": {
                    "value": "output_same",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "s_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(s, s_prev)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "e_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(e, e_prev)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_222": {
                "variable": {
                    "value": "loss_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "loss_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(True, shape=[ARGS.batch_size])",
                            "Call"
                        ],
                        [
                            "tf.logical_and(loss_mask, tf.logical_not(output_same))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.logical_not(output_same)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_223": {
                "variable": {
                    "value": "masked_iteration_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "iteration_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "s_loss + e_loss",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(loss_mask, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_216": {
                "name_or_scope": {
                    "value": "iteration_ + str(i) + _loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_225": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(iteration_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_226": {
                "name": {
                    "value": "masked_it_loss_summary",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(masked_iteration_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_229": {
                "control_inputs": {
                    "value": "[tf.assert_greater_equal(iteration_loss, masked_iteration_loss)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_not_222": {
                "x": {
                    "value": "output_same",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.logical_and(s_mask, e_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_223": {
                "x": {
                    "value": "loss_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(True, shape=[ARGS.batch_size])",
                            "Call"
                        ],
                        [
                            "tf.logical_and(loss_mask, tf.logical_not(output_same))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_224": {
                "input_tensor": {
                    "value": "tf.cast(loss_mask, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_225": {
                "input_tensor": {
                    "value": "iteration_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "s_loss + e_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_226": {
                "input_tensor": {
                    "value": "masked_iteration_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(iteration_loss, tf.cast(loss_mask, tf.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_232": {
                "x": {
                    "value": "tf.cast(loss_mask, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "s - final_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_233": {
                "x": {
                    "value": "tf.cast(loss_mask, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "e - final_e",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_224": {
                "x": {
                    "value": "loss_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(True, shape=[ARGS.batch_size])",
                            "Call"
                        ],
                        [
                            "tf.logical_and(loss_mask, tf.logical_not(output_same))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assert_greater_equal_229": {
                "x": {
                    "value": "iteration_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "s_loss + e_loss",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "masked_iteration_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(iteration_loss, tf.cast(loss_mask, tf.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_232": {
                "x": {
                    "value": "loss_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(True, shape=[ARGS.batch_size])",
                            "Call"
                        ],
                        [
                            "tf.logical_and(loss_mask, tf.logical_not(output_same))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_233": {
                "x": {
                    "value": "loss_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(True, shape=[ARGS.batch_size])",
                            "Call"
                        ],
                        [
                            "tf.logical_and(loss_mask, tf.logical_not(output_same))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/train_cpu.py": {
        "tensorflow": {
            "reduce_mean_155": {
                "variable": {
                    "value": "mean_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "iteration_loss if i == 0 else loss + iteration_loss",
                            "IfExp"
                        ]
                    ]
                }
            },
            "AdamOptimizer_157": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "ARGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_161": {
                "variable": {
                    "value": "merged",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_165": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "summaryDirectory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'summaries/start_' + str(datetime.datetime.now())",
                            "BinOp"
                        ],
                        [
                            "summaryDirectory.replace('.', '_').replace(':', '-').replace(' ', '_')",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_168": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "one_hot_72": {
                "variable": {
                    "value": "start_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "a[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "766",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_73": {
                "variable": {
                    "value": "end_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "a[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "766",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_77": {
                "variable": {
                    "value": "batch_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "limit": {
                    "value": "ARGS.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_85": {
                "variable": {
                    "value": "u_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[ARGS.batch_size, 2 * ARGS.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_86": {
                "variable": {
                    "value": "u_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[ARGS.batch_size, 2 * ARGS.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_156": {
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "mean_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "MkDir_164": {
                "dirname": {
                    "value": "summaryDirectory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'summaries/start_' + str(datetime.datetime.now())",
                            "BinOp"
                        ],
                        [
                            "summaryDirectory.replace('.', '_').replace(':', '-').replace(' ', '_')",
                            "Call"
                        ]
                    ]
                }
            },
            "RunOptions_172": {
                "variable": {
                    "value": "options",
                    "type": "Variable",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "tf.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RunMetadata_173": {
                "variable": {
                    "value": "run_metadata",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_62": {
                "name": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_75": {
                "name": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_default_graph_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_88": {
                "name": {
                    "value": "decoding_loop",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_91": {
                "variable": {
                    "value": "usue",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[u_s, u_e]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_130": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alphas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "highway_max_out.HMN(current_words=encoded, lstm_hidden_state=lstm_output_reshaped, prev_start_point_guess=u_s, prev_end_point_guess=u_e, hyperparameters=ARGS, name='HMN_start')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_131": {
                "variable": {
                    "value": "s_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.stack([s, batch_indices])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_nd_132": {
                "variable": {
                    "value": "u_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "encoded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "encoder.encoder(document=d, question=q, documents_lengths=doc_l, questions_lengths=que_l, hyperparameters=ARGS)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "s_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.stack([s, batch_indices]))",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_134": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "betas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "highway_max_out.HMN(current_words=encoded, lstm_hidden_state=lstm_output_reshaped, prev_start_point_guess=u_s, prev_end_point_guess=u_e, hyperparameters=ARGS, name='HMN_end')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_135": {
                "variable": {
                    "value": "e_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.stack([e, batch_indices])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_nd_136": {
                "variable": {
                    "value": "u_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "encoded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "encoder.encoder(document=d, question=q, documents_lengths=doc_l, questions_lengths=que_l, hyperparameters=ARGS)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "e_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.stack([e, batch_indices]))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_v2_140": {
                "variable": {
                    "value": "s_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "start_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.one_hot(a[:, 0], 766)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "alphas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "highway_max_out.HMN(current_words=encoded, lstm_hidden_state=lstm_output_reshaped, prev_start_point_guess=u_s, prev_end_point_guess=u_e, hyperparameters=ARGS, name='HMN_start')",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_v2_144": {
                "variable": {
                    "value": "e_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "end_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.one_hot(a[:, 1], 766)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "betas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "highway_max_out.HMN(current_words=encoded, lstm_hidden_state=lstm_output_reshaped, prev_start_point_guess=u_s, prev_end_point_guess=u_e, hyperparameters=ARGS, name='HMN_end')",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_104": {
                "variable": {
                    "value": "lstm_output_reshaped",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lstm_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "decoding_lstm",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_110": {
                "name_or_scope": {
                    "value": "start_estimator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_120": {
                "name_or_scope": {
                    "value": "end_estimator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_131": {
                "values": {
                    "value": "[s, batch_indices]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_135": {
                "values": {
                    "value": "[e, batch_indices]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_149": {
                "name": {
                    "value": "iteration_ + str(i) + _loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_151": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(iteration_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_151": {
                "input_tensor": {
                    "value": "iteration_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "s_loss + e_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_101": {
                "input": {
                    "value": "usue",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([u_s, u_e], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils.py": {
        "tensorflow": {
            "truncated_normal_8": {
                "variable": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_13": {
                "variable": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_20": {
                "variable": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_27": {
                "variable": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_53": {
                "variable": {
                    "value": "latent_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_conv2_e",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(h_conv1_e, filter=w_conv2_e, strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.nn.bias_add(h_conv2_e, b_conv2_e))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, latent_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_74": {
                "variable": {
                    "value": "fc_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "latent_5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.leaky_relu(tf.matmul(latent_4, w_fc4) + b_fc4)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1] + h_conv2_e.get_shape().as_list()[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_9": {
                "initial_value": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal(shape, stddev=0.05)",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal(shape, stddev=0.05)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_16": {
                "initial_value": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal(shape, stddev=0.05)",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal(shape, stddev=0.05)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_21": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'weights'",
                            "MethodArgument"
                        ],
                        [
                            "'biases'",
                            "MethodArgument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal(shape, stddev=0.05)",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal(shape, stddev=0.05)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_30": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'weights'",
                            "MethodArgument"
                        ],
                        [
                            "'biases'",
                            "MethodArgument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal(shape, stddev=0.05)",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal(shape, stddev=0.05)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_36": {
                "variable": {
                    "value": "colour_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "autoencodee_shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_136": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_40": {
                "variable": {
                    "value": "h_conv1_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "autoencodee",
                    "type": "Variable",
                    "possible_values": []
                },
                "filter": {
                    "value": "w_conv1_e",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([8, 8, colour_channels, 16])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "(1, 2, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "leaky_relu_41": {
                "variable": {
                    "value": "h_conv1_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(h_conv1_e, b_conv1_e)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_45": {
                "variable": {
                    "value": "h_conv2_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_conv1_e",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(autoencodee, filter=w_conv1_e, strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.nn.bias_add(h_conv1_e, b_conv1_e))",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "w_conv2_e",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([5, 5, 16, 32])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "(1, 2, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "leaky_relu_46": {
                "variable": {
                    "value": "h_conv2_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(h_conv2_e, b_conv2_e)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "fc",
                    "type": "str",
                    "possible_values": []
                }
            },
            "leaky_relu_59": {
                "variable": {
                    "value": "latent_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(latent_1, w_fc1) + b_fc1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "leaky_relu_63": {
                "variable": {
                    "value": "latent_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(latent_2, w_fc2) + b_fc2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "leaky_relu_67": {
                "variable": {
                    "value": "latent_4",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(latent_3, w_fc3) + b_fc3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "leaky_relu_71": {
                "variable": {
                    "value": "latent_5",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(latent_4, w_fc4) + b_fc4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_77": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_81": {
                "variable": {
                    "value": "h_conv1_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fc_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(latent_5, [-1] + h_conv2_e.get_shape().as_list()[1:])",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "w_conv1_d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([5, 5, 16, 32])",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "tf.shape(h_conv1_e)",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 2, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "leaky_relu_82": {
                "variable": {
                    "value": "h_conv1_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(h_conv1_d, b_conv1_d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_transpose_87": {
                "variable": {
                    "value": "h_conv2_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_conv1_d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d_transpose(fc_out, filter=w_conv1_d, output_shape=tf.shape(h_conv1_e), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.nn.bias_add(h_conv1_d, b_conv1_d))",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "w_conv2_d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([8, 8, colour_channels, 16])",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "tf.shape(autoencodee)",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 2, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "leaky_relu_88": {
                "variable": {
                    "value": "h_conv2_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(h_conv2_d, b_conv2_d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_135": {
                "name": {
                    "value": "summaries",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_137": {
                "name": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(var)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_139": {
                "variable": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(tf.square(var - mean))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_140": {
                "name": {
                    "value": "stddev",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.reduce_mean(tf.square(var - mean)))",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_141": {
                "name": {
                    "value": "histogram",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_37": {
                "name_or_scope": {
                    "value": "1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_42": {
                "name_or_scope": {
                    "value": "2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_60": {
                "name_or_scope": {
                    "value": "2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_64": {
                "name_or_scope": {
                    "value": "3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_68": {
                "name_or_scope": {
                    "value": "4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_78": {
                "name_or_scope": {
                    "value": "1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_138": {
                "name": {
                    "value": "stddev",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_41": {
                "value": {
                    "value": "h_conv1_e",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(autoencodee, filter=w_conv1_e, strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.nn.bias_add(h_conv1_e, b_conv1_e))",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b_conv1_e",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bias_variable([16])",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_46": {
                "value": {
                    "value": "h_conv2_e",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(h_conv1_e, filter=w_conv2_e, strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.nn.bias_add(h_conv2_e, b_conv2_e))",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b_conv2_e",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bias_variable([32])",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_82": {
                "value": {
                    "value": "h_conv1_d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d_transpose(fc_out, filter=w_conv1_d, output_shape=tf.shape(h_conv1_e), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.nn.bias_add(h_conv1_d, b_conv1_d))",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b_conv1_d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bias_variable([16])",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_88": {
                "value": {
                    "value": "h_conv2_d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d_transpose(h_conv1_d, filter=w_conv2_d, output_shape=tf.shape(autoencodee), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.nn.bias_add(h_conv2_d, b_conv2_d))",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b_conv2_d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bias_variable([colour_channels])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_139": {
                "input_tensor": {
                    "value": "tf.square(var - mean)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_59": {
                "a": {
                    "value": "latent_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(h_conv2_e, [-1, latent_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_fc1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([latent_size, latent_size // 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_63": {
                "a": {
                    "value": "latent_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.leaky_relu(tf.matmul(latent_1, w_fc1) + b_fc1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_fc2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([latent_size // 3, latent_dims])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_67": {
                "a": {
                    "value": "latent_3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.leaky_relu(tf.matmul(latent_2, w_fc2) + b_fc2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_fc3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([latent_dims, latent_size // 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_71": {
                "a": {
                    "value": "latent_4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.leaky_relu(tf.matmul(latent_3, w_fc3) + b_fc3)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_fc4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([latent_size // 3, latent_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_81": {
                "input": {
                    "value": "h_conv1_e",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(autoencodee, filter=w_conv1_e, strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(tf.nn.bias_add(h_conv1_e, b_conv1_e))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_87": {
                "input": {
                    "value": "autoencodee",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_139": {
                "x": {
                    "value": "var - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}