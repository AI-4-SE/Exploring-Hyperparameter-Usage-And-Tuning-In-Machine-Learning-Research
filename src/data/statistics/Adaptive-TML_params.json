{
    "condensing/condensing.py": {
        "sklearn": {
            "KNeighborsClassifier_21": {
                "n_neighbors": {
                    "value": "k_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(min(np.ceil(np.sqrt(x.shape[0])), x.shape[0])) if k_ is None else k_",
                            "IfExp"
                        ]
                    ]
                },
                "weights": {
                    "value": "distance",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "sklearn": {
            "pairwise_distances_445": {
                "variable": {
                    "value": "distances",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "mean_image.reshape(num_classes, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "KNeighborsClassifier_873": {
                "variable": {
                    "value": "knn_",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "n_neighbors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(np.ceil(np.sqrt(samples_per_class * flags.num_classes)))",
                            "Call"
                        ]
                    ]
                }
            },
            "SVC_879": {
                "variable": {
                    "value": "svm_",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_401": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "synthetic_dataset.rotating_hyperplane_dataset.RotatingHyperplaneGridDataset(grid_size=flags.grid_size, mag_change=0.001, noise_percentage=0.01, sigma_percentage=0.01, dataset_size=synthetic_dataset_size, seed=flags.seed * 20, transform=None)",
                            "Call"
                        ],
                        [
                            "audio_datasets.SpectrogramFolder(root=flags.data_dir, loader=audio_loaders.spectrogram_loader_librosa, loader_kwargs={'sample_rate': flags.sample_rate, 'max_seconds': flags.audio_seconds}, extensions=('.wav', '.mp3'), transform=audio_transform, class_names=classes_before_change)",
                            "Call"
                        ],
                        [
                            "image_datasets.ImageFolderWithClassSelection(root=flags.data_dir, transform=image_transform, class_names=classes_before_change)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.ConcatDataset([dataset, second_dataset])",
                            "Call"
                        ],
                        [
                            "torch.utils.data.ConcatDataset([second_dataset, dataset])",
                            "Call"
                        ],
                        [
                            "torch.utils.data.ConcatDataset([dataset, second_dataset])",
                            "Call"
                        ],
                        [
                            "synthetic_dataset.synthetic_dataset.SyntheticMultivariateNormalGridDataset(grid_size=flags.grid_size, num_classes=flags.num_classes, dataset_size=synthetic_dataset_size, mean_change_magnitude=mean_change_magnitude, mean_change_duration=flags.concept_drift_time, cov_change_magnitude=cov_change_magnitude, cov_change_duration=flags.concept_drift_time, change_beginning=synthetic_dataset_size // 2, mean_scale=class_mean_scale, mean_min=class_mean_min, cov_scale=class_cov_scale, cov_min=class_cov_min, seed=flags.seed * 20, transform=None)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "batch_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sampler.SequentialSamplerWithOneShuffle(data_source=dataset, splits=splits_length)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "flags.num_readers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_689": {
                "variable": {
                    "value": "output_",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flatten_638": {
                "variable": {
                    "value": "ft_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "base_cnn(im_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_733": {
                "seed": {
                    "value": "flags.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_534": {
                "variable": {
                    "value": "ft_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnn_forward_fn(im_, *cnn_forward_args)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_579": {
                "variable": {
                    "value": "ft_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "im_",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_888": {
                "variable": {
                    "value": "loss_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorDataset_904": {
                "variable": {
                    "value": "training_features_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.Tensor(training_features)",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_907": {
                "variable": {
                    "value": "training_features_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "training_features_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(torch.Tensor(training_features), torch.Tensor(training_labels).long())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "flags.nn_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConcatDataset_390": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[dataset, second_dataset]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_891": {
                "variable": {
                    "value": "nn_fc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "realtime_features_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "training_features.shape[1]",
                            "Subscript"
                        ],
                        [
                            "features_size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "flags.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_896": {
                "variable": {
                    "value": "opt_",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "nn_fc1.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn_lr0_to_test",
                            "Name"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "flags.nn_weights_alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_1132": {
                "variable": {
                    "value": "ft_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "base_cnn(im_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConcatDataset_358": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[second_dataset, dataset]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ConcatDataset_363": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[dataset, second_dataset]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adam_941": {
                "variable": {
                    "value": "opt_",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "nn_fc1_copy.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn_lr0_incremental_to_test",
                            "Name"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "flags.nn_weights_alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_1003": {
                "variable": {
                    "value": "(_, predicted_label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_990": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_994": {
                "variable": {
                    "value": "(_, predicted_label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "audio_utils/loaders.py": {
        "torch": {}
    },
    "audio_utils/spectrogram_dataloader_noisy_pytorch.py": {
        "torch": {
            "Tensor_105": {
                "variable": {
                    "value": "sample",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_117": {
                "variable": {
                    "value": "sample",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "audio_utils/spectrogram_dataloader_pytorch.py": {
        "torch": {
            "Tensor_67": {
                "variable": {
                    "value": "sample",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "audio_utils/transforms.py": {
        "torch": {
            "Sequential_88": {
                "*args": {
                    "value": "SpectrogramTransformLibrosa(n_fft=n_fft, hop_length=hop_length, top_db=top_db)",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_extensions/dataset.py": {
        "torch": {}
    },
    "pytorch_extensions/layers.py": {
        "torch": {
            "Tensor_20": {
                "variable": {
                    "value": "self.filters_to_keep",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_extensions/sampler.py": {
        "torch": {}
    },
    "pytorch_extensions/torch_utils.py": {
        "torch": {
            "rand_22": {
                "variable": {
                    "value": "rand_inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Parameter_89": {
                "variable": {
                    "value": "conv_.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "conv_.weight[filters_to_keep]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_93": {
                "variable": {
                    "value": "conv_.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "conv_.bias[filters_to_keep]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_107": {
                "variable": {
                    "value": "norm_.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "norm_.weight[filters_to_keep]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_110": {
                "variable": {
                    "value": "norm_.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "norm_.bias[filters_to_keep]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "synthetic_dataset/rotating_hyperplane_dataset.py": {
        "torch": {}
    },
    "synthetic_dataset/synthetic_dataset.py": {
        "torch": {}
    }
}