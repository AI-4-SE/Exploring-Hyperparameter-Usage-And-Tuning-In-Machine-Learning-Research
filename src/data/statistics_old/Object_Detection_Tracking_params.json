{
    "multi_video_reid.py": {
        "sklearn": {
            "euclidean_distances_320": {
                "variable": {
                    "value": "dist_mat",
                    "type": "Name",
                    "possible_values": []
                },
                "X": {
                    "value": "track1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tracks1[track_id1][0]",
                            "Subscript"
                        ],
                        [
                            "tracks1[track_id1][1]",
                            "Subscript"
                        ]
                    ]
                },
                "Y": {
                    "value": "track2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tracks2[track_id2][0]",
                            "Subscript"
                        ],
                        [
                            "tracks2[track_id2][1]",
                            "Subscript"
                        ]
                    ]
                },
                "squared": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "deformable_helper.py": {
        "tensorflow": {
            "transpose_7": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, x_shape[1], x_shape[2]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, x_shape[4], x_shape[1], x_shape[2], x_shape[3]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 4, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_8": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, x_shape[1], x_shape[2]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, x_shape[4], x_shape[1], x_shape[2], x_shape[3]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 4, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, x_shape[1], x_shape[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_13": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, x_shape[1], x_shape[2]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, x_shape[4], x_shape[1], x_shape[2], x_shape[3]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 4, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, x_shape[4], x_shape[1], x_shape[2], x_shape[3])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_14": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, x_shape[1], x_shape[2]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, x_shape[4], x_shape[1], x_shape[2], x_shape[3]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 4, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 4, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_22": {
                "variable": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[idx, tf_flatten(coords[:, :, :, :, 0]), tf_flatten(coords[:, :, :, :, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_nd_26": {
                "variable": {
                    "value": "vals",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_to_bc_h_w(inputs, tf.shape(inputs))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([idx, tf_flatten(coords[:, :, :, :, 0]), tf_flatten(coords[:, :, :, :, 1])], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_27": {
                "variable": {
                    "value": "vals",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "vals",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather_nd(inputs, indices)",
                            "Call"
                        ],
                        [
                            "tf.reshape(vals, out_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "out_shape",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "expand_dims_37": {
                "variable": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(a, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(a, [1, repeats])",
                            "Call"
                        ],
                        [
                            "tf_flatten(a)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_38": {
                "variable": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(a, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(a, [1, repeats])",
                            "Call"
                        ],
                        [
                            "tf_flatten(a)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, repeats]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_68": {
                "variable": {
                    "value": "coords_lt",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(coords)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_69": {
                "variable": {
                    "value": "coords_rb",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ceil(coords)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_70": {
                "variable": {
                    "value": "coords_lb",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[coords_lt[:, :, :, :, 0], coords_rb[:, :, :, :, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_71": {
                "variable": {
                    "value": "coords_rt",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[coords_rb[:, :, :, :, 0], coords_lt[:, :, :, :, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_117": {
                "variable": {
                    "value": "offsets",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "offsets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(offsets, (batch_size, input_h, input_w, kernel_n, 2))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, input_h, input_w, kernel_n, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_121": {
                "variable": {
                    "value": "coords",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "grid_offset",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_125": {
                "variable": {
                    "value": "coords",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.clip_by_value(coords[:, :, :, :, 0], 0.0, tf.cast(input_h - 1, 'float32')), tf.clip_by_value(coords[:, :, :, :, 1], 0.0, tf.cast(input_w - 1, 'float32'))]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_131": {
                "variable": {
                    "value": "coords",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "coords",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(grid_offset, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(coords, [batch_size, 1, 1, 1, 1]) + offsets",
                            "BinOp"
                        ],
                        [
                            "tf.stack([tf.clip_by_value(coords[:, :, :, :, 0], 0.0, tf.cast(input_h - 1, 'float32')), tf.clip_by_value(coords[:, :, :, :, 1], 0.0, tf.cast(input_w - 1, 'float32'))], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.tile(coords, [channel, 1, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[channel, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_19": {
                "tensor": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(a, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(a, [1, repeats])",
                            "Call"
                        ],
                        [
                            "tf_flatten(a)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_62": {
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_to_bc_h_w(inputs, tf.shape(inputs))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_63": {
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_to_bc_h_w(inputs, tf.shape(inputs))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_64": {
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_to_bc_h_w(inputs, tf.shape(inputs))",
                            "Call"
                        ]
                    ]
                }
            },
            "floor_68": {
                "x": {
                    "value": "coords",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(grid_offset, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(coords, [batch_size, 1, 1, 1, 1]) + offsets",
                            "BinOp"
                        ],
                        [
                            "tf.stack([tf.clip_by_value(coords[:, :, :, :, 0], 0.0, tf.cast(input_h - 1, 'float32')), tf.clip_by_value(coords[:, :, :, :, 1], 0.0, tf.cast(input_w - 1, 'float32'))], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.tile(coords, [channel, 1, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "ceil_69": {
                "x": {
                    "value": "coords",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(grid_offset, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(coords, [batch_size, 1, 1, 1, 1]) + offsets",
                            "BinOp"
                        ],
                        [
                            "tf.stack([tf.clip_by_value(coords[:, :, :, :, 0], 0.0, tf.cast(input_h - 1, 'float32')), tf.clip_by_value(coords[:, :, :, :, 1], 0.0, tf.cast(input_w - 1, 'float32'))], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.tile(coords, [channel, 1, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_80": {
                "x": {
                    "value": "coords_lt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(coords), 'int32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_107": {
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_to_bc_h_w(inputs, tf.shape(inputs))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_109": {
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_to_bc_h_w(inputs, tf.shape(inputs))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_110": {
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_to_bc_h_w(inputs, tf.shape(inputs))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_114": {
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_to_bc_h_w(inputs, tf.shape(inputs))",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_122": {
                "input": {
                    "value": "coords",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(grid_offset, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(coords, [batch_size, 1, 1, 1, 1]) + offsets",
                            "BinOp"
                        ],
                        [
                            "tf.stack([tf.clip_by_value(coords[:, :, :, :, 0], 0.0, tf.cast(input_h - 1, 'float32')), tf.clip_by_value(coords[:, :, :, :, 1], 0.0, tf.cast(input_w - 1, 'float32'))], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.tile(coords, [channel, 1, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_127": {
                "t": {
                    "value": "coords[:, :, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "tf.cast(input_h - 1, 'float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_128": {
                "t": {
                    "value": "coords[:, :, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "tf.cast(input_w - 1, 'float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_127": {
                "x": {
                    "value": "input_h - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_128": {
                "x": {
                    "value": "input_w - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/anchors.py": {
        "tensorflow": {
            "unstack_104": {
                "variable": {
                    "value": "(ty, tx, th, tw)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "rel_codes",
                    "type": "Name",
                    "possible_values": []
                },
                "num": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argsort_127": {
                "variable": {
                    "value": "order",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dets[:, 4]",
                            "Subscript"
                        ],
                        [
                            "dets[:, 4]",
                            "Subscript"
                        ],
                        [
                            "sigmoid(cls_outputs)",
                            "Call"
                        ],
                        [
                            "tf.math.sigmoid(cls_outputs)",
                            "Call"
                        ]
                    ]
                },
                "direction": {
                    "value": "DESCENDING",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_129": {
                "variable": {
                    "value": "keep",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unstack_386": {
                "variable": {
                    "value": "(ty, tx, th, tw)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "rel_codes",
                    "type": "Name",
                    "possible_values": []
                },
                "num": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_446": {
                "variable": {
                    "value": "anchor_boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "anchor_boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.vstack(boxes_all)",
                            "Call"
                        ],
                        [
                            "anchor_boxes[indices, :]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(anchor_boxes, indices)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.where(classes == c)[0]",
                            "Subscript"
                        ],
                        [
                            "np.argsort(-detections[:, -3])",
                            "Call"
                        ],
                        [
                            "tf.range(count, count + steps)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_448": {
                "variable": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "cls_outputs",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "non_max_suppression_with_scores_453": {
                "variable": {
                    "value": "(top_detection_idx, scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "boxes": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.vstack((yv - anchor_size_y_2, xv - anchor_size_x_2, yv + anchor_size_y_2, xv + anchor_size_x_2))",
                            "Call"
                        ],
                        [
                            "np.swapaxes(boxes, 0, 1)",
                            "Call"
                        ],
                        [
                            "decode_box_outputs(box_outputs.swapaxes(0, 1), anchor_boxes.swapaxes(0, 1))",
                            "Call"
                        ],
                        [
                            "boxes[:, [1, 0, 3, 2]]",
                            "Subscript"
                        ],
                        [
                            "decode_box_outputs_tf(box_outputs, anchor_boxes)",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, top_detection_idx)",
                            "Call"
                        ],
                        [
                            "boxes * image_scale",
                            "BinOp"
                        ],
                        [
                            "tf.stack([boxes[:, 1], boxes[:, 0], boxes[:, 3], boxes[:, 2]], axis=1)",
                            "Call"
                        ],
                        [
                            "_generate_anchor_boxes(self.image_size, self.anchor_scale, self.config)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(boxes, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "scores": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dets[:, 4]",
                            "Subscript"
                        ],
                        [
                            "dets[:, 4]",
                            "Subscript"
                        ],
                        [
                            "sigmoid(cls_outputs)",
                            "Call"
                        ],
                        [
                            "tf.math.sigmoid(cls_outputs)",
                            "Call"
                        ]
                    ]
                },
                "max_output_size": {
                    "value": "max_boxes_to_draw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MAX_DETECTIONS_PER_IMAGE",
                            "MethodArgument"
                        ]
                    ]
                },
                "iou_threshold": {
                    "value": "iou_threshold",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "score_threshold": {
                    "value": "min_score_thresh",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MIN_SCORE_THRESH",
                            "MethodArgument"
                        ]
                    ]
                },
                "soft_nms_sigma": {
                    "value": "soft_nms_sigma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gather_461": {
                "variable": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.vstack((yv - anchor_size_y_2, xv - anchor_size_x_2, yv + anchor_size_y_2, xv + anchor_size_x_2))",
                            "Call"
                        ],
                        [
                            "np.swapaxes(boxes, 0, 1)",
                            "Call"
                        ],
                        [
                            "decode_box_outputs(box_outputs.swapaxes(0, 1), anchor_boxes.swapaxes(0, 1))",
                            "Call"
                        ],
                        [
                            "boxes[:, [1, 0, 3, 2]]",
                            "Subscript"
                        ],
                        [
                            "decode_box_outputs_tf(box_outputs, anchor_boxes)",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, top_detection_idx)",
                            "Call"
                        ],
                        [
                            "boxes * image_scale",
                            "BinOp"
                        ],
                        [
                            "tf.stack([boxes[:, 1], boxes[:, 0], boxes[:, 3], boxes[:, 2]], axis=1)",
                            "Call"
                        ],
                        [
                            "_generate_anchor_boxes(self.image_size, self.anchor_scale, self.config)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(boxes, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_detection_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nms(all_detections_cls, 0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_466": {
                "variable": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[boxes[:, 1], boxes[:, 0], boxes[:, 3], boxes[:, 2]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_472": {
                "variable": {
                    "value": "level_index",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "level_index",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(level_index, top_detection_idx)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_detection_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nms(all_detections_cls, 0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_114": {
                "values": {
                    "value": "[ymin, xmin, ymax, xmax]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "maximum_134": {
                "variable": {
                    "value": "xx1",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x1[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.gather(x1, order[1:])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_135": {
                "variable": {
                    "value": "yy1",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "y1[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.gather(y1, order[1:])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_136": {
                "variable": {
                    "value": "xx2",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x2[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.gather(x2, order[1:])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_137": {
                "variable": {
                    "value": "yy2",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "y2[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.gather(y2, order[1:])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_139": {
                "variable": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "xx2 - xx1 + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_140": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "yy2 - yy1 + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_146": {
                "variable": {
                    "value": "order",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.gather(order, inds + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_147": {
                "variable": {
                    "value": "order",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "order",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.argsort(scores, direction='DESCENDING')",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.gather(order, inds + 1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(order, axis=-1)",
                            "Call"
                        ],
                        [
                            "scores.argsort()[::-1]",
                            "Subscript"
                        ],
                        [
                            "order[inds + 1]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_396": {
                "values": {
                    "value": "[ymin, xmin, ymax, xmax]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_533": {
                "variable": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.vstack((yv - anchor_size_y_2, xv - anchor_size_x_2, yv + anchor_size_y_2, xv + anchor_size_x_2))",
                            "Call"
                        ],
                        [
                            "np.swapaxes(boxes, 0, 1)",
                            "Call"
                        ],
                        [
                            "decode_box_outputs(box_outputs.swapaxes(0, 1), anchor_boxes.swapaxes(0, 1))",
                            "Call"
                        ],
                        [
                            "boxes[:, [1, 0, 3, 2]]",
                            "Subscript"
                        ],
                        [
                            "decode_box_outputs_tf(box_outputs, anchor_boxes)",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, top_detection_idx)",
                            "Call"
                        ],
                        [
                            "boxes * image_scale",
                            "BinOp"
                        ],
                        [
                            "tf.stack([boxes[:, 1], boxes[:, 0], boxes[:, 3], boxes[:, 2]], axis=1)",
                            "Call"
                        ],
                        [
                            "_generate_anchor_boxes(self.image_size, self.anchor_scale, self.config)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(boxes, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_611": {
                "variable": {
                    "value": "cls_targets",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "cls_targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cls_targets - 1",
                            "BinOp"
                        ],
                        [
                            "tf.cast(cls_targets, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_616": {
                "variable": {
                    "value": "num_positives",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.not_equal(matches.match_results, -1), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_106": {
                "x": {
                    "value": "tw",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "exp_107": {
                "x": {
                    "value": "th",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "size_131": {
                "input": {
                    "value": "order",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.argsort(scores, direction='DESCENDING')",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.gather(order, inds + 1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(order, axis=-1)",
                            "Call"
                        ],
                        [
                            "scores.argsort()[::-1]",
                            "Subscript"
                        ],
                        [
                            "order[inds + 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_388": {
                "x": {
                    "value": "tw",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "exp_389": {
                "x": {
                    "value": "th",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "gather_470": {
                "params": {
                    "value": "classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(classes, top_detection_idx) + 1",
                            "BinOp"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_detection_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nms(all_detections_cls, 0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "range_575": {
                "variable": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reshape_577": {
                "variable": {
                    "value": "labels_unpacked[level]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather(labels, indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[feat_size['height'], feat_size['width'], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_134": {
                "params": {
                    "value": "x1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dets[:, 0]",
                            "Subscript"
                        ],
                        [
                            "dets[:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "order[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_135": {
                "params": {
                    "value": "y1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dets[:, 1]",
                            "Subscript"
                        ],
                        [
                            "dets[:, 1]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "order[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_136": {
                "params": {
                    "value": "x2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dets[:, 2]",
                            "Subscript"
                        ],
                        [
                            "dets[:, 2]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "order[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_137": {
                "params": {
                    "value": "y2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dets[:, 3]",
                            "Subscript"
                        ],
                        [
                            "dets[:, 3]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "order[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_146": {
                "params": {
                    "value": "order",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.argsort(scores, direction='DESCENDING')",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.gather(order, inds + 1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(order, axis=-1)",
                            "Call"
                        ],
                        [
                            "scores.argsort()[::-1]",
                            "Subscript"
                        ],
                        [
                            "order[inds + 1]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "inds + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_617": {
                "x": {
                    "value": "tf.not_equal(matches.match_results, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_638": {
                "func": {
                    "value": "_generate_detections",
                    "type": "Name",
                    "possible_values": []
                },
                "inp": {
                    "value": "[cls_outputs, box_outputs, self._anchors.boxes, indices, classes, image_id, image_scale, self._num_classes, level_index]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.float32, tf.float32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_578": {
                "params": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.where(classes == c)[0]",
                            "Subscript"
                        ],
                        [
                            "np.argsort(-detections[:, -3])",
                            "Call"
                        ],
                        [
                            "tf.range(count, count + steps)",
                            "Call"
                        ]
                    ]
                }
            },
            "not_equal_617": {
                "x": {
                    "value": "matches.match_results",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_143": {
                "params": {
                    "value": "areas",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x2 - x1 + 1) * (y2 - y1 + 1)",
                            "BinOp"
                        ],
                        [
                            "(x2 - x1 + 1) * (y2 - y1 + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "indices": {
                    "value": "order[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/backbone/efficientnet_builder.py": {
        "tensorflow": {
            "convert_to_tensor_168": {
                "variable": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(features, name='features')",
                            "Call"
                        ],
                        [
                            "model(images, training=training, features_only=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "features",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_292": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(images, training=training, features_only=features_only, pooled_features_only=pooled_features_only)",
                            "Call"
                        ],
                        [
                            "tf.identity(outputs, 'features')",
                            "Call"
                        ],
                        [
                            "tf.identity(outputs, 'pooled_features')",
                            "Call"
                        ],
                        [
                            "tf.identity(outputs, 'logits')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "features",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "swish_163": {
                "x": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(features, name='features')",
                            "Call"
                        ],
                        [
                            "model(images, training=training, features_only=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_169": {
                "x": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(features, name='features')",
                            "Call"
                        ],
                        [
                            "model(images, training=training, features_only=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_294": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(images, training=training, features_only=features_only, pooled_features_only=pooled_features_only)",
                            "Call"
                        ],
                        [
                            "tf.identity(outputs, 'features')",
                            "Call"
                        ],
                        [
                            "tf.identity(outputs, 'pooled_features')",
                            "Call"
                        ],
                        [
                            "tf.identity(outputs, 'logits')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "pooled_features",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_296": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(images, training=training, features_only=features_only, pooled_features_only=pooled_features_only)",
                            "Call"
                        ],
                        [
                            "tf.identity(outputs, 'features')",
                            "Call"
                        ],
                        [
                            "tf.identity(outputs, 'pooled_features')",
                            "Call"
                        ],
                        [
                            "tf.identity(outputs, 'logits')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "logits",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Exists_276": {
                "filename": {
                    "value": "param_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'model_params.txt')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu6_166": {
                "features": {
                    "value": "features + np.float32(3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Exists_277": {
                "filename": {
                    "value": "model_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MakeDirs_278": {
                "dirname": {
                    "value": "model_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GFile_279": {
                "name": {
                    "value": "param_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'model_params.txt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/backbone/efficientnet_builder_test.py": {
        "tensorflow": {
            "zeros_36": {
                "variable": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, input_size, input_size, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_100": {
                "variable": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 224, 224, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "disable_eager_execution_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/backbone/efficientnet_lite_builder.py": {
        "tensorflow": {
            "identity_209": {
                "variable": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(images, training=training, features_only=True)",
                            "Call"
                        ],
                        [
                            "tf.identity(features, 'features')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "features",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_172": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(images, training=training, features_only=features_only, pooled_features_only=pooled_features_only)",
                            "Call"
                        ],
                        [
                            "tf.identity(outputs, 'features')",
                            "Call"
                        ],
                        [
                            "tf.identity(outputs, 'pooled_features')",
                            "Call"
                        ],
                        [
                            "tf.identity(outputs, 'logits')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "features",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_164": {
                "name_or_scope": {
                    "value": "model_name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "identity_174": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(images, training=training, features_only=features_only, pooled_features_only=pooled_features_only)",
                            "Call"
                        ],
                        [
                            "tf.identity(outputs, 'features')",
                            "Call"
                        ],
                        [
                            "tf.identity(outputs, 'pooled_features')",
                            "Call"
                        ],
                        [
                            "tf.identity(outputs, 'logits')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "pooled_features",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_176": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(images, training=training, features_only=features_only, pooled_features_only=pooled_features_only)",
                            "Call"
                        ],
                        [
                            "tf.identity(outputs, 'features')",
                            "Call"
                        ],
                        [
                            "tf.identity(outputs, 'pooled_features')",
                            "Call"
                        ],
                        [
                            "tf.identity(outputs, 'logits')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "logits",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_205": {
                "name_or_scope": {
                    "value": "model_name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Exists_155": {
                "filename": {
                    "value": "param_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'model_params.txt')",
                            "Call"
                        ]
                    ]
                }
            },
            "Exists_156": {
                "filename": {
                    "value": "model_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MakeDirs_157": {
                "dirname": {
                    "value": "model_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GFile_158": {
                "name": {
                    "value": "param_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'model_params.txt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/backbone/efficientnet_lite_builder_test.py": {
        "tensorflow": {
            "zeros_36": {
                "variable": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, input_size, input_size, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "disable_eager_execution_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/backbone/efficientnet_model.py": {
        "tensorflow": {
            "identity_380": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self._relu_fn(self._bnsp(self._superpixel(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn1(fused_conv_fn(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn0(expand_conv_fn(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn1(depthwise_conv_fn(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._bn2(project_conv_fn(x), training=training)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "self._call_se(x)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -6, 6)",
                            "Call"
                        ],
                        [
                            "utils.drop_connect(x, training, survival_prob)",
                            "Call"
                        ],
                        [
                            "tf.add(x, inputs)",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn0(self._expand_conv(inputs), training=training))",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self._bn1(self._project_conv(x), training=training)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -6, 6)",
                            "Call"
                        ],
                        [
                            "utils.drop_connect(x, training, survival_prob)",
                            "Call"
                        ],
                        [
                            "tf.add(x, inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_452": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self._relu_fn(self._bnsp(self._superpixel(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn1(fused_conv_fn(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn0(expand_conv_fn(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn1(depthwise_conv_fn(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._bn2(project_conv_fn(x), training=training)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "self._call_se(x)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -6, 6)",
                            "Call"
                        ],
                        [
                            "utils.drop_connect(x, training, survival_prob)",
                            "Call"
                        ],
                        [
                            "tf.add(x, inputs)",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn0(self._expand_conv(inputs), training=training))",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self._bn1(self._project_conv(x), training=training)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -6, 6)",
                            "Call"
                        ],
                        [
                            "utils.drop_connect(x, training, survival_prob)",
                            "Call"
                        ],
                        [
                            "tf.add(x, inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "GlobalAveragePooling2D_598": {
                "variable": {
                    "value": "self._avg_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data_format": {
                    "value": "self._global_params.data_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool_319": {
                "variable": {
                    "value": "se_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "ksize": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._block_args.kernel_size",
                            "Attribute"
                        ],
                        [
                            "[1, shape[self._spatial_dims[0]], shape[self._spatial_dims[1]], 1]",
                            "List"
                        ],
                        [
                            "block_args.kernel_size",
                            "Attribute"
                        ],
                        [
                            "[1, shape[self._spatial_dims[0]], shape[self._spatial_dims[1]], 1]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_325": {
                "variable": {
                    "value": "se_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "input_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "self._spatial_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_382": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self._relu_fn(self._bnsp(self._superpixel(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn1(fused_conv_fn(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn0(expand_conv_fn(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn1(depthwise_conv_fn(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._bn2(project_conv_fn(x), training=training)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "self._call_se(x)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -6, 6)",
                            "Call"
                        ],
                        [
                            "utils.drop_connect(x, training, survival_prob)",
                            "Call"
                        ],
                        [
                            "tf.add(x, inputs)",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn0(self._expand_conv(inputs), training=training))",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self._bn1(self._project_conv(x), training=training)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -6, 6)",
                            "Call"
                        ],
                        [
                            "utils.drop_connect(x, training, survival_prob)",
                            "Call"
                        ],
                        [
                            "tf.add(x, inputs)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-6",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_454": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self._relu_fn(self._bnsp(self._superpixel(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn1(fused_conv_fn(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn0(expand_conv_fn(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn1(depthwise_conv_fn(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._bn2(project_conv_fn(x), training=training)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "self._call_se(x)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -6, 6)",
                            "Call"
                        ],
                        [
                            "utils.drop_connect(x, training, survival_prob)",
                            "Call"
                        ],
                        [
                            "tf.add(x, inputs)",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn0(self._expand_conv(inputs), training=training))",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self._bn1(self._project_conv(x), training=training)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -6, 6)",
                            "Call"
                        ],
                        [
                            "utils.drop_connect(x, training, survival_prob)",
                            "Call"
                        ],
                        [
                            "tf.add(x, inputs)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-6",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_601": {
                "variable": {
                    "value": "self._fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self._global_params.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "dense_kernel_initializer",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Dropout_608": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self._global_params.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_330": {
                "x": {
                    "value": "se_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.avg_pool(input_tensor, ksize=kernel_size, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(input_tensor, self._spatial_dims, keepdims=True)",
                            "Call"
                        ],
                        [
                            "self._se_expand(self._relu_fn(self._se_reduce(se_tensor)))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_390": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self._relu_fn(self._bnsp(self._superpixel(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn1(fused_conv_fn(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn0(expand_conv_fn(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn1(depthwise_conv_fn(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._bn2(project_conv_fn(x), training=training)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "self._call_se(x)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -6, 6)",
                            "Call"
                        ],
                        [
                            "utils.drop_connect(x, training, survival_prob)",
                            "Call"
                        ],
                        [
                            "tf.add(x, inputs)",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn0(self._expand_conv(inputs), training=training))",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self._bn1(self._project_conv(x), training=training)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -6, 6)",
                            "Call"
                        ],
                        [
                            "utils.drop_connect(x, training, survival_prob)",
                            "Call"
                        ],
                        [
                            "tf.add(x, inputs)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "add_463": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self._relu_fn(self._bnsp(self._superpixel(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn1(fused_conv_fn(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn0(expand_conv_fn(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn1(depthwise_conv_fn(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._bn2(project_conv_fn(x), training=training)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "self._call_se(x)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -6, 6)",
                            "Call"
                        ],
                        [
                            "utils.drop_connect(x, training, survival_prob)",
                            "Call"
                        ],
                        [
                            "tf.add(x, inputs)",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn0(self._expand_conv(inputs), training=training))",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self._bn1(self._project_conv(x), training=training)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -6, 6)",
                            "Call"
                        ],
                        [
                            "utils.drop_connect(x, training, survival_prob)",
                            "Call"
                        ],
                        [
                            "tf.add(x, inputs)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "name_scope_634": {
                "name": {
                    "value": "stem",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_353": {
                "name": {
                    "value": "super_pixel",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_372": {
                "name": {
                    "value": "se",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_654": {
                "name": {
                    "value": "'blocks_%s' % idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_674": {
                "name": {
                    "value": "head",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool_683": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self._relu_fn(self._bn0(self._conv_stem(inputs), training=training))",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn1(self._conv_head(outputs), training=training))",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(outputs, ksize=kernel_size, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "self._avg_pooling(outputs)",
                            "Call"
                        ],
                        [
                            "block.call(outputs, training=training, survival_prob=survival_prob)",
                            "Call"
                        ],
                        [
                            "self._dropout(outputs, training=training)",
                            "Call"
                        ],
                        [
                            "self._dropout(outputs, training=training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(outputs, self._spatial_dims)",
                            "Call"
                        ],
                        [
                            "self._fc(outputs)",
                            "Call"
                        ],
                        [
                            "self._fc(outputs)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._block_args.kernel_size",
                            "Attribute"
                        ],
                        [
                            "[1, shape[self._spatial_dims[0]], shape[self._spatial_dims[1]], 1]",
                            "List"
                        ],
                        [
                            "block_args.kernel_size",
                            "Attribute"
                        ],
                        [
                            "[1, shape[self._spatial_dims[0]], shape[self._spatial_dims[1]], 1]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_691": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self._relu_fn(self._bn0(self._conv_stem(inputs), training=training))",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn1(self._conv_head(outputs), training=training))",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(outputs, ksize=kernel_size, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "self._avg_pooling(outputs)",
                            "Call"
                        ],
                        [
                            "block.call(outputs, training=training, survival_prob=survival_prob)",
                            "Call"
                        ],
                        [
                            "self._dropout(outputs, training=training)",
                            "Call"
                        ],
                        [
                            "self._dropout(outputs, training=training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(outputs, self._spatial_dims)",
                            "Call"
                        ],
                        [
                            "self._fc(outputs)",
                            "Call"
                        ],
                        [
                            "self._fc(outputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._spatial_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/backbone/efficientnet_model_test.py": {
        "tensorflow": {
            "zeros_31": {
                "variable": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 128, 128, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "variable": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 128, 128, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_85": {
                "variable": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 128, 128, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_112": {
                "variable": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 128, 128, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_139": {
                "variable": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 128, 128, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_167": {
                "variable": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 128, 128, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_196": {
                "variable": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 128, 128, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_226": {
                "variable": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 128, 128, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "main_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/dataloader.py": {
        "tensorflow": {
            "reshape_195": {
                "variable": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(data, [-1, dimension])",
                            "Call"
                        ],
                        [
                            "example_decoder.decode(value)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, dimension]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Assert_197": {
                "variable": {
                    "value": "assert_length",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.less_equal(num_instances, max_num_instances)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "[num_instances]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_202": {
                "variable": {
                    "value": "padded_data",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[data, paddings]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_203": {
                "variable": {
                    "value": "padded_data",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "padded_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([data, paddings], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(padded_data, output_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "constant_48": {
                "variable": {
                    "value": "self._image_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_53": {
                "variable": {
                    "value": "self._crop_offset_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_54": {
                "variable": {
                    "value": "self._crop_offset_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "convert_image_dtype_59": {
                "variable": {
                    "value": "self._image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "image": {
                    "value": "self._image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_60": {
                "variable": {
                    "value": "offset",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.485, 0.456, 0.406]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_61": {
                "variable": {
                    "value": "offset",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant([0.485, 0.456, 0.406])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(offset, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(offset, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_62": {
                "variable": {
                    "value": "offset",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant([0.485, 0.456, 0.406])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(offset, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(offset, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_65": {
                "variable": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.229, 0.224, 0.225]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_66": {
                "variable": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant([0.229, 0.224, 0.225])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(scale, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(scale, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_67": {
                "variable": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant([0.229, 0.224, 0.225])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(scale, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(scale, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_74": {
                "variable": {
                    "value": "scaled_y",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "random_scale_factor * self._output_size[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_75": {
                "variable": {
                    "value": "scaled_x",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "random_scale_factor * self._output_size[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_78": {
                "variable": {
                    "value": "height",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(self._image)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_79": {
                "variable": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(self._image)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_82": {
                "variable": {
                    "value": "image_scale",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "image_scale_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(scaled_x, tf.float32) / width",
                            "BinOp"
                        ],
                        [
                            "tf.cast(self._output_size[1], tf.float32) / width",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "image_scale_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(scaled_y, tf.float32) / height",
                            "BinOp"
                        ],
                        [
                            "tf.cast(self._output_size[0], tf.float32) / height",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_86": {
                "variable": {
                    "value": "scaled_height",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "height * image_scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_87": {
                "variable": {
                    "value": "scaled_width",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "width * image_scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_88": {
                "variable": {
                    "value": "offset_y",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "scaled_height - self._output_size[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_89": {
                "variable": {
                    "value": "offset_x",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "scaled_width - self._output_size[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_92": {
                "variable": {
                    "value": "offset_y",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "offset_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(scaled_height - self._output_size[0], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.maximum(0.0, offset_y) * tf.random_uniform([], 0, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(offset_y, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_93": {
                "variable": {
                    "value": "offset_x",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "offset_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(scaled_width - self._output_size[1], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.maximum(0.0, offset_x) * tf.random_uniform([], 0, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(offset_x, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_103": {
                "variable": {
                    "value": "height",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(self._image)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_104": {
                "variable": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(self._image)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_107": {
                "variable": {
                    "value": "image_scale",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "image_scale_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(scaled_x, tf.float32) / width",
                            "BinOp"
                        ],
                        [
                            "tf.cast(self._output_size[1], tf.float32) / width",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "image_scale_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(scaled_y, tf.float32) / height",
                            "BinOp"
                        ],
                        [
                            "tf.cast(self._output_size[0], tf.float32) / height",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_108": {
                "variable": {
                    "value": "scaled_height",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "height * image_scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_109": {
                "variable": {
                    "value": "scaled_width",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "width * image_scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_to_bounding_box_121": {
                "variable": {
                    "value": "output_image",
                    "type": "Name",
                    "possible_values": []
                },
                "image": {
                    "value": "scaled_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.resize_images(self._image, [self._scaled_height, self._scaled_width], method=method)",
                            "Call"
                        ],
                        [
                            "scaled_image[self._crop_offset_y:self._crop_offset_y + self._output_size[0], self._crop_offset_x:self._crop_offset_x + self._output_size[1], :]",
                            "Subscript"
                        ]
                    ]
                },
                "offset_height": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "offset_width": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "target_height": {
                    "value": "self._output_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target_width": {
                    "value": "self._output_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_141": {
                "variable": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.less(boxes, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.zeros_like(boxes)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(tf.less(boxes, 0), tf.zeros_like(boxes), boxes)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.greater(boxes, self._output_size[0] - 1), (self._output_size[1] - 1) * tf.ones_like(boxes), boxes)",
                            "Call"
                        ],
                        [
                            "preprocessor.box_list_scale(boxlist, self._scaled_height, self._scaled_width).get()",
                            "Call"
                        ],
                        [
                            "boxes * image_scale",
                            "BinOp"
                        ],
                        [
                            "self.clip_boxes(boxes)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(boxes, indices)",
                            "Call"
                        ],
                        [
                            "data['groundtruth_boxes']",
                            "Subscript"
                        ],
                        [
                            "tf.gather_nd(boxes, indices)",
                            "Call"
                        ],
                        [
                            "pad_to_fixed_size(boxes, -1, [self._max_num_instances, 4])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "where_142": {
                "variable": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.greater(boxes, self._output_size[0] - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "(self._output_size[1] - 1) * tf.ones_like(boxes)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(tf.less(boxes, 0), tf.zeros_like(boxes), boxes)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.greater(boxes, self._output_size[0] - 1), (self._output_size[1] - 1) * tf.ones_like(boxes), boxes)",
                            "Call"
                        ],
                        [
                            "preprocessor.box_list_scale(boxlist, self._scaled_height, self._scaled_width).get()",
                            "Call"
                        ],
                        [
                            "boxes * image_scale",
                            "BinOp"
                        ],
                        [
                            "self.clip_boxes(boxes)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(boxes, indices)",
                            "Call"
                        ],
                        [
                            "data['groundtruth_boxes']",
                            "Subscript"
                        ],
                        [
                            "tf.gather_nd(boxes, indices)",
                            "Call"
                        ],
                        [
                            "pad_to_fixed_size(boxes, -1, [self._max_num_instances, 4])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_152": {
                "variable": {
                    "value": "box_offset",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[self._crop_offset_y, self._crop_offset_x, self._crop_offset_y, self._crop_offset_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_158": {
                "variable": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.not_equal(tf.reduce_sum(boxes, axis=1), 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_nd_159": {
                "variable": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(tf.less(boxes, 0), tf.zeros_like(boxes), boxes)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.greater(boxes, self._output_size[0] - 1), (self._output_size[1] - 1) * tf.ones_like(boxes), boxes)",
                            "Call"
                        ],
                        [
                            "preprocessor.box_list_scale(boxlist, self._scaled_height, self._scaled_width).get()",
                            "Call"
                        ],
                        [
                            "boxes * image_scale",
                            "BinOp"
                        ],
                        [
                            "self.clip_boxes(boxes)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(boxes, indices)",
                            "Call"
                        ],
                        [
                            "data['groundtruth_boxes']",
                            "Subscript"
                        ],
                        [
                            "tf.gather_nd(boxes, indices)",
                            "Call"
                        ],
                        [
                            "pad_to_fixed_size(boxes, -1, [self._max_num_instances, 4])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(tf.reduce_sum(boxes, axis=1), 0))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.logical_not(data['groundtruth_is_crowd']))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_160": {
                "variable": {
                    "value": "classes",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "self._classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(tf.reduce_sum(boxes, axis=1), 0))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.logical_not(data['groundtruth_is_crowd']))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_154": {
                "x": {
                    "value": "tf.reshape(box_offset, [1, 4])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_196": {
                "input": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(data, [-1, dimension])",
                            "Call"
                        ],
                        [
                            "example_decoder.decode(value)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_equal_198": {
                "x": {
                    "value": "num_instances",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(data)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "max_num_instances",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output_shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "control_dependencies_199": {
                "control_inputs": {
                    "value": "[assert_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_201": {
                "shape": {
                    "value": "[pad_length, dimension]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TFRecordDataset_323": {
                "variable": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": []
                },
                "filenames": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reduce_mean_343": {
                "variable": {
                    "value": "num_positives_batch",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "num_positives",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reshape_344": {
                "variable": {
                    "value": "labels[mean_num_positives]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(tf.expand_dims(num_positives_batch, 0), [batch_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_353": {
                "variable": {
                    "value": "groundtruth_data",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[boxes, is_crowds, areas, classes]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_50": {
                "input": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data['image']",
                            "Subscript"
                        ],
                        [
                            "input_processor.resize_and_crop_image()",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_51": {
                "input": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data['image']",
                            "Subscript"
                        ],
                        [
                            "input_processor.resize_and_crop_image()",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_80": {
                "x": {
                    "value": "scaled_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(random_scale_factor * self._output_size[0], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_81": {
                "x": {
                    "value": "scaled_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(random_scale_factor * self._output_size[1], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_90": {
                "x": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "offset_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(scaled_height - self._output_size[0], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.maximum(0.0, offset_y) * tf.random_uniform([], 0, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(offset_y, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_91": {
                "x": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "offset_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(scaled_width - self._output_size[1], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.maximum(0.0, offset_x) * tf.random_uniform([], 0, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(offset_x, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_105": {
                "x": {
                    "value": "self._output_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_106": {
                "x": {
                    "value": "self._output_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_141": {
                "x": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(tf.less(boxes, 0), tf.zeros_like(boxes), boxes)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.greater(boxes, self._output_size[0] - 1), (self._output_size[1] - 1) * tf.ones_like(boxes), boxes)",
                            "Call"
                        ],
                        [
                            "preprocessor.box_list_scale(boxlist, self._scaled_height, self._scaled_width).get()",
                            "Call"
                        ],
                        [
                            "boxes * image_scale",
                            "BinOp"
                        ],
                        [
                            "self.clip_boxes(boxes)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(boxes, indices)",
                            "Call"
                        ],
                        [
                            "data['groundtruth_boxes']",
                            "Subscript"
                        ],
                        [
                            "tf.gather_nd(boxes, indices)",
                            "Call"
                        ],
                        [
                            "pad_to_fixed_size(boxes, -1, [self._max_num_instances, 4])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_141": {
                "input": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(tf.less(boxes, 0), tf.zeros_like(boxes), boxes)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.greater(boxes, self._output_size[0] - 1), (self._output_size[1] - 1) * tf.ones_like(boxes), boxes)",
                            "Call"
                        ],
                        [
                            "preprocessor.box_list_scale(boxlist, self._scaled_height, self._scaled_width).get()",
                            "Call"
                        ],
                        [
                            "boxes * image_scale",
                            "BinOp"
                        ],
                        [
                            "self.clip_boxes(boxes)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(boxes, indices)",
                            "Call"
                        ],
                        [
                            "data['groundtruth_boxes']",
                            "Subscript"
                        ],
                        [
                            "tf.gather_nd(boxes, indices)",
                            "Call"
                        ],
                        [
                            "pad_to_fixed_size(boxes, -1, [self._max_num_instances, 4])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "greater_142": {
                "x": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(tf.less(boxes, 0), tf.zeros_like(boxes), boxes)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.greater(boxes, self._output_size[0] - 1), (self._output_size[1] - 1) * tf.ones_like(boxes), boxes)",
                            "Call"
                        ],
                        [
                            "preprocessor.box_list_scale(boxlist, self._scaled_height, self._scaled_width).get()",
                            "Call"
                        ],
                        [
                            "boxes * image_scale",
                            "BinOp"
                        ],
                        [
                            "self.clip_boxes(boxes)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(boxes, indices)",
                            "Call"
                        ],
                        [
                            "data['groundtruth_boxes']",
                            "Subscript"
                        ],
                        [
                            "tf.gather_nd(boxes, indices)",
                            "Call"
                        ],
                        [
                            "pad_to_fixed_size(boxes, -1, [self._max_num_instances, 4])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "self._output_size[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_154": {
                "tensor": {
                    "value": "box_offset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([self._crop_offset_y, self._crop_offset_x, self._crop_offset_y, self._crop_offset_x])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "not_equal_158": {
                "x": {
                    "value": "tf.reduce_sum(boxes, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_264": {
                "variable": {
                    "value": "classes",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(classes, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_267": {
                "variable": {
                    "value": "classes",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(classes, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_299": {
                "variable": {
                    "value": "source_id",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(source_id, tf.constant(''))",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "-1",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "source_id",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data['source_id']",
                            "Subscript"
                        ],
                        [
                            "tf.where(tf.equal(source_id, tf.constant('')), '-1', source_id)",
                            "Call"
                        ],
                        [
                            "tf.string_to_number(source_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "string_to_number_301": {
                "variable": {
                    "value": "source_id",
                    "type": "Name",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "source_id",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data['source_id']",
                            "Subscript"
                        ],
                        [
                            "tf.where(tf.equal(source_id, tf.constant('')), '-1', source_id)",
                            "Call"
                        ],
                        [
                            "tf.string_to_number(source_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_306": {
                "variable": {
                    "value": "is_crowds",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "is_crowds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data['groundtruth_is_crowd']",
                            "Subscript"
                        ],
                        [
                            "tf.cast(is_crowds, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "pad_to_fixed_size(is_crowds, 0, [self._max_num_instances, 1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "parallel_interleave_327": {
                "map_func": {
                    "value": "_prefetch_dataset",
                    "type": "Name",
                    "possible_values": []
                },
                "cycle_length": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "sloppy": {
                    "value": "self._is_training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_78": {
                "input": {
                    "value": "self._image",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_79": {
                "input": {
                    "value": "self._image",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_103": {
                "input": {
                    "value": "self._image",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_104": {
                "input": {
                    "value": "self._image",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_143": {
                "input": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(tf.less(boxes, 0), tf.zeros_like(boxes), boxes)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.greater(boxes, self._output_size[0] - 1), (self._output_size[1] - 1) * tf.ones_like(boxes), boxes)",
                            "Call"
                        ],
                        [
                            "preprocessor.box_list_scale(boxlist, self._scaled_height, self._scaled_width).get()",
                            "Call"
                        ],
                        [
                            "boxes * image_scale",
                            "BinOp"
                        ],
                        [
                            "self.clip_boxes(boxes)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(boxes, indices)",
                            "Call"
                        ],
                        [
                            "data['groundtruth_boxes']",
                            "Subscript"
                        ],
                        [
                            "tf.gather_nd(boxes, indices)",
                            "Call"
                        ],
                        [
                            "pad_to_fixed_size(boxes, -1, [self._max_num_instances, 4])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_158": {
                "input_tensor": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(tf.less(boxes, 0), tf.zeros_like(boxes), boxes)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.greater(boxes, self._output_size[0] - 1), (self._output_size[1] - 1) * tf.ones_like(boxes), boxes)",
                            "Call"
                        ],
                        [
                            "preprocessor.box_list_scale(boxlist, self._scaled_height, self._scaled_width).get()",
                            "Call"
                        ],
                        [
                            "boxes * image_scale",
                            "BinOp"
                        ],
                        [
                            "self.clip_boxes(boxes)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(boxes, indices)",
                            "Call"
                        ],
                        [
                            "data['groundtruth_boxes']",
                            "Subscript"
                        ],
                        [
                            "tf.gather_nd(boxes, indices)",
                            "Call"
                        ],
                        [
                            "pad_to_fixed_size(boxes, -1, [self._max_num_instances, 4])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_258": {
                "name": {
                    "value": "parser",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_270": {
                "variable": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_not(data['groundtruth_is_crowd'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_nd_271": {
                "variable": {
                    "value": "classes",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather_nd(self._classes, indices)",
                            "Call"
                        ],
                        [
                            "data['groundtruth_classes']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(tf.cast(classes, dtype=tf.float32), [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(classes, dtype=tf.float32), [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(classes, indices)",
                            "Call"
                        ],
                        [
                            "pad_to_fixed_size(classes, -1, [self._max_num_instances, 1])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(tf.reduce_sum(boxes, axis=1), 0))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.logical_not(data['groundtruth_is_crowd']))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_272": {
                "variable": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(tf.less(boxes, 0), tf.zeros_like(boxes), boxes)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.greater(boxes, self._output_size[0] - 1), (self._output_size[1] - 1) * tf.ones_like(boxes), boxes)",
                            "Call"
                        ],
                        [
                            "preprocessor.box_list_scale(boxlist, self._scaled_height, self._scaled_width).get()",
                            "Call"
                        ],
                        [
                            "boxes * image_scale",
                            "BinOp"
                        ],
                        [
                            "self.clip_boxes(boxes)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(boxes, indices)",
                            "Call"
                        ],
                        [
                            "data['groundtruth_boxes']",
                            "Subscript"
                        ],
                        [
                            "tf.gather_nd(boxes, indices)",
                            "Call"
                        ],
                        [
                            "pad_to_fixed_size(boxes, -1, [self._max_num_instances, 4])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(tf.reduce_sum(boxes, axis=1), 0))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.logical_not(data['groundtruth_is_crowd']))",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_345": {
                "input": {
                    "value": "tf.expand_dims(num_positives_batch, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_264": {
                "x": {
                    "value": "classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather_nd(self._classes, indices)",
                            "Call"
                        ],
                        [
                            "data['groundtruth_classes']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(tf.cast(classes, dtype=tf.float32), [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(classes, dtype=tf.float32), [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(classes, indices)",
                            "Call"
                        ],
                        [
                            "pad_to_fixed_size(classes, -1, [self._max_num_instances, 1])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_267": {
                "x": {
                    "value": "classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather_nd(self._classes, indices)",
                            "Call"
                        ],
                        [
                            "data['groundtruth_classes']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(tf.cast(classes, dtype=tf.float32), [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(classes, dtype=tf.float32), [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(classes, indices)",
                            "Call"
                        ],
                        [
                            "pad_to_fixed_size(classes, -1, [self._max_num_instances, 1])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_299": {
                "x": {
                    "value": "source_id",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data['source_id']",
                            "Subscript"
                        ],
                        [
                            "tf.where(tf.equal(source_id, tf.constant('')), '-1', source_id)",
                            "Call"
                        ],
                        [
                            "tf.string_to_number(source_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant('')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_345": {
                "input": {
                    "value": "num_positives_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(num_positives)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "logical_not_270": {
                "x": {
                    "value": "data['groundtruth_is_crowd']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_299": {
                "value": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/efficientdet_arch.py": {
        "tensorflow": {
            "resize_bilinear_79": {
                "variable": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": []
                },
                "images": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.resize_bilinear(images, size, align_corners=True)",
                            "Call"
                        ],
                        [
                            "conv_op(images, num_filters, kernel_size=3, bias_initializer=tf.zeros_initializer(), activation=None, padding='same', name='class-%d' % i)",
                            "Call"
                        ],
                        [
                            "utils.batch_norm_act(images, is_training, act_type=act_type, init_zero=False, use_tpu=use_tpu, data_format=data_format, name='class-%d-bn-%d' % (i, level))",
                            "Call"
                        ],
                        [
                            "utils.drop_connect(images, is_training, survival_prob)",
                            "Call"
                        ],
                        [
                            "images + orig_images",
                            "BinOp"
                        ],
                        [
                            "conv_op(images, num_filters, kernel_size=3, activation=None, bias_initializer=tf.zeros_initializer(), padding='same', name='box-%d' % i)",
                            "Call"
                        ],
                        [
                            "utils.batch_norm_act(images, is_training, act_type=act_type, init_zero=False, use_tpu=use_tpu, data_format=data_format, name='box-%d-bn-%d' % (i, level))",
                            "Call"
                        ],
                        [
                            "utils.drop_connect(images, is_training, survival_prob)",
                            "Call"
                        ],
                        [
                            "images + orig_images",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_80": {
                "x": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.resize_bilinear(images, size, align_corners=True)",
                            "Call"
                        ],
                        [
                            "conv_op(images, num_filters, kernel_size=3, bias_initializer=tf.zeros_initializer(), activation=None, padding='same', name='class-%d' % i)",
                            "Call"
                        ],
                        [
                            "utils.batch_norm_act(images, is_training, act_type=act_type, init_zero=False, use_tpu=use_tpu, data_format=data_format, name='class-%d-bn-%d' % (i, level))",
                            "Call"
                        ],
                        [
                            "utils.drop_connect(images, is_training, survival_prob)",
                            "Call"
                        ],
                        [
                            "images + orig_images",
                            "BinOp"
                        ],
                        [
                            "conv_op(images, num_filters, kernel_size=3, activation=None, bias_initializer=tf.zeros_initializer(), padding='same', name='box-%d' % i)",
                            "Call"
                        ],
                        [
                            "utils.batch_norm_act(images, is_training, act_type=act_type, init_zero=False, use_tpu=use_tpu, data_format=data_format, name='box-%d-bn-%d' % (i, level))",
                            "Call"
                        ],
                        [
                            "utils.drop_connect(images, is_training, survival_prob)",
                            "Call"
                        ],
                        [
                            "images + orig_images",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "output_type",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "name_scope_58": {
                "name": {
                    "value": "nearest_upsampling",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_74": {
                "tensor": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(data, [bs, c, h, 1, w, 1]) * tf.ones([1, 1, 1, height_scale, 1, width_scale], dtype=data.dtype)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(data, [bs, h, 1, w, 1, c]) * tf.ones([1, 1, height_scale, 1, width_scale, 1], dtype=data.dtype)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, h * height_scale, w * width_scale, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_133": {
                "variable": {
                    "value": "feat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_maybe_apply_1x1(feat)",
                            "Call"
                        ],
                        [
                            "_maybe_apply_1x1(feat)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=feat, pool_size=[height_stride_size + 1, width_stride_size + 1], strides=[height_stride_size, width_stride_size], padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=feat, pool_size=[height_stride_size + 1, width_stride_size + 1], strides=[height_stride_size, width_stride_size], padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nearest_upsampling(feat, height_scale=height_scale, width_scale=width_scale, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_maybe_apply_1x1(feat)",
                            "Call"
                        ],
                        [
                            "tf.transpose(feat, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(feat, [target_height, target_width])",
                            "Call"
                        ],
                        [
                            "tf.transpose(feat, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(feat, filters=target_num_channels, kernel_size=(1, 1), padding='same', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "utils.batch_norm_act(feat, is_training_bn=is_training, act_type=None, data_format=data_format, use_tpu=use_tpu, name='bn')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "target_num_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_149": {
                "name_or_scope": {
                    "value": "'resample_{}'.format(name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_358": {
                "name_or_scope": {
                    "value": "class_net",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_377": {
                "name_or_scope": {
                    "value": "box_net",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_486": {
                "name_or_scope": {
                    "value": "fpn_cells",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_67": {
                "tensor": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(data, [bs, c, h, 1, w, 1]) * tf.ones([1, 1, 1, height_scale, 1, width_scale], dtype=data.dtype)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(data, [bs, h, 1, w, 1, c]) * tf.ones([1, 1, height_scale, 1, width_scale, 1], dtype=data.dtype)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, c, h * height_scale, w * width_scale]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_72": {
                "tensor": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(data, [bs, c, h, 1, w, 1]) * tf.ones([1, 1, 1, height_scale, 1, width_scale], dtype=data.dtype)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(data, [bs, h, 1, w, 1, c]) * tf.ones([1, 1, height_scale, 1, width_scale, 1], dtype=data.dtype)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, h, 1, w, 1, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_72": {
                "shape": {
                    "value": "[1, 1, height_scale, 1, width_scale, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pooling2d_159": {
                "variable": {
                    "value": "feat",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_maybe_apply_1x1(feat)",
                            "Call"
                        ],
                        [
                            "_maybe_apply_1x1(feat)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=feat, pool_size=[height_stride_size + 1, width_stride_size + 1], strides=[height_stride_size, width_stride_size], padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=feat, pool_size=[height_stride_size + 1, width_stride_size + 1], strides=[height_stride_size, width_stride_size], padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nearest_upsampling(feat, height_scale=height_scale, width_scale=width_scale, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_maybe_apply_1x1(feat)",
                            "Call"
                        ],
                        [
                            "tf.transpose(feat, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(feat, [target_height, target_width])",
                            "Call"
                        ],
                        [
                            "tf.transpose(feat, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(feat, filters=target_num_channels, kernel_size=(1, 1), padding='same', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "utils.batch_norm_act(feat, is_training_bn=is_training, act_type=None, data_format=data_format, use_tpu=use_tpu, name='bn')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[height_stride_size + 1, width_stride_size + 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[height_stride_size, width_stride_size]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_279": {
                "value": {
                    "value": "-np.log((1 - 0.01) / 0.01)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_initializer_336": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_605": {
                "name_or_scope": {
                    "value": "'fnode{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_628": {
                "variable": {
                    "value": "normalized_weights",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.stack(edge_weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_629": {
                "variable": {
                    "value": "nodes",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(nodes, axis=-1)",
                            "Call"
                        ],
                        [
                            "[nodes[i] * edge_weights[i] / (weights_sum + 0.0001) for i in range(len(nodes))]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_630": {
                "variable": {
                    "value": "new_node",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(nodes, normalized_weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_65": {
                "tensor": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(data, [bs, c, h, 1, w, 1]) * tf.ones([1, 1, 1, height_scale, 1, width_scale], dtype=data.dtype)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(data, [bs, h, 1, w, 1, c]) * tf.ones([1, 1, height_scale, 1, width_scale, 1], dtype=data.dtype)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, c, h, 1, w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_65": {
                "shape": {
                    "value": "[1, 1, 1, height_scale, 1, width_scale]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "average_pooling2d_166": {
                "variable": {
                    "value": "feat",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_maybe_apply_1x1(feat)",
                            "Call"
                        ],
                        [
                            "_maybe_apply_1x1(feat)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=feat, pool_size=[height_stride_size + 1, width_stride_size + 1], strides=[height_stride_size, width_stride_size], padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=feat, pool_size=[height_stride_size + 1, width_stride_size + 1], strides=[height_stride_size, width_stride_size], padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nearest_upsampling(feat, height_scale=height_scale, width_scale=width_scale, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_maybe_apply_1x1(feat)",
                            "Call"
                        ],
                        [
                            "tf.transpose(feat, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(feat, [target_height, target_width])",
                            "Call"
                        ],
                        [
                            "tf.transpose(feat, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(feat, filters=target_num_channels, kernel_size=(1, 1), padding='same', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "utils.batch_norm_act(feat, is_training_bn=is_training, act_type=None, data_format=data_format, use_tpu=use_tpu, name='bn')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[height_stride_size + 1, width_stride_size + 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[height_stride_size, width_stride_size]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "random_normal_initializer_250": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_initializer_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_normal_initializer_307": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_initializer_316": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_488": {
                "name_or_scope": {
                    "value": "'cell_{}'.format(rep)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_636": {
                "variable": {
                    "value": "weights_sum",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "edge_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.cast(tf.Variable(1.0, name='WSM'), dtype=dtype) for _ in range(len(fnode['inputs_offsets']))]",
                            "ListComp"
                        ],
                        [
                            "[tf.nn.relu(tf.cast(tf.Variable(1.0, name='WSM'), dtype=dtype)) for _ in range(len(fnode['inputs_offsets']))]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "add_n_639": {
                "variable": {
                    "value": "new_node",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(nodes, axis=-1)",
                            "Call"
                        ],
                        [
                            "[nodes[i] * edge_weights[i] / (weights_sum + 0.0001) for i in range(len(nodes))]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "variable_scope_646": {
                "name_or_scope": {
                    "value": "'op_after_combine{}'.format(len(feats))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_185": {
                "variable": {
                    "value": "feat",
                    "type": "Name",
                    "possible_values": []
                },
                "images": {
                    "value": "feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_maybe_apply_1x1(feat)",
                            "Call"
                        ],
                        [
                            "_maybe_apply_1x1(feat)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=feat, pool_size=[height_stride_size + 1, width_stride_size + 1], strides=[height_stride_size, width_stride_size], padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=feat, pool_size=[height_stride_size + 1, width_stride_size + 1], strides=[height_stride_size, width_stride_size], padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nearest_upsampling(feat, height_scale=height_scale, width_scale=width_scale, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_maybe_apply_1x1(feat)",
                            "Call"
                        ],
                        [
                            "tf.transpose(feat, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(feat, [target_height, target_width])",
                            "Call"
                        ],
                        [
                            "tf.transpose(feat, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(feat, filters=target_num_channels, kernel_size=(1, 1), padding='same', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "utils.batch_norm_act(feat, is_training_bn=is_training, act_type=None, data_format=data_format, use_tpu=use_tpu, name='bn')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[target_height, target_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_626": {
                "x": {
                    "value": "tf.Variable(1.0, name='WSM')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nodes[0].dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "stack_628": {
                "values": {
                    "value": "edge_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.cast(tf.Variable(1.0, name='WSM'), dtype=dtype) for _ in range(len(fnode['inputs_offsets']))]",
                            "ListComp"
                        ],
                        [
                            "[tf.nn.relu(tf.cast(tf.Variable(1.0, name='WSM'), dtype=dtype)) for _ in range(len(fnode['inputs_offsets']))]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "multiply_630": {
                "x": {
                    "value": "nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(nodes, axis=-1)",
                            "Call"
                        ],
                        [
                            "[nodes[i] * edge_weights[i] / (weights_sum + 0.0001) for i in range(len(nodes))]",
                            "ListComp"
                        ]
                    ]
                },
                "y": {
                    "value": "normalized_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.stack(edge_weights))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_641": {
                "variable": {
                    "value": "new_node",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(nodes, axis=-1)",
                            "Call"
                        ],
                        [
                            "[nodes[i] * edge_weights[i] / (weights_sum + 0.0001) for i in range(len(nodes))]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "transpose_184": {
                "variable": {
                    "value": "feat",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_maybe_apply_1x1(feat)",
                            "Call"
                        ],
                        [
                            "_maybe_apply_1x1(feat)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=feat, pool_size=[height_stride_size + 1, width_stride_size + 1], strides=[height_stride_size, width_stride_size], padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=feat, pool_size=[height_stride_size + 1, width_stride_size + 1], strides=[height_stride_size, width_stride_size], padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nearest_upsampling(feat, height_scale=height_scale, width_scale=width_scale, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_maybe_apply_1x1(feat)",
                            "Call"
                        ],
                        [
                            "tf.transpose(feat, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(feat, [target_height, target_width])",
                            "Call"
                        ],
                        [
                            "tf.transpose(feat, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(feat, filters=target_num_channels, kernel_size=(1, 1), padding='same', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "utils.batch_norm_act(feat, is_training_bn=is_training, act_type=None, data_format=data_format, use_tpu=use_tpu, name='bn')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_188": {
                "variable": {
                    "value": "feat",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_maybe_apply_1x1(feat)",
                            "Call"
                        ],
                        [
                            "_maybe_apply_1x1(feat)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=feat, pool_size=[height_stride_size + 1, width_stride_size + 1], strides=[height_stride_size, width_stride_size], padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=feat, pool_size=[height_stride_size + 1, width_stride_size + 1], strides=[height_stride_size, width_stride_size], padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "nearest_upsampling(feat, height_scale=height_scale, width_scale=width_scale, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_maybe_apply_1x1(feat)",
                            "Call"
                        ],
                        [
                            "tf.transpose(feat, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(feat, [target_height, target_width])",
                            "Call"
                        ],
                        [
                            "tf.transpose(feat, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(feat, filters=target_num_channels, kernel_size=(1, 1), padding='same', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "utils.batch_norm_act(feat, is_training_bn=is_training, act_type=None, data_format=data_format, use_tpu=use_tpu, name='bn')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_626": {
                "initial_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "WSM",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_633": {
                "features": {
                    "value": "tf.cast(tf.Variable(1.0, name='WSM'), dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_633": {
                "x": {
                    "value": "tf.Variable(1.0, name='WSM')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nodes[0].dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Variable_633": {
                "initial_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "WSM",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/hparams_config.py": {
        "tensorflow": {
            "GFile_126": {
                "name": {
                    "value": "yaml_file_path",
                    "type": "Name",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/object_detection/argmax_matcher.py": {
        "tensorflow": {
            "cast_197": {
                "variable": {
                    "value": "indicator",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "indicator",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(indicator, x.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_132": {
                "variable": {
                    "value": "matches",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "similarity_matrix",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_198": {
                "x": {
                    "value": "tf.multiply(x, 1 - indicator)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "val * indicator",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_137": {
                "variable": {
                    "value": "matched_vals",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "similarity_matrix",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "greater_138": {
                "variable": {
                    "value": "below_unmatched_threshold",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "self._unmatched_threshold",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "matched_vals",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_max(similarity_matrix, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_140": {
                "variable": {
                    "value": "between_thresholds",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater_equal(matched_vals, self._unmatched_threshold)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.greater(self._matched_threshold, matched_vals)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_162": {
                "variable": {
                    "value": "force_match_column_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "similarity_matrix",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_164": {
                "variable": {
                    "value": "force_match_column_indicators",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "force_match_column_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.argmax(similarity_matrix, 1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "similarity_matrix_shape[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "shape_utils.combined_static_and_dynamic_shape(similarity_matrix)",
                            "Call"
                        ],
                        [
                            "shape_utils.combined_static_and_dynamic_shape(similarity_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_166": {
                "variable": {
                    "value": "force_match_row_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "force_match_column_indicators",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.one_hot(force_match_column_ids, depth=similarity_matrix_shape[1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_168": {
                "variable": {
                    "value": "force_match_column_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_max(force_match_column_indicators, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_170": {
                "variable": {
                    "value": "final_matches",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "force_match_column_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.reduce_max(force_match_column_indicators, 0), tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "force_match_row_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.argmax(force_match_column_indicators, 0, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "matches",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.argmax(similarity_matrix, 0, output_type=tf.int32)",
                            "Call"
                        ],
                        [
                            "self._set_values_using_indicator(matches, below_unmatched_threshold, -1)",
                            "Call"
                        ],
                        [
                            "self._set_values_using_indicator(matches, between_thresholds, -2)",
                            "Call"
                        ],
                        [
                            "self._set_values_using_indicator(matches, below_unmatched_threshold, -2)",
                            "Call"
                        ],
                        [
                            "self._set_values_using_indicator(matches, between_thresholds, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_182": {
                "pred": {
                    "value": "tf.greater(tf.shape(similarity_matrix)[0], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "_match_when_rows_are_non_empty",
                    "type": "Name",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "_match_when_rows_are_empty",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "multiply_198": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "1 - indicator",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_123": {
                "shape": {
                    "value": "[similarity_matrix_shape[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_183": {
                "x": {
                    "value": "tf.shape(similarity_matrix)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "greater_equal_141": {
                "x": {
                    "value": "matched_vals",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_max(similarity_matrix, 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self._unmatched_threshold",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_142": {
                "x": {
                    "value": "self._matched_threshold",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "matched_vals",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_max(similarity_matrix, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_169": {
                "input_tensor": {
                    "value": "force_match_column_indicators",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.one_hot(force_match_column_ids, depth=similarity_matrix_shape[1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_183": {
                "input": {
                    "value": "similarity_matrix",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/object_detection/box_coder.py": {
        "tensorflow": {
            "stack_146": {
                "variable": {
                    "value": "decoded_boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[box_coder.decode(boxes, anchors).get() for boxes in tf.unstack(encoded_boxes)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "name_scope_70": {
                "name": {
                    "value": "Encode",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_84": {
                "name": {
                    "value": "Decode",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unstack_148": {
                "value": {
                    "value": "encoded_boxes",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/object_detection/box_list.py": {
        "tensorflow": {
            "unstack_168": {
                "variable": {
                    "value": "(ymin, xmin, ymax, xmax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.transpose(box_corners)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_182": {
                "variable": {
                    "value": "(y_min, x_min, y_max, x_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "self.get()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_64": {
                "input": {
                    "value": "self.data['boxes']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "name_scope_166": {
                "name": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_181": {
                "name": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "transpose_168": {
                "a": {
                    "value": "box_corners",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get()",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_184": {
                "values": {
                    "value": "[x_min, y_min, x_max, y_max]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/object_detection/faster_rcnn_box_coder.py": {
        "tensorflow": {
            "log_81": {
                "variable": {
                    "value": "tw",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "w / wa",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_82": {
                "variable": {
                    "value": "th",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "h / ha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unstack_103": {
                "variable": {
                    "value": "(ty, tx, th, tw)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.transpose(rel_codes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_89": {
                "a": {
                    "value": "tf.stack([ty, tx, th, tw])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_89": {
                "values": {
                    "value": "[ty, tx, th, tw]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_103": {
                "a": {
                    "value": "rel_codes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "exp_109": {
                "x": {
                    "value": "tw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.log(w / wa)",
                            "Call"
                        ],
                        [
                            "tw / self._scale_factors[3]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_110": {
                "x": {
                    "value": "th",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.log(h / ha)",
                            "Call"
                        ],
                        [
                            "th / self._scale_factors[2]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_117": {
                "a": {
                    "value": "tf.stack([ymin, xmin, ymax, xmax])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_117": {
                "values": {
                    "value": "[ymin, xmin, ymax, xmax]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/object_detection/matcher.py": {
        "tensorflow": {
            "concat_192": {
                "variable": {
                    "value": "input_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.stack([ignored_value, unmatched_value]), input_tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_194": {
                "variable": {
                    "value": "gather_indices",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "self.match_results + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_195": {
                "variable": {
                    "value": "gathered_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "input_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.stack([ignored_value, unmatched_value]), input_tensor], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "gather_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.maximum(self.match_results + 2, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_equal_91": {
                "x": {
                    "value": "self._match_results",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "size_95": {
                "input": {
                    "value": "self.matched_column_indices()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_113": {
                "x": {
                    "value": "self._match_results",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "size_117": {
                "input": {
                    "value": "self.unmatched_column_indices()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_136": {
                "x": {
                    "value": "self._match_results",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "size_140": {
                "input": {
                    "value": "self.ignored_column_indices()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_168": {
                "x": {
                    "value": "tf.reshape(t, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_83": {
                "condition": {
                    "value": "tf.greater(self._match_results, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_105": {
                "condition": {
                    "value": "tf.equal(self._match_results, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_127": {
                "condition": {
                    "value": "self.ignored_column_indicator()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_150": {
                "condition": {
                    "value": "tf.greater(0, self._match_results)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_165": {
                "params": {
                    "value": "self._match_results",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.matched_column_indices()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_168": {
                "tensor": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_220": {
                "name": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "greater_83": {
                "x": {
                    "value": "self._match_results",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "equal_105": {
                "x": {
                    "value": "self._match_results",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "greater_150": {
                "x": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "self._match_results",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_192": {
                "values": {
                    "value": "[ignored_value, unmatched_value]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/object_detection/preprocessor.py": {
        "tensorflow": {
            "split_59": {
                "variable": {
                    "value": "(ymin, xmin, ymax, xmax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_boxes_left_right(boxes), lambda : boxes)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "subtract_60": {
                "variable": {
                    "value": "flipped_xmin",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "xmax",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "subtract_61": {
                "variable": {
                    "value": "flipped_xmax",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "xmin",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "concat_62": {
                "variable": {
                    "value": "flipped_boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[ymin, flipped_xmin, ymax, flipped_xmax]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_238": {
                "variable": {
                    "value": "image_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_239": {
                "variable": {
                    "value": "orig_height",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "image_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_240": {
                "variable": {
                    "value": "orig_width",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "image_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "minimum_242": {
                "variable": {
                    "value": "orig_min_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "orig_height",
                    "type": "Name",
                    "possible_values": [
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image_shape[0])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "orig_width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image_shape[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_244": {
                "variable": {
                    "value": "min_dimension",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "min_dimension",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(min_dimension, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_int32_250": {
                "variable": {
                    "value": "large_height",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.round(orig_height * large_scale_factor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_251": {
                "variable": {
                    "value": "large_width",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.round(orig_width * large_scale_factor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_252": {
                "variable": {
                    "value": "large_size",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[large_height, large_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_104": {
                "variable": {
                    "value": "keypoints",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "keypoints",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(keypoints, flip_permutation)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : keypoint_flip_horizontal(keypoints, 0.5, permutation), lambda : keypoints)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_105": {
                "variable": {
                    "value": "keypoints",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "keypoints",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(keypoints, flip_permutation)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : keypoint_flip_horizontal(keypoints, 0.5, permutation), lambda : keypoints)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "indices": {
                    "value": "flip_permutation",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "split_106": {
                "variable": {
                    "value": "(v, u)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "keypoints",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(keypoints, flip_permutation)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : keypoint_flip_horizontal(keypoints, 0.5, permutation), lambda : keypoints)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_108": {
                "variable": {
                    "value": "new_keypoints",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[v, u]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_109": {
                "variable": {
                    "value": "new_keypoints",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "new_keypoints",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([v, u], 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_keypoints, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "keypoints * [[[y_scale, x_scale]]]",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_left_right_160": {
                "variable": {
                    "value": "image_flipped",
                    "type": "Name",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_170": {
                "variable": {
                    "value": "do_a_flip_random",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_uniform([], seed=seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cond_173": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "pred": {
                    "value": "do_a_flip_random",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.greater(tf.random_uniform([], seed=seed), 0.5)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : _flip_image(image)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : image",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "constant_233": {
                "value": {
                    "value": "new_size + [num_channels]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_256": {
                "variable": {
                    "value": "orig_max_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "orig_height",
                    "type": "Name",
                    "possible_values": [
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image_shape[0])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "orig_width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image_shape[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_257": {
                "variable": {
                    "value": "max_dimension",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "max_dimension",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(max_dimension, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_int32_263": {
                "variable": {
                    "value": "small_height",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.round(orig_height * small_scale_factor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_264": {
                "variable": {
                    "value": "small_width",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.round(orig_width * small_scale_factor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_265": {
                "variable": {
                    "value": "small_size",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[small_height, small_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_266": {
                "variable": {
                    "value": "new_size",
                    "type": "Name",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.to_float(tf.reduce_max(large_size)) > max_dimension",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : small_size",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : large_size",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "stack_271": {
                "values": {
                    "value": "tf.unstack(new_size) + [num_channels]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_382": {
                "variable": {
                    "value": "y_scale",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "y_scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(y_scale, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(y_scale, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_383": {
                "variable": {
                    "value": "x_scale",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x_scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(x_scale, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x_scale, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_384": {
                "variable": {
                    "value": "(y_min, x_min, y_max, x_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "boxlist.get()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_408": {
                "variable": {
                    "value": "y_scale",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "y_scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(y_scale, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(y_scale, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_409": {
                "variable": {
                    "value": "x_scale",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x_scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(x_scale, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x_scale, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_103": {
                "name": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_167": {
                "name": {
                    "value": "RandomHorizontalFlip",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[image, boxes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_178": {
                "variable": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "pred": {
                    "value": "do_a_flip_random",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.greater(tf.random_uniform([], seed=seed), 0.5)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : _flip_boxes_left_right(boxes)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : boxes",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_184": {
                "variable": {
                    "value": "masks",
                    "type": "Name",
                    "possible_values": []
                },
                "pred": {
                    "value": "do_a_flip_random",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.greater(tf.random_uniform([], seed=seed), 0.5)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : _flip_masks_left_right(masks)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : masks",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_191": {
                "variable": {
                    "value": "keypoints",
                    "type": "Name",
                    "possible_values": []
                },
                "pred": {
                    "value": "do_a_flip_random",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.greater(tf.random_uniform([], seed=seed), 0.5)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : keypoint_flip_horizontal(keypoints, 0.5, permutation)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : keypoints",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "round_250": {
                "x": {
                    "value": "orig_height * large_scale_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_251": {
                "x": {
                    "value": "orig_width * large_scale_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_324": {
                "name": {
                    "value": "ResizeToRange",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[image, min_dimension]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_to_bounding_box_333": {
                "variable": {
                    "value": "new_image",
                    "type": "Name",
                    "possible_values": []
                },
                "image": {
                    "value": "new_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.resize_images(image, new_size[:-1], method=method, align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "tf.image.pad_to_bounding_box(new_image, 0, 0, max_dimension, max_dimension)",
                            "Call"
                        ]
                    ]
                },
                "offset_height": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "offset_width": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "target_height": {
                    "value": "max_dimension",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(max_dimension, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "target_width": {
                    "value": "max_dimension",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(max_dimension, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "expand_dims_338": {
                "variable": {
                    "value": "new_masks",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_masks_left_right(masks), lambda : masks)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_344": {
                "variable": {
                    "value": "new_masks",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "new_masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(masks, 3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(new_masks, new_size[:-1], method=tf.image.ResizeMethod.NEAREST_NEIGHBOR, align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_masks, 3)",
                            "Call"
                        ],
                        [
                            "tf.image.pad_to_bounding_box(new_masks, 0, 0, max_dimension, max_dimension)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_381": {
                "name": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_407": {
                "name": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_435": {
                "input": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_436": {
                "input": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ]
                    ]
                }
            },
            "round_263": {
                "x": {
                    "value": "orig_height * small_scale_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_264": {
                "x": {
                    "value": "orig_width * small_scale_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unstack_271": {
                "value": {
                    "value": "new_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "large_size",
                            "Name"
                        ],
                        [
                            "large_size",
                            "Name"
                        ],
                        [
                            "small_size",
                            "Name"
                        ],
                        [
                            "tf.cond(tf.to_float(tf.reduce_max(large_size)) > max_dimension, lambda : small_size, lambda : large_size)",
                            "Call"
                        ],
                        [
                            "large_size",
                            "Name"
                        ],
                        [
                            "_compute_new_static_size(image, min_dimension, max_dimension)",
                            "Call"
                        ],
                        [
                            "_compute_new_dynamic_size(image, min_dimension, max_dimension)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_to_bounding_box_346": {
                "variable": {
                    "value": "new_masks",
                    "type": "Name",
                    "possible_values": []
                },
                "image": {
                    "value": "new_masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(masks, 3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(new_masks, new_size[:-1], method=tf.image.ResizeMethod.NEAREST_NEIGHBOR, align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_masks, 3)",
                            "Call"
                        ],
                        [
                            "tf.image.pad_to_bounding_box(new_masks, 0, 0, max_dimension, max_dimension)",
                            "Call"
                        ]
                    ]
                },
                "offset_height": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "offset_width": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "target_height": {
                    "value": "max_dimension",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(max_dimension, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "target_width": {
                    "value": "max_dimension",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(max_dimension, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_391": {
                "values": {
                    "value": "[y_min, x_min, y_max, x_max]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_267": {
                "x": {
                    "value": "tf.reduce_max(large_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_267": {
                "input_tensor": {
                    "value": "large_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[large_height, large_width]",
                            "List"
                        ],
                        [
                            "tf.stack([large_height, large_width])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "efficientdet/object_detection/region_similarity_calculator.py": {
        "tensorflow": {
            "split_37": {
                "variable": {
                    "value": "(y_min, x_min, y_max, x_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "boxlist.get()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_54": {
                "variable": {
                    "value": "(y_min1, x_min1, y_max1, x_max1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "boxlist1.get()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_56": {
                "variable": {
                    "value": "(y_min2, x_min2, y_max2, x_max2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "boxlist2.get()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "minimum_58": {
                "variable": {
                    "value": "all_pairs_min_ymax",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "y_max1",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.transpose(y_max2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_59": {
                "variable": {
                    "value": "all_pairs_max_ymin",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "y_min1",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.transpose(y_min2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_60": {
                "variable": {
                    "value": "intersect_heights",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "all_pairs_min_ymax - all_pairs_max_ymin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_61": {
                "variable": {
                    "value": "all_pairs_min_xmax",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x_max1",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.transpose(x_max2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_62": {
                "variable": {
                    "value": "all_pairs_max_xmin",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x_min1",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.transpose(x_min2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_63": {
                "variable": {
                    "value": "intersect_widths",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "all_pairs_min_xmax - all_pairs_max_xmin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_36": {
                "name": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "squeeze_39": {
                "input": {
                    "value": "(y_max - y_min) * (x_max - x_min)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_53": {
                "name": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_78": {
                "name": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "where_84": {
                "condition": {
                    "value": "tf.equal(intersections, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.zeros_like(intersections)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.truediv(intersections, unions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_58": {
                "a": {
                    "value": "y_max2",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "transpose_59": {
                "a": {
                    "value": "y_min2",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "transpose_61": {
                "a": {
                    "value": "x_max2",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "transpose_62": {
                "a": {
                    "value": "x_min2",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "equal_85": {
                "x": {
                    "value": "intersections",
                    "type": "Name",
                    "possible_values": [
                        [
                            "intersection(boxlist1, boxlist2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_86": {
                "input": {
                    "value": "intersections",
                    "type": "Name",
                    "possible_values": [
                        [
                            "intersection(boxlist1, boxlist2)",
                            "Call"
                        ]
                    ]
                }
            },
            "truediv_86": {
                "x": {
                    "value": "intersections",
                    "type": "Name",
                    "possible_values": [
                        [
                            "intersection(boxlist1, boxlist2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "unions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(areas1, 1) + tf.expand_dims(areas2, 0) - intersections",
                            "BinOp"
                        ]
                    ]
                }
            },
            "name_scope_110": {
                "name": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "expand_dims_83": {
                "input": {
                    "value": "areas2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "area(boxlist2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/object_detection/shape_utils.py": {
        "tensorflow": {
            "shape_62": {
                "variable": {
                    "value": "dynamic_tensor_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "assert_equal_46": {
                "x": {
                    "value": "shape_a",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "shape_b",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "no_op_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/object_detection/target_assigner.py": {
        "tensorflow": {
            "tile_212": {
                "variable": {
                    "value": "unmatched_ignored_reg_targets",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self._default_regression_target()",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[match_results_shape[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_215": {
                "variable": {
                    "value": "reg_targets",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "matched_anchors_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "match.matched_column_indicator()",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "matched_reg_targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._box_coder.encode(matched_gt_boxlist, anchors)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "unmatched_ignored_reg_targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(self._default_regression_target(), [match_results_shape[0], 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_72": {
                "variable": {
                    "value": "self._unmatched_cls_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_127": {
                "variable": {
                    "value": "groundtruth_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.expand_dims(groundtruth_boxes.num_boxes(), 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_129": {
                "variable": {
                    "value": "groundtruth_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "groundtruth_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ones(tf.expand_dims(groundtruth_boxes.num_boxes(), 0))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(groundtruth_labels, -1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_144": {
                "variable": {
                    "value": "groundtruth_weights",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_gt_boxes]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_231": {
                "value": {
                    "value": "[self._box_coder.code_size * [0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_145": {
                "control_inputs": {
                    "value": "[unmatched_shape_assert, labels_and_box_shapes_assert]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_127": {
                "input": {
                    "value": "groundtruth_boxes.num_boxes()",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_197": {
                "shape": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_198": {
                "shape": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_204": {
                "shape": {
                    "value": "groundtruth_keypoints.get_shape()[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_205": {
                "shape": {
                    "value": "groundtruth_keypoints.get_shape()[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/object_detection/tf_example_decoder.py": {
        "tensorflow": {
            "as_string_25": {
                "input": {
                    "value": "tf.strings.to_hash_bucket_fast(parsed_tensors['image/encoded'], 2 ** 63 - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "decode_image_57": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "contents": {
                    "value": "parsed_tensors['image/encoded']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "parse_single_example_116": {
                "variable": {
                    "value": "parsed_tensors",
                    "type": "Name",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "self._keys_to_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_or_131": {
                "variable": {
                    "value": "decode_image_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(parsed_tensors['image/height'], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.equal(parsed_tensors['image/width'], -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_134": {
                "variable": {
                    "value": "image_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(image)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_136": {
                "variable": {
                    "value": "parsed_tensors[image/height]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "condition": {
                    "value": "decode_image_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.logical_or(tf.equal(parsed_tensors['image/height'], -1), tf.equal(parsed_tensors['image/width'], -1))",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "image_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "parsed_tensors['image/height']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_139": {
                "variable": {
                    "value": "parsed_tensors[image/width]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "condition": {
                    "value": "decode_image_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.logical_or(tf.equal(parsed_tensors['image/height'], -1), tf.equal(parsed_tensors['image/width'], -1))",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "image_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "parsed_tensors['image/width']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cond_142": {
                "variable": {
                    "value": "is_crowds",
                    "type": "Name",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.greater(tf.shape(parsed_tensors['image/object/is_crowd'])[0], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.cast(parsed_tensors['image/object/is_crowd'], dtype=tf.bool)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.zeros_like(parsed_tensors['image/object/class/label'], dtype=tf.bool)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "to_hash_bucket_fast_26": {
                "input": {
                    "value": "parsed_tensors['image/encoded']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_buckets": {
                    "value": "2 ** 63 - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_67": {
                "values": {
                    "value": "[ymin, xmin, ymax, xmax]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_72": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.io.decode_png(png_bytes, channels=1, dtype=tf.uint8)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_74": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.io.decode_png(png_bytes, channels=1, dtype=tf.uint8), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_81": {
                "pred": {
                    "value": "tf.greater(tf.size(masks), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.map_fn(_decode_png_mask, masks, dtype=tf.float32)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.zeros([0, height, width], dtype=tf.float32)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_91": {
                "pred": {
                    "value": "tf.greater(tf.shape(parsed_tensors['image/object/area'])[0], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : parsed_tensors['image/object/area']",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : (xmax - xmin) * (ymax - ymin)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_149": {
                "variable": {
                    "value": "source_id",
                    "type": "Name",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.greater(tf.strings.length(parsed_tensors['image/source_id']), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : parsed_tensors['image/source_id']",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : _get_source_id_from_encoded_image(parsed_tensors)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "FixedLenFeature_37": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_38": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_39": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "FixedLenFeature_40": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "VarLenFeature_41": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_42": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_43": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_44": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_45": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_46": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_47": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_82": {
                "x": {
                    "value": "tf.size(masks)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "greater_92": {
                "x": {
                    "value": "tf.shape(parsed_tensors['image/object/area'])[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "equal_132": {
                "x": {
                    "value": "parsed_tensors['image/height']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "equal_133": {
                "x": {
                    "value": "parsed_tensors['image/width']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_134": {
                "input": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.io.decode_image(parsed_tensors['image/encoded'], channels=3)",
                            "Call"
                        ],
                        [
                            "self._decode_image(parsed_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_143": {
                "x": {
                    "value": "tf.shape(parsed_tensors['image/object/is_crowd'])[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "decode_png_73": {
                "contents": {
                    "value": "png_bytes",
                    "type": "Name",
                    "possible_values": []
                },
                "channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "size_82": {
                "input": {
                    "value": "masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "parsed_tensors['image/object/mask']",
                            "Subscript"
                        ],
                        [
                            "self._decode_masks(parsed_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "map_fn_83": {
                "fn": {
                    "value": "_decode_png_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "elems": {
                    "value": "masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "parsed_tensors['image/object/mask']",
                            "Subscript"
                        ],
                        [
                            "self._decode_masks(parsed_tensors)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_84": {
                "shape": {
                    "value": "[0, height, width]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_144": {
                "x": {
                    "value": "parsed_tensors['image/object/is_crowd']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_145": {
                "input": {
                    "value": "parsed_tensors['image/object/class/label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_150": {
                "x": {
                    "value": "tf.strings.length(parsed_tensors['image/source_id'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "VarLenFeature_52": {
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_92": {
                "input": {
                    "value": "parsed_tensors['image/object/area']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_143": {
                "input": {
                    "value": "parsed_tensors['image/object/is_crowd']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "length_150": {
                "input": {
                    "value": "parsed_tensors['image/source_id']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/utils.py": {
        "tensorflow": {
            "get_collection_83": {
                "variable": {
                    "value": "model_vars",
                    "type": "Name",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "var_scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "var_scope[1:]",
                            "Subscript"
                        ],
                        [
                            "var_scope[1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_checkpoint_84": {
                "variable": {
                    "value": "reader",
                    "type": "Name",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "ckpt_path",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "get_collection_134": {
                "variable": {
                    "value": "model_vars",
                    "type": "Name",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "var_scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "var_scope[1:]",
                            "Subscript"
                        ],
                        [
                            "var_scope[1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_checkpoint_135": {
                "variable": {
                    "value": "reader",
                    "type": "Name",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "ckpt_path",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "floor_316": {
                "variable": {
                    "value": "binary_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "random_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "survival_prob",
                            "Name"
                        ],
                        [
                            "random_tensor + tf.random_uniform([batch_size, 1, 1, 1], dtype=inputs.dtype)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_387": {
                "variable": {
                    "value": "global_step_t",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "glob_405": {
                "variable": {
                    "value": "filenames",
                    "type": "Name",
                    "possible_values": []
                },
                "pattern": {
                    "value": "ckpt_path + '.*'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "generate_checkpoint_state_proto_426": {
                "variable": {
                    "value": "ckpt_state",
                    "type": "Name",
                    "possible_values": []
                },
                "save_dir": {
                    "value": "dst_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'archive')",
                            "Call"
                        ]
                    ]
                },
                "model_checkpoint_path": {
                    "value": "os.path.join(dst_dir, ckpt_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Policy_525": {
                "variable": {
                    "value": "policy",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "policy_name",
                    "type": "Name",
                    "possible_values": []
                },
                "loss_scale": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_280": {
                "variable": {
                    "value": "gamma_initializer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_initializer_282": {
                "variable": {
                    "value": "gamma_initializer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_to_collection_356": {
                "name": {
                    "value": "edsummaries",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "Pair(name, tf.reduce_mean(tensor))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_361": {
                "key": {
                    "value": "edsummaries",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exists_397": {
                "path": {
                    "value": "saved_objective_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'best_objective.txt')",
                            "Call"
                        ]
                    ]
                }
            },
            "exists_412": {
                "path": {
                    "value": "backup_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'backup')",
                            "Call"
                        ]
                    ]
                }
            },
            "exists_417": {
                "path": {
                    "value": "dst_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'archive')",
                            "Call"
                        ]
                    ]
                }
            },
            "makedirs_422": {
                "path": {
                    "value": "dst_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'archive')",
                            "Call"
                        ]
                    ]
                }
            },
            "enable_v2_dtype_behavior_522": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_549": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "ii",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bfloat16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "swish_38": {
                "x": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "trainable_variables_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_51": {
                "key": {
                    "value": "moving_vars",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_205": {
                "variable": {
                    "value": "shard_square_of_mean",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "shard_mean",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_313": {
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tpu_batch_normalization(inputs=inputs, axis=axis, momentum=momentum, epsilon=epsilon, center=True, scale=True, training=is_training_bn, use_tpu=use_tpu, gamma_initializer=gamma_initializer, name=name)",
                            "Call"
                        ],
                        [
                            "activation_fn(inputs, act_type)",
                            "Call"
                        ],
                        [
                            "tf.cast(ii, tf.bfloat16)",
                            "Call"
                        ],
                        [
                            "tf.cast(ii, tf.float16)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_320": {
                "x": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tpu_batch_normalization(inputs=inputs, axis=axis, momentum=momentum, epsilon=epsilon, center=True, scale=True, training=is_training_bn, use_tpu=use_tpu, gamma_initializer=gamma_initializer, name=name)",
                            "Call"
                        ],
                        [
                            "activation_fn(inputs, act_type)",
                            "Call"
                        ],
                        [
                            "tf.cast(ii, tf.bfloat16)",
                            "Call"
                        ],
                        [
                            "tf.cast(ii, tf.float16)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "survival_prob",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "profile_330": {
                "graph": {
                    "value": "tf.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                },
                "options": {
                    "value": "options",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.profiler.ProfileOptionBuilder.float_operation()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_386": {
                "tensor": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rmtree_413": {
                "path": {
                    "value": "backup_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'backup')",
                            "Call"
                        ]
                    ]
                }
            },
            "rename_419": {
                "src": {
                    "value": "dst_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'archive')",
                            "Call"
                        ]
                    ]
                },
                "dst": {
                    "value": "backup_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'backup')",
                            "Call"
                        ]
                    ]
                }
            },
            "copy_425": {
                "a": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": [
                        [
                            "filenames",
                            "Name"
                        ]
                    ]
                },
                "overwrite": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GFile_429": {
                "name": {
                    "value": "os.path.join(dst_dir, 'checkpoint')",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GFile_431": {
                "name": {
                    "value": "os.path.join(dst_dir, 'best_eval.txt')",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GFile_435": {
                "name": {
                    "value": "saved_objective_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'best_objective.txt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_500": {
                "variable": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "getter(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(var, tf.float16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_503": {
                "name_or_scope": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "custom_getter": {
                    "value": "_custom_getter",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cast_555": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "ii",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_replica_sum_188": {
                "x": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "group_assignment": {
                    "value": "group_assignment",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "[[x for x in range(num_shards) if x // num_shards_per_group == y] for y in range(num_groups)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "cast_188": {
                "x": {
                    "value": "num_shards_per_group",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "max(8, num_shards // 8)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "t.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_to_collection_219": {
                "name": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "u",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.updates",
                            "Attribute"
                        ],
                        [
                            "self.updates",
                            "Attribute"
                        ]
                    ]
                }
            },
            "add_to_collection_235": {
                "name": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "u",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.updates",
                            "Attribute"
                        ],
                        [
                            "self.updates",
                            "Attribute"
                        ]
                    ]
                }
            },
            "get_default_graph_331": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_356": {
                "input_tensor": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args[i][0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "create_file_writer_377": {
                "logdir": {
                    "value": "model_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params['model_dir']",
                            "Subscript"
                        ]
                    ]
                },
                "max_queue": {
                    "value": "iterations_per_loop",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params.get('iterations_per_loop', 100)",
                            "Call"
                        ]
                    ]
                }
            },
            "GFile_398": {
                "name": {
                    "value": "saved_objective_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'best_objective.txt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bfloat16_scope_550": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_40": {
                "x": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "relu_42": {
                "features": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "square_210": {
                "x": {
                    "value": "group_mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._cross_replica_average(shard_mean, num_shards_per_group)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_327": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "all_v2_summary_ops_384": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu6_44": {
                "features": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "scalar_383": {
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "summaries[i][0]",
                            "Subscript"
                        ]
                    ]
                },
                "data": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args[i][0]",
                            "Subscript"
                        ]
                    ]
                },
                "step": {
                    "value": "gs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "global_step[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "efficientdet_wrapper.py": {
        "tensorflow": {
            "stop_gradient_255": {
                "variable": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stop_gradient(boxes)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [-1, 4])",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool_260": {
                "variable": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": [
                        [
                            "crop_and_resize_nhwc(featuremap, boxes, tf.zeros([tf.shape(boxes)[0]], dtype=tf.int32), output_shape * 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(ret, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', data_format='NHWC')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_293": {
                "variable": {
                    "value": "all_rois",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "all_rois",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(all_rois, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.gather(all_rois, level_id_invert_perm)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_295": {
                "variable": {
                    "value": "level_id_perm",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "level_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "invert_permutation_296": {
                "variable": {
                    "value": "level_id_invert_perm",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "level_id_perm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(level_ids, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_297": {
                "variable": {
                    "value": "all_rois",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "all_rois",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(all_rois, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.gather(all_rois, level_id_invert_perm)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "level_id_invert_perm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.invert_permutation(level_id_perm)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_357": {
                "variable": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stop_gradient(boxes)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [-1, 4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_358": {
                "variable": {
                    "value": "classes",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(classes, dtype='int32')",
                            "Call"
                        ],
                        [
                            "tf.mod(cls_topk_indices, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_359": {
                "variable": {
                    "value": "level_indexes",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(level_indexes, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_414": {
                "variable": {
                    "value": "cls_outputs_all",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "cls_outputs_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(cls_outputs_all, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_415": {
                "variable": {
                    "value": "box_outputs_all",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "box_outputs_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(box_outputs_all, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_416": {
                "variable": {
                    "value": "level_index_all",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "level_index_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(level_index_all, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_468": {
                "variable": {
                    "value": "cls_outputs_all_after_topk",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "cls_outputs_all_after_topk",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(cls_outputs_all_after_topk, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_469": {
                "variable": {
                    "value": "box_outputs_all_after_topk",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "box_outputs_all_after_topk",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(box_outputs_all_after_topk, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_470": {
                "variable": {
                    "value": "level_index_all_after_topk",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "level_index_all_after_topk",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(level_index_all_after_topk, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_471": {
                "variable": {
                    "value": "indices_all",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "indices_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(indices_all, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_472": {
                "variable": {
                    "value": "classes_all",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "classes_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(classes_all, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_19": {
                "variable": {
                    "value": "self.image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "image",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_31": {
                "variable": {
                    "value": "self.final_boxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stop_gradient(boxes)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [-1, 4])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "final_boxes",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_32": {
                "variable": {
                    "value": "self.final_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(classes, dtype='int32')",
                            "Call"
                        ],
                        [
                            "tf.mod(cls_topk_indices, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "final_labels",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_33": {
                "variable": {
                    "value": "self.final_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "final_probs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_35": {
                "variable": {
                    "value": "self.fpn_box_feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "fpn_box_feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "multilevel_roi_align(fpn_feats, boxes, level_indexes, 7, eff_config)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "fpn_box_feat",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_60": {
                "variable": {
                    "value": "p_image",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "p_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "image",
                            "Name"
                        ],
                        [
                            "p_image[:, :, ::-1]",
                            "Subscript"
                        ],
                        [
                            "input_processor.resize_and_crop_image()",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(p_image, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_default_graph_118": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_278": {
                "variable": {
                    "value": "this_level_boxes_idxs",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(level_indexes, level)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_280": {
                "variable": {
                    "value": "this_level_boxes_idxs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "this_level_boxes_idxs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(level_indexes, level))",
                            "Call"
                        ],
                        [
                            "tf.reshape(this_level_boxes_idxs, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_282": {
                "variable": {
                    "value": "this_level_boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stop_gradient(boxes)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [-1, 4])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "this_level_boxes_idxs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(level_indexes, level))",
                            "Call"
                        ],
                        [
                            "tf.reshape(this_level_boxes_idxs, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_287": {
                "variable": {
                    "value": "box_feats",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "box_feats",
                    "type": "Name",
                    "possible_values": [
                        [
                            "roi_align(featuremap, boxes_on_featuremap, output_shape)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(box_feats, axis=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_394": {
                "variable": {
                    "value": "this_cls_outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cls_outputs[level]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[params['batch_size'], -1, num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_437": {
                "variable": {
                    "value": "cls_outputs_per_sample_reshape",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cls_outputs_per_sample",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cls_outputs_all_after_topk[0]",
                            "Subscript"
                        ],
                        [
                            "cls_outputs_all[index]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_440": {
                "variable": {
                    "value": "(_, cls_topk_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_outputs_per_sample_reshape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(cls_outputs_per_sample, [-1])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "params['max_detection_topk']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "div_444": {
                "variable": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "cls_topk_indices",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "eff_config['num_classes']",
                            "Subscript"
                        ],
                        [
                            "len(eff_config['partial_class_idxs'])",
                            "Call"
                        ],
                        [
                            "params['num_classes']",
                            "Subscript"
                        ],
                        [
                            "len(params['partial_class_idxs'])",
                            "Call"
                        ]
                    ]
                }
            },
            "mod_447": {
                "variable": {
                    "value": "classes",
                    "type": "Name",
                    "possible_values": []
                },
                "x1": {
                    "value": "cls_topk_indices",
                    "type": "Name",
                    "possible_values": []
                },
                "x2": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "eff_config['num_classes']",
                            "Subscript"
                        ],
                        [
                            "len(eff_config['partial_class_idxs'])",
                            "Call"
                        ],
                        [
                            "params['num_classes']",
                            "Subscript"
                        ],
                        [
                            "len(params['partial_class_idxs'])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_448": {
                "variable": {
                    "value": "cls_indices",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[indices, classes]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_nd_452": {
                "variable": {
                    "value": "cls_outputs_after_topk",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "cls_outputs_per_sample",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cls_outputs_all_after_topk[0]",
                            "Subscript"
                        ],
                        [
                            "cls_outputs_all[index]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "cls_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([indices, classes], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_457": {
                "variable": {
                    "value": "box_outputs_after_topk",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "box_outputs_per_sample",
                    "type": "Name",
                    "possible_values": [
                        [
                            "box_outputs_all_after_topk[0]",
                            "Subscript"
                        ],
                        [
                            "box_outputs_all[index]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.expand_dims(indices, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_461": {
                "variable": {
                    "value": "level_index_after_topk",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "level_index_per_sample",
                    "type": "Name",
                    "possible_values": [
                        [
                            "level_index_all_after_topk[0]",
                            "Subscript"
                        ],
                        [
                            "level_index_all[index]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.div(cls_topk_indices, num_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "GraphDef_124": {
                "variable": {
                    "value": "graph_def",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_130": {
                "graph_def": {
                    "value": "graph_def",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "self.var_prefix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "return_elements": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_259": {
                "shape": {
                    "value": "[tf.shape(boxes)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_359": {
                "tensor": {
                    "value": "level_indexes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(level_indexes, [-1]), dtype='int32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_400": {
                "variable": {
                    "value": "this_cls_outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "this_cls_outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(cls_outputs[level], [params['batch_size'], -1, num_classes])",
                            "Call"
                        ],
                        [
                            "tf.transpose(this_cls_outputs, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.gather(this_cls_outputs, params['partial_class_idxs'])",
                            "Call"
                        ],
                        [
                            "tf.transpose(this_cls_outputs, [1, 2, 0])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_402": {
                "variable": {
                    "value": "this_cls_outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "this_cls_outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(cls_outputs[level], [params['batch_size'], -1, num_classes])",
                            "Call"
                        ],
                        [
                            "tf.transpose(this_cls_outputs, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.gather(this_cls_outputs, params['partial_class_idxs'])",
                            "Call"
                        ],
                        [
                            "tf.transpose(this_cls_outputs, [1, 2, 0])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "params['partial_class_idxs']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_404": {
                "variable": {
                    "value": "this_cls_outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "this_cls_outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(cls_outputs[level], [params['batch_size'], -1, num_classes])",
                            "Call"
                        ],
                        [
                            "tf.transpose(this_cls_outputs, [2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.gather(this_cls_outputs, params['partial_class_idxs'])",
                            "Call"
                        ],
                        [
                            "tf.transpose(this_cls_outputs, [1, 2, 0])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GFile_123": {
                "name": {
                    "value": "modelpath",
                    "type": "Name",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "equal_278": {
                "x": {
                    "value": "level_indexes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(level_indexes, [-1]), dtype='int32')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "level",
                    "type": "Name",
                    "possible_values": [
                        [
                            "range(eff_config.min_level, eff_config.max_level + 1)",
                            "Call"
                        ],
                        [
                            "range(params['min_level'], params['max_level'] + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_391": {
                "value": {
                    "value": "level",
                    "type": "Name",
                    "possible_values": [
                        [
                            "range(eff_config.min_level, eff_config.max_level + 1)",
                            "Call"
                        ],
                        [
                            "range(params['min_level'], params['max_level'] + 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(params['batch_size'], H * W * num_anchors)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "uint8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_408": {
                "tensor": {
                    "value": "box_outputs[level]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[params['batch_size'], -1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_458": {
                "input": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.div(cls_topk_indices, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_259": {
                "input": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stop_gradient(boxes)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [-1, 4])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "main.py": {
        "tensorflow": {
            "Saver_1149": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Saver_1150": {
                "variable": {
                    "value": "bestsaver",
                    "type": "Name",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConfigProto_1154": {
                "variable": {
                    "value": "tfconfig",
                    "type": "Name",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConfigProto_1600": {
                "variable": {
                    "value": "tfconfig",
                    "type": "Name",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConfigProto_2092": {
                "variable": {
                    "value": "tfconfig",
                    "type": "Name",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "trainable_variables_2213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1161": {
                "config": {
                    "value": "tfconfig",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(allow_soft_placement=True, log_device_placement=False)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_1610": {
                "config": {
                    "value": "tfconfig",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(allow_soft_placement=True, log_device_placement=False)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_2095": {
                "config": {
                    "value": "tfconfig",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(allow_soft_placement=True, log_device_placement=False)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_1168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "tensorflow": {
            "ConfigProto_149": {
                "variable": {
                    "value": "tfconfig",
                    "type": "Name",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_default_graph_174": {
                "variable": {
                    "value": "input_graph_def",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_variables_to_constants_179": {
                "variable": {
                    "value": "output_graph_def",
                    "type": "Name",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                },
                "input_graph_def": {
                    "value": "input_graph_def",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_default_graph().as_graph_def()",
                            "Call"
                        ]
                    ]
                },
                "output_node_names": {
                    "value": "vars_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "['final_boxes', 'final_labels', 'final_probs', 'fpn_box_feat']",
                            "List"
                        ]
                    ]
                }
            },
            "get_default_graph_200": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_277": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_282": {
                "variable": {
                    "value": "self.image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "image",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_299": {
                "variable": {
                    "value": "self.gt_boxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "gt_boxes",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_300": {
                "variable": {
                    "value": "self.gt_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "gt_labels",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_311": {
                "variable": {
                    "value": "self.gt_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "gt_masks",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_338": {
                "variable": {
                    "value": "p_image",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.image",
                            "Attribute"
                        ],
                        [
                            "self.p_image",
                            "Attribute"
                        ],
                        [
                            "batch.data['imgdata'][0]",
                            "Subscript"
                        ],
                        [
                            "batch.data['imgs'][0]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(image, cv2.IMREAD_COLOR)",
                            "Call"
                        ],
                        [
                            "cv2.imread(img1, cv2.IMREAD_COLOR)",
                            "Call"
                        ],
                        [
                            "image.astype('float32')",
                            "Call"
                        ],
                        [
                            "img1",
                            "Name"
                        ],
                        [
                            "self.image",
                            "Attribute"
                        ],
                        [
                            "self.p_image",
                            "Attribute"
                        ],
                        [
                            "self.image",
                            "Attribute"
                        ],
                        [
                            "self.p_image",
                            "Attribute"
                        ],
                        [
                            "batch.data['imgdata'][0]",
                            "Subscript"
                        ],
                        [
                            "batch.data['imgs'][0]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(image, cv2.IMREAD_COLOR)",
                            "Call"
                        ],
                        [
                            "cv2.imread(img1, cv2.IMREAD_COLOR)",
                            "Call"
                        ],
                        [
                            "image.astype('float32')",
                            "Call"
                        ],
                        [
                            "img1",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_429": {
                "variable": {
                    "value": "proposal_boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "all_boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.zeros((num_all_anchors, 4), dtype='float32')",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.zeros((num_all_anchors, 4), dtype='float32')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_430": {
                "variable": {
                    "value": "proposal_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "all_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "minimum_431": {
                "variable": {
                    "value": "proposal_topk",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.size(proposal_scores)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "fpn_nms_topk",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.rpn_train_post_nms_topk if config.is_train else config.rpn_test_post_nms_topk",
                            "IfExp"
                        ],
                        [
                            "config.rpn_train_post_nms_topk if config.is_train else config.rpn_test_post_nms_topk",
                            "IfExp"
                        ]
                    ]
                }
            },
            "top_k_432": {
                "variable": {
                    "value": "(proposal_scores, topk_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "proposal_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(all_scores, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat(all_scores, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(proposal_scores, [-1])",
                            "Call"
                        ],
                        [
                            "tf.gather(proposal_scores, not_padded_box_idxs)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "proposal_topk",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.minimum(tf.size(proposal_scores), fpn_nms_topk)",
                            "Call"
                        ],
                        [
                            "tf.minimum(tf.shape(proposal_scores)[-1], fpn_nms_topk)",
                            "Call"
                        ]
                    ]
                },
                "sorted": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_434": {
                "variable": {
                    "value": "proposal_boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "proposal_boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(all_boxes, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.gather(proposal_boxes, topk_indices)",
                            "Call"
                        ],
                        [
                            "tf.concat(all_boxes, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(proposal_boxes, topk_indices, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_idxs, proposal_boxes], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(proposal_boxes, [-1, 5])",
                            "Call"
                        ],
                        [
                            "tf.gather(proposal_boxes, not_padded_box_idxs)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "topk_indices",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "sqrt_445": {
                "variable": {
                    "value": "sqrtarea",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf_area(boxes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_446": {
                "variable": {
                    "value": "level",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(4 + tf.log(sqrtarea * (1.0 / 224) + 1e-06) * (1.0 / np.log(2)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_480": {
                "variable": {
                    "value": "all_rois",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "all_rois",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(all_rois, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.gather(all_rois, level_id_invert_perm)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(all_rois, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.gather(all_rois, level_id_invert_perm)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(all_rois, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.gather(all_rois, level_id_invert_perm)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_482": {
                "variable": {
                    "value": "level_id_perm",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "level_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.where(level <= 2), tf.where(tf.equal(level, 3)), tf.where(tf.equal(level, 4)), tf.where(level >= 5)]",
                            "List"
                        ],
                        [
                            "[tf.reshape(x, [-1], name='roi_level%s_id' % (i + 2)) for (i, x) in enumerate(level_ids)]",
                            "ListComp"
                        ],
                        [
                            "[tf.where(level <= 2), tf.where(tf.equal(level, 3)), tf.where(tf.equal(level, 4)), tf.where(level >= 5)]",
                            "List"
                        ],
                        [
                            "[tf.reshape(x, [-1], name='roi_level%s_id' % (i + 2)) for (i, x) in enumerate(level_ids)]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "invert_permutation_483": {
                "variable": {
                    "value": "level_id_invert_perm",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "level_id_perm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(level_ids, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat(level_ids, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat(level_ids, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_484": {
                "variable": {
                    "value": "all_rois",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "all_rois",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(all_rois, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.gather(all_rois, level_id_invert_perm)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(all_rois, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.gather(all_rois, level_id_invert_perm)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(all_rois, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.gather(all_rois, level_id_invert_perm)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "level_id_invert_perm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.invert_permutation(level_id_perm)",
                            "Call"
                        ],
                        [
                            "tf.invert_permutation(level_id_perm)",
                            "Call"
                        ],
                        [
                            "tf.invert_permutation(level_id_perm)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_1205": {
                "variable": {
                    "value": "output_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ],
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                }
            },
            "reshape_1207": {
                "variable": {
                    "value": "ids",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.where(prob > config.result_score_thres)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_1208": {
                "variable": {
                    "value": "prob_",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ],
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                },
                "indices": {
                    "value": "ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.where(prob > config.result_score_thres), [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.where(prob > config.result_score_thres), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_1209": {
                "variable": {
                    "value": "box_",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "box",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.where(prob > config.result_score_thres), [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.where(prob > config.result_score_thres), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "non_max_suppression_1211": {
                "variable": {
                    "value": "selection",
                    "type": "Name",
                    "possible_values": []
                },
                "boxes": {
                    "value": "box_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(box, ids)",
                            "Call"
                        ],
                        [
                            "tf.gather(box, ids)",
                            "Call"
                        ]
                    ]
                },
                "scores": {
                    "value": "prob_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(prob, ids)",
                            "Call"
                        ],
                        [
                            "tf.gather(prob, ids)",
                            "Call"
                        ]
                    ]
                },
                "max_output_size": {
                    "value": "config.result_per_im",
                    "type": "Attribute",
                    "possible_values": []
                },
                "iou_threshold": {
                    "value": "config.fastrcnn_nms_iou_thres",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_int32_1214": {
                "variable": {
                    "value": "selection",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.gather(ids, selection)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sparse_to_dense_1217": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "sparse_indices": {
                    "value": "sorted_selection",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-tf.nn.top_k(-selection, k=tf.size(selection))[0]",
                            "UnaryOp"
                        ],
                        [
                            "-tf.nn.top_k(-selection, k=tf.size(selection))[0]",
                            "UnaryOp"
                        ],
                        [
                            "-tf.nn.top_k(-selection, k=tf.size(selection))[0]",
                            "UnaryOp"
                        ],
                        [
                            "-tf.nn.top_k(-selection, k=tf.size(selection))[0]",
                            "UnaryOp"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(prob)",
                            "Call"
                        ],
                        [
                            "tf.shape(prob)",
                            "Call"
                        ],
                        [
                            "tf.shape(prob)",
                            "Call"
                        ],
                        [
                            "tf.shape(prob)",
                            "Call"
                        ],
                        [
                            "tf.shape(prob)",
                            "Call"
                        ],
                        [
                            "tf.shape(prob)",
                            "Call"
                        ]
                    ]
                },
                "sparse_values": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "default_value": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_1227": {
                "variable": {
                    "value": "output_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ],
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                }
            },
            "non_max_suppression_1229": {
                "variable": {
                    "value": "selection",
                    "type": "Name",
                    "possible_values": []
                },
                "boxes": {
                    "value": "box",
                    "type": "Name",
                    "possible_values": []
                },
                "scores": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ],
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                },
                "max_output_size": {
                    "value": "config.result_per_im",
                    "type": "Attribute",
                    "possible_values": []
                },
                "iou_threshold": {
                    "value": "config.fastrcnn_nms_iou_thres",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_to_dense_1234": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "sparse_indices": {
                    "value": "sorted_selection",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-tf.nn.top_k(-selection, k=tf.size(selection))[0]",
                            "UnaryOp"
                        ],
                        [
                            "-tf.nn.top_k(-selection, k=tf.size(selection))[0]",
                            "UnaryOp"
                        ],
                        [
                            "-tf.nn.top_k(-selection, k=tf.size(selection))[0]",
                            "UnaryOp"
                        ],
                        [
                            "-tf.nn.top_k(-selection, k=tf.size(selection))[0]",
                            "UnaryOp"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(prob)",
                            "Call"
                        ],
                        [
                            "tf.shape(prob)",
                            "Call"
                        ],
                        [
                            "tf.shape(prob)",
                            "Call"
                        ],
                        [
                            "tf.shape(prob)",
                            "Call"
                        ],
                        [
                            "tf.shape(prob)",
                            "Call"
                        ],
                        [
                            "tf.shape(prob)",
                            "Call"
                        ]
                    ]
                },
                "sparse_values": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "default_value": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_1243": {
                "variable": {
                    "value": "output_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ],
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                }
            },
            "non_max_suppression_1245": {
                "variable": {
                    "value": "selection",
                    "type": "Name",
                    "possible_values": []
                },
                "boxes": {
                    "value": "box",
                    "type": "Name",
                    "possible_values": []
                },
                "scores": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ],
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                },
                "max_output_size": {
                    "value": "config.result_per_im",
                    "type": "Attribute",
                    "possible_values": []
                },
                "iou_threshold": {
                    "value": "config.fastrcnn_nms_iou_thres",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_1248": {
                "variable": {
                    "value": "selected_prob",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ],
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                },
                "indices": {
                    "value": "selection",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.non_max_suppression(box_, prob_, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(tf.gather(ids, selection))",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box, prob, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box, prob, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box_, prob_, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(tf.gather(ids, selection))",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box, prob, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box, prob, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_1249": {
                "variable": {
                    "value": "selected_box",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "box",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "selection",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.non_max_suppression(box_, prob_, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(tf.gather(ids, selection))",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box, prob, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box, prob, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box_, prob_, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(tf.gather(ids, selection))",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box, prob, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box, prob, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_1829": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_1834": {
                "variable": {
                    "value": "self.image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "image",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_1836": {
                "variable": {
                    "value": "self.is_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "is_train",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_1838": {
                "variable": {
                    "value": "self.boxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "boxes",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_1854": {
                "variable": {
                    "value": "p_image",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.image",
                            "Attribute"
                        ],
                        [
                            "self.p_image",
                            "Attribute"
                        ],
                        [
                            "batch.data['imgdata'][0]",
                            "Subscript"
                        ],
                        [
                            "batch.data['imgs'][0]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(image, cv2.IMREAD_COLOR)",
                            "Call"
                        ],
                        [
                            "cv2.imread(img1, cv2.IMREAD_COLOR)",
                            "Call"
                        ],
                        [
                            "image.astype('float32')",
                            "Call"
                        ],
                        [
                            "img1",
                            "Name"
                        ],
                        [
                            "self.image",
                            "Attribute"
                        ],
                        [
                            "self.p_image",
                            "Attribute"
                        ],
                        [
                            "self.image",
                            "Attribute"
                        ],
                        [
                            "self.p_image",
                            "Attribute"
                        ],
                        [
                            "batch.data['imgdata'][0]",
                            "Subscript"
                        ],
                        [
                            "batch.data['imgs'][0]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(image, cv2.IMREAD_COLOR)",
                            "Call"
                        ],
                        [
                            "cv2.imread(img1, cv2.IMREAD_COLOR)",
                            "Call"
                        ],
                        [
                            "image.astype('float32')",
                            "Call"
                        ],
                        [
                            "img1",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_1882": {
                "variable": {
                    "value": "sqrtarea",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf_area(boxes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_1883": {
                "variable": {
                    "value": "level",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(4 + tf.log(sqrtarea * (1.0 / 224) + 1e-06) * (1.0 / np.log(2)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_1914": {
                "variable": {
                    "value": "all_rois",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "all_rois",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(all_rois, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.gather(all_rois, level_id_invert_perm)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(all_rois, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.gather(all_rois, level_id_invert_perm)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(all_rois, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.gather(all_rois, level_id_invert_perm)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_1916": {
                "variable": {
                    "value": "level_id_perm",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "level_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.where(level <= 2), tf.where(tf.equal(level, 3)), tf.where(tf.equal(level, 4)), tf.where(level >= 5)]",
                            "List"
                        ],
                        [
                            "[tf.reshape(x, [-1], name='roi_level%s_id' % (i + 2)) for (i, x) in enumerate(level_ids)]",
                            "ListComp"
                        ],
                        [
                            "[tf.where(level <= 2), tf.where(tf.equal(level, 3)), tf.where(tf.equal(level, 4)), tf.where(level >= 5)]",
                            "List"
                        ],
                        [
                            "[tf.reshape(x, [-1], name='roi_level%s_id' % (i + 2)) for (i, x) in enumerate(level_ids)]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "invert_permutation_1917": {
                "variable": {
                    "value": "level_id_invert_perm",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "level_id_perm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(level_ids, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat(level_ids, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat(level_ids, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_1918": {
                "variable": {
                    "value": "all_rois",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "all_rois",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(all_rois, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.gather(all_rois, level_id_invert_perm)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(all_rois, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.gather(all_rois, level_id_invert_perm)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(all_rois, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.gather(all_rois, level_id_invert_perm)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "level_id_invert_perm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.invert_permutation(level_id_perm)",
                            "Call"
                        ],
                        [
                            "tf.invert_permutation(level_id_perm)",
                            "Call"
                        ],
                        [
                            "tf.invert_permutation(level_id_perm)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_1951": {
                "variable": {
                    "value": "self.final_box_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "roi_feature_fastrcnn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.multilevel_roi_align(p23456[:4], rcnn_boxes, 7)",
                            "Call"
                        ],
                        [
                            "self.multilevel_roi_align(p23456[:4], fg_sampled_boxes, 14)",
                            "Call"
                        ],
                        [
                            "self.multilevel_roi_align(p23456[:4], rcnn_boxes, 7)",
                            "Call"
                        ],
                        [
                            "self.multilevel_roi_align(p23456[:4], rcnn_boxes, 7)",
                            "Call"
                        ],
                        [
                            "self.multilevel_roi_align(p23456[:4], fg_sampled_boxes, 14)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_1980": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_1985": {
                "variable": {
                    "value": "self.image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.im_batch_size, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "image",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_2004": {
                "variable": {
                    "value": "self.gt_boxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "gt_boxes",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_2005": {
                "variable": {
                    "value": "self.gt_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "gt_labels",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_2009": {
                "variable": {
                    "value": "self.gt_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "gt_masks",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_2149": {
                "variable": {
                    "value": "(box_batch_idxs, rcnn_boxes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "rcnn_boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "proposal_boxes",
                            "Name"
                        ],
                        [
                            "self.boxes",
                            "Attribute"
                        ],
                        [
                            "proposal_boxes",
                            "Name"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[1, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_2150": {
                "variable": {
                    "value": "box_batch_idxs",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(box_batch_idxs, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_2493": {
                "variable": {
                    "value": "proposal_boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "all_boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.zeros((num_all_anchors, 4), dtype='float32')",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.zeros((num_all_anchors, 4), dtype='float32')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_2496": {
                "variable": {
                    "value": "proposal_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "all_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "minimum_2497": {
                "variable": {
                    "value": "proposal_topk",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(proposal_scores)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "fpn_nms_topk",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.rpn_train_post_nms_topk if config.is_train else config.rpn_test_post_nms_topk",
                            "IfExp"
                        ],
                        [
                            "config.rpn_train_post_nms_topk if config.is_train else config.rpn_test_post_nms_topk",
                            "IfExp"
                        ]
                    ]
                }
            },
            "top_k_2499": {
                "variable": {
                    "value": "(proposal_scores, topk_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "proposal_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(all_scores, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat(all_scores, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(proposal_scores, [-1])",
                            "Call"
                        ],
                        [
                            "tf.gather(proposal_scores, not_padded_box_idxs)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "proposal_topk",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.minimum(tf.size(proposal_scores), fpn_nms_topk)",
                            "Call"
                        ],
                        [
                            "tf.minimum(tf.shape(proposal_scores)[-1], fpn_nms_topk)",
                            "Call"
                        ]
                    ]
                },
                "sorted": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_2502": {
                "variable": {
                    "value": "proposal_boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "proposal_boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(all_boxes, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.gather(proposal_boxes, topk_indices)",
                            "Call"
                        ],
                        [
                            "tf.concat(all_boxes, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(proposal_boxes, topk_indices, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_idxs, proposal_boxes], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(proposal_boxes, [-1, 5])",
                            "Call"
                        ],
                        [
                            "tf.gather(proposal_boxes, not_padded_box_idxs)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "topk_indices",
                    "type": "Name",
                    "possible_values": []
                },
                "batch_dims": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_2508": {
                "variable": {
                    "value": "batch_idxs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(batch_idxs, [batch_size, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, num_boxes, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_2510": {
                "variable": {
                    "value": "batch_idxs",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "batch_idxs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(batch_size)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.reshape(batch_idxs, [batch_size, 1, 1]), [1, num_boxes, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(batch_idxs, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.range(batch_size)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.reshape(batch_idxs, [batch_size, 1, 1]), [1, num_boxes, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(batch_idxs, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_2512": {
                "variable": {
                    "value": "proposal_boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_idxs, proposal_boxes]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_2514": {
                "variable": {
                    "value": "proposal_boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "proposal_boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(all_boxes, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.gather(proposal_boxes, topk_indices)",
                            "Call"
                        ],
                        [
                            "tf.concat(all_boxes, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(proposal_boxes, topk_indices, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_idxs, proposal_boxes], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(proposal_boxes, [-1, 5])",
                            "Call"
                        ],
                        [
                            "tf.gather(proposal_boxes, not_padded_box_idxs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_2515": {
                "variable": {
                    "value": "proposal_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "proposal_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(all_scores, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat(all_scores, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(proposal_scores, [-1])",
                            "Call"
                        ],
                        [
                            "tf.gather(proposal_scores, not_padded_box_idxs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_2518": {
                "variable": {
                    "value": "not_padded_box_idxs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.where(area > 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_2519": {
                "variable": {
                    "value": "proposal_boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "proposal_boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(all_boxes, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.gather(proposal_boxes, topk_indices)",
                            "Call"
                        ],
                        [
                            "tf.concat(all_boxes, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(proposal_boxes, topk_indices, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_idxs, proposal_boxes], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(proposal_boxes, [-1, 5])",
                            "Call"
                        ],
                        [
                            "tf.gather(proposal_boxes, not_padded_box_idxs)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "not_padded_box_idxs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.where(area > 0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_2520": {
                "variable": {
                    "value": "proposal_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "proposal_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(all_scores, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat(all_scores, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(proposal_scores, [-1])",
                            "Call"
                        ],
                        [
                            "tf.gather(proposal_scores, not_padded_box_idxs)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "not_padded_box_idxs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.where(area > 0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "split_2527": {
                "variable": {
                    "value": "(_, x_min, y_min, x_max, y_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "decode_bbox_target(fastrcnn_box_logits / tf.constant(config.fastrcnn_bbox_reg_weights, dtype=tf.float32), anchors)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "decoded_boxes",
                            "Name"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "o_boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.reshape((-1, 2, 2))",
                            "Call"
                        ],
                        [
                            "boxes.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_idxs, self.final_boxes], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [-1, 5])",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "o_boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.reshape((-1, 2, 2))",
                            "Call"
                        ],
                        [
                            "boxes.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_2536": {
                "variable": {
                    "value": "sqrtarea",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "self.tf_area(boxes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_2537": {
                "variable": {
                    "value": "level",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(4 + tf.log(sqrtarea * (1.0 / 224) + 1e-06) * (1.0 / np.log(2)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_2581": {
                "variable": {
                    "value": "all_rois",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "all_rois",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(all_rois, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.gather(all_rois, level_id_invert_perm)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(all_rois, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.gather(all_rois, level_id_invert_perm)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(all_rois, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.gather(all_rois, level_id_invert_perm)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_2583": {
                "variable": {
                    "value": "level_id_perm",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "level_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.where(level <= 2), tf.where(tf.equal(level, 3)), tf.where(tf.equal(level, 4)), tf.where(level >= 5)]",
                            "List"
                        ],
                        [
                            "[tf.reshape(x, [-1], name='roi_level%s_id' % (i + 2)) for (i, x) in enumerate(level_ids)]",
                            "ListComp"
                        ],
                        [
                            "[tf.where(level <= 2), tf.where(tf.equal(level, 3)), tf.where(tf.equal(level, 4)), tf.where(level >= 5)]",
                            "List"
                        ],
                        [
                            "[tf.reshape(x, [-1], name='roi_level%s_id' % (i + 2)) for (i, x) in enumerate(level_ids)]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "invert_permutation_2584": {
                "variable": {
                    "value": "level_id_invert_perm",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "level_id_perm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(level_ids, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat(level_ids, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat(level_ids, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_2585": {
                "variable": {
                    "value": "all_rois",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "all_rois",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(all_rois, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.gather(all_rois, level_id_invert_perm)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(all_rois, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.gather(all_rois, level_id_invert_perm)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(all_rois, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.gather(all_rois, level_id_invert_perm)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "level_id_invert_perm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.invert_permutation(level_id_perm)",
                            "Call"
                        ],
                        [
                            "tf.invert_permutation(level_id_perm)",
                            "Call"
                        ],
                        [
                            "tf.invert_permutation(level_id_perm)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_2823": {
                "variable": {
                    "value": "output_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ],
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                }
            },
            "reshape_2825": {
                "variable": {
                    "value": "ids",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.where(prob > config.result_score_thres)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_2826": {
                "variable": {
                    "value": "prob_",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ],
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                },
                "indices": {
                    "value": "ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.where(prob > config.result_score_thres), [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.where(prob > config.result_score_thres), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_2827": {
                "variable": {
                    "value": "box_",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "box",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.where(prob > config.result_score_thres), [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.where(prob > config.result_score_thres), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "non_max_suppression_2829": {
                "variable": {
                    "value": "selection",
                    "type": "Name",
                    "possible_values": []
                },
                "boxes": {
                    "value": "box_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(box, ids)",
                            "Call"
                        ],
                        [
                            "tf.gather(box, ids)",
                            "Call"
                        ]
                    ]
                },
                "scores": {
                    "value": "prob_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(prob, ids)",
                            "Call"
                        ],
                        [
                            "tf.gather(prob, ids)",
                            "Call"
                        ]
                    ]
                },
                "max_output_size": {
                    "value": "config.result_per_im",
                    "type": "Attribute",
                    "possible_values": []
                },
                "iou_threshold": {
                    "value": "config.fastrcnn_nms_iou_thres",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_int32_2832": {
                "variable": {
                    "value": "selection",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.gather(ids, selection)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sparse_to_dense_2835": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "sparse_indices": {
                    "value": "sorted_selection",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-tf.nn.top_k(-selection, k=tf.size(selection))[0]",
                            "UnaryOp"
                        ],
                        [
                            "-tf.nn.top_k(-selection, k=tf.size(selection))[0]",
                            "UnaryOp"
                        ],
                        [
                            "-tf.nn.top_k(-selection, k=tf.size(selection))[0]",
                            "UnaryOp"
                        ],
                        [
                            "-tf.nn.top_k(-selection, k=tf.size(selection))[0]",
                            "UnaryOp"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(prob)",
                            "Call"
                        ],
                        [
                            "tf.shape(prob)",
                            "Call"
                        ],
                        [
                            "tf.shape(prob)",
                            "Call"
                        ],
                        [
                            "tf.shape(prob)",
                            "Call"
                        ],
                        [
                            "tf.shape(prob)",
                            "Call"
                        ],
                        [
                            "tf.shape(prob)",
                            "Call"
                        ]
                    ]
                },
                "sparse_values": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "default_value": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_2845": {
                "variable": {
                    "value": "output_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ],
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                }
            },
            "non_max_suppression_2847": {
                "variable": {
                    "value": "selection",
                    "type": "Name",
                    "possible_values": []
                },
                "boxes": {
                    "value": "box",
                    "type": "Name",
                    "possible_values": []
                },
                "scores": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ],
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                },
                "max_output_size": {
                    "value": "config.result_per_im",
                    "type": "Attribute",
                    "possible_values": []
                },
                "iou_threshold": {
                    "value": "config.fastrcnn_nms_iou_thres",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_to_dense_2852": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "sparse_indices": {
                    "value": "sorted_selection",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-tf.nn.top_k(-selection, k=tf.size(selection))[0]",
                            "UnaryOp"
                        ],
                        [
                            "-tf.nn.top_k(-selection, k=tf.size(selection))[0]",
                            "UnaryOp"
                        ],
                        [
                            "-tf.nn.top_k(-selection, k=tf.size(selection))[0]",
                            "UnaryOp"
                        ],
                        [
                            "-tf.nn.top_k(-selection, k=tf.size(selection))[0]",
                            "UnaryOp"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(prob)",
                            "Call"
                        ],
                        [
                            "tf.shape(prob)",
                            "Call"
                        ],
                        [
                            "tf.shape(prob)",
                            "Call"
                        ],
                        [
                            "tf.shape(prob)",
                            "Call"
                        ],
                        [
                            "tf.shape(prob)",
                            "Call"
                        ],
                        [
                            "tf.shape(prob)",
                            "Call"
                        ]
                    ]
                },
                "sparse_values": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "default_value": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_2861": {
                "variable": {
                    "value": "output_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ],
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                }
            },
            "non_max_suppression_2863": {
                "variable": {
                    "value": "selection",
                    "type": "Name",
                    "possible_values": []
                },
                "boxes": {
                    "value": "box",
                    "type": "Name",
                    "possible_values": []
                },
                "scores": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ],
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                },
                "max_output_size": {
                    "value": "config.result_per_im",
                    "type": "Attribute",
                    "possible_values": []
                },
                "iou_threshold": {
                    "value": "config.fastrcnn_nms_iou_thres",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_2866": {
                "variable": {
                    "value": "selected_prob",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ],
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                },
                "indices": {
                    "value": "selection",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.non_max_suppression(box_, prob_, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(tf.gather(ids, selection))",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box, prob, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box, prob, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box_, prob_, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(tf.gather(ids, selection))",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box, prob, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box, prob, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_2867": {
                "variable": {
                    "value": "selected_box",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "box",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "selection",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.non_max_suppression(box_, prob_, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(tf.gather(ids, selection))",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box, prob, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box, prob, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box_, prob_, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(tf.gather(ids, selection))",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box, prob, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box, prob, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_3490": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_3490": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_3493": {
                "variable": {
                    "value": "allvars",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_3530": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "var_list": {
                    "value": "restore_vars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "allvars",
                            "Name"
                        ],
                        [
                            "[v for v in variables if v.name in intersect]",
                            "ListComp"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_3542": {
                "variable": {
                    "value": "ckpt",
                    "type": "Name",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "load_from",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "config.load_from",
                            "Attribute"
                        ],
                        [
                            "config.save_dir_best",
                            "Attribute"
                        ],
                        [
                            "config.save_dir",
                            "Attribute"
                        ]
                    ]
                }
            },
            "device_100": {
                "device_name": {
                    "value": "assign_to_device('/gpu:%s' % gpuid, controller)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_124": {
                "device_name": {
                    "value": "assign_to_device('/gpu:%s' % gpuid, controller)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_151": {
                "config": {
                    "value": "tfconfig",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "GraphDef_206": {
                "variable": {
                    "value": "graph_def",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_212": {
                "graph_def": {
                    "value": "graph_def",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "self.var_prefix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "return_elements": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_285": {
                "variable": {
                    "value": "self.is_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "is_train",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_352": {
                "variable": {
                    "value": "image_mean",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[0.485, 0.456, 0.406]",
                            "List"
                        ],
                        [
                            "mean[::-1]",
                            "Subscript"
                        ],
                        [
                            "[0.485, 0.456, 0.406]",
                            "List"
                        ],
                        [
                            "mean[::-1]",
                            "Subscript"
                        ],
                        [
                            "[0.485, 0.456, 0.406]",
                            "List"
                        ],
                        [
                            "mean[::-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_353": {
                "variable": {
                    "value": "image_std",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[0.229, 0.224, 0.225]",
                            "List"
                        ],
                        [
                            "std[::-1]",
                            "Subscript"
                        ],
                        [
                            "[0.229, 0.224, 0.225]",
                            "List"
                        ],
                        [
                            "std[::-1]",
                            "Subscript"
                        ],
                        [
                            "[0.229, 0.224, 0.225]",
                            "List"
                        ],
                        [
                            "std[::-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_355": {
                "variable": {
                    "value": "p_image",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "p_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.cast(p_image, tf.float32)",
                            "Call"
                        ],
                        [
                            "p_image * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "(p_image - image_mean) / image_std",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(p_image, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.cast(p_image, tf.float32)",
                            "Call"
                        ],
                        [
                            "p_image * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "(p_image - image_mean) / image_std",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(p_image, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ],
                        [
                            "tf.cast(p_image, tf.float32)",
                            "Call"
                        ],
                        [
                            "p_image * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "(p_image - image_mean) / image_std",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(p_image, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_442": {
                "variable": {
                    "value": "(x_min, y_min, x_max, y_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "decode_bbox_target(fastrcnn_box_logits / tf.constant(config.fastrcnn_bbox_reg_weights, dtype=tf.float32), anchors)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "decoded_boxes",
                            "Name"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "o_boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.reshape((-1, 2, 2))",
                            "Call"
                        ],
                        [
                            "boxes.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_idxs, self.final_boxes], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [-1, 5])",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "o_boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.reshape((-1, 2, 2))",
                            "Call"
                        ],
                        [
                            "boxes.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_593": {
                "variable": {
                    "value": "anchors",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(rcnn_boxes, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, config.num_class - 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_599": {
                "variable": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "fastrcnn_label_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "partial_label_logits",
                            "Name"
                        ],
                        [
                            "partial_label_logits",
                            "Name"
                        ]
                    ]
                }
            },
            "transpose_601": {
                "variable": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "decode_bbox_target(fastrcnn_box_logits / tf.constant(config.fastrcnn_bbox_reg_weights, dtype=tf.float32), anchors)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "decoded_boxes",
                            "Name"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "o_boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.reshape((-1, 2, 2))",
                            "Call"
                        ],
                        [
                            "boxes.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_idxs, self.final_boxes], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [-1, 5])",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "o_boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.reshape((-1, 2, 2))",
                            "Call"
                        ],
                        [
                            "boxes.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_602": {
                "variable": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "probs[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_fn_616": {
                "variable": {
                    "value": "(so_boxes, so_scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fn": {
                    "value": "self.nms_return_boxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "elems": {
                    "value": "(so_scores, so_boxes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "(tf.float32, tf.float32)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_622": {
                "variable": {
                    "value": "so_boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "so_boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(so_boxes, [-1, 4])",
                            "Call"
                        ],
                        [
                            "tf.transpose(self.so_boxes, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_623": {
                "variable": {
                    "value": "so_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "so_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(so_scores, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_699": {
                "variable": {
                    "value": "fg_inds_wrt_sample",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.where(rcnn_labels > 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_706": {
                "variable": {
                    "value": "fg_sampled_boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "rcnn_boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "proposal_boxes",
                            "Name"
                        ],
                        [
                            "self.boxes",
                            "Attribute"
                        ],
                        [
                            "proposal_boxes",
                            "Name"
                        ]
                    ]
                },
                "indices": {
                    "value": "fg_inds_wrt_sample",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.where(rcnn_labels > 0), [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.where(rcnn_labels > 0), [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.where(rcnn_labels > 0), [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.where(rcnn_labels > 0), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_707": {
                "variable": {
                    "value": "fg_fastrcnn_box_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "fastrcnn_box_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(fastrcnn_box_logits, [1, config.num_class - 1, 1])",
                            "Call"
                        ],
                        [
                            "partial_box_logits",
                            "Name"
                        ],
                        [
                            "tf.tile(fastrcnn_box_logits, [1, config.num_class - 1, 1])",
                            "Call"
                        ],
                        [
                            "partial_box_logits",
                            "Name"
                        ]
                    ]
                },
                "indices": {
                    "value": "fg_inds_wrt_sample",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.where(rcnn_labels > 0), [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.where(rcnn_labels > 0), [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.where(rcnn_labels > 0), [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.where(rcnn_labels > 0), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_711": {
                "variable": {
                    "value": "matched_gt_boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "gt_boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.gt_boxes",
                            "Attribute"
                        ],
                        [
                            "sliced_anchor_boxes[lvl]",
                            "Subscript"
                        ],
                        [
                            "self.gt_boxes",
                            "Attribute"
                        ],
                        [
                            "sliced_anchor_boxes[lvl]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "fg_inds_wrt_gt",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "add_n_787": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[rpn_label_loss, rpn_box_loss, fastrcnn_label_loss, fastrcnn_box_loss]",
                            "List"
                        ],
                        [
                            "losses + [mrcnn_loss]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[rpn_label_loss, rpn_box_loss, fastrcnn_label_loss, fastrcnn_box_loss]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "total_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_833": {
                "variable": {
                    "value": "anchors",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(rcnn_boxes, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, num_class - 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_843": {
                "variable": {
                    "value": "label_probs",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "fastrcnn_label_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "partial_label_logits",
                            "Name"
                        ],
                        [
                            "partial_label_logits",
                            "Name"
                        ]
                    ]
                }
            },
            "gather_nd_929": {
                "variable": {
                    "value": "final_boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "decoded_boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "decode_bbox_target(fastrcnn_box_logits / tf.constant(config.fastrcnn_bbox_reg_weights, dtype=tf.float32), anchors)",
                            "Call"
                        ],
                        [
                            "clip_boxes(decoded_boxes, image_shape2d, name='fastrcnn_all_boxes')",
                            "Call"
                        ],
                        [
                            "decode_bbox_target(fastrcnn_box_logits / tf.constant(config.fastrcnn_bbox_reg_weights, dtype=tf.float32), anchors)",
                            "Call"
                        ],
                        [
                            "clip_boxes(decoded_boxes, image_shape2d, name='fastrcnn_all_boxes')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "pred_indices",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "add_932": {
                "variable": {
                    "value": "final_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "pred_indices[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_965": {
                "variable": {
                    "value": "self.final_boxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "final_boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather_nd(decoded_boxes, pred_indices)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "final_boxes",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_967": {
                "variable": {
                    "value": "self.final_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "final_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.add(pred_indices[:, 1], 1)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "final_labels",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_969": {
                "variable": {
                    "value": "self.final_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "final_probs",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "final_probs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_973": {
                "variable": {
                    "value": "self.fpn_box_feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "fpn_box_feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.multilevel_roi_align(p23456[:4], final_boxes, 7)",
                            "Call"
                        ],
                        [
                            "self.multilevel_roi_align(p23456[:4], final_boxes_with_batchidxs, 7)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "fpn_box_feat",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_1001": {
                "variable": {
                    "value": "label_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.transpose(label_logits, [0, 2, 3, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_1003": {
                "variable": {
                    "value": "box_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "box_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv2d(h, 4 * num_anchors, 1, data_format=data_format, W_init=tf.random_normal_initializer(stddev=0.01), scope='box')",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_logits, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_logits, [box_shape[2], box_shape[3], num_anchors, 4])",
                            "Call"
                        ],
                        [
                            "conv2d(h, 4 * num_anchors, kernel=1, data_format=data_format, W_init=tf.random_normal_initializer(stddev=0.01), scope='box')",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_logits, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_logits, [batch_size, box_shape[2], box_shape[3], num_anchors, 4])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_1004": {
                "variable": {
                    "value": "box_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "box_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv2d(h, 4 * num_anchors, 1, data_format=data_format, W_init=tf.random_normal_initializer(stddev=0.01), scope='box')",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_logits, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_logits, [box_shape[2], box_shape[3], num_anchors, 4])",
                            "Call"
                        ],
                        [
                            "conv2d(h, 4 * num_anchors, kernel=1, data_format=data_format, W_init=tf.random_normal_initializer(stddev=0.01), scope='box')",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_logits, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_logits, [batch_size, box_shape[2], box_shape[3], num_anchors, 4])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1006": {
                "variable": {
                    "value": "box_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv2d(h, 4 * num_anchors, 1, data_format=data_format, W_init=tf.random_normal_initializer(stddev=0.01), scope='box')",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_logits, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_logits, [box_shape[2], box_shape[3], num_anchors, 4])",
                            "Call"
                        ],
                        [
                            "conv2d(h, 4 * num_anchors, kernel=1, data_format=data_format, W_init=tf.random_normal_initializer(stddev=0.01), scope='box')",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_logits, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_logits, [batch_size, box_shape[2], box_shape[3], num_anchors, 4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[box_shape[2], box_shape[3], num_anchors, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1168": {
                "variable": {
                    "value": "box_regression",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_regression",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dense(hidden, num_class * 4, W_init=tf.random_normal_initializer(stddev=0.001), scope='box')",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_regression, (-1, num_class, 4))",
                            "Call"
                        ],
                        [
                            "box_regression[:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "dense(hidden, num_class * 4, W_init=tf.random_normal_initializer(stddev=0.001), scope='box')",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_regression, (-1, num_class, 4))",
                            "Call"
                        ],
                        [
                            "dense(hidden, num_class * 4, W_init=tf.random_normal_initializer(stddev=0.001), scope='box')",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_regression, (-1, num_class, 4))",
                            "Call"
                        ],
                        [
                            "box_regression[:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "dense(hidden, num_class * 4, W_init=tf.random_normal_initializer(stddev=0.001), scope='box')",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_regression, (-1, num_class, 4))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, num_class, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_1276": {
                "variable": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "decode_bbox_target(fastrcnn_box_logits / tf.constant(config.fastrcnn_bbox_reg_weights, dtype=tf.float32), anchors)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "decoded_boxes",
                            "Name"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "o_boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.reshape((-1, 2, 2))",
                            "Call"
                        ],
                        [
                            "boxes.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_idxs, self.final_boxes], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [-1, 5])",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "o_boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.reshape((-1, 2, 2))",
                            "Call"
                        ],
                        [
                            "boxes.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_1277": {
                "variable": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "probs[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_1290": {
                "variable": {
                    "value": "selected_indices",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.map_fn(self.nms_return_masks_no_score_filter, (probs, boxes), dtype=tf.bool, parallel_iterations=10)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(self.nms_return_masks, (probs, boxes), dtype=tf.bool, parallel_iterations=10)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(self.nms_return_masks_no_score_filter, (probs, boxes), dtype=tf.bool, parallel_iterations=10)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(self.nms_return_masks, (probs, boxes), dtype=tf.bool, parallel_iterations=10)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_1293": {
                "variable": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(fastrcnn_label_logits)",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "label_probs",
                            "Name"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.gather(probs, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(probs, masks)",
                            "Call"
                        ],
                        [
                            "tf.gather(probs, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(probs, masks)",
                            "Call"
                        ],
                        [
                            "probs[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "mask": {
                    "value": "masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.map_fn(self.nms_return_masks_no_score_filter, (probs, boxes), dtype=tf.bool, parallel_iterations=10)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(self.nms_return_masks, (probs, boxes), dtype=tf.bool, parallel_iterations=10)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(self.nms_return_masks_no_score_filter, (probs, boxes), dtype=tf.bool, parallel_iterations=10)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(self.nms_return_masks, (probs, boxes), dtype=tf.bool, parallel_iterations=10)",
                            "Call"
                        ]
                    ]
                }
            },
            "top_k_1295": {
                "variable": {
                    "value": "(topk_probs, topk_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(fastrcnn_label_logits)",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "label_probs",
                            "Name"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.gather(probs, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(probs, masks)",
                            "Call"
                        ],
                        [
                            "tf.gather(probs, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(probs, masks)",
                            "Call"
                        ],
                        [
                            "probs[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "tf.minimum(config.result_per_im, tf.size(probs))",
                    "type": "Call",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_1299": {
                "variable": {
                    "value": "filtered_selection",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "selected_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(masks)",
                            "Call"
                        ],
                        [
                            "tf.where(masks)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "topk_indices",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reverse_1300": {
                "variable": {
                    "value": "filtered_selection",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "filtered_selection",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(selected_indices, topk_indices)",
                            "Call"
                        ],
                        [
                            "tf.reverse(filtered_selection, axis=[1], name='filtered')",
                            "Call"
                        ],
                        [
                            "tf.gather(selected_indices, topk_indices)",
                            "Call"
                        ],
                        [
                            "tf.reverse(filtered_selection, axis=[1], name='filtered')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "filtered",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "size_1313": {
                "variable": {
                    "value": "num_fg",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "fg_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(rcnn_labels, fg_inds_wrt_sample)",
                            "Call"
                        ],
                        [
                            "tf.gather(labels, fg_inds)",
                            "Call"
                        ],
                        [
                            "tf.gather(rcnn_labels, fg_inds_wrt_sample)",
                            "Call"
                        ],
                        [
                            "tf.gather(labels, fg_inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_1315": {
                "variable": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.range(num_fg), tf.to_int32(fg_labels) - 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_nd_1318": {
                "variable": {
                    "value": "mask_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "mask_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.maskrcnn_up4conv_head(fg_feature, config.num_class, scope='maskrcnn')",
                            "Call"
                        ],
                        [
                            "self.maskrcnn_up4conv_head(roi_feature_maskrcnn, config.num_class, scope='maskrcnn')",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(mask_logits, indices)",
                            "Call"
                        ],
                        [
                            "self.maskrcnn_up4conv_head(fg_feature, config.num_class, scope='maskrcnn')",
                            "Call"
                        ],
                        [
                            "self.maskrcnn_up4conv_head(roi_feature_maskrcnn, config.num_class, scope='maskrcnn')",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(mask_logits, indices)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([tf.range(tf.size(final_labels)), tf.to_int32(final_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.range(num_fg), tf.to_int32(fg_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.range(num_fg), tf.to_int32(fg_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "np.where((boxes[:, 0] >= 0) & (boxes[:, 1] >= 0) & (boxes[:, 2] <= w) & (boxes[:, 3] <= h))[0]",
                            "Subscript"
                        ],
                        [
                            "tf.stack([tf.range(tf.size(final_labels)), tf.to_int32(final_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([box_batch_idxs, tf.range(K)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.range(num_fg), tf.to_int32(fg_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.range(num_fg), tf.to_int32(fg_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "np.where((boxes[:, 0] >= 0) & (boxes[:, 1] >= 0) & (boxes[:, 2] <= w) & (boxes[:, 3] <= h))[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_1319": {
                "variable": {
                    "value": "mask_probs",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "mask_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.maskrcnn_up4conv_head(fg_feature, config.num_class, scope='maskrcnn')",
                            "Call"
                        ],
                        [
                            "self.maskrcnn_up4conv_head(roi_feature_maskrcnn, config.num_class, scope='maskrcnn')",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(mask_logits, indices)",
                            "Call"
                        ],
                        [
                            "self.maskrcnn_up4conv_head(fg_feature, config.num_class, scope='maskrcnn')",
                            "Call"
                        ],
                        [
                            "self.maskrcnn_up4conv_head(roi_feature_maskrcnn, config.num_class, scope='maskrcnn')",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(mask_logits, indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_1321": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "labels": {
                    "value": "fg_target_masks",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "mask_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.maskrcnn_up4conv_head(fg_feature, config.num_class, scope='maskrcnn')",
                            "Call"
                        ],
                        [
                            "self.maskrcnn_up4conv_head(roi_feature_maskrcnn, config.num_class, scope='maskrcnn')",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(mask_logits, indices)",
                            "Call"
                        ],
                        [
                            "self.maskrcnn_up4conv_head(fg_feature, config.num_class, scope='maskrcnn')",
                            "Call"
                        ],
                        [
                            "self.maskrcnn_up4conv_head(roi_feature_maskrcnn, config.num_class, scope='maskrcnn')",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(mask_logits, indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_1323": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(labels=fg_target_masks, logits=mask_logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name='maskrcnn_loss')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(labels=fg_target_masks, logits=mask_logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name='maskrcnn_loss')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "maskrcnn_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_1354": {
                "variable": {
                    "value": "total_label_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "losses[::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "label_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_1355": {
                "variable": {
                    "value": "total_box_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "losses[1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "box_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stop_gradient_1370": {
                "variable": {
                    "value": "valid_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.not_equal(anchor_labels, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_1371": {
                "variable": {
                    "value": "pos_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.equal(anchor_labels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_1372": {
                "variable": {
                    "value": "nr_valid",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.count_nonzero(valid_mask, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "num_valid_anchor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_1374": {
                "variable": {
                    "value": "nr_pos",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.count_nonzero(pos_mask, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "num_pos_anchor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "boolean_mask_1378": {
                "variable": {
                    "value": "valid_anchor_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "anchor_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-np.ones((NA,), dtype='int32')",
                            "UnaryOp"
                        ],
                        [
                            "-np.ones((NA,), dtype='int32')",
                            "UnaryOp"
                        ]
                    ]
                },
                "mask": {
                    "value": "valid_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.not_equal(anchor_labels, -1))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(tf.not_equal(anchor_labels, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_1381": {
                "variable": {
                    "value": "valid_label_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv2d(h, num_anchors, 1, data_format=data_format, W_init=tf.random_normal_initializer(stddev=0.01), scope='class')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.transpose(label_logits, [0, 2, 3, 1]), 0)",
                            "Call"
                        ],
                        [
                            "conv2d(h, num_anchors, kernel=1, data_format=data_format, W_init=tf.random_normal_initializer(stddev=0.01), scope='class')",
                            "Call"
                        ],
                        [
                            "tf.transpose(label_logits, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "valid_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.not_equal(anchor_labels, -1))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(tf.not_equal(anchor_labels, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "where_1398": {
                "variable": {
                    "value": "label_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(nr_valid, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "placeholder",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "label_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "focal_loss(logits=valid_label_logits, labels=tf.to_float(valid_anchor_labels))",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=valid_label_logits, labels=tf.to_float(valid_anchor_labels))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(label_loss) * (1.0 / config.rpn_batch_per_im)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(nr_valid, 0), placeholder, label_loss, name='label_loss')",
                            "Call"
                        ],
                        [
                            "focal_loss(logits=label_logits, labels=tf.to_float(onehot_label))",
                            "Call"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=label_logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(label_loss, name='label_loss')",
                            "Call"
                        ],
                        [
                            "focal_loss(logits=valid_label_logits, labels=tf.to_float(valid_anchor_labels))",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=valid_label_logits, labels=tf.to_float(valid_anchor_labels))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(label_loss) * (1.0 / config.rpn_batch_per_im)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(nr_valid, 0), placeholder, label_loss, name='label_loss')",
                            "Call"
                        ],
                        [
                            "focal_loss(logits=label_logits, labels=tf.to_float(onehot_label))",
                            "Call"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=label_logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(label_loss, name='label_loss')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "label_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "boolean_mask_1402": {
                "variable": {
                    "value": "pos_anchor_boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "anchor_boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((NA, 4), dtype='float32')",
                            "Call"
                        ],
                        [
                            "np.zeros((NA, 4), dtype='float32')",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "pos_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.equal(anchor_labels, 1))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(tf.equal(anchor_labels, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_1403": {
                "variable": {
                    "value": "pos_box_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv2d(h, 4 * num_anchors, 1, data_format=data_format, W_init=tf.random_normal_initializer(stddev=0.01), scope='box')",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_logits, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_logits, [box_shape[2], box_shape[3], num_anchors, 4])",
                            "Call"
                        ],
                        [
                            "conv2d(h, 4 * num_anchors, kernel=1, data_format=data_format, W_init=tf.random_normal_initializer(stddev=0.01), scope='box')",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_logits, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_logits, [batch_size, box_shape[2], box_shape[3], num_anchors, 4])",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "pos_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.equal(anchor_labels, 1))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(tf.equal(anchor_labels, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "where_1413": {
                "variable": {
                    "value": "box_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(nr_pos, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "placeholder",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "box_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.losses.huber_loss(pos_anchor_boxes, pos_box_logits, delta=delta, reduction=tf.losses.Reduction.SUM) / delta",
                            "BinOp"
                        ],
                        [
                            "box_loss * (1.0 / config.rpn_batch_per_im)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(nr_pos, 0), placeholder, box_loss, name='box_loss')",
                            "Call"
                        ],
                        [
                            "tf.losses.huber_loss(fg_boxes, fg_box_logits, reduction=tf.losses.Reduction.SUM)",
                            "Call"
                        ],
                        [
                            "tf.truediv(box_loss, tf.to_float(tf.shape(labels)[0]), name='box_loss')",
                            "Call"
                        ],
                        [
                            "tf.losses.huber_loss(pos_anchor_boxes, pos_box_logits, delta=delta, reduction=tf.losses.Reduction.SUM) / delta",
                            "BinOp"
                        ],
                        [
                            "box_loss * (1.0 / config.rpn_batch_per_im)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(nr_pos, 0), placeholder, box_loss, name='box_loss')",
                            "Call"
                        ],
                        [
                            "tf.losses.huber_loss(fg_boxes, fg_box_logits, reduction=tf.losses.Reduction.SUM)",
                            "Call"
                        ],
                        [
                            "tf.truediv(box_loss, tf.to_float(tf.shape(labels)[0]), name='box_loss')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "box_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_1443": {
                "variable": {
                    "value": "fg_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "anno['labels']",
                            "Subscript"
                        ],
                        [
                            "anno['labels']",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "fg_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(labels > 0)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "filter_box_label(anchor_labels, 1, target_num_fg)",
                            "Call"
                        ],
                        [
                            "tf.where(labels > 0)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "filter_box_label(anchor_labels, 1, target_num_fg)",
                            "Call"
                        ]
                    ]
                }
            },
            "size_1445": {
                "variable": {
                    "value": "num_fg",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "fg_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(labels > 0)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "filter_box_label(anchor_labels, 1, target_num_fg)",
                            "Call"
                        ],
                        [
                            "tf.where(labels > 0)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "filter_box_label(anchor_labels, 1, target_num_fg)",
                            "Call"
                        ]
                    ]
                }
            },
            "huber_loss_1456": {
                "variable": {
                    "value": "box_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "labels": {
                    "value": "fg_boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "predictions": {
                    "value": "fg_box_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather_nd(fg_box_logits, indices)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fg_box_logits, [-1, 4])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(fg_box_logits, indices)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fg_box_logits, [-1, 4])",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "tf.losses.Reduction.SUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truediv_1460": {
                "variable": {
                    "value": "box_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "box_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.losses.huber_loss(pos_anchor_boxes, pos_box_logits, delta=delta, reduction=tf.losses.Reduction.SUM) / delta",
                            "BinOp"
                        ],
                        [
                            "box_loss * (1.0 / config.rpn_batch_per_im)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(nr_pos, 0), placeholder, box_loss, name='box_loss')",
                            "Call"
                        ],
                        [
                            "tf.losses.huber_loss(fg_boxes, fg_box_logits, reduction=tf.losses.Reduction.SUM)",
                            "Call"
                        ],
                        [
                            "tf.truediv(box_loss, tf.to_float(tf.shape(labels)[0]), name='box_loss')",
                            "Call"
                        ],
                        [
                            "tf.losses.huber_loss(pos_anchor_boxes, pos_box_logits, delta=delta, reduction=tf.losses.Reduction.SUM) / delta",
                            "BinOp"
                        ],
                        [
                            "box_loss * (1.0 / config.rpn_batch_per_im)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(nr_pos, 0), placeholder, box_loss, name='box_loss')",
                            "Call"
                        ],
                        [
                            "tf.losses.huber_loss(fg_boxes, fg_box_logits, reduction=tf.losses.Reduction.SUM)",
                            "Call"
                        ],
                        [
                            "tf.truediv(box_loss, tf.to_float(tf.shape(labels)[0]), name='box_loss')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.to_float(tf.shape(labels)[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "box_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_1868": {
                "variable": {
                    "value": "image_mean",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[0.485, 0.456, 0.406]",
                            "List"
                        ],
                        [
                            "mean[::-1]",
                            "Subscript"
                        ],
                        [
                            "[0.485, 0.456, 0.406]",
                            "List"
                        ],
                        [
                            "mean[::-1]",
                            "Subscript"
                        ],
                        [
                            "[0.485, 0.456, 0.406]",
                            "List"
                        ],
                        [
                            "mean[::-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1869": {
                "variable": {
                    "value": "image_std",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[0.229, 0.224, 0.225]",
                            "List"
                        ],
                        [
                            "std[::-1]",
                            "Subscript"
                        ],
                        [
                            "[0.229, 0.224, 0.225]",
                            "List"
                        ],
                        [
                            "std[::-1]",
                            "Subscript"
                        ],
                        [
                            "[0.229, 0.224, 0.225]",
                            "List"
                        ],
                        [
                            "std[::-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_1871": {
                "variable": {
                    "value": "p_image",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "p_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.cast(p_image, tf.float32)",
                            "Call"
                        ],
                        [
                            "p_image * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "(p_image - image_mean) / image_std",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(p_image, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.cast(p_image, tf.float32)",
                            "Call"
                        ],
                        [
                            "p_image * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "(p_image - image_mean) / image_std",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(p_image, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ],
                        [
                            "tf.cast(p_image, tf.float32)",
                            "Call"
                        ],
                        [
                            "p_image * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "(p_image - image_mean) / image_std",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(p_image, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_1879": {
                "variable": {
                    "value": "(x_min, y_min, x_max, y_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "decode_bbox_target(fastrcnn_box_logits / tf.constant(config.fastrcnn_bbox_reg_weights, dtype=tf.float32), anchors)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "decoded_boxes",
                            "Name"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "o_boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.reshape((-1, 2, 2))",
                            "Call"
                        ],
                        [
                            "boxes.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_idxs, self.final_boxes], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [-1, 5])",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "o_boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.reshape((-1, 2, 2))",
                            "Call"
                        ],
                        [
                            "boxes.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_1989": {
                "variable": {
                    "value": "self.is_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "is_train",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_2051": {
                "variable": {
                    "value": "image_mean",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[0.485, 0.456, 0.406]",
                            "List"
                        ],
                        [
                            "mean[::-1]",
                            "Subscript"
                        ],
                        [
                            "[0.485, 0.456, 0.406]",
                            "List"
                        ],
                        [
                            "mean[::-1]",
                            "Subscript"
                        ],
                        [
                            "[0.485, 0.456, 0.406]",
                            "List"
                        ],
                        [
                            "mean[::-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_2052": {
                "variable": {
                    "value": "image_std",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[0.229, 0.224, 0.225]",
                            "List"
                        ],
                        [
                            "std[::-1]",
                            "Subscript"
                        ],
                        [
                            "[0.229, 0.224, 0.225]",
                            "List"
                        ],
                        [
                            "std[::-1]",
                            "Subscript"
                        ],
                        [
                            "[0.229, 0.224, 0.225]",
                            "List"
                        ],
                        [
                            "std[::-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_2054": {
                "variable": {
                    "value": "p_image",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "p_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.cast(p_image, tf.float32)",
                            "Call"
                        ],
                        [
                            "p_image * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "(p_image - image_mean) / image_std",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(p_image, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.cast(p_image, tf.float32)",
                            "Call"
                        ],
                        [
                            "p_image * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "(p_image - image_mean) / image_std",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(p_image, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ],
                        [
                            "tf.cast(p_image, tf.float32)",
                            "Call"
                        ],
                        [
                            "p_image * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "(p_image - image_mean) / image_std",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(p_image, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_2172": {
                "variable": {
                    "value": "fg_inds_wrt_sample",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.where(rcnn_labels > 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_2179": {
                "variable": {
                    "value": "fg_sampled_boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "rcnn_boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "proposal_boxes",
                            "Name"
                        ],
                        [
                            "self.boxes",
                            "Attribute"
                        ],
                        [
                            "proposal_boxes",
                            "Name"
                        ]
                    ]
                },
                "indices": {
                    "value": "fg_inds_wrt_sample",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.where(rcnn_labels > 0), [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.where(rcnn_labels > 0), [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.where(rcnn_labels > 0), [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.where(rcnn_labels > 0), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_2180": {
                "variable": {
                    "value": "fg_fastrcnn_box_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "fastrcnn_box_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(fastrcnn_box_logits, [1, config.num_class - 1, 1])",
                            "Call"
                        ],
                        [
                            "partial_box_logits",
                            "Name"
                        ],
                        [
                            "tf.tile(fastrcnn_box_logits, [1, config.num_class - 1, 1])",
                            "Call"
                        ],
                        [
                            "partial_box_logits",
                            "Name"
                        ]
                    ]
                },
                "indices": {
                    "value": "fg_inds_wrt_sample",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.where(rcnn_labels > 0), [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.where(rcnn_labels > 0), [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.where(rcnn_labels > 0), [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.where(rcnn_labels > 0), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_2184": {
                "variable": {
                    "value": "matched_gt_boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "gt_boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.gt_boxes",
                            "Attribute"
                        ],
                        [
                            "sliced_anchor_boxes[lvl]",
                            "Subscript"
                        ],
                        [
                            "self.gt_boxes",
                            "Attribute"
                        ],
                        [
                            "sliced_anchor_boxes[lvl]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "fg_inds_wrt_gt",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "add_n_2243": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[rpn_label_loss, rpn_box_loss, fastrcnn_label_loss, fastrcnn_box_loss]",
                            "List"
                        ],
                        [
                            "losses + [mrcnn_loss]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[rpn_label_loss, rpn_box_loss, fastrcnn_label_loss, fastrcnn_box_loss]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "total_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_2293": {
                "variable": {
                    "value": "anchors",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(rcnn_boxes, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, num_class - 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_2303": {
                "variable": {
                    "value": "label_probs",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "fastrcnn_label_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "partial_label_logits",
                            "Name"
                        ],
                        [
                            "partial_label_logits",
                            "Name"
                        ]
                    ]
                }
            },
            "identity_2329": {
                "variable": {
                    "value": "self.final_boxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "nms_boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "final_boxes",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_2331": {
                "variable": {
                    "value": "self.final_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "nms_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nms_classes + 1",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "final_labels",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_2333": {
                "variable": {
                    "value": "self.final_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "nms_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "final_probs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_2335": {
                "variable": {
                    "value": "self.final_valid_indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_indices",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "final_valid_indices",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_2345": {
                "variable": {
                    "value": "batch_idxs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(batch_idxs, [batch_size, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, num_boxes, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_2347": {
                "variable": {
                    "value": "batch_idxs",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "batch_idxs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(batch_size)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.reshape(batch_idxs, [batch_size, 1, 1]), [1, num_boxes, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(batch_idxs, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.range(batch_size)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.reshape(batch_idxs, [batch_size, 1, 1]), [1, num_boxes, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(batch_idxs, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_2349": {
                "variable": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_idxs, self.final_boxes]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_2351": {
                "variable": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "decode_bbox_target(fastrcnn_box_logits / tf.constant(config.fastrcnn_bbox_reg_weights, dtype=tf.float32), anchors)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "decoded_boxes",
                            "Name"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "o_boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.reshape((-1, 2, 2))",
                            "Call"
                        ],
                        [
                            "boxes.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_idxs, self.final_boxes], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [-1, 5])",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "o_boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.reshape((-1, 2, 2))",
                            "Call"
                        ],
                        [
                            "boxes.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_2359": {
                "variable": {
                    "value": "valid_indice_trues",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "valid_indice_trues",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(self.final_valid_indices, axis=1) > tf.expand_dims(tf.range(num_boxes), axis=0)",
                            "Compare"
                        ],
                        [
                            "tf.reshape(valid_indice_trues, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_2367": {
                "variable": {
                    "value": "valid_box_idxs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.where(valid_indice_trues)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_2368": {
                "variable": {
                    "value": "final_boxes_with_batchidxs",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "decode_bbox_target(fastrcnn_box_logits / tf.constant(config.fastrcnn_bbox_reg_weights, dtype=tf.float32), anchors)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "decoded_boxes",
                            "Name"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "o_boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.reshape((-1, 2, 2))",
                            "Call"
                        ],
                        [
                            "boxes.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_idxs, self.final_boxes], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [-1, 5])",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "o_boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.reshape((-1, 2, 2))",
                            "Call"
                        ],
                        [
                            "boxes.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "indices": {
                    "value": "valid_box_idxs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.where(valid_indice_trues))",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_2378": {
                "variable": {
                    "value": "self.fpn_box_feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "fpn_box_feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.multilevel_roi_align(p23456[:4], final_boxes, 7)",
                            "Call"
                        ],
                        [
                            "self.multilevel_roi_align(p23456[:4], final_boxes_with_batchidxs, 7)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "fpn_box_feat",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_2529": {
                "input": {
                    "value": "(y_max - y_min) * (x_max - x_min)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_2616": {
                "variable": {
                    "value": "label_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "label_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv2d(h, num_anchors, 1, data_format=data_format, W_init=tf.random_normal_initializer(stddev=0.01), scope='class')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.transpose(label_logits, [0, 2, 3, 1]), 0)",
                            "Call"
                        ],
                        [
                            "conv2d(h, num_anchors, kernel=1, data_format=data_format, W_init=tf.random_normal_initializer(stddev=0.01), scope='class')",
                            "Call"
                        ],
                        [
                            "tf.transpose(label_logits, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_2618": {
                "variable": {
                    "value": "box_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "box_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv2d(h, 4 * num_anchors, 1, data_format=data_format, W_init=tf.random_normal_initializer(stddev=0.01), scope='box')",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_logits, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_logits, [box_shape[2], box_shape[3], num_anchors, 4])",
                            "Call"
                        ],
                        [
                            "conv2d(h, 4 * num_anchors, kernel=1, data_format=data_format, W_init=tf.random_normal_initializer(stddev=0.01), scope='box')",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_logits, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_logits, [batch_size, box_shape[2], box_shape[3], num_anchors, 4])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_2620": {
                "variable": {
                    "value": "box_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "box_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv2d(h, 4 * num_anchors, 1, data_format=data_format, W_init=tf.random_normal_initializer(stddev=0.01), scope='box')",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_logits, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_logits, [box_shape[2], box_shape[3], num_anchors, 4])",
                            "Call"
                        ],
                        [
                            "conv2d(h, 4 * num_anchors, kernel=1, data_format=data_format, W_init=tf.random_normal_initializer(stddev=0.01), scope='box')",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_logits, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_logits, [batch_size, box_shape[2], box_shape[3], num_anchors, 4])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_2623": {
                "variable": {
                    "value": "box_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv2d(h, 4 * num_anchors, 1, data_format=data_format, W_init=tf.random_normal_initializer(stddev=0.01), scope='box')",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_logits, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_logits, [box_shape[2], box_shape[3], num_anchors, 4])",
                            "Call"
                        ],
                        [
                            "conv2d(h, 4 * num_anchors, kernel=1, data_format=data_format, W_init=tf.random_normal_initializer(stddev=0.01), scope='box')",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_logits, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_logits, [batch_size, box_shape[2], box_shape[3], num_anchors, 4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, box_shape[2], box_shape[3], num_anchors, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_2786": {
                "variable": {
                    "value": "box_regression",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_regression",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dense(hidden, num_class * 4, W_init=tf.random_normal_initializer(stddev=0.001), scope='box')",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_regression, (-1, num_class, 4))",
                            "Call"
                        ],
                        [
                            "box_regression[:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "dense(hidden, num_class * 4, W_init=tf.random_normal_initializer(stddev=0.001), scope='box')",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_regression, (-1, num_class, 4))",
                            "Call"
                        ],
                        [
                            "dense(hidden, num_class * 4, W_init=tf.random_normal_initializer(stddev=0.001), scope='box')",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_regression, (-1, num_class, 4))",
                            "Call"
                        ],
                        [
                            "box_regression[:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "dense(hidden, num_class * 4, W_init=tf.random_normal_initializer(stddev=0.001), scope='box')",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_regression, (-1, num_class, 4))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, num_class, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_2894": {
                "variable": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "decode_bbox_target(fastrcnn_box_logits / tf.constant(config.fastrcnn_bbox_reg_weights, dtype=tf.float32), anchors)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "decoded_boxes",
                            "Name"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "o_boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.reshape((-1, 2, 2))",
                            "Call"
                        ],
                        [
                            "boxes.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_idxs, self.final_boxes], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [-1, 5])",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "o_boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.reshape((-1, 2, 2))",
                            "Call"
                        ],
                        [
                            "boxes.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_2895": {
                "variable": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "probs[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_2908": {
                "variable": {
                    "value": "selected_indices",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.map_fn(self.nms_return_masks_no_score_filter, (probs, boxes), dtype=tf.bool, parallel_iterations=10)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(self.nms_return_masks, (probs, boxes), dtype=tf.bool, parallel_iterations=10)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(self.nms_return_masks_no_score_filter, (probs, boxes), dtype=tf.bool, parallel_iterations=10)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(self.nms_return_masks, (probs, boxes), dtype=tf.bool, parallel_iterations=10)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_2911": {
                "variable": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(fastrcnn_label_logits)",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "label_probs",
                            "Name"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.gather(probs, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(probs, masks)",
                            "Call"
                        ],
                        [
                            "tf.gather(probs, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(probs, masks)",
                            "Call"
                        ],
                        [
                            "probs[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "mask": {
                    "value": "masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.map_fn(self.nms_return_masks_no_score_filter, (probs, boxes), dtype=tf.bool, parallel_iterations=10)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(self.nms_return_masks, (probs, boxes), dtype=tf.bool, parallel_iterations=10)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(self.nms_return_masks_no_score_filter, (probs, boxes), dtype=tf.bool, parallel_iterations=10)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(self.nms_return_masks, (probs, boxes), dtype=tf.bool, parallel_iterations=10)",
                            "Call"
                        ]
                    ]
                }
            },
            "top_k_2913": {
                "variable": {
                    "value": "(topk_probs, topk_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(fastrcnn_label_logits)",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "label_probs",
                            "Name"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.gather(probs, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(probs, masks)",
                            "Call"
                        ],
                        [
                            "tf.gather(probs, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(probs, masks)",
                            "Call"
                        ],
                        [
                            "probs[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "tf.minimum(config.result_per_im, tf.size(probs))",
                    "type": "Call",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_2917": {
                "variable": {
                    "value": "filtered_selection",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "selected_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(masks)",
                            "Call"
                        ],
                        [
                            "tf.where(masks)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "topk_indices",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reverse_2918": {
                "variable": {
                    "value": "filtered_selection",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "filtered_selection",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(selected_indices, topk_indices)",
                            "Call"
                        ],
                        [
                            "tf.reverse(filtered_selection, axis=[1], name='filtered')",
                            "Call"
                        ],
                        [
                            "tf.gather(selected_indices, topk_indices)",
                            "Call"
                        ],
                        [
                            "tf.reverse(filtered_selection, axis=[1], name='filtered')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "filtered",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_2943": {
                "variable": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[box_batch_idxs, tf.range(K)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scatter_nd_2946": {
                "variable": {
                    "value": "padded_boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([tf.range(tf.size(final_labels)), tf.to_int32(final_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.range(num_fg), tf.to_int32(fg_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.range(num_fg), tf.to_int32(fg_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "np.where((boxes[:, 0] >= 0) & (boxes[:, 1] >= 0) & (boxes[:, 2] <= w) & (boxes[:, 3] <= h))[0]",
                            "Subscript"
                        ],
                        [
                            "tf.stack([tf.range(tf.size(final_labels)), tf.to_int32(final_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([box_batch_idxs, tf.range(K)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.range(num_fg), tf.to_int32(fg_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.range(num_fg), tf.to_int32(fg_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "np.where((boxes[:, 0] >= 0) & (boxes[:, 1] >= 0) & (boxes[:, 2] <= w) & (boxes[:, 3] <= h))[0]",
                            "Subscript"
                        ]
                    ]
                },
                "updates": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "decode_bbox_target(fastrcnn_box_logits / tf.constant(config.fastrcnn_bbox_reg_weights, dtype=tf.float32), anchors)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "decoded_boxes",
                            "Name"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "o_boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.reshape((-1, 2, 2))",
                            "Call"
                        ],
                        [
                            "boxes.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_idxs, self.final_boxes], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [-1, 5])",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "o_boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.reshape((-1, 2, 2))",
                            "Call"
                        ],
                        [
                            "boxes.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, K, cat_num, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "scatter_nd_2947": {
                "variable": {
                    "value": "padded_probs",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([tf.range(tf.size(final_labels)), tf.to_int32(final_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.range(num_fg), tf.to_int32(fg_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.range(num_fg), tf.to_int32(fg_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "np.where((boxes[:, 0] >= 0) & (boxes[:, 1] >= 0) & (boxes[:, 2] <= w) & (boxes[:, 3] <= h))[0]",
                            "Subscript"
                        ],
                        [
                            "tf.stack([tf.range(tf.size(final_labels)), tf.to_int32(final_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([box_batch_idxs, tf.range(K)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.range(num_fg), tf.to_int32(fg_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.range(num_fg), tf.to_int32(fg_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "np.where((boxes[:, 0] >= 0) & (boxes[:, 1] >= 0) & (boxes[:, 2] <= w) & (boxes[:, 3] <= h))[0]",
                            "Subscript"
                        ]
                    ]
                },
                "updates": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(fastrcnn_label_logits)",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "label_probs",
                            "Name"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.gather(probs, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(probs, masks)",
                            "Call"
                        ],
                        [
                            "tf.gather(probs, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(probs, masks)",
                            "Call"
                        ],
                        [
                            "probs[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, K, cat_num)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_2950": {
                "variable": {
                    "value": "boxes_x1y1x2y2",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "padded_boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.scatter_nd(indices, boxes, (batch_size, K, cat_num, 4))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, K, cat_num, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_2951": {
                "variable": {
                    "value": "boxes_y1x1y2x2",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reverse(boxes_x1y1x2y2, axis=[4])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, K, cat_num, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "fastrcnn_nms_input_boxes",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "combined_non_max_suppression_2959": {
                "variable": {
                    "value": "(nms_boxes, nms_scores, nms_classes, valid_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "boxes": {
                    "value": "boxes_y1x1y2x2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.reverse(boxes_x1y1x2y2, axis=[4]), (batch_size, K, cat_num, 4), name='fastrcnn_nms_input_boxes')",
                            "Call"
                        ]
                    ]
                },
                "scores": {
                    "value": "padded_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.scatter_nd(indices, probs, (batch_size, K, cat_num))",
                            "Call"
                        ]
                    ]
                },
                "max_output_size_per_class": {
                    "value": "config.result_per_im",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_total_size": {
                    "value": "config.result_per_im",
                    "type": "Attribute",
                    "possible_values": []
                },
                "iou_threshold": {
                    "value": "config.fastrcnn_nms_iou_thres",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_boxes": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "pad_per_class": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_2968": {
                "variable": {
                    "value": "nms_boxes_y1x1y2x2",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "nms_boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, -1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reverse_2969": {
                "variable": {
                    "value": "nms_boxes_x1y1x2y2",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "nms_boxes_y1x1y2x2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(nms_boxes, (batch_size, -1, 2, 2))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_2971": {
                "variable": {
                    "value": "nms_boxes_x1y1x2y2",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "nms_boxes_x1y1x2y2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reverse(nms_boxes_y1x1y2x2, axis=[3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(nms_boxes_x1y1x2y2, (batch_size, -1, 4))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "size_2985": {
                "variable": {
                    "value": "num_fg",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "fg_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(rcnn_labels, fg_inds_wrt_sample)",
                            "Call"
                        ],
                        [
                            "tf.gather(labels, fg_inds)",
                            "Call"
                        ],
                        [
                            "tf.gather(rcnn_labels, fg_inds_wrt_sample)",
                            "Call"
                        ],
                        [
                            "tf.gather(labels, fg_inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_2987": {
                "variable": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.range(num_fg), tf.to_int32(fg_labels) - 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_nd_2990": {
                "variable": {
                    "value": "mask_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "mask_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.maskrcnn_up4conv_head(fg_feature, config.num_class, scope='maskrcnn')",
                            "Call"
                        ],
                        [
                            "self.maskrcnn_up4conv_head(roi_feature_maskrcnn, config.num_class, scope='maskrcnn')",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(mask_logits, indices)",
                            "Call"
                        ],
                        [
                            "self.maskrcnn_up4conv_head(fg_feature, config.num_class, scope='maskrcnn')",
                            "Call"
                        ],
                        [
                            "self.maskrcnn_up4conv_head(roi_feature_maskrcnn, config.num_class, scope='maskrcnn')",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(mask_logits, indices)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([tf.range(tf.size(final_labels)), tf.to_int32(final_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.range(num_fg), tf.to_int32(fg_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.range(num_fg), tf.to_int32(fg_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "np.where((boxes[:, 0] >= 0) & (boxes[:, 1] >= 0) & (boxes[:, 2] <= w) & (boxes[:, 3] <= h))[0]",
                            "Subscript"
                        ],
                        [
                            "tf.stack([tf.range(tf.size(final_labels)), tf.to_int32(final_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([box_batch_idxs, tf.range(K)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.range(num_fg), tf.to_int32(fg_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.range(num_fg), tf.to_int32(fg_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "np.where((boxes[:, 0] >= 0) & (boxes[:, 1] >= 0) & (boxes[:, 2] <= w) & (boxes[:, 3] <= h))[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_2991": {
                "variable": {
                    "value": "mask_probs",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "mask_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.maskrcnn_up4conv_head(fg_feature, config.num_class, scope='maskrcnn')",
                            "Call"
                        ],
                        [
                            "self.maskrcnn_up4conv_head(roi_feature_maskrcnn, config.num_class, scope='maskrcnn')",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(mask_logits, indices)",
                            "Call"
                        ],
                        [
                            "self.maskrcnn_up4conv_head(fg_feature, config.num_class, scope='maskrcnn')",
                            "Call"
                        ],
                        [
                            "self.maskrcnn_up4conv_head(roi_feature_maskrcnn, config.num_class, scope='maskrcnn')",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(mask_logits, indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_2993": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "labels": {
                    "value": "fg_target_masks",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "mask_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.maskrcnn_up4conv_head(fg_feature, config.num_class, scope='maskrcnn')",
                            "Call"
                        ],
                        [
                            "self.maskrcnn_up4conv_head(roi_feature_maskrcnn, config.num_class, scope='maskrcnn')",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(mask_logits, indices)",
                            "Call"
                        ],
                        [
                            "self.maskrcnn_up4conv_head(fg_feature, config.num_class, scope='maskrcnn')",
                            "Call"
                        ],
                        [
                            "self.maskrcnn_up4conv_head(roi_feature_maskrcnn, config.num_class, scope='maskrcnn')",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(mask_logits, indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_2995": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(labels=fg_target_masks, logits=mask_logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name='maskrcnn_loss')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(labels=fg_target_masks, logits=mask_logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, name='maskrcnn_loss')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "maskrcnn_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_3026": {
                "variable": {
                    "value": "total_label_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "losses[::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "label_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_3027": {
                "variable": {
                    "value": "total_box_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "losses[1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "box_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stop_gradient_3042": {
                "variable": {
                    "value": "valid_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.not_equal(anchor_labels, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_3043": {
                "variable": {
                    "value": "pos_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.equal(anchor_labels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_3044": {
                "variable": {
                    "value": "nr_valid",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.count_nonzero(valid_mask, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "num_valid_anchor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_3046": {
                "variable": {
                    "value": "nr_pos",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.count_nonzero(pos_mask, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "num_pos_anchor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "boolean_mask_3050": {
                "variable": {
                    "value": "valid_anchor_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "anchor_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-np.ones((NA,), dtype='int32')",
                            "UnaryOp"
                        ],
                        [
                            "-np.ones((NA,), dtype='int32')",
                            "UnaryOp"
                        ]
                    ]
                },
                "mask": {
                    "value": "valid_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.not_equal(anchor_labels, -1))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(tf.not_equal(anchor_labels, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_3053": {
                "variable": {
                    "value": "valid_label_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv2d(h, num_anchors, 1, data_format=data_format, W_init=tf.random_normal_initializer(stddev=0.01), scope='class')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.transpose(label_logits, [0, 2, 3, 1]), 0)",
                            "Call"
                        ],
                        [
                            "conv2d(h, num_anchors, kernel=1, data_format=data_format, W_init=tf.random_normal_initializer(stddev=0.01), scope='class')",
                            "Call"
                        ],
                        [
                            "tf.transpose(label_logits, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "valid_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.not_equal(anchor_labels, -1))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(tf.not_equal(anchor_labels, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "where_3070": {
                "variable": {
                    "value": "label_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(nr_valid, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "placeholder",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "label_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "focal_loss(logits=valid_label_logits, labels=tf.to_float(valid_anchor_labels))",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=valid_label_logits, labels=tf.to_float(valid_anchor_labels))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(label_loss) * (1.0 / config.rpn_batch_per_im)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(nr_valid, 0), placeholder, label_loss, name='label_loss')",
                            "Call"
                        ],
                        [
                            "focal_loss(logits=label_logits, labels=tf.to_float(onehot_label))",
                            "Call"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=label_logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(label_loss, name='label_loss')",
                            "Call"
                        ],
                        [
                            "focal_loss(logits=valid_label_logits, labels=tf.to_float(valid_anchor_labels))",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=valid_label_logits, labels=tf.to_float(valid_anchor_labels))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(label_loss) * (1.0 / config.rpn_batch_per_im)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(nr_valid, 0), placeholder, label_loss, name='label_loss')",
                            "Call"
                        ],
                        [
                            "focal_loss(logits=label_logits, labels=tf.to_float(onehot_label))",
                            "Call"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=label_logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(label_loss, name='label_loss')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "label_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "boolean_mask_3074": {
                "variable": {
                    "value": "pos_anchor_boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "anchor_boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((NA, 4), dtype='float32')",
                            "Call"
                        ],
                        [
                            "np.zeros((NA, 4), dtype='float32')",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "pos_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.equal(anchor_labels, 1))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(tf.equal(anchor_labels, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_3075": {
                "variable": {
                    "value": "pos_box_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv2d(h, 4 * num_anchors, 1, data_format=data_format, W_init=tf.random_normal_initializer(stddev=0.01), scope='box')",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_logits, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_logits, [box_shape[2], box_shape[3], num_anchors, 4])",
                            "Call"
                        ],
                        [
                            "conv2d(h, 4 * num_anchors, kernel=1, data_format=data_format, W_init=tf.random_normal_initializer(stddev=0.01), scope='box')",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_logits, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_logits, [batch_size, box_shape[2], box_shape[3], num_anchors, 4])",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "pos_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.equal(anchor_labels, 1))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(tf.equal(anchor_labels, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "where_3085": {
                "variable": {
                    "value": "box_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(nr_pos, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "placeholder",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "box_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.losses.huber_loss(pos_anchor_boxes, pos_box_logits, delta=delta, reduction=tf.losses.Reduction.SUM) / delta",
                            "BinOp"
                        ],
                        [
                            "box_loss * (1.0 / config.rpn_batch_per_im)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(nr_pos, 0), placeholder, box_loss, name='box_loss')",
                            "Call"
                        ],
                        [
                            "tf.losses.huber_loss(fg_boxes, fg_box_logits, reduction=tf.losses.Reduction.SUM)",
                            "Call"
                        ],
                        [
                            "tf.truediv(box_loss, tf.to_float(tf.shape(labels)[0]), name='box_loss')",
                            "Call"
                        ],
                        [
                            "tf.losses.huber_loss(pos_anchor_boxes, pos_box_logits, delta=delta, reduction=tf.losses.Reduction.SUM) / delta",
                            "BinOp"
                        ],
                        [
                            "box_loss * (1.0 / config.rpn_batch_per_im)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(nr_pos, 0), placeholder, box_loss, name='box_loss')",
                            "Call"
                        ],
                        [
                            "tf.losses.huber_loss(fg_boxes, fg_box_logits, reduction=tf.losses.Reduction.SUM)",
                            "Call"
                        ],
                        [
                            "tf.truediv(box_loss, tf.to_float(tf.shape(labels)[0]), name='box_loss')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "box_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_3115": {
                "variable": {
                    "value": "fg_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "anno['labels']",
                            "Subscript"
                        ],
                        [
                            "anno['labels']",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "fg_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(labels > 0)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "filter_box_label(anchor_labels, 1, target_num_fg)",
                            "Call"
                        ],
                        [
                            "tf.where(labels > 0)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "filter_box_label(anchor_labels, 1, target_num_fg)",
                            "Call"
                        ]
                    ]
                }
            },
            "size_3117": {
                "variable": {
                    "value": "num_fg",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "fg_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(labels > 0)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "filter_box_label(anchor_labels, 1, target_num_fg)",
                            "Call"
                        ],
                        [
                            "tf.where(labels > 0)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "filter_box_label(anchor_labels, 1, target_num_fg)",
                            "Call"
                        ]
                    ]
                }
            },
            "huber_loss_3128": {
                "variable": {
                    "value": "box_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "labels": {
                    "value": "fg_boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "predictions": {
                    "value": "fg_box_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather_nd(fg_box_logits, indices)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fg_box_logits, [-1, 4])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(fg_box_logits, indices)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fg_box_logits, [-1, 4])",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "tf.losses.Reduction.SUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truediv_3132": {
                "variable": {
                    "value": "box_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "box_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.losses.huber_loss(pos_anchor_boxes, pos_box_logits, delta=delta, reduction=tf.losses.Reduction.SUM) / delta",
                            "BinOp"
                        ],
                        [
                            "box_loss * (1.0 / config.rpn_batch_per_im)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(nr_pos, 0), placeholder, box_loss, name='box_loss')",
                            "Call"
                        ],
                        [
                            "tf.losses.huber_loss(fg_boxes, fg_box_logits, reduction=tf.losses.Reduction.SUM)",
                            "Call"
                        ],
                        [
                            "tf.truediv(box_loss, tf.to_float(tf.shape(labels)[0]), name='box_loss')",
                            "Call"
                        ],
                        [
                            "tf.losses.huber_loss(pos_anchor_boxes, pos_box_logits, delta=delta, reduction=tf.losses.Reduction.SUM) / delta",
                            "BinOp"
                        ],
                        [
                            "box_loss * (1.0 / config.rpn_batch_per_im)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(nr_pos, 0), placeholder, box_loss, name='box_loss')",
                            "Call"
                        ],
                        [
                            "tf.losses.huber_loss(fg_boxes, fg_box_logits, reduction=tf.losses.Reduction.SUM)",
                            "Call"
                        ],
                        [
                            "tf.truediv(box_loss, tf.to_float(tf.shape(labels)[0]), name='box_loss')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.to_float(tf.shape(labels)[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "box_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_125": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GFile_186": {
                "name": {
                    "value": "output_graph",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.pack_model_path",
                            "Attribute"
                        ]
                    ]
                },
                "mode": {
                    "value": "wb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GFile_205": {
                "name": {
                    "value": "modelpath",
                    "type": "Name",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_329": {
                "name": {
                    "value": "fpn_anchors",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_340": {
                "name": {
                    "value": "image_preprocess",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_342": {
                "variable": {
                    "value": "p_image",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "p_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.cast(p_image, tf.float32)",
                            "Call"
                        ],
                        [
                            "p_image * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "(p_image - image_mean) / image_std",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(p_image, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.cast(p_image, tf.float32)",
                            "Call"
                        ],
                        [
                            "p_image * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "(p_image - image_mean) / image_std",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(p_image, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ],
                        [
                            "tf.cast(p_image, tf.float32)",
                            "Call"
                        ],
                        [
                            "p_image * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "(p_image - image_mean) / image_std",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(p_image, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_393": {
                "variable": {
                    "value": "slice3d",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[shape2d, [-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_394": {
                "variable": {
                    "value": "slice4d",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[shape2d, [-1, -1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "slice_396": {
                "variable": {
                    "value": "anchors[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_": {
                    "value": "anchors[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "slice4d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([shape2d, [-1, -1]], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([shape2d, [-1, -1]], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "size_431": {
                "input": {
                    "value": "proposal_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(all_scores, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat(all_scores, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(proposal_scores, [-1])",
                            "Call"
                        ],
                        [
                            "tf.gather(proposal_scores, not_padded_box_idxs)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_435": {
                "input": {
                    "value": "proposal_boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(all_boxes, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.gather(proposal_boxes, topk_indices)",
                            "Call"
                        ],
                        [
                            "tf.concat(all_boxes, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(proposal_boxes, topk_indices, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_idxs, proposal_boxes], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(proposal_boxes, [-1, 5])",
                            "Call"
                        ],
                        [
                            "tf.gather(proposal_boxes, not_padded_box_idxs)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "boxes",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stop_gradient_436": {
                "input": {
                    "value": "proposal_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(all_scores, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat(all_scores, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(proposal_scores, [-1])",
                            "Call"
                        ],
                        [
                            "tf.gather(proposal_scores, not_padded_box_idxs)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scores",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_443": {
                "input": {
                    "value": "(y_max - y_min) * (x_max - x_min)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "floor_446": {
                "x": {
                    "value": "4 + tf.log(sqrtarea * (1.0 / 224) + 1e-06) * (1.0 / np.log(2))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_450": {
                "condition": {
                    "value": "level <= 2",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_451": {
                "condition": {
                    "value": "tf.equal(level, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_452": {
                "condition": {
                    "value": "tf.equal(level, 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_453": {
                "condition": {
                    "value": "level >= 5",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reshape_455": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'roi_level%s_id' % (i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_460": {
                "params": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "decode_bbox_target(fastrcnn_box_logits / tf.constant(config.fastrcnn_bbox_reg_weights, dtype=tf.float32), anchors)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "decoded_boxes",
                            "Name"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "o_boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.reshape((-1, 2, 2))",
                            "Call"
                        ],
                        [
                            "boxes.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_idxs, self.final_boxes], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [-1, 5])",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "o_boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.reshape((-1, 2, 2))",
                            "Call"
                        ],
                        [
                            "boxes.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "indices": {
                    "value": "ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.where(prob > config.result_score_thres), [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.where(prob > config.result_score_thres), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_491": {
                "input": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.image",
                            "Attribute"
                        ],
                        [
                            "self.p_image",
                            "Attribute"
                        ],
                        [
                            "batch.data['imgdata'][0]",
                            "Subscript"
                        ],
                        [
                            "batch.data['imgs'][0]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(image, cv2.IMREAD_COLOR)",
                            "Call"
                        ],
                        [
                            "cv2.imread(img1, cv2.IMREAD_COLOR)",
                            "Call"
                        ],
                        [
                            "image.astype('float32')",
                            "Call"
                        ],
                        [
                            "img1",
                            "Name"
                        ],
                        [
                            "self.image",
                            "Attribute"
                        ],
                        [
                            "self.p_image",
                            "Attribute"
                        ],
                        [
                            "self.image",
                            "Attribute"
                        ],
                        [
                            "self.p_image",
                            "Attribute"
                        ],
                        [
                            "batch.data['imgdata'][0]",
                            "Subscript"
                        ],
                        [
                            "batch.data['imgs'][0]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(image, cv2.IMREAD_COLOR)",
                            "Call"
                        ],
                        [
                            "cv2.imread(img1, cv2.IMREAD_COLOR)",
                            "Call"
                        ],
                        [
                            "image.astype('float32')",
                            "Call"
                        ],
                        [
                            "img1",
                            "Name"
                        ]
                    ]
                }
            },
            "transpose_517": {
                "a": {
                    "value": "p23456[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_640": {
                "variable": {
                    "value": "hidden",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hidden",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dense(so_feature, dim, W_init=initializer, activation=tf.nn.relu, scope='fc6')",
                            "Call"
                        ],
                        [
                            "dense(hidden, dim, W_init=initializer, activation=tf.nn.relu, scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden, [len(config.small_objects), -1, dim])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(hidden)",
                            "Call"
                        ],
                        [
                            "dense(feature, dim, W_init=initializer, activation=tf.nn.relu, scope='fc6')",
                            "Call"
                        ],
                        [
                            "dense(hidden, dim, W_init=initializer, activation=tf.nn.relu, scope='fc7')",
                            "Call"
                        ],
                        [
                            "self.conv_frcnn_head(feature, dim, config.conv_frcnn_head_dim, num_conv=4, use_gn=config.use_gn)",
                            "Call"
                        ],
                        [
                            "dense(feature, dim, W_init=initializer, activation=tf.nn.relu, scope='fc6')",
                            "Call"
                        ],
                        [
                            "hidden + relation_network(hidden, boxes, group=16, geo_feat_dim=64, scope='RM_r1')",
                            "BinOp"
                        ],
                        [
                            "dense(hidden, dim, W_init=initializer, activation=tf.nn.relu, scope='fc7')",
                            "Call"
                        ],
                        [
                            "hidden + relation_network(hidden, boxes, group=16, geo_feat_dim=64, scope='RM_r2')",
                            "BinOp"
                        ],
                        [
                            "dense(feature, dim, W_init=initializer, activation=tf.nn.relu, scope='fc6')",
                            "Call"
                        ],
                        [
                            "dense(hidden, dim, W_init=initializer, activation=tf.nn.relu, scope='fc7')",
                            "Call"
                        ],
                        [
                            "hidden + attended_feat",
                            "BinOp"
                        ],
                        [
                            "self.conv_frcnn_head(feature, dim, config.conv_frcnn_head_dim, num_conv=4, use_gn=config.use_gn)",
                            "Call"
                        ],
                        [
                            "dense(feature, dim, W_init=initializer, activation=tf.nn.relu, scope='fc6')",
                            "Call"
                        ],
                        [
                            "hidden + relation_network(hidden, boxes, group=16, geo_feat_dim=64, scope='RM_r1')",
                            "BinOp"
                        ],
                        [
                            "dense(hidden, dim, W_init=initializer, activation=tf.nn.relu, scope='fc7')",
                            "Call"
                        ],
                        [
                            "hidden + relation_network(hidden, boxes, group=16, geo_feat_dim=64, scope='RM_r2')",
                            "BinOp"
                        ],
                        [
                            "dense(feature, dim, W_init=initializer, activation=tf.nn.relu, scope='fc6')",
                            "Call"
                        ],
                        [
                            "dense(hidden, dim, W_init=initializer, activation=tf.nn.relu, scope='fc7')",
                            "Call"
                        ],
                        [
                            "dense(feature, dim, W_init=initializer, activation=tf.nn.relu, scope='fc6')",
                            "Call"
                        ],
                        [
                            "dense(hidden, dim, W_init=initializer, activation=tf.nn.relu, scope='fc7')",
                            "Call"
                        ],
                        [
                            "self.conv_frcnn_head(feature, dim, config.conv_frcnn_head_dim, num_conv=4, use_gn=config.use_gn)",
                            "Call"
                        ],
                        [
                            "dense(feature, dim, W_init=initializer, activation=tf.nn.relu, scope='fc6')",
                            "Call"
                        ],
                        [
                            "hidden + relation_network(hidden, boxes, group=16, geo_feat_dim=64, scope='RM_r1')",
                            "BinOp"
                        ],
                        [
                            "dense(hidden, dim, W_init=initializer, activation=tf.nn.relu, scope='fc7')",
                            "Call"
                        ],
                        [
                            "hidden + relation_network(hidden, boxes, group=16, geo_feat_dim=64, scope='RM_r2')",
                            "BinOp"
                        ],
                        [
                            "dense(feature, dim, W_init=initializer, activation=tf.nn.relu, scope='fc6')",
                            "Call"
                        ],
                        [
                            "dense(hidden, dim, W_init=initializer, activation=tf.nn.relu, scope='fc7')",
                            "Call"
                        ],
                        [
                            "hidden + attended_feat",
                            "BinOp"
                        ],
                        [
                            "self.conv_frcnn_head(feature, dim, config.conv_frcnn_head_dim, num_conv=4, use_gn=config.use_gn)",
                            "Call"
                        ],
                        [
                            "dense(feature, dim, W_init=initializer, activation=tf.nn.relu, scope='fc6')",
                            "Call"
                        ],
                        [
                            "hidden + relation_network(hidden, boxes, group=16, geo_feat_dim=64, scope='RM_r1')",
                            "BinOp"
                        ],
                        [
                            "dense(hidden, dim, W_init=initializer, activation=tf.nn.relu, scope='fc7')",
                            "Call"
                        ],
                        [
                            "hidden + relation_network(hidden, boxes, group=16, geo_feat_dim=64, scope='RM_r2')",
                            "BinOp"
                        ],
                        [
                            "dense(feature, dim, W_init=initializer, activation=tf.nn.relu, scope='fc6')",
                            "Call"
                        ],
                        [
                            "dense(hidden, dim, W_init=initializer, activation=tf.nn.relu, scope='fc7')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[len(config.small_objects), -1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_691": {
                "variable": {
                    "value": "so_label_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "so_label_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(new_label_logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack(so_label_logits, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_743": {
                "variable": {
                    "value": "so_label_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "labels": {
                    "value": "so_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_so_labels(self.so_boxes, self.so_gt_boxes, self.so_gt_labels, config=config)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "so_label_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(new_label_logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack(so_label_logits, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_746": {
                "variable": {
                    "value": "so_label_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "so_label_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=so_labels, logits=so_label_logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(so_label_loss, name='label_loss')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "label_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_754": {
                "variable": {
                    "value": "fg_inds_wrt_sample",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.where(rcnn_labels > 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_755": {
                "variable": {
                    "value": "fg_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "rcnn_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "fg_inds_wrt_sample",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.where(rcnn_labels > 0), [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.where(rcnn_labels > 0), [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.where(rcnn_labels > 0), [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.where(rcnn_labels > 0), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_768": {
                "variable": {
                    "value": "gt_mask_for_fg",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "gt_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.gt_mask",
                            "Attribute"
                        ],
                        [
                            "self.gt_mask",
                            "Attribute"
                        ]
                    ]
                },
                "indices": {
                    "value": "fg_inds_wrt_gt",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "squeeze_774": {
                "variable": {
                    "value": "target_masks_for_fg",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "target_masks_for_fg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "crop_and_resize(tf.expand_dims(gt_masks, 1), fg_sampled_boxes, fg_inds_wrt_gt, 28, pad_border=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(target_masks_for_fg, 1)",
                            "Call"
                        ],
                        [
                            "crop_and_resize(tf.expand_dims(gt_masks, 1), fg_sampled_boxes, fg_inds_wrt_gt, 28, pad_border=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(target_masks_for_fg, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_801": {
                "variable": {
                    "value": "fastrcnn_box_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "fastrcnn_box_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(fastrcnn_box_logits, [1, config.num_class - 1, 1])",
                            "Call"
                        ],
                        [
                            "partial_box_logits",
                            "Name"
                        ],
                        [
                            "tf.tile(fastrcnn_box_logits, [1, config.num_class - 1, 1])",
                            "Call"
                        ],
                        [
                            "partial_box_logits",
                            "Name"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, config.num_class - 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_813": {
                "variable": {
                    "value": "label_logits_t",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "fastrcnn_label_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "partial_label_logits",
                            "Name"
                        ],
                        [
                            "partial_label_logits",
                            "Name"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_814": {
                "variable": {
                    "value": "box_logits_t",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "fastrcnn_box_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(fastrcnn_box_logits, [1, config.num_class - 1, 1])",
                            "Call"
                        ],
                        [
                            "partial_box_logits",
                            "Name"
                        ],
                        [
                            "tf.tile(fastrcnn_box_logits, [1, config.num_class - 1, 1])",
                            "Call"
                        ],
                        [
                            "partial_box_logits",
                            "Name"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_817": {
                "variable": {
                    "value": "partial_label_logits_t",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "label_logits_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(fastrcnn_label_logits, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(fastrcnn_label_logits, [1, 0])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "[0] + needed_object_classids",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_820": {
                "variable": {
                    "value": "partial_box_logits_t",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "box_logits_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(fastrcnn_box_logits, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(fastrcnn_box_logits, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "needed_object_classids_minus_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[o - 1 for o in needed_object_classids]",
                            "ListComp"
                        ],
                        [
                            "[o - 1 for o in needed_object_classids]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "transpose_823": {
                "variable": {
                    "value": "partial_label_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "partial_label_logits_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(label_logits_t, [0] + needed_object_classids)",
                            "Call"
                        ],
                        [
                            "tf.gather(label_logits_t, [0] + needed_object_classids)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_824": {
                "variable": {
                    "value": "partial_box_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "partial_box_logits_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(box_logits_t, needed_object_classids_minus_1)",
                            "Call"
                        ],
                        [
                            "tf.gather(box_logits_t, needed_object_classids_minus_1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_877": {
                "variable": {
                    "value": "so_label_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "new_label_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_880": {
                "variable": {
                    "value": "so_boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "self.so_boxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_nd_888": {
                "variable": {
                    "value": "so_final_boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "so_decoded_boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "clip_boxes(so_boxes, image_shape2d, name='so_all_boxes')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "so_pred_indices",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "so_final_boxes",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_891": {
                "variable": {
                    "value": "so_final_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "so_pred_indices[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "so_final_labels",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_907": {
                "variable": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "decode_bbox_target(fastrcnn_box_logits / tf.constant(config.fastrcnn_bbox_reg_weights, dtype=tf.float32), anchors)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "decoded_boxes",
                            "Name"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "o_boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.reshape((-1, 2, 2))",
                            "Call"
                        ],
                        [
                            "boxes.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_idxs, self.final_boxes], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [-1, 5])",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "o_boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.reshape((-1, 2, 2))",
                            "Call"
                        ],
                        [
                            "boxes.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_908": {
                "variable": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "probs[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_954": {
                "variable": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.range(tf.size(final_labels)), tf.to_int32(final_labels) - 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_nd_958": {
                "variable": {
                    "value": "final_mask_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "mask_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.maskrcnn_up4conv_head(fg_feature, config.num_class, scope='maskrcnn')",
                            "Call"
                        ],
                        [
                            "self.maskrcnn_up4conv_head(roi_feature_maskrcnn, config.num_class, scope='maskrcnn')",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(mask_logits, indices)",
                            "Call"
                        ],
                        [
                            "self.maskrcnn_up4conv_head(fg_feature, config.num_class, scope='maskrcnn')",
                            "Call"
                        ],
                        [
                            "self.maskrcnn_up4conv_head(roi_feature_maskrcnn, config.num_class, scope='maskrcnn')",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(mask_logits, indices)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([tf.range(tf.size(final_labels)), tf.to_int32(final_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.range(num_fg), tf.to_int32(fg_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.range(num_fg), tf.to_int32(fg_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "np.where((boxes[:, 0] >= 0) & (boxes[:, 1] >= 0) & (boxes[:, 2] <= w) & (boxes[:, 3] <= h))[0]",
                            "Subscript"
                        ],
                        [
                            "tf.stack([tf.range(tf.size(final_labels)), tf.to_int32(final_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([box_batch_idxs, tf.range(K)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.range(num_fg), tf.to_int32(fg_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.range(num_fg), tf.to_int32(fg_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "np.where((boxes[:, 0] >= 0) & (boxes[:, 1] >= 0) & (boxes[:, 2] <= w) & (boxes[:, 3] <= h))[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_959": {
                "variable": {
                    "value": "final_masks",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "final_mask_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather_nd(mask_logits, indices)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(mask_logits, indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_981": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_1017": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_1036": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "transpose_1069": {
                "variable": {
                    "value": "feature",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "feature",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(feature, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(feature, [-1, H * W, feat_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(feature, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(feature, [-1, H * W, feat_dim])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1078": {
                "variable": {
                    "value": "feature",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "feature",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(feature, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(feature, [-1, H * W, feat_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(feature, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(feature, [-1, H * W, feat_dim])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, H * W, feat_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1079": {
                "variable": {
                    "value": "attention",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attention",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv2d(feature, 1, kernel=3, padding='SAME', stride=1, activation=tf.nn.softmax, use_bias=True, data_format='NHWC', W_init=initializer, scope='attention')",
                            "Call"
                        ],
                        [
                            "tf.reshape(attention, [-1, H * W, 1])",
                            "Call"
                        ],
                        [
                            "conv2d(feature, 1, kernel=3, padding='SAME', stride=1, activation=tf.nn.softmax, use_bias=True, data_format='NHWC', W_init=initializer, scope='attention')",
                            "Call"
                        ],
                        [
                            "tf.reshape(attention, [-1, H * W, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, H * W, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_1081": {
                "variable": {
                    "value": "attended",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "feature * attention",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_1102": {
                "variable": {
                    "value": "box_regression",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_regression",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dense(hidden, num_class * 4, W_init=tf.random_normal_initializer(stddev=0.001), scope='box')",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_regression, (-1, num_class, 4))",
                            "Call"
                        ],
                        [
                            "box_regression[:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "dense(hidden, num_class * 4, W_init=tf.random_normal_initializer(stddev=0.001), scope='box')",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_regression, (-1, num_class, 4))",
                            "Call"
                        ],
                        [
                            "dense(hidden, num_class * 4, W_init=tf.random_normal_initializer(stddev=0.001), scope='box')",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_regression, (-1, num_class, 4))",
                            "Call"
                        ],
                        [
                            "box_regression[:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "dense(hidden, num_class * 4, W_init=tf.random_normal_initializer(stddev=0.001), scope='box')",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_regression, (-1, num_class, 4))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, num_class, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "variable_scope_1132": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_1158": {
                "name_or_scope": {
                    "value": "outputs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_1178": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "where_1207": {
                "condition": {
                    "value": "prob > config.result_score_thres",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "gather_1214": {
                "params": {
                    "value": "ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.where(prob > config.result_score_thres), [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.where(prob > config.result_score_thres), [-1])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "selection",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.non_max_suppression(box_, prob_, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(tf.gather(ids, selection))",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box, prob, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box, prob, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box_, prob_, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(tf.gather(ids, selection))",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box, prob, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box, prob, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_1260": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "argmax_1265": {
                "variable": {
                    "value": "box_classes",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(fastrcnn_label_logits)",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "label_probs",
                            "Name"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.gather(probs, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(probs, masks)",
                            "Call"
                        ],
                        [
                            "tf.gather(probs, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(probs, masks)",
                            "Call"
                        ],
                        [
                            "probs[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_1267": {
                "variable": {
                    "value": "nonBG_box_indices",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.where(tf.greater(box_classes, 0))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_1269": {
                "variable": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(fastrcnn_label_logits)",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "label_probs",
                            "Name"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.gather(probs, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(probs, masks)",
                            "Call"
                        ],
                        [
                            "tf.gather(probs, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(probs, masks)",
                            "Call"
                        ],
                        [
                            "probs[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "nonBG_box_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.where(tf.greater(box_classes, 0)), [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.where(tf.greater(box_classes, 0)), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_1270": {
                "variable": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "decode_bbox_target(fastrcnn_box_logits / tf.constant(config.fastrcnn_bbox_reg_weights, dtype=tf.float32), anchors)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "decoded_boxes",
                            "Name"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "o_boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.reshape((-1, 2, 2))",
                            "Call"
                        ],
                        [
                            "boxes.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_idxs, self.final_boxes], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [-1, 5])",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "o_boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.reshape((-1, 2, 2))",
                            "Call"
                        ],
                        [
                            "boxes.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "indices": {
                    "value": "nonBG_box_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.where(tf.greater(box_classes, 0)), [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.where(tf.greater(box_classes, 0)), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "map_fn_1282": {
                "variable": {
                    "value": "masks",
                    "type": "Name",
                    "possible_values": []
                },
                "fn": {
                    "value": "self.nms_return_masks_no_score_filter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "elems": {
                    "value": "(probs, boxes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "map_fn_1286": {
                "variable": {
                    "value": "masks",
                    "type": "Name",
                    "possible_values": []
                },
                "fn": {
                    "value": "self.nms_return_masks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "elems": {
                    "value": "(probs, boxes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_1309": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_1340": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_1363": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_1388": {
                "variable": {
                    "value": "valid_label_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "valid_label_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.boolean_mask(label_logits, valid_mask)",
                            "Call"
                        ],
                        [
                            "tf.reshape(valid_label_logits, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(label_logits, valid_mask)",
                            "Call"
                        ],
                        [
                            "tf.reshape(valid_label_logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1389": {
                "variable": {
                    "value": "valid_anchor_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "valid_anchor_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.boolean_mask(anchor_labels, valid_mask)",
                            "Call"
                        ],
                        [
                            "tf.reshape(valid_anchor_labels, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(anchor_labels, valid_mask)",
                            "Call"
                        ],
                        [
                            "tf.reshape(valid_anchor_labels, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_1393": {
                "variable": {
                    "value": "label_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "valid_label_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.boolean_mask(label_logits, valid_mask)",
                            "Call"
                        ],
                        [
                            "tf.reshape(valid_label_logits, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(label_logits, valid_mask)",
                            "Call"
                        ],
                        [
                            "tf.reshape(valid_label_logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.to_float(valid_anchor_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_1421": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "one_hot_1431": {
                "variable": {
                    "value": "onehot_label",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "anno['labels']",
                            "Subscript"
                        ],
                        [
                            "anno['labels']",
                            "Subscript"
                        ]
                    ]
                },
                "depth": {
                    "value": "label_logits.get_shape()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_1437": {
                "variable": {
                    "value": "label_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "anno['labels']",
                            "Subscript"
                        ],
                        [
                            "anno['labels']",
                            "Subscript"
                        ]
                    ]
                },
                "logits": {
                    "value": "label_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv2d(h, num_anchors, 1, data_format=data_format, W_init=tf.random_normal_initializer(stddev=0.01), scope='class')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.transpose(label_logits, [0, 2, 3, 1]), 0)",
                            "Call"
                        ],
                        [
                            "conv2d(h, num_anchors, kernel=1, data_format=data_format, W_init=tf.random_normal_initializer(stddev=0.01), scope='class')",
                            "Call"
                        ],
                        [
                            "tf.transpose(label_logits, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_1440": {
                "variable": {
                    "value": "label_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "label_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "focal_loss(logits=valid_label_logits, labels=tf.to_float(valid_anchor_labels))",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=valid_label_logits, labels=tf.to_float(valid_anchor_labels))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(label_loss) * (1.0 / config.rpn_batch_per_im)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(nr_valid, 0), placeholder, label_loss, name='label_loss')",
                            "Call"
                        ],
                        [
                            "focal_loss(logits=label_logits, labels=tf.to_float(onehot_label))",
                            "Call"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=label_logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(label_loss, name='label_loss')",
                            "Call"
                        ],
                        [
                            "focal_loss(logits=valid_label_logits, labels=tf.to_float(valid_anchor_labels))",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=valid_label_logits, labels=tf.to_float(valid_anchor_labels))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(label_loss) * (1.0 / config.rpn_batch_per_im)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(nr_valid, 0), placeholder, label_loss, name='label_loss')",
                            "Call"
                        ],
                        [
                            "focal_loss(logits=label_logits, labels=tf.to_float(onehot_label))",
                            "Call"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=label_logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(label_loss, name='label_loss')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "label_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_1448": {
                "variable": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.range(num_fg), tf.to_int32(fg_labels) - 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_nd_1452": {
                "variable": {
                    "value": "fg_box_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "fg_box_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather_nd(fg_box_logits, indices)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fg_box_logits, [-1, 4])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(fg_box_logits, indices)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fg_box_logits, [-1, 4])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([tf.range(tf.size(final_labels)), tf.to_int32(final_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.range(num_fg), tf.to_int32(fg_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.range(num_fg), tf.to_int32(fg_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "np.where((boxes[:, 0] >= 0) & (boxes[:, 1] >= 0) & (boxes[:, 2] <= w) & (boxes[:, 3] <= h))[0]",
                            "Subscript"
                        ],
                        [
                            "tf.stack([tf.range(tf.size(final_labels)), tf.to_int32(final_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([box_batch_idxs, tf.range(K)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.range(num_fg), tf.to_int32(fg_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.range(num_fg), tf.to_int32(fg_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "np.where((boxes[:, 0] >= 0) & (boxes[:, 1] >= 0) & (boxes[:, 2] <= w) & (boxes[:, 3] <= h))[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_1455": {
                "variable": {
                    "value": "fg_box_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fg_box_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather_nd(fg_box_logits, indices)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fg_box_logits, [-1, 4])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(fg_box_logits, indices)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fg_box_logits, [-1, 4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_1856": {
                "name": {
                    "value": "image_preprocess",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_1858": {
                "variable": {
                    "value": "p_image",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "p_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.cast(p_image, tf.float32)",
                            "Call"
                        ],
                        [
                            "p_image * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "(p_image - image_mean) / image_std",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(p_image, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.cast(p_image, tf.float32)",
                            "Call"
                        ],
                        [
                            "p_image * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "(p_image - image_mean) / image_std",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(p_image, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ],
                        [
                            "tf.cast(p_image, tf.float32)",
                            "Call"
                        ],
                        [
                            "p_image * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "(p_image - image_mean) / image_std",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(p_image, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_1880": {
                "input": {
                    "value": "(y_max - y_min) * (x_max - x_min)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "floor_1883": {
                "x": {
                    "value": "4 + tf.log(sqrtarea * (1.0 / 224) + 1e-06) * (1.0 / np.log(2))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_1886": {
                "condition": {
                    "value": "level <= 2",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_1887": {
                "condition": {
                    "value": "tf.equal(level, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_1888": {
                "condition": {
                    "value": "tf.equal(level, 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_1889": {
                "condition": {
                    "value": "level >= 5",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reshape_1891": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'roi_level%s_id' % (i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "size_1893": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "'num_roi_level%s' % (i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_1896": {
                "params": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "decode_bbox_target(fastrcnn_box_logits / tf.constant(config.fastrcnn_bbox_reg_weights, dtype=tf.float32), anchors)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "decoded_boxes",
                            "Name"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "o_boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.reshape((-1, 2, 2))",
                            "Call"
                        ],
                        [
                            "boxes.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_idxs, self.final_boxes], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [-1, 5])",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "o_boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.reshape((-1, 2, 2))",
                            "Call"
                        ],
                        [
                            "boxes.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "indices": {
                    "value": "ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.where(prob > config.result_score_thres), [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.where(prob > config.result_score_thres), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_1924": {
                "input": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.image",
                            "Attribute"
                        ],
                        [
                            "self.p_image",
                            "Attribute"
                        ],
                        [
                            "batch.data['imgdata'][0]",
                            "Subscript"
                        ],
                        [
                            "batch.data['imgs'][0]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(image, cv2.IMREAD_COLOR)",
                            "Call"
                        ],
                        [
                            "cv2.imread(img1, cv2.IMREAD_COLOR)",
                            "Call"
                        ],
                        [
                            "image.astype('float32')",
                            "Call"
                        ],
                        [
                            "img1",
                            "Name"
                        ],
                        [
                            "self.image",
                            "Attribute"
                        ],
                        [
                            "self.p_image",
                            "Attribute"
                        ],
                        [
                            "self.image",
                            "Attribute"
                        ],
                        [
                            "self.p_image",
                            "Attribute"
                        ],
                        [
                            "batch.data['imgdata'][0]",
                            "Subscript"
                        ],
                        [
                            "batch.data['imgs'][0]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(image, cv2.IMREAD_COLOR)",
                            "Call"
                        ],
                        [
                            "cv2.imread(img1, cv2.IMREAD_COLOR)",
                            "Call"
                        ],
                        [
                            "image.astype('float32')",
                            "Call"
                        ],
                        [
                            "img1",
                            "Name"
                        ]
                    ]
                }
            },
            "name_scope_2027": {
                "name": {
                    "value": "fpn_anchors",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_2039": {
                "name": {
                    "value": "image_preprocess",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_2041": {
                "variable": {
                    "value": "p_image",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "p_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.cast(p_image, tf.float32)",
                            "Call"
                        ],
                        [
                            "p_image * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "(p_image - image_mean) / image_std",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(p_image, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.cast(p_image, tf.float32)",
                            "Call"
                        ],
                        [
                            "p_image * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "(p_image - image_mean) / image_std",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(p_image, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ],
                        [
                            "tf.cast(p_image, tf.float32)",
                            "Call"
                        ],
                        [
                            "p_image * (1.0 / 255)",
                            "BinOp"
                        ],
                        [
                            "(p_image - image_mean) / image_std",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(p_image, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_2061": {
                "input": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.image",
                            "Attribute"
                        ],
                        [
                            "self.p_image",
                            "Attribute"
                        ],
                        [
                            "batch.data['imgdata'][0]",
                            "Subscript"
                        ],
                        [
                            "batch.data['imgs'][0]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(image, cv2.IMREAD_COLOR)",
                            "Call"
                        ],
                        [
                            "cv2.imread(img1, cv2.IMREAD_COLOR)",
                            "Call"
                        ],
                        [
                            "image.astype('float32')",
                            "Call"
                        ],
                        [
                            "img1",
                            "Name"
                        ],
                        [
                            "self.image",
                            "Attribute"
                        ],
                        [
                            "self.p_image",
                            "Attribute"
                        ],
                        [
                            "self.image",
                            "Attribute"
                        ],
                        [
                            "self.p_image",
                            "Attribute"
                        ],
                        [
                            "batch.data['imgdata'][0]",
                            "Subscript"
                        ],
                        [
                            "batch.data['imgs'][0]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(image, cv2.IMREAD_COLOR)",
                            "Call"
                        ],
                        [
                            "cv2.imread(img1, cv2.IMREAD_COLOR)",
                            "Call"
                        ],
                        [
                            "image.astype('float32')",
                            "Call"
                        ],
                        [
                            "img1",
                            "Name"
                        ]
                    ]
                }
            },
            "reshape_2150": {
                "tensor": {
                    "value": "box_batch_idxs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(box_batch_idxs, [-1]), 'int32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_2210": {
                "variable": {
                    "value": "fg_inds_wrt_sample",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.where(rcnn_labels > 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_2211": {
                "variable": {
                    "value": "fg_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "rcnn_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "fg_inds_wrt_sample",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.where(rcnn_labels > 0), [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.where(rcnn_labels > 0), [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.where(rcnn_labels > 0), [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.where(rcnn_labels > 0), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_2224": {
                "variable": {
                    "value": "gt_mask_for_fg",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "gt_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.gt_mask",
                            "Attribute"
                        ],
                        [
                            "self.gt_mask",
                            "Attribute"
                        ]
                    ]
                },
                "indices": {
                    "value": "fg_inds_wrt_gt",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "squeeze_2230": {
                "variable": {
                    "value": "target_masks_for_fg",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "target_masks_for_fg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "crop_and_resize(tf.expand_dims(gt_masks, 1), fg_sampled_boxes, fg_inds_wrt_gt, 28, pad_border=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(target_masks_for_fg, 1)",
                            "Call"
                        ],
                        [
                            "crop_and_resize(tf.expand_dims(gt_masks, 1), fg_sampled_boxes, fg_inds_wrt_gt, 28, pad_border=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(target_masks_for_fg, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_2260": {
                "variable": {
                    "value": "fastrcnn_box_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "fastrcnn_box_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(fastrcnn_box_logits, [1, config.num_class - 1, 1])",
                            "Call"
                        ],
                        [
                            "partial_box_logits",
                            "Name"
                        ],
                        [
                            "tf.tile(fastrcnn_box_logits, [1, config.num_class - 1, 1])",
                            "Call"
                        ],
                        [
                            "partial_box_logits",
                            "Name"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, config.num_class - 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_2273": {
                "variable": {
                    "value": "label_logits_t",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "fastrcnn_label_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "partial_label_logits",
                            "Name"
                        ],
                        [
                            "partial_label_logits",
                            "Name"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_2274": {
                "variable": {
                    "value": "box_logits_t",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "fastrcnn_box_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(fastrcnn_box_logits, [1, config.num_class - 1, 1])",
                            "Call"
                        ],
                        [
                            "partial_box_logits",
                            "Name"
                        ],
                        [
                            "tf.tile(fastrcnn_box_logits, [1, config.num_class - 1, 1])",
                            "Call"
                        ],
                        [
                            "partial_box_logits",
                            "Name"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_2277": {
                "variable": {
                    "value": "partial_label_logits_t",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "label_logits_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(fastrcnn_label_logits, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(fastrcnn_label_logits, [1, 0])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "[0] + needed_object_classids",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_2280": {
                "variable": {
                    "value": "partial_box_logits_t",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "box_logits_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(fastrcnn_box_logits, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(fastrcnn_box_logits, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "needed_object_classids_minus_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[o - 1 for o in needed_object_classids]",
                            "ListComp"
                        ],
                        [
                            "[o - 1 for o in needed_object_classids]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "transpose_2283": {
                "variable": {
                    "value": "partial_label_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "partial_label_logits_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(label_logits_t, [0] + needed_object_classids)",
                            "Call"
                        ],
                        [
                            "tf.gather(label_logits_t, [0] + needed_object_classids)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_2284": {
                "variable": {
                    "value": "partial_box_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "partial_box_logits_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(box_logits_t, needed_object_classids_minus_1)",
                            "Call"
                        ],
                        [
                            "tf.gather(box_logits_t, needed_object_classids_minus_1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_2400": {
                "variable": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.range(tf.size(final_labels)), tf.to_int32(final_labels) - 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_nd_2404": {
                "variable": {
                    "value": "final_mask_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "mask_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.maskrcnn_up4conv_head(fg_feature, config.num_class, scope='maskrcnn')",
                            "Call"
                        ],
                        [
                            "self.maskrcnn_up4conv_head(roi_feature_maskrcnn, config.num_class, scope='maskrcnn')",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(mask_logits, indices)",
                            "Call"
                        ],
                        [
                            "self.maskrcnn_up4conv_head(fg_feature, config.num_class, scope='maskrcnn')",
                            "Call"
                        ],
                        [
                            "self.maskrcnn_up4conv_head(roi_feature_maskrcnn, config.num_class, scope='maskrcnn')",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(mask_logits, indices)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([tf.range(tf.size(final_labels)), tf.to_int32(final_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.range(num_fg), tf.to_int32(fg_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.range(num_fg), tf.to_int32(fg_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "np.where((boxes[:, 0] >= 0) & (boxes[:, 1] >= 0) & (boxes[:, 2] <= w) & (boxes[:, 3] <= h))[0]",
                            "Subscript"
                        ],
                        [
                            "tf.stack([tf.range(tf.size(final_labels)), tf.to_int32(final_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([box_batch_idxs, tf.range(K)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.range(num_fg), tf.to_int32(fg_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.range(num_fg), tf.to_int32(fg_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "np.where((boxes[:, 0] >= 0) & (boxes[:, 1] >= 0) & (boxes[:, 2] <= w) & (boxes[:, 3] <= h))[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_2405": {
                "variable": {
                    "value": "final_masks",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "final_mask_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather_nd(mask_logits, indices)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(mask_logits, indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_2447": {
                "variable": {
                    "value": "slice3d",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[shape2d, [-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_2448": {
                "variable": {
                    "value": "slice4d",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[shape2d, [-1, -1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "slice_2450": {
                "variable": {
                    "value": "anchors[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_": {
                    "value": "anchors[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "slice4d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([shape2d, [-1, -1]], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([shape2d, [-1, -1]], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_2507": {
                "input": {
                    "value": "proposal_boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(all_boxes, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.gather(proposal_boxes, topk_indices)",
                            "Call"
                        ],
                        [
                            "tf.concat(all_boxes, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(proposal_boxes, topk_indices, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_idxs, proposal_boxes], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(proposal_boxes, [-1, 5])",
                            "Call"
                        ],
                        [
                            "tf.gather(proposal_boxes, not_padded_box_idxs)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_2508": {
                "tensor": {
                    "value": "batch_idxs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(batch_size)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.reshape(batch_idxs, [batch_size, 1, 1]), [1, num_boxes, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(batch_idxs, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.range(batch_size)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.reshape(batch_idxs, [batch_size, 1, 1]), [1, num_boxes, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(batch_idxs, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_2518": {
                "condition": {
                    "value": "area > 0.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "stop_gradient_2521": {
                "input": {
                    "value": "proposal_boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(all_boxes, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.gather(proposal_boxes, topk_indices)",
                            "Call"
                        ],
                        [
                            "tf.concat(all_boxes, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(proposal_boxes, topk_indices, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_idxs, proposal_boxes], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(proposal_boxes, [-1, 5])",
                            "Call"
                        ],
                        [
                            "tf.gather(proposal_boxes, not_padded_box_idxs)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "boxes",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stop_gradient_2522": {
                "input": {
                    "value": "proposal_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(all_scores, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat(all_scores, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(proposal_scores, [-1])",
                            "Call"
                        ],
                        [
                            "tf.gather(proposal_scores, not_padded_box_idxs)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scores",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "floor_2537": {
                "x": {
                    "value": "4 + tf.log(sqrtarea * (1.0 / 224) + 1e-06) * (1.0 / np.log(2))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_2544": {
                "condition": {
                    "value": "level <= 2",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_2545": {
                "condition": {
                    "value": "tf.equal(level, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_2546": {
                "condition": {
                    "value": "tf.equal(level, 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_2547": {
                "condition": {
                    "value": "level >= 5",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reshape_2549": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'roi_level%s_id' % (i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_2553": {
                "params": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "decode_bbox_target(fastrcnn_box_logits / tf.constant(config.fastrcnn_bbox_reg_weights, dtype=tf.float32), anchors)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "decoded_boxes",
                            "Name"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "o_boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.reshape((-1, 2, 2))",
                            "Call"
                        ],
                        [
                            "boxes.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_idxs, self.final_boxes], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [-1, 5])",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "o_boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.reshape((-1, 2, 2))",
                            "Call"
                        ],
                        [
                            "boxes.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "indices": {
                    "value": "ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.where(prob > config.result_score_thres), [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.where(prob > config.result_score_thres), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "split_2571": {
                "variable": {
                    "value": "(box_idxs, boxes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "decode_bbox_target(fastrcnn_box_logits / tf.constant(config.fastrcnn_bbox_reg_weights, dtype=tf.float32), anchors)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "decoded_boxes",
                            "Name"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "o_boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.reshape((-1, 2, 2))",
                            "Call"
                        ],
                        [
                            "boxes.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_idxs, self.final_boxes], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [-1, 5])",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "o_boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.reshape((-1, 2, 2))",
                            "Call"
                        ],
                        [
                            "boxes.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[1, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_2572": {
                "variable": {
                    "value": "box_idxs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_idxs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(box_idxs, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(box_idxs, 'int32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_2573": {
                "variable": {
                    "value": "box_idxs",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "box_idxs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(box_idxs, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(box_idxs, 'int32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_2593": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_2635": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_2654": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "transpose_2687": {
                "variable": {
                    "value": "feature",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "feature",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(feature, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(feature, [-1, H * W, feat_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(feature, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(feature, [-1, H * W, feat_dim])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_2696": {
                "variable": {
                    "value": "feature",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "feature",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(feature, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(feature, [-1, H * W, feat_dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(feature, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(feature, [-1, H * W, feat_dim])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, H * W, feat_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_2697": {
                "variable": {
                    "value": "attention",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attention",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv2d(feature, 1, kernel=3, padding='SAME', stride=1, activation=tf.nn.softmax, use_bias=True, data_format='NHWC', W_init=initializer, scope='attention')",
                            "Call"
                        ],
                        [
                            "tf.reshape(attention, [-1, H * W, 1])",
                            "Call"
                        ],
                        [
                            "conv2d(feature, 1, kernel=3, padding='SAME', stride=1, activation=tf.nn.softmax, use_bias=True, data_format='NHWC', W_init=initializer, scope='attention')",
                            "Call"
                        ],
                        [
                            "tf.reshape(attention, [-1, H * W, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, H * W, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_2699": {
                "variable": {
                    "value": "attended",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "feature * attention",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_2720": {
                "variable": {
                    "value": "box_regression",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_regression",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dense(hidden, num_class * 4, W_init=tf.random_normal_initializer(stddev=0.001), scope='box')",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_regression, (-1, num_class, 4))",
                            "Call"
                        ],
                        [
                            "box_regression[:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "dense(hidden, num_class * 4, W_init=tf.random_normal_initializer(stddev=0.001), scope='box')",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_regression, (-1, num_class, 4))",
                            "Call"
                        ],
                        [
                            "dense(hidden, num_class * 4, W_init=tf.random_normal_initializer(stddev=0.001), scope='box')",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_regression, (-1, num_class, 4))",
                            "Call"
                        ],
                        [
                            "box_regression[:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "dense(hidden, num_class * 4, W_init=tf.random_normal_initializer(stddev=0.001), scope='box')",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_regression, (-1, num_class, 4))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, num_class, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "variable_scope_2750": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_2776": {
                "name_or_scope": {
                    "value": "outputs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_2796": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "where_2825": {
                "condition": {
                    "value": "prob > config.result_score_thres",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "gather_2832": {
                "params": {
                    "value": "ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.where(prob > config.result_score_thres), [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.where(prob > config.result_score_thres), [-1])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "selection",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.non_max_suppression(box_, prob_, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(tf.gather(ids, selection))",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box, prob, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box, prob, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box_, prob_, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(tf.gather(ids, selection))",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box, prob, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box, prob, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_2878": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "argmax_2883": {
                "variable": {
                    "value": "box_classes",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(fastrcnn_label_logits)",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "label_probs",
                            "Name"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.gather(probs, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(probs, masks)",
                            "Call"
                        ],
                        [
                            "tf.gather(probs, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(probs, masks)",
                            "Call"
                        ],
                        [
                            "probs[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_2885": {
                "variable": {
                    "value": "nonBG_box_indices",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.where(tf.greater(box_classes, 0))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_2887": {
                "variable": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(fastrcnn_label_logits)",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "label_probs",
                            "Name"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.gather(probs, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(probs, masks)",
                            "Call"
                        ],
                        [
                            "tf.gather(probs, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(probs, masks)",
                            "Call"
                        ],
                        [
                            "probs[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "nonBG_box_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.where(tf.greater(box_classes, 0)), [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.where(tf.greater(box_classes, 0)), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_2888": {
                "variable": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "decode_bbox_target(fastrcnn_box_logits / tf.constant(config.fastrcnn_bbox_reg_weights, dtype=tf.float32), anchors)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "decoded_boxes",
                            "Name"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "o_boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.reshape((-1, 2, 2))",
                            "Call"
                        ],
                        [
                            "boxes.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_idxs, self.final_boxes], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [-1, 5])",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "o_boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.reshape((-1, 2, 2))",
                            "Call"
                        ],
                        [
                            "boxes.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "indices": {
                    "value": "nonBG_box_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.where(tf.greater(box_classes, 0)), [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.where(tf.greater(box_classes, 0)), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "map_fn_2900": {
                "variable": {
                    "value": "masks",
                    "type": "Name",
                    "possible_values": []
                },
                "fn": {
                    "value": "self.nms_return_masks_no_score_filter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "elems": {
                    "value": "(probs, boxes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "map_fn_2904": {
                "variable": {
                    "value": "masks",
                    "type": "Name",
                    "possible_values": []
                },
                "fn": {
                    "value": "self.nms_return_masks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "elems": {
                    "value": "(probs, boxes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_2926": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_2981": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_3012": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_3035": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_3060": {
                "variable": {
                    "value": "valid_label_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "valid_label_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.boolean_mask(label_logits, valid_mask)",
                            "Call"
                        ],
                        [
                            "tf.reshape(valid_label_logits, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(label_logits, valid_mask)",
                            "Call"
                        ],
                        [
                            "tf.reshape(valid_label_logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_3061": {
                "variable": {
                    "value": "valid_anchor_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "valid_anchor_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.boolean_mask(anchor_labels, valid_mask)",
                            "Call"
                        ],
                        [
                            "tf.reshape(valid_anchor_labels, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(anchor_labels, valid_mask)",
                            "Call"
                        ],
                        [
                            "tf.reshape(valid_anchor_labels, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_3065": {
                "variable": {
                    "value": "label_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "valid_label_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.boolean_mask(label_logits, valid_mask)",
                            "Call"
                        ],
                        [
                            "tf.reshape(valid_label_logits, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(label_logits, valid_mask)",
                            "Call"
                        ],
                        [
                            "tf.reshape(valid_label_logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.to_float(valid_anchor_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_3093": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn'",
                            "MethodArgument"
                        ],
                        [
                            "'small_object_classification'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'head'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_predictions'",
                            "MethodArgument"
                        ],
                        [
                            "'maskrcnn_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'rpn_losses'",
                            "MethodArgument"
                        ],
                        [
                            "'fastrcnn_losses'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "one_hot_3103": {
                "variable": {
                    "value": "onehot_label",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "anno['labels']",
                            "Subscript"
                        ],
                        [
                            "anno['labels']",
                            "Subscript"
                        ]
                    ]
                },
                "depth": {
                    "value": "label_logits.get_shape()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_3109": {
                "variable": {
                    "value": "label_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "anno['labels']",
                            "Subscript"
                        ],
                        [
                            "anno['labels']",
                            "Subscript"
                        ]
                    ]
                },
                "logits": {
                    "value": "label_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv2d(h, num_anchors, 1, data_format=data_format, W_init=tf.random_normal_initializer(stddev=0.01), scope='class')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.transpose(label_logits, [0, 2, 3, 1]), 0)",
                            "Call"
                        ],
                        [
                            "conv2d(h, num_anchors, kernel=1, data_format=data_format, W_init=tf.random_normal_initializer(stddev=0.01), scope='class')",
                            "Call"
                        ],
                        [
                            "tf.transpose(label_logits, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_3112": {
                "variable": {
                    "value": "label_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "label_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "focal_loss(logits=valid_label_logits, labels=tf.to_float(valid_anchor_labels))",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=valid_label_logits, labels=tf.to_float(valid_anchor_labels))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(label_loss) * (1.0 / config.rpn_batch_per_im)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(nr_valid, 0), placeholder, label_loss, name='label_loss')",
                            "Call"
                        ],
                        [
                            "focal_loss(logits=label_logits, labels=tf.to_float(onehot_label))",
                            "Call"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=label_logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(label_loss, name='label_loss')",
                            "Call"
                        ],
                        [
                            "focal_loss(logits=valid_label_logits, labels=tf.to_float(valid_anchor_labels))",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=valid_label_logits, labels=tf.to_float(valid_anchor_labels))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(label_loss) * (1.0 / config.rpn_batch_per_im)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(nr_valid, 0), placeholder, label_loss, name='label_loss')",
                            "Call"
                        ],
                        [
                            "focal_loss(logits=label_logits, labels=tf.to_float(onehot_label))",
                            "Call"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=label_logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(label_loss, name='label_loss')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "label_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_3120": {
                "variable": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.range(num_fg), tf.to_int32(fg_labels) - 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_nd_3124": {
                "variable": {
                    "value": "fg_box_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "fg_box_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather_nd(fg_box_logits, indices)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fg_box_logits, [-1, 4])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(fg_box_logits, indices)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fg_box_logits, [-1, 4])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([tf.range(tf.size(final_labels)), tf.to_int32(final_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.range(num_fg), tf.to_int32(fg_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.range(num_fg), tf.to_int32(fg_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "np.where((boxes[:, 0] >= 0) & (boxes[:, 1] >= 0) & (boxes[:, 2] <= w) & (boxes[:, 3] <= h))[0]",
                            "Subscript"
                        ],
                        [
                            "tf.stack([tf.range(tf.size(final_labels)), tf.to_int32(final_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([box_batch_idxs, tf.range(K)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.range(num_fg), tf.to_int32(fg_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.range(num_fg), tf.to_int32(fg_labels) - 1], axis=1)",
                            "Call"
                        ],
                        [
                            "np.where((boxes[:, 0] >= 0) & (boxes[:, 1] >= 0) & (boxes[:, 2] <= w) & (boxes[:, 3] <= h))[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_3127": {
                "variable": {
                    "value": "fg_box_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fg_box_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather_nd(fg_box_logits, indices)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fg_box_logits, [-1, 4])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(fg_box_logits, indices)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fg_box_logits, [-1, 4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_110": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_scope_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_279": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_293": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, num_anchors]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'anchor_labels_lvl%s' % (k + 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_296": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, num_anchors, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'anchor_boxes_lvl%s' % (k + 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_306": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'so_gt_boxes_c%s' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_308": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'so_gt_labels_c%s' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_381": {
                "name": {
                    "value": "'FPN_slice_lvl%s' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_385": {
                "variable": {
                    "value": "target_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ceil(tf.to_float(image_shape2d) * (1.0 / stride))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_388": {
                "variable": {
                    "value": "p23456[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_": {
                    "value": "pi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "p23456[i]",
                            "Subscript"
                        ],
                        [
                            "p23456[i]",
                            "Subscript"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "tf.concat([[-1, -1], target_shape], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_414": {
                "name": {
                    "value": "'Lvl%s' % (lvl + 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_451": {
                "x": {
                    "value": "level",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.floor(4 + tf.log(sqrtarea * (1.0 / 224) + 1e-06) * (1.0 / np.log(2))))",
                            "Call"
                        ],
                        [
                            "tf.to_int32(tf.floor(4 + tf.log(sqrtarea * (1.0 / 224) + 1e-06) * (1.0 / np.log(2))))",
                            "Call"
                        ],
                        [
                            "tf.to_int32(tf.floor(4 + tf.log(sqrtarea * (1.0 / 224) + 1e-06) * (1.0 / np.log(2))))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "equal_452": {
                "x": {
                    "value": "level",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.floor(4 + tf.log(sqrtarea * (1.0 / 224) + 1e-06) * (1.0 / np.log(2))))",
                            "Call"
                        ],
                        [
                            "tf.to_int32(tf.floor(4 + tf.log(sqrtarea * (1.0 / 224) + 1e-06) * (1.0 / np.log(2))))",
                            "Call"
                        ],
                        [
                            "tf.to_int32(tf.floor(4 + tf.log(sqrtarea * (1.0 / 224) + 1e-06) * (1.0 / np.log(2))))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_474": {
                "name": {
                    "value": "'roi_level%s' % (i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_514": {
                "input": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "stop_gradient_542": {
                "input": {
                    "value": "o",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "stop_gradient_544": {
                "input": {
                    "value": "o",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "stop_gradient_587": {
                "input": {
                    "value": "fastrcnn_label_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "partial_label_logits",
                            "Name"
                        ],
                        [
                            "partial_label_logits",
                            "Name"
                        ]
                    ]
                }
            },
            "stop_gradient_588": {
                "input": {
                    "value": "fastrcnn_box_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(fastrcnn_box_logits, [1, config.num_class - 1, 1])",
                            "Call"
                        ],
                        [
                            "partial_box_logits",
                            "Name"
                        ],
                        [
                            "tf.tile(fastrcnn_box_logits, [1, config.num_class - 1, 1])",
                            "Call"
                        ],
                        [
                            "partial_box_logits",
                            "Name"
                        ]
                    ]
                }
            },
            "expand_dims_593": {
                "input": {
                    "value": "rcnn_boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "proposal_boxes",
                            "Name"
                        ],
                        [
                            "self.boxes",
                            "Attribute"
                        ],
                        [
                            "proposal_boxes",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_609": {
                "params": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "decode_bbox_target(fastrcnn_box_logits / tf.constant(config.fastrcnn_bbox_reg_weights, dtype=tf.float32), anchors)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "decoded_boxes",
                            "Name"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "o_boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.reshape((-1, 2, 2))",
                            "Call"
                        ],
                        [
                            "boxes.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_idxs, self.final_boxes], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [-1, 5])",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "o_boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.reshape((-1, 2, 2))",
                            "Call"
                        ],
                        [
                            "boxes.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "indices": {
                    "value": "small_object_class_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[config.classname2id[name] - 1 for name in config.small_objects]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "gather_610": {
                "params": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(fastrcnn_label_logits)",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "label_probs",
                            "Name"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.gather(probs, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(probs, masks)",
                            "Call"
                        ],
                        [
                            "tf.gather(probs, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(probs, masks)",
                            "Call"
                        ],
                        [
                            "probs[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "small_object_class_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[config.classname2id[name] - 1 for name in config.small_objects]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "variable_scope_629": {
                "name_or_scope": {
                    "value": "fastrcnn",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_643": {
                "variable": {
                    "value": "hidden",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dense(so_feature, dim, W_init=initializer, activation=tf.nn.relu, scope='fc6')",
                            "Call"
                        ],
                        [
                            "dense(hidden, dim, W_init=initializer, activation=tf.nn.relu, scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden, [len(config.small_objects), -1, dim])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(hidden)",
                            "Call"
                        ],
                        [
                            "dense(feature, dim, W_init=initializer, activation=tf.nn.relu, scope='fc6')",
                            "Call"
                        ],
                        [
                            "dense(hidden, dim, W_init=initializer, activation=tf.nn.relu, scope='fc7')",
                            "Call"
                        ],
                        [
                            "self.conv_frcnn_head(feature, dim, config.conv_frcnn_head_dim, num_conv=4, use_gn=config.use_gn)",
                            "Call"
                        ],
                        [
                            "dense(feature, dim, W_init=initializer, activation=tf.nn.relu, scope='fc6')",
                            "Call"
                        ],
                        [
                            "hidden + relation_network(hidden, boxes, group=16, geo_feat_dim=64, scope='RM_r1')",
                            "BinOp"
                        ],
                        [
                            "dense(hidden, dim, W_init=initializer, activation=tf.nn.relu, scope='fc7')",
                            "Call"
                        ],
                        [
                            "hidden + relation_network(hidden, boxes, group=16, geo_feat_dim=64, scope='RM_r2')",
                            "BinOp"
                        ],
                        [
                            "dense(feature, dim, W_init=initializer, activation=tf.nn.relu, scope='fc6')",
                            "Call"
                        ],
                        [
                            "dense(hidden, dim, W_init=initializer, activation=tf.nn.relu, scope='fc7')",
                            "Call"
                        ],
                        [
                            "hidden + attended_feat",
                            "BinOp"
                        ],
                        [
                            "self.conv_frcnn_head(feature, dim, config.conv_frcnn_head_dim, num_conv=4, use_gn=config.use_gn)",
                            "Call"
                        ],
                        [
                            "dense(feature, dim, W_init=initializer, activation=tf.nn.relu, scope='fc6')",
                            "Call"
                        ],
                        [
                            "hidden + relation_network(hidden, boxes, group=16, geo_feat_dim=64, scope='RM_r1')",
                            "BinOp"
                        ],
                        [
                            "dense(hidden, dim, W_init=initializer, activation=tf.nn.relu, scope='fc7')",
                            "Call"
                        ],
                        [
                            "hidden + relation_network(hidden, boxes, group=16, geo_feat_dim=64, scope='RM_r2')",
                            "BinOp"
                        ],
                        [
                            "dense(feature, dim, W_init=initializer, activation=tf.nn.relu, scope='fc6')",
                            "Call"
                        ],
                        [
                            "dense(hidden, dim, W_init=initializer, activation=tf.nn.relu, scope='fc7')",
                            "Call"
                        ],
                        [
                            "dense(feature, dim, W_init=initializer, activation=tf.nn.relu, scope='fc6')",
                            "Call"
                        ],
                        [
                            "dense(hidden, dim, W_init=initializer, activation=tf.nn.relu, scope='fc7')",
                            "Call"
                        ],
                        [
                            "self.conv_frcnn_head(feature, dim, config.conv_frcnn_head_dim, num_conv=4, use_gn=config.use_gn)",
                            "Call"
                        ],
                        [
                            "dense(feature, dim, W_init=initializer, activation=tf.nn.relu, scope='fc6')",
                            "Call"
                        ],
                        [
                            "hidden + relation_network(hidden, boxes, group=16, geo_feat_dim=64, scope='RM_r1')",
                            "BinOp"
                        ],
                        [
                            "dense(hidden, dim, W_init=initializer, activation=tf.nn.relu, scope='fc7')",
                            "Call"
                        ],
                        [
                            "hidden + relation_network(hidden, boxes, group=16, geo_feat_dim=64, scope='RM_r2')",
                            "BinOp"
                        ],
                        [
                            "dense(feature, dim, W_init=initializer, activation=tf.nn.relu, scope='fc6')",
                            "Call"
                        ],
                        [
                            "dense(hidden, dim, W_init=initializer, activation=tf.nn.relu, scope='fc7')",
                            "Call"
                        ],
                        [
                            "hidden + attended_feat",
                            "BinOp"
                        ],
                        [
                            "self.conv_frcnn_head(feature, dim, config.conv_frcnn_head_dim, num_conv=4, use_gn=config.use_gn)",
                            "Call"
                        ],
                        [
                            "dense(feature, dim, W_init=initializer, activation=tf.nn.relu, scope='fc6')",
                            "Call"
                        ],
                        [
                            "hidden + relation_network(hidden, boxes, group=16, geo_feat_dim=64, scope='RM_r1')",
                            "BinOp"
                        ],
                        [
                            "dense(hidden, dim, W_init=initializer, activation=tf.nn.relu, scope='fc7')",
                            "Call"
                        ],
                        [
                            "hidden + relation_network(hidden, boxes, group=16, geo_feat_dim=64, scope='RM_r2')",
                            "BinOp"
                        ],
                        [
                            "dense(feature, dim, W_init=initializer, activation=tf.nn.relu, scope='fc6')",
                            "Call"
                        ],
                        [
                            "dense(hidden, dim, W_init=initializer, activation=tf.nn.relu, scope='fc7')",
                            "Call"
                        ]
                    ]
                }
            },
            "non_max_suppression_653": {
                "variable": {
                    "value": "ref_selection",
                    "type": "Name",
                    "possible_values": []
                },
                "boxes": {
                    "value": "ref_boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(ref_boxes, ref_selection)",
                            "Call"
                        ]
                    ]
                },
                "scores": {
                    "value": "ref_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(ref_scores, ref_selection)",
                            "Call"
                        ]
                    ]
                },
                "max_output_size": {
                    "value": "ref_topk",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.so_person_topk",
                            "Attribute"
                        ]
                    ]
                },
                "iou_threshold": {
                    "value": "config.fastrcnn_nms_iou_thres",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_657": {
                "variable": {
                    "value": "ref_boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "ref_boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(ref_boxes, ref_selection)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "ref_selection",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.non_max_suppression(ref_boxes, ref_scores, max_output_size=ref_topk, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_658": {
                "variable": {
                    "value": "ref_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "ref_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(ref_scores, ref_selection)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "ref_selection",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.non_max_suppression(ref_boxes, ref_scores, max_output_size=ref_topk, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_699": {
                "condition": {
                    "value": "rcnn_labels > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "constant_715": {
                "value": {
                    "value": "config.fastrcnn_bbox_reg_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_833": {
                "input": {
                    "value": "rcnn_boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "proposal_boxes",
                            "Name"
                        ],
                        [
                            "self.boxes",
                            "Attribute"
                        ],
                        [
                            "proposal_boxes",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_945": {
                "variable": {
                    "value": "mask_logits_t",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "mask_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.maskrcnn_up4conv_head(fg_feature, config.num_class, scope='maskrcnn')",
                            "Call"
                        ],
                        [
                            "self.maskrcnn_up4conv_head(roi_feature_maskrcnn, config.num_class, scope='maskrcnn')",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(mask_logits, indices)",
                            "Call"
                        ],
                        [
                            "self.maskrcnn_up4conv_head(fg_feature, config.num_class, scope='maskrcnn')",
                            "Call"
                        ],
                        [
                            "self.maskrcnn_up4conv_head(roi_feature_maskrcnn, config.num_class, scope='maskrcnn')",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(mask_logits, indices)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_948": {
                "variable": {
                    "value": "partial_mask_logits_t",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "mask_logits_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(mask_logits, [1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(mask_logits, [1, 0, 2, 3])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "needed_object_classids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[config.classname2id[name] for name in config.partial_classes]",
                            "ListComp"
                        ],
                        [
                            "[config.classname2id[name] for name in config.partial_classes]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "transpose_951": {
                "variable": {
                    "value": "partial_mask_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "partial_mask_logits_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(mask_logits_t, needed_object_classids)",
                            "Call"
                        ],
                        [
                            "tf.gather(mask_logits_t, needed_object_classids)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_1001": {
                "a": {
                    "value": "label_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv2d(h, num_anchors, 1, data_format=data_format, W_init=tf.random_normal_initializer(stddev=0.01), scope='class')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.transpose(label_logits, [0, 2, 3, 1]), 0)",
                            "Call"
                        ],
                        [
                            "conv2d(h, num_anchors, kernel=1, data_format=data_format, W_init=tf.random_normal_initializer(stddev=0.01), scope='class')",
                            "Call"
                        ],
                        [
                            "tf.transpose(label_logits, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_1091": {
                "name_or_scope": {
                    "value": "outputs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "top_k_1215": {
                "input": {
                    "value": "-selection",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "k": {
                    "value": "tf.size(selection)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "top_k_1232": {
                "input": {
                    "value": "-selection",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "k": {
                    "value": "tf.size(selection)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_1296": {
                "x": {
                    "value": "config.result_per_im",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.size(probs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "not_equal_1370": {
                "x": {
                    "value": "anchor_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-np.ones((NA,), dtype='int32')",
                            "UnaryOp"
                        ],
                        [
                            "-np.ones((NA,), dtype='int32')",
                            "UnaryOp"
                        ]
                    ]
                },
                "y": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "equal_1371": {
                "x": {
                    "value": "anchor_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-np.ones((NA,), dtype='int32')",
                            "UnaryOp"
                        ],
                        [
                            "-np.ones((NA,), dtype='int32')",
                            "UnaryOp"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "count_nonzero_1373": {
                "input": {
                    "value": "valid_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.not_equal(anchor_labels, -1))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(tf.not_equal(anchor_labels, -1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "count_nonzero_1375": {
                "input": {
                    "value": "pos_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.equal(anchor_labels, 1))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(tf.equal(anchor_labels, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_1399": {
                "x": {
                    "value": "nr_valid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.count_nonzero(valid_mask, dtype=tf.int32), name='num_valid_anchor')",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(tf.count_nonzero(valid_mask, dtype=tf.int32), name='num_valid_anchor')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "huber_loss_1408": {
                "labels": {
                    "value": "pos_anchor_boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.boolean_mask(anchor_boxes, pos_mask)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(anchor_boxes, pos_mask)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "pos_box_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.boolean_mask(box_logits, pos_mask)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(box_logits, pos_mask)",
                            "Call"
                        ]
                    ]
                },
                "delta": {
                    "value": "delta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 / 9",
                            "BinOp"
                        ],
                        [
                            "1.0 / 9",
                            "BinOp"
                        ]
                    ]
                },
                "reduction": {
                    "value": "tf.losses.Reduction.SUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_1414": {
                "x": {
                    "value": "nr_pos",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(tf.count_nonzero(pos_mask, dtype=tf.int32), name='num_pos_anchor')",
                            "Call"
                        ],
                        [
                            "tf.identity(tf.count_nonzero(pos_mask, dtype=tf.int32), name='num_pos_anchor')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_1442": {
                "condition": {
                    "value": "labels > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "to_float_1461": {
                "x": {
                    "value": "tf.shape(labels)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_initializer_1831": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "equal_1887": {
                "x": {
                    "value": "level",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.floor(4 + tf.log(sqrtarea * (1.0 / 224) + 1e-06) * (1.0 / np.log(2))))",
                            "Call"
                        ],
                        [
                            "tf.to_int32(tf.floor(4 + tf.log(sqrtarea * (1.0 / 224) + 1e-06) * (1.0 / np.log(2))))",
                            "Call"
                        ],
                        [
                            "tf.to_int32(tf.floor(4 + tf.log(sqrtarea * (1.0 / 224) + 1e-06) * (1.0 / np.log(2))))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "equal_1888": {
                "x": {
                    "value": "level",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.floor(4 + tf.log(sqrtarea * (1.0 / 224) + 1e-06) * (1.0 / np.log(2))))",
                            "Call"
                        ],
                        [
                            "tf.to_int32(tf.floor(4 + tf.log(sqrtarea * (1.0 / 224) + 1e-06) * (1.0 / np.log(2))))",
                            "Call"
                        ],
                        [
                            "tf.to_int32(tf.floor(4 + tf.log(sqrtarea * (1.0 / 224) + 1e-06) * (1.0 / np.log(2))))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_1909": {
                "name": {
                    "value": "'roi_level%s' % (i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_initializer_1982": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_1997": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, num_anchors]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'anchor_labels_lvl%s' % (k + 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_2000": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, num_anchors, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'anchor_boxes_lvl%s' % (k + 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_2082": {
                "input": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "stop_gradient_2109": {
                "input": {
                    "value": "o",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "stop_gradient_2111": {
                "input": {
                    "value": "o",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "stop_gradient_2163": {
                "input": {
                    "value": "fastrcnn_label_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "partial_label_logits",
                            "Name"
                        ],
                        [
                            "partial_label_logits",
                            "Name"
                        ]
                    ]
                }
            },
            "stop_gradient_2164": {
                "input": {
                    "value": "fastrcnn_box_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(fastrcnn_box_logits, [1, config.num_class - 1, 1])",
                            "Call"
                        ],
                        [
                            "partial_box_logits",
                            "Name"
                        ],
                        [
                            "tf.tile(fastrcnn_box_logits, [1, config.num_class - 1, 1])",
                            "Call"
                        ],
                        [
                            "partial_box_logits",
                            "Name"
                        ]
                    ]
                }
            },
            "where_2172": {
                "condition": {
                    "value": "rcnn_labels > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "constant_2188": {
                "value": {
                    "value": "config.fastrcnn_bbox_reg_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_2293": {
                "input": {
                    "value": "rcnn_boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "proposal_boxes",
                            "Name"
                        ],
                        [
                            "self.boxes",
                            "Attribute"
                        ],
                        [
                            "proposal_boxes",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_2344": {
                "input": {
                    "value": "self.final_boxes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_2345": {
                "tensor": {
                    "value": "batch_idxs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(batch_size)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.reshape(batch_idxs, [batch_size, 1, 1]), [1, num_boxes, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(batch_idxs, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.range(batch_size)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.reshape(batch_idxs, [batch_size, 1, 1]), [1, num_boxes, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(batch_idxs, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_2356": {
                "input": {
                    "value": "self.final_valid_indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_2358": {
                "input": {
                    "value": "tf.range(num_boxes)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_2367": {
                "condition": {
                    "value": "valid_indice_trues",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(self.final_valid_indices, axis=1) > tf.expand_dims(tf.range(num_boxes), axis=0)",
                            "Compare"
                        ],
                        [
                            "tf.reshape(valid_indice_trues, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_2391": {
                "variable": {
                    "value": "mask_logits_t",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "mask_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.maskrcnn_up4conv_head(fg_feature, config.num_class, scope='maskrcnn')",
                            "Call"
                        ],
                        [
                            "self.maskrcnn_up4conv_head(roi_feature_maskrcnn, config.num_class, scope='maskrcnn')",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(mask_logits, indices)",
                            "Call"
                        ],
                        [
                            "self.maskrcnn_up4conv_head(fg_feature, config.num_class, scope='maskrcnn')",
                            "Call"
                        ],
                        [
                            "self.maskrcnn_up4conv_head(roi_feature_maskrcnn, config.num_class, scope='maskrcnn')",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(mask_logits, indices)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_2394": {
                "variable": {
                    "value": "partial_mask_logits_t",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "mask_logits_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(mask_logits, [1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(mask_logits, [1, 0, 2, 3])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "needed_object_classids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[config.classname2id[name] for name in config.partial_classes]",
                            "ListComp"
                        ],
                        [
                            "[config.classname2id[name] for name in config.partial_classes]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "transpose_2397": {
                "variable": {
                    "value": "partial_mask_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "partial_mask_logits_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(mask_logits_t, needed_object_classids)",
                            "Call"
                        ],
                        [
                            "tf.gather(mask_logits_t, needed_object_classids)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_2435": {
                "name": {
                    "value": "'FPN_slice_lvl%s' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_2439": {
                "variable": {
                    "value": "target_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ceil(tf.to_float(image_shape2d) * (1.0 / stride))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_2442": {
                "variable": {
                    "value": "p23456[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_": {
                    "value": "pi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "p23456[i]",
                            "Subscript"
                        ],
                        [
                            "p23456[i]",
                            "Subscript"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "tf.concat([[-1, -1], target_shape], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_2472": {
                "name": {
                    "value": "'Lvl%s' % (lvl + 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_2497": {
                "input": {
                    "value": "proposal_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(all_scores, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat(all_scores, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(proposal_scores, [-1])",
                            "Call"
                        ],
                        [
                            "tf.gather(proposal_scores, not_padded_box_idxs)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_2545": {
                "x": {
                    "value": "level",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.floor(4 + tf.log(sqrtarea * (1.0 / 224) + 1e-06) * (1.0 / np.log(2))))",
                            "Call"
                        ],
                        [
                            "tf.to_int32(tf.floor(4 + tf.log(sqrtarea * (1.0 / 224) + 1e-06) * (1.0 / np.log(2))))",
                            "Call"
                        ],
                        [
                            "tf.to_int32(tf.floor(4 + tf.log(sqrtarea * (1.0 / 224) + 1e-06) * (1.0 / np.log(2))))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "equal_2546": {
                "x": {
                    "value": "level",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.floor(4 + tf.log(sqrtarea * (1.0 / 224) + 1e-06) * (1.0 / np.log(2))))",
                            "Call"
                        ],
                        [
                            "tf.to_int32(tf.floor(4 + tf.log(sqrtarea * (1.0 / 224) + 1e-06) * (1.0 / np.log(2))))",
                            "Call"
                        ],
                        [
                            "tf.to_int32(tf.floor(4 + tf.log(sqrtarea * (1.0 / 224) + 1e-06) * (1.0 / np.log(2))))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_2570": {
                "name": {
                    "value": "'roi_level%s' % (i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_2709": {
                "name_or_scope": {
                    "value": "outputs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "top_k_2833": {
                "input": {
                    "value": "-selection",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "k": {
                    "value": "tf.size(selection)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "top_k_2850": {
                "input": {
                    "value": "-selection",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "k": {
                    "value": "tf.size(selection)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_2914": {
                "x": {
                    "value": "config.result_per_im",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.size(probs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reverse_2952": {
                "tensor": {
                    "value": "boxes_x1y1x2y2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(padded_boxes, (batch_size, K, cat_num, 2, 2))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "not_equal_3042": {
                "x": {
                    "value": "anchor_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-np.ones((NA,), dtype='int32')",
                            "UnaryOp"
                        ],
                        [
                            "-np.ones((NA,), dtype='int32')",
                            "UnaryOp"
                        ]
                    ]
                },
                "y": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "equal_3043": {
                "x": {
                    "value": "anchor_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-np.ones((NA,), dtype='int32')",
                            "UnaryOp"
                        ],
                        [
                            "-np.ones((NA,), dtype='int32')",
                            "UnaryOp"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "count_nonzero_3045": {
                "input": {
                    "value": "valid_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.not_equal(anchor_labels, -1))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(tf.not_equal(anchor_labels, -1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "count_nonzero_3047": {
                "input": {
                    "value": "pos_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.equal(anchor_labels, 1))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(tf.equal(anchor_labels, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_3071": {
                "x": {
                    "value": "nr_valid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.count_nonzero(valid_mask, dtype=tf.int32), name='num_valid_anchor')",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(tf.count_nonzero(valid_mask, dtype=tf.int32), name='num_valid_anchor')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "huber_loss_3080": {
                "labels": {
                    "value": "pos_anchor_boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.boolean_mask(anchor_boxes, pos_mask)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(anchor_boxes, pos_mask)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "pos_box_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.boolean_mask(box_logits, pos_mask)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(box_logits, pos_mask)",
                            "Call"
                        ]
                    ]
                },
                "delta": {
                    "value": "delta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 / 9",
                            "BinOp"
                        ],
                        [
                            "1.0 / 9",
                            "BinOp"
                        ]
                    ]
                },
                "reduction": {
                    "value": "tf.losses.Reduction.SUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_3086": {
                "x": {
                    "value": "nr_pos",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(tf.count_nonzero(pos_mask, dtype=tf.int32), name='num_pos_anchor')",
                            "Call"
                        ],
                        [
                            "tf.identity(tf.count_nonzero(pos_mask, dtype=tf.int32), name='num_pos_anchor')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_3114": {
                "condition": {
                    "value": "labels > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "to_float_3133": {
                "x": {
                    "value": "tf.shape(labels)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_variable_scope_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_392": {
                "input": {
                    "value": "p23456[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "slice_398": {
                "input_": {
                    "value": "gt_anchor_labels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "slice3d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([shape2d, [-1]], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([shape2d, [-1]], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_399": {
                "input_": {
                    "value": "gt_anchor_boxes[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "slice4d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([shape2d, [-1, -1]], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([shape2d, [-1, -1]], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_422": {
                "tensor": {
                    "value": "pred_boxes_decoded",
                    "type": "Name",
                    "possible_values": [
                        [
                            "decode_bbox_target(multilevel_box_logits[lvl], anchors, decode_clip=config.bbox_decode_clip)",
                            "Call"
                        ],
                        [
                            "decode_bbox_target_multi(multilevel_box_logits[lvl], anchors, decode_clip=config.bbox_decode_clip)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_423": {
                "tensor": {
                    "value": "multilevel_label_logits[lvl]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_596": {
                "value": {
                    "value": "config.fastrcnn_bbox_reg_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_668": {
                "variable": {
                    "value": "ref_feat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.multilevel_roi_align(p23456[:4], ref_boxes, 7)",
                            "Call"
                        ],
                        [
                            "dense(ref_feat, dim, W_init=initializer, activation=tf.nn.relu, scope='fc6')",
                            "Call"
                        ],
                        [
                            "dense(ref_feat, dim, W_init=initializer, activation=tf.nn.relu, scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(ref_feat)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_671": {
                "name_or_scope": {
                    "value": "small_objects",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_754": {
                "condition": {
                    "value": "rcnn_labels > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "expand_dims_771": {
                "input": {
                    "value": "gt_masks",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_837": {
                "value": {
                    "value": "config.fastrcnn_bbox_reg_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_873": {
                "input_tensor": {
                    "value": "so_label_logits[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_normal_initializer_987": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_normal_initializer_994": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_normal_initializer_998": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_normal_initializer_1024": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_normal_initializer_1162": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_normal_initializer_1167": {
                "stddev": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_1268": {
                "condition": {
                    "value": "tf.greater(box_classes, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "size_1296": {
                "input": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(fastrcnn_label_logits)",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "label_probs",
                            "Name"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.gather(probs, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(probs, masks)",
                            "Call"
                        ],
                        [
                            "tf.gather(probs, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(probs, masks)",
                            "Call"
                        ],
                        [
                            "probs[:, 1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_sum_1396": {
                "input_tensor": {
                    "value": "label_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "focal_loss(logits=valid_label_logits, labels=tf.to_float(valid_anchor_labels))",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=valid_label_logits, labels=tf.to_float(valid_anchor_labels))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(label_loss) * (1.0 / config.rpn_batch_per_im)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(nr_valid, 0), placeholder, label_loss, name='label_loss')",
                            "Call"
                        ],
                        [
                            "focal_loss(logits=label_logits, labels=tf.to_float(onehot_label))",
                            "Call"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=label_logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(label_loss, name='label_loss')",
                            "Call"
                        ],
                        [
                            "focal_loss(logits=valid_label_logits, labels=tf.to_float(valid_anchor_labels))",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=valid_label_logits, labels=tf.to_float(valid_anchor_labels))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(label_loss) * (1.0 / config.rpn_batch_per_im)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(nr_valid, 0), placeholder, label_loss, name='label_loss')",
                            "Call"
                        ],
                        [
                            "focal_loss(logits=label_logits, labels=tf.to_float(onehot_label))",
                            "Call"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=label_logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(label_loss, name='label_loss')",
                            "Call"
                        ]
                    ]
                }
            },
            "where_2210": {
                "condition": {
                    "value": "rcnn_labels > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "expand_dims_2227": {
                "input": {
                    "value": "gt_masks",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_2297": {
                "value": {
                    "value": "config.fastrcnn_bbox_reg_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_2446": {
                "input": {
                    "value": "p23456[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "slice_2453": {
                "input_": {
                    "value": "gt_anchor_labels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "slice3d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([shape2d, [-1]], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([shape2d, [-1]], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_2454": {
                "input_": {
                    "value": "gt_anchor_boxes[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "slice4d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([shape2d, [-1, -1]], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([shape2d, [-1, -1]], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_normal_initializer_2601": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_normal_initializer_2608": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_normal_initializer_2612": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_normal_initializer_2642": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_normal_initializer_2780": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_normal_initializer_2785": {
                "stddev": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_2886": {
                "condition": {
                    "value": "tf.greater(box_classes, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "size_2914": {
                "input": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(fastrcnn_label_logits)",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "label_probs",
                            "Name"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.gather(probs, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(probs, masks)",
                            "Call"
                        ],
                        [
                            "tf.gather(probs, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(probs[:, 1:], [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(probs, masks)",
                            "Call"
                        ],
                        [
                            "probs[:, 1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_2938": {
                "input": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "decode_bbox_target(fastrcnn_box_logits / tf.constant(config.fastrcnn_bbox_reg_weights, dtype=tf.float32), anchors)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "decoded_boxes",
                            "Name"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "o_boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.reshape((-1, 2, 2))",
                            "Call"
                        ],
                        [
                            "boxes.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_idxs, self.final_boxes], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [-1, 5])",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, nonBG_box_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(boxes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "o_boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.reshape((-1, 2, 2))",
                            "Call"
                        ],
                        [
                            "boxes.reshape((-1, 4))",
                            "Call"
                        ],
                        [
                            "boxes[:, [0, 2, 1, 3]]",
                            "Subscript"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "boxes.copy()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_3068": {
                "input_tensor": {
                    "value": "label_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "focal_loss(logits=valid_label_logits, labels=tf.to_float(valid_anchor_labels))",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=valid_label_logits, labels=tf.to_float(valid_anchor_labels))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(label_loss) * (1.0 / config.rpn_batch_per_im)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(nr_valid, 0), placeholder, label_loss, name='label_loss')",
                            "Call"
                        ],
                        [
                            "focal_loss(logits=label_logits, labels=tf.to_float(onehot_label))",
                            "Call"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=label_logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(label_loss, name='label_loss')",
                            "Call"
                        ],
                        [
                            "focal_loss(logits=valid_label_logits, labels=tf.to_float(valid_anchor_labels))",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=valid_label_logits, labels=tf.to_float(valid_anchor_labels))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(label_loss) * (1.0 / config.rpn_batch_per_im)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(nr_valid, 0), placeholder, label_loss, name='label_loss')",
                            "Call"
                        ],
                        [
                            "focal_loss(logits=label_logits, labels=tf.to_float(onehot_label))",
                            "Call"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=label_logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(label_loss, name='label_loss')",
                            "Call"
                        ]
                    ]
                }
            },
            "ceil_385": {
                "x": {
                    "value": "tf.to_float(image_shape2d) * (1.0 / stride)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_389": {
                "values": {
                    "value": "[[-1, -1], target_shape]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_446": {
                "x": {
                    "value": "sqrtarea * (1.0 / 224) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_1094": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_normal_initializer_1100": {
                "stddev": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "size_1215": {
                "input": {
                    "value": "selection",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.non_max_suppression(box_, prob_, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(tf.gather(ids, selection))",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box, prob, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box, prob, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box_, prob_, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(tf.gather(ids, selection))",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box, prob, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box, prob, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ]
                    ]
                }
            },
            "size_1232": {
                "input": {
                    "value": "selection",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.non_max_suppression(box_, prob_, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(tf.gather(ids, selection))",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box, prob, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box, prob, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box_, prob_, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(tf.gather(ids, selection))",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box, prob, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box, prob, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_1268": {
                "x": {
                    "value": "box_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.argmax(probs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.argmax(probs, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_int32_1315": {
                "x": {
                    "value": "fg_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(rcnn_labels, fg_inds_wrt_sample)",
                            "Call"
                        ],
                        [
                            "tf.gather(labels, fg_inds)",
                            "Call"
                        ],
                        [
                            "tf.gather(rcnn_labels, fg_inds_wrt_sample)",
                            "Call"
                        ],
                        [
                            "tf.gather(labels, fg_inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_1391": {
                "x": {
                    "value": "valid_anchor_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.boolean_mask(anchor_labels, valid_mask)",
                            "Call"
                        ],
                        [
                            "tf.reshape(valid_anchor_labels, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(anchor_labels, valid_mask)",
                            "Call"
                        ],
                        [
                            "tf.reshape(valid_anchor_labels, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_1394": {
                "x": {
                    "value": "valid_anchor_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.boolean_mask(anchor_labels, valid_mask)",
                            "Call"
                        ],
                        [
                            "tf.reshape(valid_anchor_labels, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(anchor_labels, valid_mask)",
                            "Call"
                        ],
                        [
                            "tf.reshape(valid_anchor_labels, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_1435": {
                "x": {
                    "value": "onehot_label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.one_hot(labels, label_logits.get_shape()[-1])",
                            "Call"
                        ],
                        [
                            "tf.one_hot(labels, label_logits.get_shape()[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_1461": {
                "input": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "anno['labels']",
                            "Subscript"
                        ],
                        [
                            "anno['labels']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_1883": {
                "x": {
                    "value": "sqrtarea * (1.0 / 224) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "range_2401": {},
            "ceil_2439": {
                "x": {
                    "value": "tf.to_float(image_shape2d) * (1.0 / stride)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_2443": {
                "values": {
                    "value": "[[-1, -1], target_shape]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_2537": {
                "x": {
                    "value": "sqrtarea * (1.0 / 224) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_2712": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_normal_initializer_2718": {
                "stddev": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "size_2833": {
                "input": {
                    "value": "selection",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.non_max_suppression(box_, prob_, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(tf.gather(ids, selection))",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box, prob, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box, prob, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box_, prob_, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(tf.gather(ids, selection))",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box, prob, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box, prob, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ]
                    ]
                }
            },
            "size_2850": {
                "input": {
                    "value": "selection",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.non_max_suppression(box_, prob_, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(tf.gather(ids, selection))",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box, prob, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box, prob, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box_, prob_, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(tf.gather(ids, selection))",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box, prob, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ],
                        [
                            "tf.image.non_max_suppression(box, prob, max_output_size=config.result_per_im, iou_threshold=config.fastrcnn_nms_iou_thres)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_2886": {
                "x": {
                    "value": "box_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.argmax(probs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.argmax(probs, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_int32_2987": {
                "x": {
                    "value": "fg_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(rcnn_labels, fg_inds_wrt_sample)",
                            "Call"
                        ],
                        [
                            "tf.gather(labels, fg_inds)",
                            "Call"
                        ],
                        [
                            "tf.gather(rcnn_labels, fg_inds_wrt_sample)",
                            "Call"
                        ],
                        [
                            "tf.gather(labels, fg_inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_3063": {
                "x": {
                    "value": "valid_anchor_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.boolean_mask(anchor_labels, valid_mask)",
                            "Call"
                        ],
                        [
                            "tf.reshape(valid_anchor_labels, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(anchor_labels, valid_mask)",
                            "Call"
                        ],
                        [
                            "tf.reshape(valid_anchor_labels, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_3066": {
                "x": {
                    "value": "valid_anchor_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.boolean_mask(anchor_labels, valid_mask)",
                            "Call"
                        ],
                        [
                            "tf.reshape(valid_anchor_labels, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(anchor_labels, valid_mask)",
                            "Call"
                        ],
                        [
                            "tf.reshape(valid_anchor_labels, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_3107": {
                "x": {
                    "value": "onehot_label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.one_hot(labels, label_logits.get_shape()[-1])",
                            "Call"
                        ],
                        [
                            "tf.one_hot(labels, label_logits.get_shape()[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "range_3121": {},
            "shape_3133": {
                "input": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "anno['labels']",
                            "Subscript"
                        ],
                        [
                            "anno['labels']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "size_955": {
                "input": {
                    "value": "final_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.add(pred_indices[:, 1], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_955": {
                "x": {
                    "value": "final_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.add(pred_indices[:, 1], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_1449": {
                "x": {
                    "value": "fg_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(rcnn_labels, fg_inds_wrt_sample)",
                            "Call"
                        ],
                        [
                            "tf.gather(labels, fg_inds)",
                            "Call"
                        ],
                        [
                            "tf.gather(rcnn_labels, fg_inds_wrt_sample)",
                            "Call"
                        ],
                        [
                            "tf.gather(labels, fg_inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "size_2401": {
                "input": {
                    "value": "final_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.add(pred_indices[:, 1], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_2401": {
                "x": {
                    "value": "final_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.add(pred_indices[:, 1], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_3121": {
                "x": {
                    "value": "fg_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(rcnn_labels, fg_inds_wrt_sample)",
                            "Call"
                        ],
                        [
                            "tf.gather(labels, fg_inds)",
                            "Call"
                        ],
                        [
                            "tf.gather(rcnn_labels, fg_inds_wrt_sample)",
                            "Call"
                        ],
                        [
                            "tf.gather(labels, fg_inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_385": {
                "x": {
                    "value": "image_shape2d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(image)[2:]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[2:]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_2439": {
                "x": {
                    "value": "image_shape2d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(image)[2:]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[2:]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "random_normal_initializer_681": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_normal_initializer_686": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "nn.py": {
        "tensorflow": {
            "trainable_variables_52": {
                "variable": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_435": {
                "variable": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_612": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([-1, group, group_size, h, w]))",
                            "Call"
                        ],
                        [
                            "BatchNorm(x, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "group_norm(x, scope='gn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(act_single_labels[:, 0], 0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, n_out])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'/'.join(splits)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_622": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([-1, group, group_size, h, w]))",
                            "Call"
                        ],
                        [
                            "BatchNorm(x, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "group_norm(x, scope='gn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(act_single_labels[:, 0], 0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, n_out])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'/'.join(splits)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_657": {
                "variable": {
                    "value": "flat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "out_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[left] + [fixed_shape[i] or tf.shape(tensor)[i] for i in range(start, len(fixed_shape))]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_670": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "target_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pre_shape + keep_shape",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pad_800": {
                "variable": {
                    "value": "l",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [1, 1], [1, 1]], mode='SYMMETRIC')",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], maybe_reverse_pad(2, 3, tf_pad_reverse), maybe_reverse_pad(2, 3, tf_pad_reverse)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_810": {
                "variable": {
                    "value": "l",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "l",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv2d(l, ch_out, 3, stride=stride, activation=NormReLU, use_bias=False, data_format='NCHW', scope='conv1')",
                            "Call"
                        ],
                        [
                            "conv2d(l, ch_out, 3, use_bias=False, activation=get_bn(use_gn, zero_init=True), data_format='NCHW', scope='conv2')",
                            "Call"
                        ],
                        [
                            "conv2d(l, ch_out, 1, activation=NormReLU, scope='conv1', use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "conv2d(l, ch_out, 3, dilations=dilations, stride=stride, activation=NormReLU, scope='conv2', use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "deformable_conv2d(l, offset, ch_out, 3, scope='conv2', data_format='NCHW', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.pad(l, [[0, 0], [0, 0], maybe_reverse_pad(0, 1, tf_pad_reverse), maybe_reverse_pad(0, 1, tf_pad_reverse)])",
                            "Call"
                        ],
                        [
                            "conv2d(l, ch_out, 3, dilations=dilations, stride=2, activation=NormReLU, padding='VALID', scope='conv2', use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "conv2d(l, ch_out * 4, 1, activation=get_bn(use_gn, zero_init=True), scope='conv3', use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "l * tf.reshape(squeeze, shape)",
                            "BinOp"
                        ],
                        [
                            "tf.pad(l, [[0, 0], [0, 0], maybe_reverse_pad(0, 1, tf_pad_reverse), maybe_reverse_pad(0, 1, tf_pad_reverse)])",
                            "Call"
                        ],
                        [
                            "conv2d(l, ch_out * 2, 1, stride=1, activation=NormReLU, scope='conv1', use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "conv2d(l, ch_out * 2, 3, dilations=dilations, stride=stride, activation=NormReLU, scope='conv2', split=32, use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "conv2d(l, ch_out * 4, 1, activation=get_bn(use_gn, zero_init=True), scope='conv3', use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "l[:, :, :-1, :-1]",
                            "Subscript"
                        ],
                        [
                            "block_func(l, features, stride if i == 0 else 1, dilations=dilations_, deformable=deformable_, use_gn=use_gn, tf_pad_reverse=tf_pad_reverse, use_se=use_se)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(l)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], maybe_reverse_pad(2, 3, tf_pad_reverse), maybe_reverse_pad(2, 3, tf_pad_reverse)])",
                            "Call"
                        ],
                        [
                            "conv2d(l, 64, 7, stride=2, activation=BNReLU, padding='VALID', scope='conv0', use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.pad(l, [[0, 0], [0, 0], maybe_reverse_pad(0, 1, tf_pad_reverse), maybe_reverse_pad(0, 1, tf_pad_reverse)])",
                            "Call"
                        ],
                        [
                            "MaxPooling(l, shape=3, stride=2, padding='VALID', scope='pool0', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "resnet_group(l, 'group0', resnet_bottleneck, 64, num_blocks[0], stride=1, tf_pad_reverse=tf_pad_reverse)",
                            "Call"
                        ],
                        [
                            "resnet_group(l, 'group1', resnet_bottleneck, 128, num_blocks[1], stride=2, tf_pad_reverse=tf_pad_reverse)",
                            "Call"
                        ],
                        [
                            "resnet_group(l, 'group2', resnet_bottleneck, 256, num_blocks[2], stride=2, tf_pad_reverse=tf_pad_reverse)",
                            "Call"
                        ],
                        [
                            "resnet_group(image, 'group3', resnet_bottleneck, 512, num_block, stride=2, reuse=reuse, tf_pad_reverse=tf_pad_reverse)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [pad_base[0], pad_base[1] + pad_shape2d[0]], [pad_base[0], pad_base[1] + pad_shape2d[1]]])",
                            "Call"
                        ],
                        [
                            "conv2d(l, 64, 7, stride=2, activation=NormReLU, padding='VALID', scope='conv0', use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.pad(l, [[0, 0], [0, 0], maybe_reverse_pad(0, 1, tf_pad_reverse), maybe_reverse_pad(0, 1, tf_pad_reverse)])",
                            "Call"
                        ],
                        [
                            "MaxPooling(l, shape=3, stride=2, padding='VALID', scope='pool0', data_format='NCHW')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], maybe_reverse_pad(0, 1, tf_pad_reverse), maybe_reverse_pad(0, 1, tf_pad_reverse)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_854": {
                "variable": {
                    "value": "new_shape2d",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ceil(tf.to_float(shape2d) / mult) * mult",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_873": {
                "variable": {
                    "value": "l",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [1, 1], [1, 1]], mode='SYMMETRIC')",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [pad_base[0], pad_base[1] + pad_shape2d[0]], [pad_base[0], pad_base[1] + pad_shape2d[1]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_890": {
                "variable": {
                    "value": "l",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "l",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv2d(l, ch_out, 3, stride=stride, activation=NormReLU, use_bias=False, data_format='NCHW', scope='conv1')",
                            "Call"
                        ],
                        [
                            "conv2d(l, ch_out, 3, use_bias=False, activation=get_bn(use_gn, zero_init=True), data_format='NCHW', scope='conv2')",
                            "Call"
                        ],
                        [
                            "conv2d(l, ch_out, 1, activation=NormReLU, scope='conv1', use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "conv2d(l, ch_out, 3, dilations=dilations, stride=stride, activation=NormReLU, scope='conv2', use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "deformable_conv2d(l, offset, ch_out, 3, scope='conv2', data_format='NCHW', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.pad(l, [[0, 0], [0, 0], maybe_reverse_pad(0, 1, tf_pad_reverse), maybe_reverse_pad(0, 1, tf_pad_reverse)])",
                            "Call"
                        ],
                        [
                            "conv2d(l, ch_out, 3, dilations=dilations, stride=2, activation=NormReLU, padding='VALID', scope='conv2', use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "conv2d(l, ch_out * 4, 1, activation=get_bn(use_gn, zero_init=True), scope='conv3', use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "l * tf.reshape(squeeze, shape)",
                            "BinOp"
                        ],
                        [
                            "tf.pad(l, [[0, 0], [0, 0], maybe_reverse_pad(0, 1, tf_pad_reverse), maybe_reverse_pad(0, 1, tf_pad_reverse)])",
                            "Call"
                        ],
                        [
                            "conv2d(l, ch_out * 2, 1, stride=1, activation=NormReLU, scope='conv1', use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "conv2d(l, ch_out * 2, 3, dilations=dilations, stride=stride, activation=NormReLU, scope='conv2', split=32, use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "conv2d(l, ch_out * 4, 1, activation=get_bn(use_gn, zero_init=True), scope='conv3', use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "l[:, :, :-1, :-1]",
                            "Subscript"
                        ],
                        [
                            "block_func(l, features, stride if i == 0 else 1, dilations=dilations_, deformable=deformable_, use_gn=use_gn, tf_pad_reverse=tf_pad_reverse, use_se=use_se)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(l)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], maybe_reverse_pad(2, 3, tf_pad_reverse), maybe_reverse_pad(2, 3, tf_pad_reverse)])",
                            "Call"
                        ],
                        [
                            "conv2d(l, 64, 7, stride=2, activation=BNReLU, padding='VALID', scope='conv0', use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.pad(l, [[0, 0], [0, 0], maybe_reverse_pad(0, 1, tf_pad_reverse), maybe_reverse_pad(0, 1, tf_pad_reverse)])",
                            "Call"
                        ],
                        [
                            "MaxPooling(l, shape=3, stride=2, padding='VALID', scope='pool0', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "resnet_group(l, 'group0', resnet_bottleneck, 64, num_blocks[0], stride=1, tf_pad_reverse=tf_pad_reverse)",
                            "Call"
                        ],
                        [
                            "resnet_group(l, 'group1', resnet_bottleneck, 128, num_blocks[1], stride=2, tf_pad_reverse=tf_pad_reverse)",
                            "Call"
                        ],
                        [
                            "resnet_group(l, 'group2', resnet_bottleneck, 256, num_blocks[2], stride=2, tf_pad_reverse=tf_pad_reverse)",
                            "Call"
                        ],
                        [
                            "resnet_group(image, 'group3', resnet_bottleneck, 512, num_block, stride=2, reuse=reuse, tf_pad_reverse=tf_pad_reverse)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [pad_base[0], pad_base[1] + pad_shape2d[0]], [pad_base[0], pad_base[1] + pad_shape2d[1]]])",
                            "Call"
                        ],
                        [
                            "conv2d(l, 64, 7, stride=2, activation=NormReLU, padding='VALID', scope='conv0', use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.pad(l, [[0, 0], [0, 0], maybe_reverse_pad(0, 1, tf_pad_reverse), maybe_reverse_pad(0, 1, tf_pad_reverse)])",
                            "Call"
                        ],
                        [
                            "MaxPooling(l, shape=3, stride=2, padding='VALID', scope='pool0', data_format='NCHW')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], maybe_reverse_pad(0, 1, tf_pad_reverse), maybe_reverse_pad(0, 1, tf_pad_reverse)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_1030": {
                "variable": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[gt_boxes, boxes]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_1031": {
                "variable": {
                    "value": "iou",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.eye(tf.shape(gt_boxes)[0]), iou]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_1064": {
                "variable": {
                    "value": "best_iou_ind",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "iou",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pairwise_iou(A, B)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(boxes, gt_boxes)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.eye(tf.shape(gt_boxes)[0]), iou], axis=0)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(boxes, gt_boxes)",
                            "Call"
                        ],
                        [
                            "tf.concat([iou, tf.eye(tf.shape(gt_boxes)[0])], axis=0)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(boxes[i], gt_boxes[i])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_1069": {
                "variable": {
                    "value": "fg_inds_wrt_gt",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "best_iou_ind",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.argmax(iou, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.argmax(iou, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.size(gt_boxes[i]), 0), lambda : tf.zeros_like([], dtype=tf.int64), lambda : tf.argmax(iou, axis=1))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "fg_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.where(fg_mask), [-1])",
                            "Call"
                        ],
                        [
                            "tf.random_shuffle(fg_inds)[:num_fg - num_act_fg]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([fg_inds, act_single_fg_inds], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.where(fg_mask), [-1])",
                            "Call"
                        ],
                        [
                            "tf.random_shuffle(fg_inds)[:num_fg]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(tf.where(fg_mask), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_1071": {
                "variable": {
                    "value": "all_indices",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[fg_inds, bg_inds]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_1074": {
                "variable": {
                    "value": "ret_boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([gt_boxes, boxes], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([boxes, gt_boxes], axis=0)",
                            "Call"
                        ],
                        [
                            "boxes + 1",
                            "BinOp"
                        ],
                        [
                            "transform_fpcoor_for_tf(boxes, image_shape, [crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "transform_fpcoor_for_tf(boxes, image_shape, [crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(boxes)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(boxes)",
                            "Call"
                        ],
                        [
                            "tf.maximum(boxes, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(boxes, tf.to_float(m), name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [batch_size, -1, 4])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "all_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([fg_inds, bg_inds], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([fg_inds, bg_inds], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "sampled_proposal_boxes",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_1076": {
                "variable": {
                    "value": "ret_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.gather(gt_labels, fg_inds_wrt_gt), tf.zeros_like(bg_inds, dtype=tf.int64)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "sampled_labels",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_1085": {
                "variable": {
                    "value": "act_single_ret_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "act_single_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "fg_inds_wrt_gt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(best_iou_ind, fg_inds)",
                            "Call"
                        ],
                        [
                            "tf.gather(best_iou_ind, fg_inds)",
                            "Call"
                        ],
                        [
                            "tf.gather(best_iou_ind, fg_inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_1124": {
                "variable": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[boxes, gt_boxes]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_1125": {
                "variable": {
                    "value": "iou",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[iou, tf.eye(tf.shape(gt_boxes)[0])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_1152": {
                "variable": {
                    "value": "best_iou_ind",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "iou",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pairwise_iou(A, B)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(boxes, gt_boxes)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.eye(tf.shape(gt_boxes)[0]), iou], axis=0)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(boxes, gt_boxes)",
                            "Call"
                        ],
                        [
                            "tf.concat([iou, tf.eye(tf.shape(gt_boxes)[0])], axis=0)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(boxes[i], gt_boxes[i])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_1157": {
                "variable": {
                    "value": "fg_inds_wrt_gt",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "best_iou_ind",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.argmax(iou, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.argmax(iou, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.size(gt_boxes[i]), 0), lambda : tf.zeros_like([], dtype=tf.int64), lambda : tf.argmax(iou, axis=1))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "fg_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.where(fg_mask), [-1])",
                            "Call"
                        ],
                        [
                            "tf.random_shuffle(fg_inds)[:num_fg - num_act_fg]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([fg_inds, act_single_fg_inds], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.where(fg_mask), [-1])",
                            "Call"
                        ],
                        [
                            "tf.random_shuffle(fg_inds)[:num_fg]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(tf.where(fg_mask), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_1159": {
                "variable": {
                    "value": "all_indices",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[fg_inds, bg_inds]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_1162": {
                "variable": {
                    "value": "ret_boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([gt_boxes, boxes], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([boxes, gt_boxes], axis=0)",
                            "Call"
                        ],
                        [
                            "boxes + 1",
                            "BinOp"
                        ],
                        [
                            "transform_fpcoor_for_tf(boxes, image_shape, [crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "transform_fpcoor_for_tf(boxes, image_shape, [crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(boxes)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(boxes)",
                            "Call"
                        ],
                        [
                            "tf.maximum(boxes, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(boxes, tf.to_float(m), name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [batch_size, -1, 4])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "all_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([fg_inds, bg_inds], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([fg_inds, bg_inds], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "sampled_proposal_boxes",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_1164": {
                "variable": {
                    "value": "ret_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.gather(gt_labels, fg_inds_wrt_gt), tf.zeros_like(bg_inds, dtype=tf.int64)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "sampled_labels",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_1223": {
                "variable": {
                    "value": "box_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "box_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(box_labels, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_1275": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [1, 1], [1, 1]], mode='SYMMETRIC')",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "crop_and_resize_1276": {
                "variable": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [1, 1], [1, 1]], mode='SYMMETRIC')",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "boxes": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([gt_boxes, boxes], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([boxes, gt_boxes], axis=0)",
                            "Call"
                        ],
                        [
                            "boxes + 1",
                            "BinOp"
                        ],
                        [
                            "transform_fpcoor_for_tf(boxes, image_shape, [crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "transform_fpcoor_for_tf(boxes, image_shape, [crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(boxes)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(boxes)",
                            "Call"
                        ],
                        [
                            "tf.maximum(boxes, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(boxes, tf.to_float(m), name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [batch_size, -1, 4])",
                            "Call"
                        ]
                    ]
                },
                "box_indices": {
                    "value": "box_ind",
                    "type": "Name",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "[crop_size, crop_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_1279": {
                "variable": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": [
                        [
                            "activation(conv, name='output')",
                            "Call"
                        ],
                        [
                            "layer.apply(x, scope=tf.get_variable_scope())",
                            "Call"
                        ],
                        [
                            "cocomask.iou(to_xywh(A), to_xywh(B), np.zeros((len(B),), dtype=np.bool))",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(x, shape, stride, padding, 'channels_last' if data_format == 'NHWC' else 'channels_first')",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, mat, axes=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(ret, [0, 1, 2, 4, 3, 5])",
                            "Call"
                        ],
                        [
                            "tf.reshape(ret, tf.stack([-1, output_shape[1], tf.shape(x)[2] * shape[0], tf.shape(x)[3] * shape[1]]))",
                            "Call"
                        ],
                        [
                            "tf.image.crop_and_resize(image, boxes, box_ind, crop_size=[crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(ret, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.crop_and_resize(image, boxes, box_ind, crop_size=[crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "crop_and_resize(featuremap, boxes, box_idxs, output_shape * 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(ret, ksize=[1, 1, 2, 2], strides=[1, 1, 2, 2], padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "crop_and_resize(featuremap, boxes, tf.zeros([tf.shape(boxes)[0]], dtype=tf.int32), output_shape * 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(ret, ksize=[1, 1, 2, 2], strides=[1, 1, 2, 2], padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "np.zeros(im_shape, dtype='uint8')",
                            "Call"
                        ],
                        [
                            "update_bn_ema(xn, batch_mean, batch_var, moving_mean, moving_var, decay, internal_update)",
                            "Call"
                        ],
                        [
                            "tf.identity(xn, name='output')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "crop_and_resize_1306": {
                "variable": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [1, 1], [1, 1]], mode='SYMMETRIC')",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "boxes": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([gt_boxes, boxes], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([boxes, gt_boxes], axis=0)",
                            "Call"
                        ],
                        [
                            "boxes + 1",
                            "BinOp"
                        ],
                        [
                            "transform_fpcoor_for_tf(boxes, image_shape, [crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "transform_fpcoor_for_tf(boxes, image_shape, [crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(boxes)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(boxes)",
                            "Call"
                        ],
                        [
                            "tf.maximum(boxes, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(boxes, tf.to_float(m), name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [batch_size, -1, 4])",
                            "Call"
                        ]
                    ]
                },
                "box_indices": {
                    "value": "box_ind",
                    "type": "Name",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "[crop_size, crop_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stop_gradient_1316": {
                "variable": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([gt_boxes, boxes], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([boxes, gt_boxes], axis=0)",
                            "Call"
                        ],
                        [
                            "boxes + 1",
                            "BinOp"
                        ],
                        [
                            "transform_fpcoor_for_tf(boxes, image_shape, [crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "transform_fpcoor_for_tf(boxes, image_shape, [crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(boxes)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(boxes)",
                            "Call"
                        ],
                        [
                            "tf.maximum(boxes, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(boxes, tf.to_float(m), name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [batch_size, -1, 4])",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool_1321": {
                "variable": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": [
                        [
                            "activation(conv, name='output')",
                            "Call"
                        ],
                        [
                            "layer.apply(x, scope=tf.get_variable_scope())",
                            "Call"
                        ],
                        [
                            "cocomask.iou(to_xywh(A), to_xywh(B), np.zeros((len(B),), dtype=np.bool))",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(x, shape, stride, padding, 'channels_last' if data_format == 'NHWC' else 'channels_first')",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, mat, axes=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(ret, [0, 1, 2, 4, 3, 5])",
                            "Call"
                        ],
                        [
                            "tf.reshape(ret, tf.stack([-1, output_shape[1], tf.shape(x)[2] * shape[0], tf.shape(x)[3] * shape[1]]))",
                            "Call"
                        ],
                        [
                            "tf.image.crop_and_resize(image, boxes, box_ind, crop_size=[crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(ret, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.crop_and_resize(image, boxes, box_ind, crop_size=[crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "crop_and_resize(featuremap, boxes, box_idxs, output_shape * 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(ret, ksize=[1, 1, 2, 2], strides=[1, 1, 2, 2], padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "crop_and_resize(featuremap, boxes, tf.zeros([tf.shape(boxes)[0]], dtype=tf.int32), output_shape * 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(ret, ksize=[1, 1, 2, 2], strides=[1, 1, 2, 2], padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "np.zeros(im_shape, dtype='uint8')",
                            "Call"
                        ],
                        [
                            "update_bn_ema(xn, batch_mean, batch_var, moving_mean, moving_var, decay, internal_update)",
                            "Call"
                        ],
                        [
                            "tf.identity(xn, name='output')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, 2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NCHW",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stop_gradient_1327": {
                "variable": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([gt_boxes, boxes], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([boxes, gt_boxes], axis=0)",
                            "Call"
                        ],
                        [
                            "boxes + 1",
                            "BinOp"
                        ],
                        [
                            "transform_fpcoor_for_tf(boxes, image_shape, [crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "transform_fpcoor_for_tf(boxes, image_shape, [crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(boxes)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(boxes)",
                            "Call"
                        ],
                        [
                            "tf.maximum(boxes, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(boxes, tf.to_float(m), name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [batch_size, -1, 4])",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool_1332": {
                "variable": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": [
                        [
                            "activation(conv, name='output')",
                            "Call"
                        ],
                        [
                            "layer.apply(x, scope=tf.get_variable_scope())",
                            "Call"
                        ],
                        [
                            "cocomask.iou(to_xywh(A), to_xywh(B), np.zeros((len(B),), dtype=np.bool))",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(x, shape, stride, padding, 'channels_last' if data_format == 'NHWC' else 'channels_first')",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, mat, axes=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(ret, [0, 1, 2, 4, 3, 5])",
                            "Call"
                        ],
                        [
                            "tf.reshape(ret, tf.stack([-1, output_shape[1], tf.shape(x)[2] * shape[0], tf.shape(x)[3] * shape[1]]))",
                            "Call"
                        ],
                        [
                            "tf.image.crop_and_resize(image, boxes, box_ind, crop_size=[crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(ret, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.crop_and_resize(image, boxes, box_ind, crop_size=[crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "crop_and_resize(featuremap, boxes, box_idxs, output_shape * 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(ret, ksize=[1, 1, 2, 2], strides=[1, 1, 2, 2], padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "crop_and_resize(featuremap, boxes, tf.zeros([tf.shape(boxes)[0]], dtype=tf.int32), output_shape * 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(ret, ksize=[1, 1, 2, 2], strides=[1, 1, 2, 2], padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "np.zeros(im_shape, dtype='uint8')",
                            "Call"
                        ],
                        [
                            "update_bn_ema(xn, batch_mean, batch_var, moving_mean, moving_var, decay, internal_update)",
                            "Call"
                        ],
                        [
                            "tf.identity(xn, name='output')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, 2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NCHW",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_1341": {
                "variable": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([gt_boxes, boxes], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([boxes, gt_boxes], axis=0)",
                            "Call"
                        ],
                        [
                            "boxes + 1",
                            "BinOp"
                        ],
                        [
                            "transform_fpcoor_for_tf(boxes, image_shape, [crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "transform_fpcoor_for_tf(boxes, image_shape, [crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(boxes)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(boxes)",
                            "Call"
                        ],
                        [
                            "tf.maximum(boxes, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(boxes, tf.to_float(m), name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [batch_size, -1, 4])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_1344": {
                "variable": {
                    "value": "m",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reverse(image_shape, [0])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "minimum_1345": {
                "variable": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([gt_boxes, boxes], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([boxes, gt_boxes], axis=0)",
                            "Call"
                        ],
                        [
                            "boxes + 1",
                            "BinOp"
                        ],
                        [
                            "transform_fpcoor_for_tf(boxes, image_shape, [crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "transform_fpcoor_for_tf(boxes, image_shape, [crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(boxes)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(boxes)",
                            "Call"
                        ],
                        [
                            "tf.maximum(boxes, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(boxes, tf.to_float(m), name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [batch_size, -1, 4])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.to_float(m)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'/'.join(splits)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "minimum_1367": {
                "variable": {
                    "value": "topk",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "pre_nms_topk",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.rpn_train_pre_nms_topk",
                            "Attribute"
                        ],
                        [
                            "config.rpn_test_pre_nms_topk",
                            "Attribute"
                        ],
                        [
                            "config.rpn_train_pre_nms_topk",
                            "Attribute"
                        ],
                        [
                            "config.rpn_test_pre_nms_topk",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.size(scores)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "top_k_1368": {
                "variable": {
                    "value": "(topk_scores, topk_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(scores, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "topk",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.minimum(pre_nms_topk, tf.size(scores))",
                            "Call"
                        ],
                        [
                            "tf.minimum(pre_nms_topk, d_h * d_w * num_anchors)",
                            "Call"
                        ]
                    ]
                },
                "sorted": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_1371": {
                "variable": {
                    "value": "topk_boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([gt_boxes, boxes], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([boxes, gt_boxes], axis=0)",
                            "Call"
                        ],
                        [
                            "boxes + 1",
                            "BinOp"
                        ],
                        [
                            "transform_fpcoor_for_tf(boxes, image_shape, [crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "transform_fpcoor_for_tf(boxes, image_shape, [crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(boxes)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(boxes)",
                            "Call"
                        ],
                        [
                            "tf.maximum(boxes, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(boxes, tf.to_float(m), name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [batch_size, -1, 4])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "topk_indices",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "split_1374": {
                "variable": {
                    "value": "(topk_boxes_x1y1, topk_boxes_x2y2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "topk_boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(boxes, topk_indices)",
                            "Call"
                        ],
                        [
                            "clip_boxes(topk_boxes, img_shape)",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, topk_indices, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "clip_boxes(topk_boxes, img_shape)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_1376": {
                "variable": {
                    "value": "topk_boxes_x1y1x2y2",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "topk_boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(boxes, topk_indices)",
                            "Call"
                        ],
                        [
                            "clip_boxes(topk_boxes, img_shape)",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, topk_indices, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "clip_boxes(topk_boxes, img_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_all_1380": {
                "variable": {
                    "value": "valid",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "wbhb > config.rpn_min_size",
                    "type": "Compare",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "boolean_mask_1382": {
                "variable": {
                    "value": "topk_valid_boxes_x1y1x2y2",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "topk_boxes_x1y1x2y2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(topk_boxes, (-1, 2, 2))",
                            "Call"
                        ],
                        [
                            "tf.reshape(topk_boxes, (batch_size, -1, 2, 2))",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "valid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_all(wbhb > config.rpn_min_size, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_1383": {
                "variable": {
                    "value": "topk_valid_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "topk_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(topk_scores, [batch_size, -1, 1])",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "valid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_all(wbhb > config.rpn_min_size, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1386": {
                "variable": {
                    "value": "topk_valid_boxes_y1x1y2x2",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reverse(topk_valid_boxes_x1y1x2y2, axis=[2])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "nms_input_boxes",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "non_max_suppression_1390": {
                "variable": {
                    "value": "nms_indices",
                    "type": "Name",
                    "possible_values": []
                },
                "boxes": {
                    "value": "topk_valid_boxes_y1x1y2x2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.reverse(topk_valid_boxes_x1y1x2y2, axis=[2]), (-1, 4), name='nms_input_boxes')",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.reverse(topk_boxes_x1y1x2y2, axis=[3]), (batch_size, -1, 1, 4), name='nms_input_boxes')",
                            "Call"
                        ]
                    ]
                },
                "scores": {
                    "value": "topk_valid_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.boolean_mask(topk_scores, valid)",
                            "Call"
                        ]
                    ]
                },
                "max_output_size": {
                    "value": "post_nms_topk",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pre_nms_topk",
                            "Name"
                        ],
                        [
                            "config.rpn_train_post_nms_topk",
                            "Attribute"
                        ],
                        [
                            "config.rpn_test_post_nms_topk",
                            "Attribute"
                        ],
                        [
                            "pre_nms_topk",
                            "Name"
                        ],
                        [
                            "config.rpn_train_post_nms_topk",
                            "Attribute"
                        ],
                        [
                            "config.rpn_test_post_nms_topk",
                            "Attribute"
                        ]
                    ]
                },
                "iou_threshold": {
                    "value": "config.rpn_proposal_nms_thres",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_1395": {
                "variable": {
                    "value": "topk_valid_boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "topk_valid_boxes_x1y1x2y2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.boolean_mask(topk_boxes_x1y1x2y2, valid)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gather_1397": {
                "variable": {
                    "value": "final_boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "topk_valid_boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(topk_valid_boxes_x1y1x2y2, (-1, 4))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "nms_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.non_max_suppression(topk_valid_boxes_y1x1y2x2, topk_valid_scores, max_output_size=post_nms_topk, iou_threshold=config.rpn_proposal_nms_thres)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "boxes",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_1398": {
                "variable": {
                    "value": "final_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "topk_valid_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.boolean_mask(topk_scores, valid)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "nms_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.non_max_suppression(topk_valid_boxes_y1x1y2x2, topk_valid_scores, max_output_size=post_nms_topk, iou_threshold=config.rpn_proposal_nms_thres)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scores",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "minimum_1424": {
                "variable": {
                    "value": "topk",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "pre_nms_topk",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.rpn_train_pre_nms_topk",
                            "Attribute"
                        ],
                        [
                            "config.rpn_test_pre_nms_topk",
                            "Attribute"
                        ],
                        [
                            "config.rpn_train_pre_nms_topk",
                            "Attribute"
                        ],
                        [
                            "config.rpn_test_pre_nms_topk",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "d_h * d_w * num_anchors",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_1427": {
                "variable": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(scores, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1429": {
                "variable": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([gt_boxes, boxes], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([boxes, gt_boxes], axis=0)",
                            "Call"
                        ],
                        [
                            "boxes + 1",
                            "BinOp"
                        ],
                        [
                            "transform_fpcoor_for_tf(boxes, image_shape, [crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "transform_fpcoor_for_tf(boxes, image_shape, [crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(boxes)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(boxes)",
                            "Call"
                        ],
                        [
                            "tf.maximum(boxes, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(boxes, tf.to_float(m), name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [batch_size, -1, 4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_1431": {
                "variable": {
                    "value": "(topk_scores, topk_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(scores, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "topk",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.minimum(pre_nms_topk, tf.size(scores))",
                            "Call"
                        ],
                        [
                            "tf.minimum(pre_nms_topk, d_h * d_w * num_anchors)",
                            "Call"
                        ]
                    ]
                },
                "sorted": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_1434": {
                "variable": {
                    "value": "topk_boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([gt_boxes, boxes], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([boxes, gt_boxes], axis=0)",
                            "Call"
                        ],
                        [
                            "boxes + 1",
                            "BinOp"
                        ],
                        [
                            "transform_fpcoor_for_tf(boxes, image_shape, [crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "transform_fpcoor_for_tf(boxes, image_shape, [crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(boxes)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(boxes)",
                            "Call"
                        ],
                        [
                            "tf.maximum(boxes, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(boxes, tf.to_float(m), name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [batch_size, -1, 4])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "topk_indices",
                    "type": "Name",
                    "possible_values": []
                },
                "batch_dims": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_1438": {
                "variable": {
                    "value": "topk_boxes_x1y1x2y2",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "topk_boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(boxes, topk_indices)",
                            "Call"
                        ],
                        [
                            "clip_boxes(topk_boxes, img_shape)",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, topk_indices, batch_dims=1)",
                            "Call"
                        ],
                        [
                            "clip_boxes(topk_boxes, img_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_1460": {
                "variable": {
                    "value": "topk_valid_boxes_y1x1y2x2",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reverse(topk_boxes_x1y1x2y2, axis=[3])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, -1, 1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "nms_input_boxes",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_1463": {
                "variable": {
                    "value": "topk_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "topk_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(topk_scores, [batch_size, -1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "combined_non_max_suppression_1468": {
                "variable": {
                    "value": "(nms_boxes, nms_scores, nms_classes, valid_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "boxes": {
                    "value": "topk_valid_boxes_y1x1y2x2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.reverse(topk_valid_boxes_x1y1x2y2, axis=[2]), (-1, 4), name='nms_input_boxes')",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.reverse(topk_boxes_x1y1x2y2, axis=[3]), (batch_size, -1, 1, 4), name='nms_input_boxes')",
                            "Call"
                        ]
                    ]
                },
                "scores": {
                    "value": "topk_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(topk_scores, [batch_size, -1, 1])",
                            "Call"
                        ]
                    ]
                },
                "max_output_size_per_class": {
                    "value": "post_nms_topk",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pre_nms_topk",
                            "Name"
                        ],
                        [
                            "config.rpn_train_post_nms_topk",
                            "Attribute"
                        ],
                        [
                            "config.rpn_test_post_nms_topk",
                            "Attribute"
                        ],
                        [
                            "pre_nms_topk",
                            "Name"
                        ],
                        [
                            "config.rpn_train_post_nms_topk",
                            "Attribute"
                        ],
                        [
                            "config.rpn_test_post_nms_topk",
                            "Attribute"
                        ]
                    ]
                },
                "max_total_size": {
                    "value": "post_nms_topk",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pre_nms_topk",
                            "Name"
                        ],
                        [
                            "config.rpn_train_post_nms_topk",
                            "Attribute"
                        ],
                        [
                            "config.rpn_test_post_nms_topk",
                            "Attribute"
                        ],
                        [
                            "pre_nms_topk",
                            "Name"
                        ],
                        [
                            "config.rpn_train_post_nms_topk",
                            "Attribute"
                        ],
                        [
                            "config.rpn_test_post_nms_topk",
                            "Attribute"
                        ]
                    ]
                },
                "iou_threshold": {
                    "value": "config.rpn_proposal_nms_thres",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_boxes": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "pad_per_class": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_1477": {
                "variable": {
                    "value": "nms_boxes_y1x1y2x2",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "nms_boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, -1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reverse_1478": {
                "variable": {
                    "value": "nms_boxes_x1y1x2y2",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "nms_boxes_y1x1y2x2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(nms_boxes, (batch_size, -1, 2, 2))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1480": {
                "variable": {
                    "value": "nms_boxes_x1y1x2y2",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "nms_boxes_x1y1x2y2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reverse(nms_boxes_y1x1y2x2, axis=[3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(nms_boxes_x1y1x2y2, (batch_size, -1, 4))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_1490": {
                "variable": {
                    "value": "box_pred_txtytwth",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_predictions",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "split_1492": {
                "variable": {
                    "value": "(box_pred_txty, box_pred_twth)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "box_pred_txtytwth",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(box_predictions, (-1, 4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_predictions, (-1, 4))",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_1497": {
                "variable": {
                    "value": "anchors",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(anchors, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(anchors, [batch_size, 1, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_1498": {
                "variable": {
                    "value": "anchors",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(anchors, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(anchors, [batch_size, 1, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1499": {
                "variable": {
                    "value": "anchors_x1y1x2y2",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "anchors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(anchors, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(anchors, [batch_size, 1, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "split_1500": {
                "variable": {
                    "value": "(anchors_x1y1, anchors_x2y2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "anchors_x1y1x2y2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(anchors, (-1, 4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(anchors, (-1, 4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(anchors, (-1, 4))",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_1512": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[x1y1, x2y2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_1519": {
                "variable": {
                    "value": "box_pred_txtytwth",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_predictions",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "split_1521": {
                "variable": {
                    "value": "(box_pred_txty, box_pred_twth)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "box_pred_txtytwth",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(box_predictions, (-1, 4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(box_predictions, (-1, 4))",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_1524": {
                "variable": {
                    "value": "anchors_x1y1x2y2",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "anchors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(anchors, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(anchors, [batch_size, 1, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "split_1525": {
                "variable": {
                    "value": "(anchors_x1y1, anchors_x2y2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "anchors_x1y1x2y2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(anchors, (-1, 4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(anchors, (-1, 4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(anchors, (-1, 4))",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_1537": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[x1y1, x2y2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_1627": {
                "variable": {
                    "value": "sigmoid_p",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(query, key, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(query, key, transpose_b=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_1629": {
                "variable": {
                    "value": "zeros",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "sigmoid_p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(logits)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sigmoid_p.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_1631": {
                "variable": {
                    "value": "pos_p_sub",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "labels > zeros",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "labels - sigmoid_p",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "zeros",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_like(sigmoid_p, dtype=sigmoid_p.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_1633": {
                "variable": {
                    "value": "neg_p_sub",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "labels > zeros",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "zeros",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_like(sigmoid_p, dtype=sigmoid_p.dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "sigmoid_p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_1833": {
                "variable": {
                    "value": "moving_mean",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "mean/EMA",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_1836": {
                "variable": {
                    "value": "moving_var",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "variance/EMA",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_81": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_90": {
                "variable": {
                    "value": "orig_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([-1, group, group_size, h, w]))",
                            "Call"
                        ],
                        [
                            "BatchNorm(x, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "group_norm(x, scope='gn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(act_single_labels[:, 0], 0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, n_out])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_93": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([-1, group, group_size, h, w]))",
                            "Call"
                        ],
                        [
                            "BatchNorm(x, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "group_norm(x, scope='gn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(act_single_labels[:, 0], 0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, n_out])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([-1, group, group_size, h, w])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "moments_95": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([-1, group, group_size, h, w]))",
                            "Call"
                        ],
                        [
                            "BatchNorm(x, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "group_norm(x, scope='gn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(act_single_labels[:, 0], 0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, n_out])",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_99": {
                "variable": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[chan]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_101": {
                "variable": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', [chan], initializer=tf.constant_initializer())",
                            "Call"
                        ],
                        [
                            "tf.reshape(beta, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('beta', [n_out], initializer=tf.constant_initializer())",
                            "Call"
                        ],
                        [
                            "tf.zeros([n_out], name='beta')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1, group, group_size, 1, 1]",
                            "List"
                        ]
                    ]
                }
            },
            "get_variable_103": {
                "variable": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[chan]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "gamma_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant_initializer(1.0)",
                            "MethodArgument"
                        ],
                        [
                            "tf.constant_initializer(1.0)",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_104": {
                "variable": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('gamma', [chan], initializer=gamma_init)",
                            "Call"
                        ],
                        [
                            "tf.reshape(gamma, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('gamma', [n_out], initializer=gamma_init)",
                            "Call"
                        ],
                        [
                            "tf.ones([n_out], name='gamma')",
                            "Call"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1, group, group_size, 1, 1]",
                            "List"
                        ]
                    ]
                }
            },
            "batch_normalization_106": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([-1, group, group_size, h, w]))",
                            "Call"
                        ],
                        [
                            "BatchNorm(x, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "group_norm(x, scope='gn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(act_single_labels[:, 0], 0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, n_out])",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "Name",
                    "possible_values": []
                },
                "variance": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "variables",
                            "Name"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', [chan], initializer=tf.constant_initializer())",
                            "Call"
                        ],
                        [
                            "tf.reshape(beta, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('beta', [n_out], initializer=tf.constant_initializer())",
                            "Call"
                        ],
                        [
                            "tf.zeros([n_out], name='beta')",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('gamma', [chan], initializer=gamma_init)",
                            "Call"
                        ],
                        [
                            "tf.reshape(gamma, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('gamma', [n_out], initializer=gamma_init)",
                            "Call"
                        ],
                        [
                            "tf.ones([n_out], name='gamma')",
                            "Call"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "output",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_130": {
                "variable": {
                    "value": "box_geo_feat",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "box_geo_feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dense(box_geo_encoded, geo_feat_dim, activation=tf.nn.tanh, use_bias=True, wd=None, keep_first=False, scope='geo_emb')",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_geo_feat, perm=[2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(box_geo_feat, axis=0)",
                            "Call"
                        ],
                        [
                            "dense(box_geo_encoded, geo_feat_dim, activation=tf.nn.tanh, use_bias=True, wd=None, keep_first=False, scope='geo_emb')",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_geo_feat, perm=[2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(box_geo_feat, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_131": {
                "variable": {
                    "value": "box_geo_feat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "box_geo_feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dense(box_geo_encoded, geo_feat_dim, activation=tf.nn.tanh, use_bias=True, wd=None, keep_first=False, scope='geo_emb')",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_geo_feat, perm=[2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(box_geo_feat, axis=0)",
                            "Call"
                        ],
                        [
                            "dense(box_geo_encoded, geo_feat_dim, activation=tf.nn.tanh, use_bias=True, wd=None, keep_first=False, scope='geo_emb')",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_geo_feat, perm=[2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(box_geo_feat, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_136": {
                "variable": {
                    "value": "box_geo_feat_wg",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "box_geo_feat_wg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv2d(box_geo_feat, fc_dim, kernel=1, stride=1, data_format='NCHW', scope='geo_conv')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(box_geo_feat_wg)",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_geo_feat_wg, perm=[1, 2, 0])",
                            "Call"
                        ],
                        [
                            "conv2d(box_geo_feat, fc_dim, kernel=1, stride=1, data_format='NCHW', scope='geo_conv')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(box_geo_feat_wg)",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_geo_feat_wg, perm=[1, 2, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_137": {
                "variable": {
                    "value": "box_geo_feat_wg",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "box_geo_feat_wg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv2d(box_geo_feat, fc_dim, kernel=1, stride=1, data_format='NCHW', scope='geo_conv')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(box_geo_feat_wg)",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_geo_feat_wg, perm=[1, 2, 0])",
                            "Call"
                        ],
                        [
                            "conv2d(box_geo_feat, fc_dim, kernel=1, stride=1, data_format='NCHW', scope='geo_conv')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(box_geo_feat_wg)",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_geo_feat_wg, perm=[1, 2, 0])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_140": {
                "variable": {
                    "value": "box_geo_feat_wg_relu",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "box_geo_feat_wg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv2d(box_geo_feat, fc_dim, kernel=1, stride=1, data_format='NCHW', scope='geo_conv')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(box_geo_feat_wg)",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_geo_feat_wg, perm=[1, 2, 0])",
                            "Call"
                        ],
                        [
                            "conv2d(box_geo_feat, fc_dim, kernel=1, stride=1, data_format='NCHW', scope='geo_conv')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(box_geo_feat_wg)",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_geo_feat_wg, perm=[1, 2, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_142": {
                "variable": {
                    "value": "box_geo_feat_wg_relu",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "box_geo_feat_wg_relu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(box_geo_feat_wg)",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_geo_feat_wg_relu, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(box_geo_feat_wg)",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_geo_feat_wg_relu, perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_151": {
                "variable": {
                    "value": "query",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "query",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dense(box_appearance_feat, box_feat_dim, activation=tf.identity, use_bias=False, wd=None, keep_first=False, scope='query_linear')",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, (-1, group, group_feat_dim))",
                            "Call"
                        ],
                        [
                            "tf.transpose(query, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "dense(box_appearance_feat, box_feat_dim, activation=tf.identity, use_bias=False, wd=None, keep_first=False, scope='query_linear')",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, (-1, group, group_feat_dim))",
                            "Call"
                        ],
                        [
                            "tf.transpose(query, perm=[1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, group, group_feat_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_152": {
                "variable": {
                    "value": "query",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "query",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dense(box_appearance_feat, box_feat_dim, activation=tf.identity, use_bias=False, wd=None, keep_first=False, scope='query_linear')",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, (-1, group, group_feat_dim))",
                            "Call"
                        ],
                        [
                            "tf.transpose(query, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "dense(box_appearance_feat, box_feat_dim, activation=tf.identity, use_bias=False, wd=None, keep_first=False, scope='query_linear')",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, (-1, group, group_feat_dim))",
                            "Call"
                        ],
                        [
                            "tf.transpose(query, perm=[1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_159": {
                "variable": {
                    "value": "key",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "key",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dense(box_appearance_feat, box_feat_dim, activation=tf.identity, use_bias=False, wd=None, keep_first=False, scope='key_linear')",
                            "Call"
                        ],
                        [
                            "tf.reshape(key, (-1, group, group_feat_dim))",
                            "Call"
                        ],
                        [
                            "tf.transpose(key, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "dense(ref_feat, box_feat_dim, activation=tf.identity, use_bias=False, wd=None, keep_first=False, scope='key_linear')",
                            "Call"
                        ],
                        [
                            "tf.reshape(key, (-1, group, group_feat_dim))",
                            "Call"
                        ],
                        [
                            "tf.transpose(key, perm=[1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, group, group_feat_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_160": {
                "variable": {
                    "value": "key",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "key",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dense(box_appearance_feat, box_feat_dim, activation=tf.identity, use_bias=False, wd=None, keep_first=False, scope='key_linear')",
                            "Call"
                        ],
                        [
                            "tf.reshape(key, (-1, group, group_feat_dim))",
                            "Call"
                        ],
                        [
                            "tf.transpose(key, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "dense(ref_feat, box_feat_dim, activation=tf.identity, use_bias=False, wd=None, keep_first=False, scope='key_linear')",
                            "Call"
                        ],
                        [
                            "tf.reshape(key, (-1, group, group_feat_dim))",
                            "Call"
                        ],
                        [
                            "tf.transpose(key, perm=[1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_165": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "query",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dense(box_appearance_feat, box_feat_dim, activation=tf.identity, use_bias=False, wd=None, keep_first=False, scope='query_linear')",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, (-1, group, group_feat_dim))",
                            "Call"
                        ],
                        [
                            "tf.transpose(query, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "dense(box_appearance_feat, box_feat_dim, activation=tf.identity, use_bias=False, wd=None, keep_first=False, scope='query_linear')",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, (-1, group, group_feat_dim))",
                            "Call"
                        ],
                        [
                            "tf.transpose(query, perm=[1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "key",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dense(box_appearance_feat, box_feat_dim, activation=tf.identity, use_bias=False, wd=None, keep_first=False, scope='key_linear')",
                            "Call"
                        ],
                        [
                            "tf.reshape(key, (-1, group, group_feat_dim))",
                            "Call"
                        ],
                        [
                            "tf.transpose(key, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "dense(ref_feat, box_feat_dim, activation=tf.identity, use_bias=False, wd=None, keep_first=False, scope='key_linear')",
                            "Call"
                        ],
                        [
                            "tf.reshape(key, (-1, group, group_feat_dim))",
                            "Call"
                        ],
                        [
                            "tf.transpose(key, perm=[1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_167": {
                "variable": {
                    "value": "logits_scaled",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "logits_scaled",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 / math.sqrt(float(group_feat_dim)) * logits",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(logits_scaled, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "1.0 / math.sqrt(float(group_feat_dim)) * logits",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(logits_scaled, perm=[1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_172": {
                "variable": {
                    "value": "weighted_softmax",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "weighted_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.log(tf.maximum(box_geo_feat_wg_relu, 1e-06)) + logits_scaled",
                            "BinOp"
                        ],
                        [
                            "tf.log(tf.maximum(box_geo_feat_wg_relu, 1e-06)) + logits_scaled",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_175": {
                "variable": {
                    "value": "weighted_softmax",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "weighted_softmax",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(weighted_logits)",
                            "Call"
                        ],
                        [
                            "tf.reshape(weighted_softmax, (tf.shape(weighted_softmax)[0] * group, tf.shape(weighted_softmax)[-1]))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(weighted_logits)",
                            "Call"
                        ],
                        [
                            "tf.reshape(weighted_softmax, (tf.shape(weighted_softmax)[0] * group, tf.shape(weighted_softmax)[-1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(tf.shape(weighted_softmax)[0] * group, tf.shape(weighted_softmax)[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_180": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "weighted_softmax",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(weighted_logits)",
                            "Call"
                        ],
                        [
                            "tf.reshape(weighted_softmax, (tf.shape(weighted_softmax)[0] * group, tf.shape(weighted_softmax)[-1]))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(weighted_logits)",
                            "Call"
                        ],
                        [
                            "tf.reshape(weighted_softmax, (tf.shape(weighted_softmax)[0] * group, tf.shape(weighted_softmax)[-1]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "box_appearance_feat",
                            "Name"
                        ],
                        [
                            "ref_feat",
                            "Name"
                        ]
                    ]
                }
            },
            "reshape_183": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(weighted_softmax, value)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, (-1, group, box_feat_dim))",
                            "Call"
                        ],
                        [
                            "dense(output, box_feat_dim, activation=tf.identity, use_bias=False, wd=None, keep_first=True, scope='output_linear')",
                            "Call"
                        ],
                        [
                            "tf.matmul(weighted_softmax, value)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, (-1, group, box_feat_dim))",
                            "Call"
                        ],
                        [
                            "dense(output, box_feat_dim, activation=tf.identity, use_bias=False, wd=None, keep_first=True, scope='output_linear')",
                            "Call"
                        ],
                        [
                            "tf.stack([delta_x, delta_y, delta_w, delta_h], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.stack([delta_x, delta_y, delta_w, delta_h], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(input_deform, W, strides=[1, 2, 2, 1, 1], data_format='NDHWC', padding='VALID', name=None)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(output, b, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation(output, name='output')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, group, box_feat_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_210": {
                "variable": {
                    "value": "box_geo_feat",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "box_geo_feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dense(box_geo_encoded, geo_feat_dim, activation=tf.nn.tanh, use_bias=True, wd=None, keep_first=False, scope='geo_emb')",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_geo_feat, perm=[2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(box_geo_feat, axis=0)",
                            "Call"
                        ],
                        [
                            "dense(box_geo_encoded, geo_feat_dim, activation=tf.nn.tanh, use_bias=True, wd=None, keep_first=False, scope='geo_emb')",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_geo_feat, perm=[2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(box_geo_feat, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_211": {
                "variable": {
                    "value": "box_geo_feat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "box_geo_feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dense(box_geo_encoded, geo_feat_dim, activation=tf.nn.tanh, use_bias=True, wd=None, keep_first=False, scope='geo_emb')",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_geo_feat, perm=[2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(box_geo_feat, axis=0)",
                            "Call"
                        ],
                        [
                            "dense(box_geo_encoded, geo_feat_dim, activation=tf.nn.tanh, use_bias=True, wd=None, keep_first=False, scope='geo_emb')",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_geo_feat, perm=[2, 0, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(box_geo_feat, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_216": {
                "variable": {
                    "value": "box_geo_feat_wg",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "box_geo_feat_wg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv2d(box_geo_feat, fc_dim, kernel=1, stride=1, data_format='NCHW', scope='geo_conv')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(box_geo_feat_wg)",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_geo_feat_wg, perm=[1, 2, 0])",
                            "Call"
                        ],
                        [
                            "conv2d(box_geo_feat, fc_dim, kernel=1, stride=1, data_format='NCHW', scope='geo_conv')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(box_geo_feat_wg)",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_geo_feat_wg, perm=[1, 2, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_217": {
                "variable": {
                    "value": "box_geo_feat_wg",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "box_geo_feat_wg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv2d(box_geo_feat, fc_dim, kernel=1, stride=1, data_format='NCHW', scope='geo_conv')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(box_geo_feat_wg)",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_geo_feat_wg, perm=[1, 2, 0])",
                            "Call"
                        ],
                        [
                            "conv2d(box_geo_feat, fc_dim, kernel=1, stride=1, data_format='NCHW', scope='geo_conv')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(box_geo_feat_wg)",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_geo_feat_wg, perm=[1, 2, 0])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_220": {
                "variable": {
                    "value": "box_geo_feat_wg_relu",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "box_geo_feat_wg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv2d(box_geo_feat, fc_dim, kernel=1, stride=1, data_format='NCHW', scope='geo_conv')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(box_geo_feat_wg)",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_geo_feat_wg, perm=[1, 2, 0])",
                            "Call"
                        ],
                        [
                            "conv2d(box_geo_feat, fc_dim, kernel=1, stride=1, data_format='NCHW', scope='geo_conv')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(box_geo_feat_wg)",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_geo_feat_wg, perm=[1, 2, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_222": {
                "variable": {
                    "value": "box_geo_feat_wg_relu",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "box_geo_feat_wg_relu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(box_geo_feat_wg)",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_geo_feat_wg_relu, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(box_geo_feat_wg)",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_geo_feat_wg_relu, perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_231": {
                "variable": {
                    "value": "query",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "query",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dense(box_appearance_feat, box_feat_dim, activation=tf.identity, use_bias=False, wd=None, keep_first=False, scope='query_linear')",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, (-1, group, group_feat_dim))",
                            "Call"
                        ],
                        [
                            "tf.transpose(query, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "dense(box_appearance_feat, box_feat_dim, activation=tf.identity, use_bias=False, wd=None, keep_first=False, scope='query_linear')",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, (-1, group, group_feat_dim))",
                            "Call"
                        ],
                        [
                            "tf.transpose(query, perm=[1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, group, group_feat_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_232": {
                "variable": {
                    "value": "query",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "query",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dense(box_appearance_feat, box_feat_dim, activation=tf.identity, use_bias=False, wd=None, keep_first=False, scope='query_linear')",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, (-1, group, group_feat_dim))",
                            "Call"
                        ],
                        [
                            "tf.transpose(query, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "dense(box_appearance_feat, box_feat_dim, activation=tf.identity, use_bias=False, wd=None, keep_first=False, scope='query_linear')",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, (-1, group, group_feat_dim))",
                            "Call"
                        ],
                        [
                            "tf.transpose(query, perm=[1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_239": {
                "variable": {
                    "value": "key",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "key",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dense(box_appearance_feat, box_feat_dim, activation=tf.identity, use_bias=False, wd=None, keep_first=False, scope='key_linear')",
                            "Call"
                        ],
                        [
                            "tf.reshape(key, (-1, group, group_feat_dim))",
                            "Call"
                        ],
                        [
                            "tf.transpose(key, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "dense(ref_feat, box_feat_dim, activation=tf.identity, use_bias=False, wd=None, keep_first=False, scope='key_linear')",
                            "Call"
                        ],
                        [
                            "tf.reshape(key, (-1, group, group_feat_dim))",
                            "Call"
                        ],
                        [
                            "tf.transpose(key, perm=[1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, group, group_feat_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_240": {
                "variable": {
                    "value": "key",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "key",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dense(box_appearance_feat, box_feat_dim, activation=tf.identity, use_bias=False, wd=None, keep_first=False, scope='key_linear')",
                            "Call"
                        ],
                        [
                            "tf.reshape(key, (-1, group, group_feat_dim))",
                            "Call"
                        ],
                        [
                            "tf.transpose(key, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "dense(ref_feat, box_feat_dim, activation=tf.identity, use_bias=False, wd=None, keep_first=False, scope='key_linear')",
                            "Call"
                        ],
                        [
                            "tf.reshape(key, (-1, group, group_feat_dim))",
                            "Call"
                        ],
                        [
                            "tf.transpose(key, perm=[1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_245": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "query",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dense(box_appearance_feat, box_feat_dim, activation=tf.identity, use_bias=False, wd=None, keep_first=False, scope='query_linear')",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, (-1, group, group_feat_dim))",
                            "Call"
                        ],
                        [
                            "tf.transpose(query, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "dense(box_appearance_feat, box_feat_dim, activation=tf.identity, use_bias=False, wd=None, keep_first=False, scope='query_linear')",
                            "Call"
                        ],
                        [
                            "tf.reshape(query, (-1, group, group_feat_dim))",
                            "Call"
                        ],
                        [
                            "tf.transpose(query, perm=[1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "key",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dense(box_appearance_feat, box_feat_dim, activation=tf.identity, use_bias=False, wd=None, keep_first=False, scope='key_linear')",
                            "Call"
                        ],
                        [
                            "tf.reshape(key, (-1, group, group_feat_dim))",
                            "Call"
                        ],
                        [
                            "tf.transpose(key, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "dense(ref_feat, box_feat_dim, activation=tf.identity, use_bias=False, wd=None, keep_first=False, scope='key_linear')",
                            "Call"
                        ],
                        [
                            "tf.reshape(key, (-1, group, group_feat_dim))",
                            "Call"
                        ],
                        [
                            "tf.transpose(key, perm=[1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_247": {
                "variable": {
                    "value": "logits_scaled",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "logits_scaled",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 / math.sqrt(float(group_feat_dim)) * logits",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(logits_scaled, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "1.0 / math.sqrt(float(group_feat_dim)) * logits",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(logits_scaled, perm=[1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_252": {
                "variable": {
                    "value": "weighted_softmax",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "weighted_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.log(tf.maximum(box_geo_feat_wg_relu, 1e-06)) + logits_scaled",
                            "BinOp"
                        ],
                        [
                            "tf.log(tf.maximum(box_geo_feat_wg_relu, 1e-06)) + logits_scaled",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_255": {
                "variable": {
                    "value": "weighted_softmax",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "weighted_softmax",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(weighted_logits)",
                            "Call"
                        ],
                        [
                            "tf.reshape(weighted_softmax, (tf.shape(weighted_softmax)[0] * group, tf.shape(weighted_softmax)[-1]))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(weighted_logits)",
                            "Call"
                        ],
                        [
                            "tf.reshape(weighted_softmax, (tf.shape(weighted_softmax)[0] * group, tf.shape(weighted_softmax)[-1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(tf.shape(weighted_softmax)[0] * group, tf.shape(weighted_softmax)[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_260": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "weighted_softmax",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(weighted_logits)",
                            "Call"
                        ],
                        [
                            "tf.reshape(weighted_softmax, (tf.shape(weighted_softmax)[0] * group, tf.shape(weighted_softmax)[-1]))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(weighted_logits)",
                            "Call"
                        ],
                        [
                            "tf.reshape(weighted_softmax, (tf.shape(weighted_softmax)[0] * group, tf.shape(weighted_softmax)[-1]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "box_appearance_feat",
                            "Name"
                        ],
                        [
                            "ref_feat",
                            "Name"
                        ]
                    ]
                }
            },
            "reshape_263": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(weighted_softmax, value)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, (-1, group, box_feat_dim))",
                            "Call"
                        ],
                        [
                            "dense(output, box_feat_dim, activation=tf.identity, use_bias=False, wd=None, keep_first=True, scope='output_linear')",
                            "Call"
                        ],
                        [
                            "tf.matmul(weighted_softmax, value)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, (-1, group, box_feat_dim))",
                            "Call"
                        ],
                        [
                            "dense(output, box_feat_dim, activation=tf.identity, use_bias=False, wd=None, keep_first=True, scope='output_linear')",
                            "Call"
                        ],
                        [
                            "tf.stack([delta_x, delta_y, delta_w, delta_h], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.stack([delta_x, delta_y, delta_w, delta_h], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(input_deform, W, strides=[1, 2, 2, 1, 1], data_format='NDHWC', padding='VALID', name=None)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(output, b, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation(output, name='output')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, group, box_feat_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "split_276": {
                "variable": {
                    "value": "(x1, y1, x2, y2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([gt_boxes, boxes], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([boxes, gt_boxes], axis=0)",
                            "Call"
                        ],
                        [
                            "boxes + 1",
                            "BinOp"
                        ],
                        [
                            "transform_fpcoor_for_tf(boxes, image_shape, [crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "transform_fpcoor_for_tf(boxes, image_shape, [crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(boxes)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(boxes)",
                            "Call"
                        ],
                        [
                            "tf.maximum(boxes, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(boxes, tf.to_float(m), name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [batch_size, -1, 4])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_285": {
                "variable": {
                    "value": "delta_x",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(tf.abs(delta_x), 0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_289": {
                "variable": {
                    "value": "delta_y",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(tf.abs(delta_y), 0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_291": {
                "variable": {
                    "value": "delta_w",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "w / tf.transpose(w)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_293": {
                "variable": {
                    "value": "delta_h",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "h / tf.transpose(h)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_296": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[delta_x, delta_y, delta_w, delta_h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_304": {
                "variable": {
                    "value": "(x11, y11, x12, y12)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "boxes1",
                    "type": "Name",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_310": {
                "variable": {
                    "value": "(x21, y21, x22, y22)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "boxes2",
                    "type": "Name",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_319": {
                "variable": {
                    "value": "delta_x",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(tf.abs(delta_x), 0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_323": {
                "variable": {
                    "value": "delta_y",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(tf.abs(delta_y), 0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_325": {
                "variable": {
                    "value": "delta_w",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "w1 / tf.transpose(w2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_327": {
                "variable": {
                    "value": "delta_h",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "h1 / tf.transpose(h2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_330": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[delta_x, delta_y, delta_w, delta_h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_335": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([-1, group, group_size, h, w]))",
                            "Call"
                        ],
                        [
                            "BatchNorm(x, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "group_norm(x, scope='gn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(act_single_labels[:, 0], 0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, n_out])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1, 2] if data_format == 'NHWC' else [2, 3]",
                            "IfExp"
                        ]
                    ]
                },
                "name": {
                    "value": "output",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_367": {
                "variable": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "filter_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kernel_shape + [in_channel, out_channel]",
                            "BinOp"
                        ],
                        [
                            "kernel_shape + [in_channel / split, out_channel]",
                            "BinOp"
                        ]
                    ]
                },
                "initializer": {
                    "value": "W_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.variance_scaling_initializer(scale=2.0)",
                            "Call"
                        ],
                        [
                            "tf.variance_scaling_initializer(scale=2.0)",
                            "Call"
                        ],
                        [
                            "tf.variance_scaling_initializer(2.0)",
                            "Call"
                        ],
                        [
                            "tf.variance_scaling_initializer(scale=2.0)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_369": {
                "variable": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([-1, group, group_size, h, w]))",
                            "Call"
                        ],
                        [
                            "BatchNorm(x, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "group_norm(x, scope='gn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(act_single_labels[:, 0], 0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, n_out])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('W', filter_shape, initializer=W_init)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', [flat_x.get_shape().as_list()[-1], output_size], initializer=W_init)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='W', shape=[shape[0], shape[1], shape[-2], shape[-1]], initializer=W_init)",
                            "Call"
                        ],
                        [
                            "tf.reshape(W, [1, 1, shape[0] * shape[1], shape[-2], shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1, stride, stride, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, stride, stride]",
                            "List"
                        ],
                        [
                            "shape",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilations": {
                    "value": "dilations",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1, dilations, dilations, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, dilations, dilations]",
                            "List"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "Constant"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_399": {
                "variable": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_631": {
                "variable": {
                    "value": "variables",
                    "type": "Name",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "scope or tf.get_variable_scope().name",
                            "BoolOp"
                        ],
                        [
                            "'gn'",
                            "MethodArgument"
                        ],
                        [
                            "'RM'",
                            "MethodArgument"
                        ],
                        [
                            "'RM'",
                            "MethodArgument"
                        ],
                        [
                            "'geometric_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'geometric_encoding_pair'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'dense'",
                            "MethodArgument"
                        ],
                        [
                            "'maxpooling'",
                            "MethodArgument"
                        ],
                        [
                            "'deformable'",
                            "MethodArgument"
                        ],
                        [
                            "'bn'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "split_677": {
                "variable": {
                    "value": "(x1, y1, x2, y2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([gt_boxes, boxes], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([boxes, gt_boxes], axis=0)",
                            "Call"
                        ],
                        [
                            "boxes + 1",
                            "BinOp"
                        ],
                        [
                            "transform_fpcoor_for_tf(boxes, image_shape, [crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "transform_fpcoor_for_tf(boxes, image_shape, [crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(boxes)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(boxes)",
                            "Call"
                        ],
                        [
                            "tf.maximum(boxes, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(boxes, tf.to_float(m), name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [batch_size, -1, 4])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_683": {
                "variable": {
                    "value": "(x_min1, y_min1, x_max1, y_max1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "b1",
                    "type": "Name",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_684": {
                "variable": {
                    "value": "(x_min2, y_min2, x_max2, y_max2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "b2",
                    "type": "Name",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "minimum_685": {
                "variable": {
                    "value": "all_pairs_min_ymax",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "y_max1",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.transpose(y_max2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_686": {
                "variable": {
                    "value": "all_pairs_max_ymin",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "y_min1",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.transpose(y_min2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_687": {
                "variable": {
                    "value": "intersect_heights",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "all_pairs_min_ymax - all_pairs_max_ymin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_688": {
                "variable": {
                    "value": "all_pairs_min_xmax",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x_max1",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.transpose(x_max2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_689": {
                "variable": {
                    "value": "all_pairs_max_xmin",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x_min1",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.transpose(x_min2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_690": {
                "variable": {
                    "value": "intersect_widths",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "all_pairs_min_xmax - all_pairs_max_xmin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "truediv_699": {
                "x": {
                    "value": "interarea",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pairwise_intersection(boxes1, boxes2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "unions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(areas1, 1) + tf.expand_dims(areas2, 0) - interarea",
                            "BinOp"
                        ]
                    ]
                }
            },
            "placeholder_721": {
                "variable": {
                    "value": "A",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_722": {
                "variable": {
                    "value": "B",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_724": {
                "variable": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_753": {
                "variable": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[flat_x.get_shape().as_list()[-1], output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "W_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.variance_scaling_initializer(scale=2.0)",
                            "Call"
                        ],
                        [
                            "tf.variance_scaling_initializer(scale=2.0)",
                            "Call"
                        ],
                        [
                            "tf.variance_scaling_initializer(2.0)",
                            "Call"
                        ],
                        [
                            "tf.variance_scaling_initializer(scale=2.0)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_757": {
                "variable": {
                    "value": "flat_out",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "flat_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "flatten(x, keep)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([tf.shape(x)[0], -1]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('W', filter_shape, initializer=W_init)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', [flat_x.get_shape().as_list()[-1], output_size], initializer=W_init)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='W', shape=[shape[0], shape[1], shape[-2], shape[-1]], initializer=W_init)",
                            "Call"
                        ],
                        [
                            "tf.reshape(W, [1, 1, shape[0] * shape[1], shape[-2], shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pooling2d_789": {
                "variable": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([-1, group, group_size, h, w]))",
                            "Call"
                        ],
                        [
                            "BatchNorm(x, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "group_norm(x, scope='gn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(act_single_labels[:, 0], 0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, n_out])",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "[-1, 1, 1, 1]",
                            "List"
                        ],
                        [
                            "x.get_shape().as_list()[1:]",
                            "Subscript"
                        ],
                        [
                            "(2, 2)",
                            "Tuple"
                        ],
                        [
                            "(kernel_size, kernel_size, in_channel, ch_out)",
                            "Tuple"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "[1, chan]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, chan] if data_format == 'NHWC' else [1, chan, 1, 1]",
                            "IfExp"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1, stride, stride, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, stride, stride]",
                            "List"
                        ],
                        [
                            "shape",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "channels_last if data_format == NHWC else channels_first",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "stop_gradient_906": {
                "variable": {
                    "value": "c2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "c2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "resnet_group(l, 'group0', block_func, 64, num_blocks[0], stride=1, tf_pad_reverse=tf_pad_reverse, use_gn=use_gn, use_se=use_se)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(c2)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_919": {
                "variable": {
                    "value": "c3",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "c3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "resnet_group(c2, 'group1', block_func, 128, num_blocks[1], dilations=1, modified_block_num=mbn, stride=2, use_deformable=use_deformable, tf_pad_reverse=tf_pad_reverse, use_gn=use_gn, use_se=use_se)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(c3)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_927": {
                "variable": {
                    "value": "c4",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "c4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "resnet_group(c3, 'group2', block_func, 256, num_blocks[2], dilations=1, modified_block_num=mbn, stride=2, use_deformable=use_deformable, tf_pad_reverse=tf_pad_reverse, use_gn=use_gn, use_se=use_se)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(c4)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_941": {
                "variable": {
                    "value": "c5",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "c5",
                    "type": "Name",
                    "possible_values": [
                        [
                            "resnet_group(c4, 'group3', block_func, 512, num_blocks[3], dilations=2 if use_dilations else 1, use_deformable=use_deformable, modified_block_num=mbn, stride=2, tf_pad_reverse=tf_pad_reverse, use_gn=use_gn, use_se=use_se)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(c5)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1037": {
                "variable": {
                    "value": "fg_inds",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.where(fg_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_1039": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(act_single_labels[:, 0], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_1041": {
                "variable": {
                    "value": "act_single_fg_inds",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([-1, group, group_size, h, w]))",
                            "Call"
                        ],
                        [
                            "BatchNorm(x, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "group_norm(x, scope='gn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(act_single_labels[:, 0], 0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, n_out])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "size_1043": {
                "variable": {
                    "value": "num_act_fg",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "act_single_fg_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_1045": {
                "variable": {
                    "value": "num_fg",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "int(config.fastrcnn_batch_per_im * config.fastrcnn_fg_ratio)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.size(fg_inds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_1051": {
                "variable": {
                    "value": "fg_inds",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[fg_inds, act_single_fg_inds]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_1054": {
                "variable": {
                    "value": "bg_inds",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.where(tf.logical_not(fg_mask))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "minimum_1055": {
                "variable": {
                    "value": "num_bg",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "config.fastrcnn_batch_per_im - num_fg",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.size(bg_inds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_1133": {
                "variable": {
                    "value": "fg_inds",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.where(fg_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "minimum_1134": {
                "variable": {
                    "value": "num_fg",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "int(config.fastrcnn_batch_per_im * fg_ratio)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.size(fg_inds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_1140": {
                "variable": {
                    "value": "bg_inds",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.where(tf.logical_not(fg_mask))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "minimum_1141": {
                "variable": {
                    "value": "num_bg",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "config.fastrcnn_batch_per_im - num_fg",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.size(bg_inds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_1209": {
                "variable": {
                    "value": "best_iou_ind",
                    "type": "Name",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(tf.size(gt_boxes[i]), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.zeros_like([], dtype=tf.int64)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.argmax(iou, axis=1)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "gather_1216": {
                "variable": {
                    "value": "fg_inds_wrt_gt",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "best_iou_ind",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.argmax(iou, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.argmax(iou, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.size(gt_boxes[i]), 0), lambda : tf.zeros_like([], dtype=tf.int64), lambda : tf.argmax(iou, axis=1))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "fg_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.where(fg_mask), [-1])",
                            "Call"
                        ],
                        [
                            "tf.random_shuffle(fg_inds)[:num_fg - num_act_fg]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([fg_inds, act_single_fg_inds], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.where(fg_mask), [-1])",
                            "Call"
                        ],
                        [
                            "tf.random_shuffle(fg_inds)[:num_fg]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(tf.where(fg_mask), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_1219": {
                "variable": {
                    "value": "this_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.gather(gt_labels[i], fg_inds_wrt_gt), tf.zeros_like(bg_inds, dtype=tf.int64)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "sampled_labels",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stop_gradient_1224": {
                "input": {
                    "value": "box_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(box_labels, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_1235": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [1, 1], [1, 1]], mode='SYMMETRIC')",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [1, 1], [1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "SYMMETRIC",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_1258": {
                "variable": {
                    "value": "(x0, y0, x1, y1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([gt_boxes, boxes], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([boxes, gt_boxes], axis=0)",
                            "Call"
                        ],
                        [
                            "boxes + 1",
                            "BinOp"
                        ],
                        [
                            "transform_fpcoor_for_tf(boxes, image_shape, [crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "transform_fpcoor_for_tf(boxes, image_shape, [crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(boxes)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(boxes)",
                            "Call"
                        ],
                        [
                            "tf.maximum(boxes, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(boxes, tf.to_float(m), name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [batch_size, -1, 4])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_1289": {
                "variable": {
                    "value": "(x0, y0, x1, y1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([gt_boxes, boxes], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([boxes, gt_boxes], axis=0)",
                            "Call"
                        ],
                        [
                            "boxes + 1",
                            "BinOp"
                        ],
                        [
                            "transform_fpcoor_for_tf(boxes, image_shape, [crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "transform_fpcoor_for_tf(boxes, image_shape, [crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(boxes)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(boxes)",
                            "Call"
                        ],
                        [
                            "tf.maximum(boxes, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(boxes, tf.to_float(m), name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [batch_size, -1, 4])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_1514": {
                "tensor": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(x, mean, var, beta, gamma, 1e-05, name='output')",
                            "Call"
                        ],
                        [
                            "l + resnet_shortcut(shortcut, ch_out, stride, activation=get_bn(use_gn, zero_init=False), data_format='NCHW')",
                            "BinOp"
                        ],
                        [
                            "l + resnet_shortcut(shortcut, ch_out * 4, stride, activation=get_bn(use_gn, zero_init=False), data_format='NCHW')",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tensor, target_shape)",
                            "Call"
                        ],
                        [
                            "reconstruct(flat_out, x, keep)",
                            "Call"
                        ],
                        [
                            "flat_out",
                            "Name"
                        ],
                        [
                            "tf.concat([x1y1, x2y2], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([x1y1, x2y2], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(anchors)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_1538": {
                "tensor": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(x, mean, var, beta, gamma, 1e-05, name='output')",
                            "Call"
                        ],
                        [
                            "l + resnet_shortcut(shortcut, ch_out, stride, activation=get_bn(use_gn, zero_init=False), data_format='NCHW')",
                            "BinOp"
                        ],
                        [
                            "l + resnet_shortcut(shortcut, ch_out * 4, stride, activation=get_bn(use_gn, zero_init=False), data_format='NCHW')",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tensor, target_shape)",
                            "Call"
                        ],
                        [
                            "reconstruct(flat_out, x, keep)",
                            "Call"
                        ],
                        [
                            "flat_out",
                            "Name"
                        ],
                        [
                            "tf.concat([x1y1, x2y2], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([x1y1, x2y2], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(anchors)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_1596": {
                "variable": {
                    "value": "anchors_x1y1x2y2",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "anchors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(anchors, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(anchors, [batch_size, 1, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "split_1597": {
                "variable": {
                    "value": "(anchors_x1y1, anchors_x2y2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "anchors_x1y1x2y2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(anchors, (-1, 4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(anchors, (-1, 4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(anchors, (-1, 4))",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_1604": {
                "variable": {
                    "value": "target_boxes_x1y1x2y2",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target_boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "split_1605": {
                "variable": {
                    "value": "(target_boxes_x1y1, target_boxes_x2y2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "target_boxes_x1y1x2y2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(target_boxes, (-1, 4))",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_1614": {
                "variable": {
                    "value": "TwTh",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "wghg / waha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_1615": {
                "variable": {
                    "value": "encoded",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[TxTy, TwTh]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_1640": {
                "input_tensor": {
                    "value": "focal_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-alpha * pos_p_sub ** gamma * tf.log(tf.clip_by_value(sigmoid_p, 1e-08, 1.0)) - (1 - alpha) * neg_p_sub ** gamma * tf.log(tf.clip_by_value(1.0 - sigmoid_p, 1e-08, 1.0))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_1660": {
                "variable": {
                    "value": "initial_offset",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.meshgrid(tf.range(shape[0]), tf.range(shape[1]), indexing='ij')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_1664": {
                "variable": {
                    "value": "initial_offset",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "initial_offset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack(tf.meshgrid(tf.range(shape[0]), tf.range(shape[1]), indexing='ij'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(initial_offset, (-1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(initial_offset, 0), 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(initial_offset, [input_h, input_w, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(initial_offset, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_1666": {
                "input": {
                    "value": "initial_offset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack(tf.meshgrid(tf.range(shape[0]), tf.range(shape[1]), indexing='ij'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(initial_offset, (-1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(initial_offset, 0), 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(initial_offset, [input_h, input_w, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(initial_offset, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_1668": {
                "variable": {
                    "value": "initial_offset",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "initial_offset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack(tf.meshgrid(tf.range(shape[0]), tf.range(shape[1]), indexing='ij'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(initial_offset, (-1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(initial_offset, 0), 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(initial_offset, [input_h, input_w, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(initial_offset, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[input_h, input_w, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_1669": {
                "variable": {
                    "value": "initial_offset",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "initial_offset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack(tf.meshgrid(tf.range(shape[0]), tf.range(shape[1]), indexing='ij'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(initial_offset, (-1, 2))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(initial_offset, 0), 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(initial_offset, [input_h, input_w, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(initial_offset, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "meshgrid_1671": {
                "variable": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "tf.range(-int((shape[0] - 1) / 2.0), input_h - int((shape[0] - 1) / 2.0), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.range(-int((shape[0] - 1) / 2.0), input_w - int((shape[0] - 1) / 2.0), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "ij",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_1679": {
                "variable": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.meshgrid(tf.range(-int((shape[0] - 1) / 2.0), input_h - int((shape[0] - 1) / 2.0), 1), tf.range(-int((shape[0] - 1) / 2.0), input_w - int((shape[0] - 1) / 2.0), 1), indexing='ij')",
                            "Call"
                        ],
                        [
                            "tf.stack(grid, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(grid, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grid, 2)",
                            "Call"
                        ],
                        [
                            "tf.tile(grid, [1, 1, kernel_n, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_1680": {
                "variable": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.meshgrid(tf.range(-int((shape[0] - 1) / 2.0), input_h - int((shape[0] - 1) / 2.0), 1), tf.range(-int((shape[0] - 1) / 2.0), input_w - int((shape[0] - 1) / 2.0), 1), indexing='ij')",
                            "Call"
                        ],
                        [
                            "tf.stack(grid, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(grid, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grid, 2)",
                            "Call"
                        ],
                        [
                            "tf.tile(grid, [1, 1, kernel_n, 1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_1681": {
                "variable": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.meshgrid(tf.range(-int((shape[0] - 1) / 2.0), input_h - int((shape[0] - 1) / 2.0), 1), tf.range(-int((shape[0] - 1) / 2.0), input_w - int((shape[0] - 1) / 2.0), 1), indexing='ij')",
                            "Call"
                        ],
                        [
                            "tf.stack(grid, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(grid, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grid, 2)",
                            "Call"
                        ],
                        [
                            "tf.tile(grid, [1, 1, kernel_n, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_1683": {
                "variable": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.meshgrid(tf.range(-int((shape[0] - 1) / 2.0), input_h - int((shape[0] - 1) / 2.0), 1), tf.range(-int((shape[0] - 1) / 2.0), input_w - int((shape[0] - 1) / 2.0), 1), indexing='ij')",
                            "Call"
                        ],
                        [
                            "tf.stack(grid, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(grid, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grid, 2)",
                            "Call"
                        ],
                        [
                            "tf.tile(grid, [1, 1, kernel_n, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, kernel_n, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_1691": {
                "variable": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape[0], shape[1], shape[-2], shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "W_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.variance_scaling_initializer(scale=2.0)",
                            "Call"
                        ],
                        [
                            "tf.variance_scaling_initializer(scale=2.0)",
                            "Call"
                        ],
                        [
                            "tf.variance_scaling_initializer(2.0)",
                            "Call"
                        ],
                        [
                            "tf.variance_scaling_initializer(scale=2.0)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_1695": {
                "variable": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('W', filter_shape, initializer=W_init)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', [flat_x.get_shape().as_list()[-1], output_size], initializer=W_init)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='W', shape=[shape[0], shape[1], shape[-2], shape[-1]], initializer=W_init)",
                            "Call"
                        ],
                        [
                            "tf.reshape(W, [1, 1, shape[0] * shape[1], shape[-2], shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, shape[0] * shape[1], shape[-2], shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv3d_1697": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input_deform",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_tf_batch_map_offsets(inputs, offset, grid_offset)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('W', filter_shape, initializer=W_init)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', [flat_x.get_shape().as_list()[-1], output_size], initializer=W_init)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='W', shape=[shape[0], shape[1], shape[-2], shape[-1]], initializer=W_init)",
                            "Call"
                        ],
                        [
                            "tf.reshape(W, [1, 1, shape[0] * shape[1], shape[-2], shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NDHWC",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_1702": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(weighted_softmax, value)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, (-1, group, box_feat_dim))",
                            "Call"
                        ],
                        [
                            "dense(output, box_feat_dim, activation=tf.identity, use_bias=False, wd=None, keep_first=True, scope='output_linear')",
                            "Call"
                        ],
                        [
                            "tf.matmul(weighted_softmax, value)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, (-1, group, box_feat_dim))",
                            "Call"
                        ],
                        [
                            "dense(output, box_feat_dim, activation=tf.identity, use_bias=False, wd=None, keep_first=True, scope='output_linear')",
                            "Call"
                        ],
                        [
                            "tf.stack([delta_x, delta_y, delta_w, delta_h], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.stack([delta_x, delta_y, delta_w, delta_h], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(input_deform, W, strides=[1, 2, 2, 1, 1], data_format='NDHWC', padding='VALID', name=None)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(output, b, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation(output, name='output')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_1725": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_1823": {
                "variable": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_1826": {
                "variable": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_1828": {
                "variable": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "gamma_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant_initializer(1.0)",
                            "MethodArgument"
                        ],
                        [
                            "tf.constant_initializer(1.0)",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_1830": {
                "variable": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_1846": {
                "tensor": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "[-1, 1, 1, 1]",
                            "List"
                        ],
                        [
                            "x.get_shape().as_list()[1:]",
                            "Subscript"
                        ],
                        [
                            "(2, 2)",
                            "Tuple"
                        ],
                        [
                            "(kernel_size, kernel_size, in_channel, ch_out)",
                            "Tuple"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "[1, chan]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, chan] if data_format == 'NHWC' else [1, chan, 1, 1]",
                            "IfExp"
                        ]
                    ]
                }
            },
            "name_scope_53": {
                "name": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "scope or tf.get_variable_scope().name",
                            "BoolOp"
                        ],
                        [
                            "'gn'",
                            "MethodArgument"
                        ],
                        [
                            "'RM'",
                            "MethodArgument"
                        ],
                        [
                            "'RM'",
                            "MethodArgument"
                        ],
                        [
                            "'geometric_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'geometric_encoding_pair'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'dense'",
                            "MethodArgument"
                        ],
                        [
                            "'maxpooling'",
                            "MethodArgument"
                        ],
                        [
                            "'deformable'",
                            "MethodArgument"
                        ],
                        [
                            "'bn'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_82": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "scope or tf.get_variable_scope().name",
                            "BoolOp"
                        ],
                        [
                            "'gn'",
                            "MethodArgument"
                        ],
                        [
                            "'RM'",
                            "MethodArgument"
                        ],
                        [
                            "'RM'",
                            "MethodArgument"
                        ],
                        [
                            "'geometric_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'geometric_encoding_pair'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'dense'",
                            "MethodArgument"
                        ],
                        [
                            "'maxpooling'",
                            "MethodArgument"
                        ],
                        [
                            "'deformable'",
                            "MethodArgument"
                        ],
                        [
                            "'bn'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_108": {
                "tensor": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(x, mean, var, beta, gamma, 1e-05, name='output')",
                            "Call"
                        ],
                        [
                            "l + resnet_shortcut(shortcut, ch_out, stride, activation=get_bn(use_gn, zero_init=False), data_format='NCHW')",
                            "BinOp"
                        ],
                        [
                            "l + resnet_shortcut(shortcut, ch_out * 4, stride, activation=get_bn(use_gn, zero_init=False), data_format='NCHW')",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tensor, target_shape)",
                            "Call"
                        ],
                        [
                            "reconstruct(flat_out, x, keep)",
                            "Call"
                        ],
                        [
                            "flat_out",
                            "Name"
                        ],
                        [
                            "tf.concat([x1y1, x2y2], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([x1y1, x2y2], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "orig_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(x)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "output",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_118": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "scope or tf.get_variable_scope().name",
                            "BoolOp"
                        ],
                        [
                            "'gn'",
                            "MethodArgument"
                        ],
                        [
                            "'RM'",
                            "MethodArgument"
                        ],
                        [
                            "'RM'",
                            "MethodArgument"
                        ],
                        [
                            "'geometric_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'geometric_encoding_pair'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'dense'",
                            "MethodArgument"
                        ],
                        [
                            "'maxpooling'",
                            "MethodArgument"
                        ],
                        [
                            "'deformable'",
                            "MethodArgument"
                        ],
                        [
                            "'bn'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_197": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "scope or tf.get_variable_scope().name",
                            "BoolOp"
                        ],
                        [
                            "'gn'",
                            "MethodArgument"
                        ],
                        [
                            "'RM'",
                            "MethodArgument"
                        ],
                        [
                            "'RM'",
                            "MethodArgument"
                        ],
                        [
                            "'geometric_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'geometric_encoding_pair'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'dense'",
                            "MethodArgument"
                        ],
                        [
                            "'maxpooling'",
                            "MethodArgument"
                        ],
                        [
                            "'deformable'",
                            "MethodArgument"
                        ],
                        [
                            "'bn'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_274": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "scope or tf.get_variable_scope().name",
                            "BoolOp"
                        ],
                        [
                            "'gn'",
                            "MethodArgument"
                        ],
                        [
                            "'RM'",
                            "MethodArgument"
                        ],
                        [
                            "'RM'",
                            "MethodArgument"
                        ],
                        [
                            "'geometric_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'geometric_encoding_pair'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'dense'",
                            "MethodArgument"
                        ],
                        [
                            "'maxpooling'",
                            "MethodArgument"
                        ],
                        [
                            "'deformable'",
                            "MethodArgument"
                        ],
                        [
                            "'bn'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_302": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "scope or tf.get_variable_scope().name",
                            "BoolOp"
                        ],
                        [
                            "'gn'",
                            "MethodArgument"
                        ],
                        [
                            "'RM'",
                            "MethodArgument"
                        ],
                        [
                            "'RM'",
                            "MethodArgument"
                        ],
                        [
                            "'geometric_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'geometric_encoding_pair'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'dense'",
                            "MethodArgument"
                        ],
                        [
                            "'maxpooling'",
                            "MethodArgument"
                        ],
                        [
                            "'deformable'",
                            "MethodArgument"
                        ],
                        [
                            "'bn'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_340": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "scope or tf.get_variable_scope().name",
                            "BoolOp"
                        ],
                        [
                            "'gn'",
                            "MethodArgument"
                        ],
                        [
                            "'RM'",
                            "MethodArgument"
                        ],
                        [
                            "'RM'",
                            "MethodArgument"
                        ],
                        [
                            "'geometric_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'geometric_encoding_pair'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'dense'",
                            "MethodArgument"
                        ],
                        [
                            "'maxpooling'",
                            "MethodArgument"
                        ],
                        [
                            "'deformable'",
                            "MethodArgument"
                        ],
                        [
                            "'bn'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_375": {
                "variable": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_376": {
                "variable": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[out_channel]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant_initializer()",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer()",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer()",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bias_add_377": {
                "variable": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(x, W, stride, padding, dilations=dilations, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, b, data_format=data_format)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('b', [out_channel], initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [output_size], initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [ch_out], initializer=b_init)",
                            "Call"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "Constant"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_387": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "scope or tf.get_variable_scope().name",
                            "BoolOp"
                        ],
                        [
                            "'gn'",
                            "MethodArgument"
                        ],
                        [
                            "'RM'",
                            "MethodArgument"
                        ],
                        [
                            "'RM'",
                            "MethodArgument"
                        ],
                        [
                            "'geometric_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'geometric_encoding_pair'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'dense'",
                            "MethodArgument"
                        ],
                        [
                            "'maxpooling'",
                            "MethodArgument"
                        ],
                        [
                            "'deformable'",
                            "MethodArgument"
                        ],
                        [
                            "'bn'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2DTranspose_402": {
                "variable": {
                    "value": "layer",
                    "type": "Name",
                    "possible_values": []
                },
                "filters": {
                    "value": "out_channel",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[kernel, kernel]",
                            "List"
                        ],
                        [
                            "[kernel, kernel]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1, stride, stride, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, stride, stride]",
                            "List"
                        ],
                        [
                            "shape",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "channels_last if data_format == NHWC else channels_first",
                    "type": "IfExp",
                    "possible_values": []
                },
                "activation": {
                    "value": "lambda x: activation(x, name='output')",
                    "type": "Lambda",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "W_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.variance_scaling_initializer(scale=2.0)",
                            "Call"
                        ],
                        [
                            "tf.variance_scaling_initializer(scale=2.0)",
                            "Call"
                        ],
                        [
                            "tf.variance_scaling_initializer(2.0)",
                            "Call"
                        ],
                        [
                            "tf.variance_scaling_initializer(scale=2.0)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant_initializer()",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer()",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer()",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_436": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "scope or tf.get_variable_scope().name",
                            "BoolOp"
                        ],
                        [
                            "'gn'",
                            "MethodArgument"
                        ],
                        [
                            "'RM'",
                            "MethodArgument"
                        ],
                        [
                            "'RM'",
                            "MethodArgument"
                        ],
                        [
                            "'geometric_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'geometric_encoding_pair'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'dense'",
                            "MethodArgument"
                        ],
                        [
                            "'maxpooling'",
                            "MethodArgument"
                        ],
                        [
                            "'deformable'",
                            "MethodArgument"
                        ],
                        [
                            "'bn'",
                            "MethodArgument"
                        ]
                    ]
                },
                "custom_getter": {
                    "value": "custom_getter",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "pad_487": {
                "variable": {
                    "value": "l",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "l",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv2d(l, ch_out, 3, stride=stride, activation=NormReLU, use_bias=False, data_format='NCHW', scope='conv1')",
                            "Call"
                        ],
                        [
                            "conv2d(l, ch_out, 3, use_bias=False, activation=get_bn(use_gn, zero_init=True), data_format='NCHW', scope='conv2')",
                            "Call"
                        ],
                        [
                            "conv2d(l, ch_out, 1, activation=NormReLU, scope='conv1', use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "conv2d(l, ch_out, 3, dilations=dilations, stride=stride, activation=NormReLU, scope='conv2', use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "deformable_conv2d(l, offset, ch_out, 3, scope='conv2', data_format='NCHW', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.pad(l, [[0, 0], [0, 0], maybe_reverse_pad(0, 1, tf_pad_reverse), maybe_reverse_pad(0, 1, tf_pad_reverse)])",
                            "Call"
                        ],
                        [
                            "conv2d(l, ch_out, 3, dilations=dilations, stride=2, activation=NormReLU, padding='VALID', scope='conv2', use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "conv2d(l, ch_out * 4, 1, activation=get_bn(use_gn, zero_init=True), scope='conv3', use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "l * tf.reshape(squeeze, shape)",
                            "BinOp"
                        ],
                        [
                            "tf.pad(l, [[0, 0], [0, 0], maybe_reverse_pad(0, 1, tf_pad_reverse), maybe_reverse_pad(0, 1, tf_pad_reverse)])",
                            "Call"
                        ],
                        [
                            "conv2d(l, ch_out * 2, 1, stride=1, activation=NormReLU, scope='conv1', use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "conv2d(l, ch_out * 2, 3, dilations=dilations, stride=stride, activation=NormReLU, scope='conv2', split=32, use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "conv2d(l, ch_out * 4, 1, activation=get_bn(use_gn, zero_init=True), scope='conv3', use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "l[:, :, :-1, :-1]",
                            "Subscript"
                        ],
                        [
                            "block_func(l, features, stride if i == 0 else 1, dilations=dilations_, deformable=deformable_, use_gn=use_gn, tf_pad_reverse=tf_pad_reverse, use_se=use_se)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(l)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], maybe_reverse_pad(2, 3, tf_pad_reverse), maybe_reverse_pad(2, 3, tf_pad_reverse)])",
                            "Call"
                        ],
                        [
                            "conv2d(l, 64, 7, stride=2, activation=BNReLU, padding='VALID', scope='conv0', use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.pad(l, [[0, 0], [0, 0], maybe_reverse_pad(0, 1, tf_pad_reverse), maybe_reverse_pad(0, 1, tf_pad_reverse)])",
                            "Call"
                        ],
                        [
                            "MaxPooling(l, shape=3, stride=2, padding='VALID', scope='pool0', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "resnet_group(l, 'group0', resnet_bottleneck, 64, num_blocks[0], stride=1, tf_pad_reverse=tf_pad_reverse)",
                            "Call"
                        ],
                        [
                            "resnet_group(l, 'group1', resnet_bottleneck, 128, num_blocks[1], stride=2, tf_pad_reverse=tf_pad_reverse)",
                            "Call"
                        ],
                        [
                            "resnet_group(l, 'group2', resnet_bottleneck, 256, num_blocks[2], stride=2, tf_pad_reverse=tf_pad_reverse)",
                            "Call"
                        ],
                        [
                            "resnet_group(image, 'group3', resnet_bottleneck, 512, num_block, stride=2, reuse=reuse, tf_pad_reverse=tf_pad_reverse)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [pad_base[0], pad_base[1] + pad_shape2d[0]], [pad_base[0], pad_base[1] + pad_shape2d[1]]])",
                            "Call"
                        ],
                        [
                            "conv2d(l, 64, 7, stride=2, activation=NormReLU, padding='VALID', scope='conv0', use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.pad(l, [[0, 0], [0, 0], maybe_reverse_pad(0, 1, tf_pad_reverse), maybe_reverse_pad(0, 1, tf_pad_reverse)])",
                            "Call"
                        ],
                        [
                            "MaxPooling(l, shape=3, stride=2, padding='VALID', scope='pool0', data_format='NCHW')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], maybe_reverse_pad(0, 1, tf_pad_reverse), maybe_reverse_pad(0, 1, tf_pad_reverse)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_495": {
                "variable": {
                    "value": "l",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "l",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv2d(l, ch_out, 3, stride=stride, activation=NormReLU, use_bias=False, data_format='NCHW', scope='conv1')",
                            "Call"
                        ],
                        [
                            "conv2d(l, ch_out, 3, use_bias=False, activation=get_bn(use_gn, zero_init=True), data_format='NCHW', scope='conv2')",
                            "Call"
                        ],
                        [
                            "conv2d(l, ch_out, 1, activation=NormReLU, scope='conv1', use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "conv2d(l, ch_out, 3, dilations=dilations, stride=stride, activation=NormReLU, scope='conv2', use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "deformable_conv2d(l, offset, ch_out, 3, scope='conv2', data_format='NCHW', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.pad(l, [[0, 0], [0, 0], maybe_reverse_pad(0, 1, tf_pad_reverse), maybe_reverse_pad(0, 1, tf_pad_reverse)])",
                            "Call"
                        ],
                        [
                            "conv2d(l, ch_out, 3, dilations=dilations, stride=2, activation=NormReLU, padding='VALID', scope='conv2', use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "conv2d(l, ch_out * 4, 1, activation=get_bn(use_gn, zero_init=True), scope='conv3', use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "l * tf.reshape(squeeze, shape)",
                            "BinOp"
                        ],
                        [
                            "tf.pad(l, [[0, 0], [0, 0], maybe_reverse_pad(0, 1, tf_pad_reverse), maybe_reverse_pad(0, 1, tf_pad_reverse)])",
                            "Call"
                        ],
                        [
                            "conv2d(l, ch_out * 2, 1, stride=1, activation=NormReLU, scope='conv1', use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "conv2d(l, ch_out * 2, 3, dilations=dilations, stride=stride, activation=NormReLU, scope='conv2', split=32, use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "conv2d(l, ch_out * 4, 1, activation=get_bn(use_gn, zero_init=True), scope='conv3', use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "l[:, :, :-1, :-1]",
                            "Subscript"
                        ],
                        [
                            "block_func(l, features, stride if i == 0 else 1, dilations=dilations_, deformable=deformable_, use_gn=use_gn, tf_pad_reverse=tf_pad_reverse, use_se=use_se)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(l)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], maybe_reverse_pad(2, 3, tf_pad_reverse), maybe_reverse_pad(2, 3, tf_pad_reverse)])",
                            "Call"
                        ],
                        [
                            "conv2d(l, 64, 7, stride=2, activation=BNReLU, padding='VALID', scope='conv0', use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.pad(l, [[0, 0], [0, 0], maybe_reverse_pad(0, 1, tf_pad_reverse), maybe_reverse_pad(0, 1, tf_pad_reverse)])",
                            "Call"
                        ],
                        [
                            "MaxPooling(l, shape=3, stride=2, padding='VALID', scope='pool0', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "resnet_group(l, 'group0', resnet_bottleneck, 64, num_blocks[0], stride=1, tf_pad_reverse=tf_pad_reverse)",
                            "Call"
                        ],
                        [
                            "resnet_group(l, 'group1', resnet_bottleneck, 128, num_blocks[1], stride=2, tf_pad_reverse=tf_pad_reverse)",
                            "Call"
                        ],
                        [
                            "resnet_group(l, 'group2', resnet_bottleneck, 256, num_blocks[2], stride=2, tf_pad_reverse=tf_pad_reverse)",
                            "Call"
                        ],
                        [
                            "resnet_group(image, 'group3', resnet_bottleneck, 512, num_block, stride=2, reuse=reuse, tf_pad_reverse=tf_pad_reverse)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [pad_base[0], pad_base[1] + pad_shape2d[0]], [pad_base[0], pad_base[1] + pad_shape2d[1]]])",
                            "Call"
                        ],
                        [
                            "conv2d(l, 64, 7, stride=2, activation=NormReLU, padding='VALID', scope='conv0', use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.pad(l, [[0, 0], [0, 0], maybe_reverse_pad(0, 1, tf_pad_reverse), maybe_reverse_pad(0, 1, tf_pad_reverse)])",
                            "Call"
                        ],
                        [
                            "MaxPooling(l, shape=3, stride=2, padding='VALID', scope='pool0', data_format='NCHW')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], maybe_reverse_pad(0, 1, tf_pad_reverse), maybe_reverse_pad(0, 1, tf_pad_reverse)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_571": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'/'.join(splits)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "squeeze_678": {
                "input": {
                    "value": "(y2 - y1) * (x2 - x1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Graph_720": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_720": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_732": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "scope or tf.get_variable_scope().name",
                            "BoolOp"
                        ],
                        [
                            "'gn'",
                            "MethodArgument"
                        ],
                        [
                            "'RM'",
                            "MethodArgument"
                        ],
                        [
                            "'RM'",
                            "MethodArgument"
                        ],
                        [
                            "'geometric_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'geometric_encoding_pair'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'dense'",
                            "MethodArgument"
                        ],
                        [
                            "'maxpooling'",
                            "MethodArgument"
                        ],
                        [
                            "'deformable'",
                            "MethodArgument"
                        ],
                        [
                            "'bn'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_762": {
                "variable": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant_initializer()",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer()",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer()",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bias_add_763": {
                "variable": {
                    "value": "flat_out",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "flat_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(flat_x, W)",
                            "Call"
                        ],
                        [
                            "activation(flat_out)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(flat_out, b)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('b', [out_channel], initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [output_size], initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [ch_out], initializer=b_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_786": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "scope or tf.get_variable_scope().name",
                            "BoolOp"
                        ],
                        [
                            "'gn'",
                            "MethodArgument"
                        ],
                        [
                            "'RM'",
                            "MethodArgument"
                        ],
                        [
                            "'RM'",
                            "MethodArgument"
                        ],
                        [
                            "'geometric_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'geometric_encoding_pair'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'dense'",
                            "MethodArgument"
                        ],
                        [
                            "'maxpooling'",
                            "MethodArgument"
                        ],
                        [
                            "'deformable'",
                            "MethodArgument"
                        ],
                        [
                            "'bn'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "identity_792": {
                "input": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": [
                        [
                            "activation(conv, name='output')",
                            "Call"
                        ],
                        [
                            "layer.apply(x, scope=tf.get_variable_scope())",
                            "Call"
                        ],
                        [
                            "cocomask.iou(to_xywh(A), to_xywh(B), np.zeros((len(B),), dtype=np.bool))",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(x, shape, stride, padding, 'channels_last' if data_format == 'NHWC' else 'channels_first')",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, mat, axes=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(ret, [0, 1, 2, 4, 3, 5])",
                            "Call"
                        ],
                        [
                            "tf.reshape(ret, tf.stack([-1, output_shape[1], tf.shape(x)[2] * shape[0], tf.shape(x)[3] * shape[1]]))",
                            "Call"
                        ],
                        [
                            "tf.image.crop_and_resize(image, boxes, box_ind, crop_size=[crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(ret, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.crop_and_resize(image, boxes, box_ind, crop_size=[crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "crop_and_resize(featuremap, boxes, box_idxs, output_shape * 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(ret, ksize=[1, 1, 2, 2], strides=[1, 1, 2, 2], padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "crop_and_resize(featuremap, boxes, tf.zeros([tf.shape(boxes)[0]], dtype=tf.int32), output_shape * 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(ret, ksize=[1, 1, 2, 2], strides=[1, 1, 2, 2], padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "np.zeros(im_shape, dtype='uint8')",
                            "Call"
                        ],
                        [
                            "update_bn_ema(xn, batch_mean, batch_var, moving_mean, moving_var, decay, internal_update)",
                            "Call"
                        ],
                        [
                            "tf.identity(xn, name='output')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "output",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_849": {
                "input": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [1, 1], [1, 1]], mode='SYMMETRIC')",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_957": {
                "variable": {
                    "value": "unpool_mat",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "unpool_mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.ones((2, 2), dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.constant(unpool_mat, name='unpool_mat')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "unpool_mat",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_962": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([-1, group, group_size, h, w]))",
                            "Call"
                        ],
                        [
                            "BatchNorm(x, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "group_norm(x, scope='gn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(act_single_labels[:, 0], 0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, n_out])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_963": {
                "variable": {
                    "value": "mat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "unpool_mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.ones((2, 2), dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.constant(unpool_mat, name='unpool_mat')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensordot_964": {
                "variable": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([-1, group, group_size, h, w]))",
                            "Call"
                        ],
                        [
                            "BatchNorm(x, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "group_norm(x, scope='gn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(act_single_labels[:, 0], 0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, n_out])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(unpool_mat, 0)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_966": {
                "variable": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": [
                        [
                            "activation(conv, name='output')",
                            "Call"
                        ],
                        [
                            "layer.apply(x, scope=tf.get_variable_scope())",
                            "Call"
                        ],
                        [
                            "cocomask.iou(to_xywh(A), to_xywh(B), np.zeros((len(B),), dtype=np.bool))",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(x, shape, stride, padding, 'channels_last' if data_format == 'NHWC' else 'channels_first')",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, mat, axes=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(ret, [0, 1, 2, 4, 3, 5])",
                            "Call"
                        ],
                        [
                            "tf.reshape(ret, tf.stack([-1, output_shape[1], tf.shape(x)[2] * shape[0], tf.shape(x)[3] * shape[1]]))",
                            "Call"
                        ],
                        [
                            "tf.image.crop_and_resize(image, boxes, box_ind, crop_size=[crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(ret, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.crop_and_resize(image, boxes, box_ind, crop_size=[crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "crop_and_resize(featuremap, boxes, box_idxs, output_shape * 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(ret, ksize=[1, 1, 2, 2], strides=[1, 1, 2, 2], padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "crop_and_resize(featuremap, boxes, tf.zeros([tf.shape(boxes)[0]], dtype=tf.int32), output_shape * 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(ret, ksize=[1, 1, 2, 2], strides=[1, 1, 2, 2], padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "np.zeros(im_shape, dtype='uint8')",
                            "Call"
                        ],
                        [
                            "update_bn_ema(xn, batch_mean, batch_var, moving_mean, moving_var, decay, internal_update)",
                            "Call"
                        ],
                        [
                            "tf.identity(xn, name='output')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 2, 4, 3, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_968": {
                "variable": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": [
                        [
                            "activation(conv, name='output')",
                            "Call"
                        ],
                        [
                            "layer.apply(x, scope=tf.get_variable_scope())",
                            "Call"
                        ],
                        [
                            "cocomask.iou(to_xywh(A), to_xywh(B), np.zeros((len(B),), dtype=np.bool))",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(x, shape, stride, padding, 'channels_last' if data_format == 'NHWC' else 'channels_first')",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, mat, axes=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(ret, [0, 1, 2, 4, 3, 5])",
                            "Call"
                        ],
                        [
                            "tf.reshape(ret, tf.stack([-1, output_shape[1], tf.shape(x)[2] * shape[0], tf.shape(x)[3] * shape[1]]))",
                            "Call"
                        ],
                        [
                            "tf.image.crop_and_resize(image, boxes, box_ind, crop_size=[crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(ret, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.image.crop_and_resize(image, boxes, box_ind, crop_size=[crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "crop_and_resize(featuremap, boxes, box_idxs, output_shape * 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(ret, ksize=[1, 1, 2, 2], strides=[1, 1, 2, 2], padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "crop_and_resize(featuremap, boxes, tf.zeros([tf.shape(boxes)[0]], dtype=tf.int32), output_shape * 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(ret, ksize=[1, 1, 2, 2], strides=[1, 1, 2, 2], padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "np.zeros(im_shape, dtype='uint8')",
                            "Call"
                        ],
                        [
                            "update_bn_ema(xn, batch_mean, batch_var, moving_mean, moving_var, decay, internal_update)",
                            "Call"
                        ],
                        [
                            "tf.identity(xn, name='output')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([-1, output_shape[1], tf.shape(x)[2] * shape[0], tf.shape(x)[3] * shape[1]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_978": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "scope or tf.get_variable_scope().name",
                            "BoolOp"
                        ],
                        [
                            "'gn'",
                            "MethodArgument"
                        ],
                        [
                            "'RM'",
                            "MethodArgument"
                        ],
                        [
                            "'RM'",
                            "MethodArgument"
                        ],
                        [
                            "'geometric_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'geometric_encoding_pair'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'dense'",
                            "MethodArgument"
                        ],
                        [
                            "'maxpooling'",
                            "MethodArgument"
                        ],
                        [
                            "'deformable'",
                            "MethodArgument"
                        ],
                        [
                            "'bn'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stop_gradient_1111": {
                "input": {
                    "value": "ret_boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(boxes, all_indices, name='sampled_proposal_boxes')",
                            "Call"
                        ],
                        [
                            "tf.gather(boxes, all_indices, name='sampled_proposal_boxes')",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_1112": {
                "input": {
                    "value": "ret_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.gather(gt_labels, fg_inds_wrt_gt), tf.zeros_like(bg_inds, dtype=tf.int64)], axis=0, name='sampled_labels')",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.gather(gt_labels, fg_inds_wrt_gt), tf.zeros_like(bg_inds, dtype=tf.int64)], axis=0, name='sampled_labels')",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_1113": {
                "input": {
                    "value": "act_single_ret_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(act_single_labels, fg_inds_wrt_gt)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_1167": {
                "input": {
                    "value": "ret_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.gather(gt_labels, fg_inds_wrt_gt), tf.zeros_like(bg_inds, dtype=tf.int64)], axis=0, name='sampled_labels')",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.gather(gt_labels, fg_inds_wrt_gt), tf.zeros_like(bg_inds, dtype=tf.int64)], axis=0, name='sampled_labels')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1190": {
                "variable": {
                    "value": "fg_inds",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.where(fg_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1199": {
                "variable": {
                    "value": "bg_inds",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.where(tf.logical_not(fg_mask))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_1271": {
                "values": {
                    "value": "[ny0, nx0, ny0 + nh, nx0 + nw]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_1273": {
                "input": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [1, 1], [1, 1]], mode='SYMMETRIC')",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_1302": {
                "values": {
                    "value": "[ny0, nx0, ny0 + nh, nx0 + nw]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_1304": {
                "input": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [1, 1], [1, 1]], mode='SYMMETRIC')",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_1331": {
                "shape": {
                    "value": "[tf.shape(boxes)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reverse_1344": {
                "tensor": {
                    "value": "image_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(image)[2:]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1:3]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_1345": {
                "x": {
                    "value": "m",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(tf.reverse(image_shape, [0]), [2])",
                            "Call"
                        ]
                    ]
                }
            },
            "size_1367": {
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(scores, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reverse_1387": {
                "tensor": {
                    "value": "topk_valid_boxes_x1y1x2y2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.boolean_mask(topk_boxes_x1y1x2y2, valid)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reverse_1461": {
                "tensor": {
                    "value": "topk_boxes_x1y1x2y2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(topk_boxes, (-1, 2, 2))",
                            "Call"
                        ],
                        [
                            "tf.reshape(topk_boxes, (batch_size, -1, 2, 2))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_1506": {
                "x": {
                    "value": "tf.minimum(box_pred_twth, decode_clip)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_1514": {
                "input": {
                    "value": "anchors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(anchors, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(anchors, [batch_size, 1, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_1531": {
                "x": {
                    "value": "tf.minimum(box_pred_twth, decode_clip)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_1538": {
                "input": {
                    "value": "anchors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(anchors, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(anchors, [batch_size, 1, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_1593": {
                "name": {
                    "value": "encode_bbox_target",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_1616": {
                "tensor": {
                    "value": "encoded",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([TxTy, TwTh], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(target_boxes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_1645": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "scope or tf.get_variable_scope().name",
                            "BoolOp"
                        ],
                        [
                            "'gn'",
                            "MethodArgument"
                        ],
                        [
                            "'RM'",
                            "MethodArgument"
                        ],
                        [
                            "'RM'",
                            "MethodArgument"
                        ],
                        [
                            "'geometric_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'geometric_encoding_pair'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'dense'",
                            "MethodArgument"
                        ],
                        [
                            "'maxpooling'",
                            "MethodArgument"
                        ],
                        [
                            "'deformable'",
                            "MethodArgument"
                        ],
                        [
                            "'bn'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "transpose_1647": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(inputs, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_1648": {
                "variable": {
                    "value": "offset",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "offset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv2d(l, 2 * 3 * 3, 3, stride=1, padding='SAME', scope='conv2_offset', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.transpose(offset, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_1704": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(weighted_softmax, value)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, (-1, group, box_feat_dim))",
                            "Call"
                        ],
                        [
                            "dense(output, box_feat_dim, activation=tf.identity, use_bias=False, wd=None, keep_first=True, scope='output_linear')",
                            "Call"
                        ],
                        [
                            "tf.matmul(weighted_softmax, value)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, (-1, group, box_feat_dim))",
                            "Call"
                        ],
                        [
                            "dense(output, box_feat_dim, activation=tf.identity, use_bias=False, wd=None, keep_first=True, scope='output_linear')",
                            "Call"
                        ],
                        [
                            "tf.stack([delta_x, delta_y, delta_w, delta_h], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.stack([delta_x, delta_y, delta_w, delta_h], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(input_deform, W, strides=[1, 2, 2, 1, 1], data_format='NDHWC', padding='VALID', name=None)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(output, b, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation(output, name='output')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_initializer_1707": {
                "variable": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_1708": {
                "variable": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[ch_out]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant_initializer()",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer()",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer()",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bias_add_1709": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(weighted_softmax, value)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, (-1, group, box_feat_dim))",
                            "Call"
                        ],
                        [
                            "dense(output, box_feat_dim, activation=tf.identity, use_bias=False, wd=None, keep_first=True, scope='output_linear')",
                            "Call"
                        ],
                        [
                            "tf.matmul(weighted_softmax, value)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, (-1, group, box_feat_dim))",
                            "Call"
                        ],
                        [
                            "dense(output, box_feat_dim, activation=tf.identity, use_bias=False, wd=None, keep_first=True, scope='output_linear')",
                            "Call"
                        ],
                        [
                            "tf.stack([delta_x, delta_y, delta_w, delta_h], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.stack([delta_x, delta_y, delta_w, delta_h], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(input_deform, W, strides=[1, 2, 2, 1, 1], data_format='NDHWC', padding='VALID', name=None)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(output, b, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "activation(output, name='output')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('b', [out_channel], initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [output_size], initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [ch_out], initializer=b_init)",
                            "Call"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "Constant"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_1728": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "scope or tf.get_variable_scope().name",
                            "BoolOp"
                        ],
                        [
                            "'gn'",
                            "MethodArgument"
                        ],
                        [
                            "'RM'",
                            "MethodArgument"
                        ],
                        [
                            "'RM'",
                            "MethodArgument"
                        ],
                        [
                            "'geometric_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'geometric_encoding_pair'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'dense'",
                            "MethodArgument"
                        ],
                        [
                            "'maxpooling'",
                            "MethodArgument"
                        ],
                        [
                            "'deformable'",
                            "MethodArgument"
                        ],
                        [
                            "'bn'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "fused_batch_norm_1748": {
                "variable": {
                    "value": "(xn, batch_mean, batch_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([-1, group, group_size, h, w]))",
                            "Call"
                        ],
                        [
                            "BatchNorm(x, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "group_norm(x, scope='gn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(act_single_labels[:, 0], 0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, n_out])",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('gamma', [chan], initializer=gamma_init)",
                            "Call"
                        ],
                        [
                            "tf.reshape(gamma, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('gamma', [n_out], initializer=gamma_init)",
                            "Call"
                        ],
                        [
                            "tf.ones([n_out], name='gamma')",
                            "Call"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', [chan], initializer=tf.constant_initializer())",
                            "Call"
                        ],
                        [
                            "tf.reshape(beta, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('beta', [n_out], initializer=tf.constant_initializer())",
                            "Call"
                        ],
                        [
                            "tf.zeros([n_out], name='beta')",
                            "Call"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "epsilon",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "is_training": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "Constant"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "identity_1790": {
                "variable": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "xn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(xn, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(x, mm, mv, b, g, epsilon)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(x, moving_mean, moving_var, beta, gamma, epsilon)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "output",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_1799": {
                "key": {
                    "value": "tf.GraphKeys.MODEL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_to_collection_1800": {
                "name": {
                    "value": "tf.GraphKeys.MODEL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "variables",
                            "Name"
                        ]
                    ]
                }
            },
            "add_to_collection_1816": {
                "name": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "update_op1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "moving_averages.assign_moving_average(moving_mean, batch_mean, decay, zero_debias=False, name='mean_ema_op')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_1817": {
                "name": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "update_op2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "moving_averages.assign_moving_average(moving_var, batch_var, decay, zero_debias=False, name='var_ema_op')",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_62": {
                "variable": {
                    "value": "regloss",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.convert_to_tensor(wd, dtype=p.dtype.base_dtype, name='scale')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.l2_loss(p)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'%s/wd' % p.op.name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_76": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'empty_' + scope",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_n_78": {
                "inputs": {
                    "value": "costs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "scope or tf.get_variable_scope().name",
                            "BoolOp"
                        ],
                        [
                            "'gn'",
                            "MethodArgument"
                        ],
                        [
                            "'RM'",
                            "MethodArgument"
                        ],
                        [
                            "'RM'",
                            "MethodArgument"
                        ],
                        [
                            "'geometric_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'geometric_encoding_pair'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'dense'",
                            "MethodArgument"
                        ],
                        [
                            "'maxpooling'",
                            "MethodArgument"
                        ],
                        [
                            "'deformable'",
                            "MethodArgument"
                        ],
                        [
                            "'bn'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_93": {
                "values": {
                    "value": "[-1, group, group_size, h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_170": {
                "x": {
                    "value": "tf.maximum(box_geo_feat_wg_relu, 1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_250": {
                "x": {
                    "value": "tf.maximum(box_geo_feat_wg_relu, 1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_283": {
                "a": {
                    "value": "center_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5 * (x1 + x2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "maximum_285": {
                "x": {
                    "value": "tf.abs(delta_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_287": {
                "a": {
                    "value": "center_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5 * (y1 + y2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "maximum_289": {
                "x": {
                    "value": "tf.abs(delta_y)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_317": {
                "a": {
                    "value": "center2_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5 * (x21 + x22)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tile_318": {
                "input": {
                    "value": "tf.transpose(w2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[tf.shape(delta_x)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_319": {
                "x": {
                    "value": "tf.abs(delta_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_321": {
                "a": {
                    "value": "center2_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5 * (y21 + y22)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tile_322": {
                "input": {
                    "value": "tf.transpose(w2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[tf.shape(delta_y)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_323": {
                "x": {
                    "value": "tf.abs(delta_y)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_517": {
                "tensor": {
                    "value": "squeeze",
                    "type": "Name",
                    "possible_values": [
                        [
                            "GlobalAvgPooling(l, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "dense(squeeze, ch_out // 4, activation=tf.nn.relu, W_init=tf.variance_scaling_initializer(), scope='fc1')",
                            "Call"
                        ],
                        [
                            "dense(squeeze, ch_out * 4, activation=tf.nn.sigmoid, W_init=tf.variance_scaling_initializer(), scope='fc2')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "[-1, 1, 1, 1]",
                            "List"
                        ],
                        [
                            "x.get_shape().as_list()[1:]",
                            "Subscript"
                        ],
                        [
                            "(2, 2)",
                            "Tuple"
                        ],
                        [
                            "(kernel_size, kernel_size, in_channel, ch_out)",
                            "Tuple"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "[1, chan]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, chan] if data_format == 'NHWC' else [1, chan, 1, 1]",
                            "IfExp"
                        ]
                    ]
                }
            },
            "get_variable_scope_573": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_587": {
                "variable": {
                    "value": "l",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "l",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv2d(l, ch_out, 3, stride=stride, activation=NormReLU, use_bias=False, data_format='NCHW', scope='conv1')",
                            "Call"
                        ],
                        [
                            "conv2d(l, ch_out, 3, use_bias=False, activation=get_bn(use_gn, zero_init=True), data_format='NCHW', scope='conv2')",
                            "Call"
                        ],
                        [
                            "conv2d(l, ch_out, 1, activation=NormReLU, scope='conv1', use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "conv2d(l, ch_out, 3, dilations=dilations, stride=stride, activation=NormReLU, scope='conv2', use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "deformable_conv2d(l, offset, ch_out, 3, scope='conv2', data_format='NCHW', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.pad(l, [[0, 0], [0, 0], maybe_reverse_pad(0, 1, tf_pad_reverse), maybe_reverse_pad(0, 1, tf_pad_reverse)])",
                            "Call"
                        ],
                        [
                            "conv2d(l, ch_out, 3, dilations=dilations, stride=2, activation=NormReLU, padding='VALID', scope='conv2', use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "conv2d(l, ch_out * 4, 1, activation=get_bn(use_gn, zero_init=True), scope='conv3', use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "l * tf.reshape(squeeze, shape)",
                            "BinOp"
                        ],
                        [
                            "tf.pad(l, [[0, 0], [0, 0], maybe_reverse_pad(0, 1, tf_pad_reverse), maybe_reverse_pad(0, 1, tf_pad_reverse)])",
                            "Call"
                        ],
                        [
                            "conv2d(l, ch_out * 2, 1, stride=1, activation=NormReLU, scope='conv1', use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "conv2d(l, ch_out * 2, 3, dilations=dilations, stride=stride, activation=NormReLU, scope='conv2', split=32, use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "conv2d(l, ch_out * 4, 1, activation=get_bn(use_gn, zero_init=True), scope='conv3', use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "l[:, :, :-1, :-1]",
                            "Subscript"
                        ],
                        [
                            "block_func(l, features, stride if i == 0 else 1, dilations=dilations_, deformable=deformable_, use_gn=use_gn, tf_pad_reverse=tf_pad_reverse, use_se=use_se)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(l)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], maybe_reverse_pad(2, 3, tf_pad_reverse), maybe_reverse_pad(2, 3, tf_pad_reverse)])",
                            "Call"
                        ],
                        [
                            "conv2d(l, 64, 7, stride=2, activation=BNReLU, padding='VALID', scope='conv0', use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.pad(l, [[0, 0], [0, 0], maybe_reverse_pad(0, 1, tf_pad_reverse), maybe_reverse_pad(0, 1, tf_pad_reverse)])",
                            "Call"
                        ],
                        [
                            "MaxPooling(l, shape=3, stride=2, padding='VALID', scope='pool0', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "resnet_group(l, 'group0', resnet_bottleneck, 64, num_blocks[0], stride=1, tf_pad_reverse=tf_pad_reverse)",
                            "Call"
                        ],
                        [
                            "resnet_group(l, 'group1', resnet_bottleneck, 128, num_blocks[1], stride=2, tf_pad_reverse=tf_pad_reverse)",
                            "Call"
                        ],
                        [
                            "resnet_group(l, 'group2', resnet_bottleneck, 256, num_blocks[2], stride=2, tf_pad_reverse=tf_pad_reverse)",
                            "Call"
                        ],
                        [
                            "resnet_group(image, 'group3', resnet_bottleneck, 512, num_block, stride=2, reuse=reuse, tf_pad_reverse=tf_pad_reverse)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [pad_base[0], pad_base[1] + pad_shape2d[0]], [pad_base[0], pad_base[1] + pad_shape2d[1]]])",
                            "Call"
                        ],
                        [
                            "conv2d(l, 64, 7, stride=2, activation=NormReLU, padding='VALID', scope='conv0', use_bias=False, data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.pad(l, [[0, 0], [0, 0], maybe_reverse_pad(0, 1, tf_pad_reverse), maybe_reverse_pad(0, 1, tf_pad_reverse)])",
                            "Call"
                        ],
                        [
                            "MaxPooling(l, shape=3, stride=2, padding='VALID', scope='pool0', data_format='NCHW')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_632": {
                "name": {
                    "value": "weight_decay",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_634": {
                "variable": {
                    "value": "weight_decay",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_loss(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "wd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "'%s/wd' % var.op.name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_685": {
                "a": {
                    "value": "y_max2",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "transpose_686": {
                "a": {
                    "value": "y_min2",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "transpose_688": {
                "a": {
                    "value": "x_max2",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "transpose_689": {
                "a": {
                    "value": "x_min2",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "expand_dims_696": {
                "input": {
                    "value": "areas2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "area(boxes2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_738": {
                "variable": {
                    "value": "flat_x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([-1, group, group_size, h, w]))",
                            "Call"
                        ],
                        [
                            "BatchNorm(x, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "group_norm(x, scope='gn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(act_single_labels[:, 0], 0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, n_out])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, int(np.prod(shape))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_740": {
                "variable": {
                    "value": "flat_x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([-1, group, group_size, h, w]))",
                            "Call"
                        ],
                        [
                            "BatchNorm(x, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "group_norm(x, scope='gn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(act_single_labels[:, 0], 0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, n_out])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([tf.shape(x)[0], -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_761": {
                "variable": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ceil_854": {
                "x": {
                    "value": "tf.to_float(shape2d) / mult",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_950": {
                "name": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "scope or tf.get_variable_scope().name",
                            "BoolOp"
                        ],
                        [
                            "'gn'",
                            "MethodArgument"
                        ],
                        [
                            "'RM'",
                            "MethodArgument"
                        ],
                        [
                            "'RM'",
                            "MethodArgument"
                        ],
                        [
                            "'geometric_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'geometric_encoding_pair'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'dense'",
                            "MethodArgument"
                        ],
                        [
                            "'maxpooling'",
                            "MethodArgument"
                        ],
                        [
                            "'deformable'",
                            "MethodArgument"
                        ],
                        [
                            "'bn'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "eye_1031": {
                "num_rows": {
                    "value": "tf.shape(gt_boxes)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_max_1036": {
                "input_tensor": {
                    "value": "iou",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pairwise_iou(A, B)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(boxes, gt_boxes)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.eye(tf.shape(gt_boxes)[0]), iou], axis=0)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(boxes, gt_boxes)",
                            "Call"
                        ],
                        [
                            "tf.concat([iou, tf.eye(tf.shape(gt_boxes)[0])], axis=0)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(boxes[i], gt_boxes[i])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_1037": {
                "condition": {
                    "value": "fg_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_max(iou, axis=1) >= config.fastrcnn_fg_thres",
                            "Compare"
                        ],
                        [
                            "tf.reduce_max(iou, axis=1) >= config.fastrcnn_fg_thres",
                            "Compare"
                        ],
                        [
                            "tf.reduce_max(iou, axis=1) >= config.fastrcnn_fg_thres",
                            "Compare"
                        ]
                    ]
                }
            },
            "equal_1039": {
                "x": {
                    "value": "act_single_labels[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "size_1047": {
                "input": {
                    "value": "fg_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.where(fg_mask), [-1])",
                            "Call"
                        ],
                        [
                            "tf.random_shuffle(fg_inds)[:num_fg - num_act_fg]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([fg_inds, act_single_fg_inds], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.where(fg_mask), [-1])",
                            "Call"
                        ],
                        [
                            "tf.random_shuffle(fg_inds)[:num_fg]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(tf.where(fg_mask), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "where_1054": {
                "condition": {
                    "value": "tf.logical_not(fg_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "size_1055": {
                "input": {
                    "value": "bg_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.where(tf.logical_not(fg_mask)), [-1])",
                            "Call"
                        ],
                        [
                            "tf.random_shuffle(bg_inds)[:num_bg]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(tf.where(tf.logical_not(fg_mask)), [-1])",
                            "Call"
                        ],
                        [
                            "tf.random_shuffle(bg_inds)[:num_bg]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(tf.where(tf.logical_not(fg_mask)), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_1077": {
                "params": {
                    "value": "gt_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "fg_inds_wrt_gt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(best_iou_ind, fg_inds)",
                            "Call"
                        ],
                        [
                            "tf.gather(best_iou_ind, fg_inds)",
                            "Call"
                        ],
                        [
                            "tf.gather(best_iou_ind, fg_inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_1078": {
                "input": {
                    "value": "bg_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.where(tf.logical_not(fg_mask)), [-1])",
                            "Call"
                        ],
                        [
                            "tf.random_shuffle(bg_inds)[:num_bg]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(tf.where(tf.logical_not(fg_mask)), [-1])",
                            "Call"
                        ],
                        [
                            "tf.random_shuffle(bg_inds)[:num_bg]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(tf.where(tf.logical_not(fg_mask)), [-1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_1125": {
                "num_rows": {
                    "value": "tf.shape(gt_boxes)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_max_1131": {
                "input_tensor": {
                    "value": "iou",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pairwise_iou(A, B)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(boxes, gt_boxes)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.eye(tf.shape(gt_boxes)[0]), iou], axis=0)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(boxes, gt_boxes)",
                            "Call"
                        ],
                        [
                            "tf.concat([iou, tf.eye(tf.shape(gt_boxes)[0])], axis=0)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(boxes[i], gt_boxes[i])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_1133": {
                "condition": {
                    "value": "fg_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_max(iou, axis=1) >= config.fastrcnn_fg_thres",
                            "Compare"
                        ],
                        [
                            "tf.reduce_max(iou, axis=1) >= config.fastrcnn_fg_thres",
                            "Compare"
                        ],
                        [
                            "tf.reduce_max(iou, axis=1) >= config.fastrcnn_fg_thres",
                            "Compare"
                        ]
                    ]
                }
            },
            "size_1135": {
                "input": {
                    "value": "fg_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.where(fg_mask), [-1])",
                            "Call"
                        ],
                        [
                            "tf.random_shuffle(fg_inds)[:num_fg - num_act_fg]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([fg_inds, act_single_fg_inds], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.where(fg_mask), [-1])",
                            "Call"
                        ],
                        [
                            "tf.random_shuffle(fg_inds)[:num_fg]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(tf.where(fg_mask), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "where_1140": {
                "condition": {
                    "value": "tf.logical_not(fg_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "size_1141": {
                "input": {
                    "value": "bg_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.where(tf.logical_not(fg_mask)), [-1])",
                            "Call"
                        ],
                        [
                            "tf.random_shuffle(bg_inds)[:num_bg]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(tf.where(tf.logical_not(fg_mask)), [-1])",
                            "Call"
                        ],
                        [
                            "tf.random_shuffle(bg_inds)[:num_bg]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(tf.where(tf.logical_not(fg_mask)), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_1165": {
                "params": {
                    "value": "gt_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "fg_inds_wrt_gt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(best_iou_ind, fg_inds)",
                            "Call"
                        ],
                        [
                            "tf.gather(best_iou_ind, fg_inds)",
                            "Call"
                        ],
                        [
                            "tf.gather(best_iou_ind, fg_inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_1166": {
                "input": {
                    "value": "bg_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.where(tf.logical_not(fg_mask)), [-1])",
                            "Call"
                        ],
                        [
                            "tf.random_shuffle(bg_inds)[:num_bg]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(tf.where(tf.logical_not(fg_mask)), [-1])",
                            "Call"
                        ],
                        [
                            "tf.random_shuffle(bg_inds)[:num_bg]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(tf.where(tf.logical_not(fg_mask)), [-1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_1210": {
                "x": {
                    "value": "tf.size(gt_boxes[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_1260": {
                "x": {
                    "value": "crop_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_1261": {
                "x": {
                    "value": "crop_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_1263": {
                "x": {
                    "value": "image_shape[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_1264": {
                "x": {
                    "value": "image_shape[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_1267": {
                "x": {
                    "value": "image_shape[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_1269": {
                "x": {
                    "value": "image_shape[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_1291": {
                "x": {
                    "value": "crop_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_1292": {
                "x": {
                    "value": "crop_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_1294": {
                "x": {
                    "value": "image_shape[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_1295": {
                "x": {
                    "value": "image_shape[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_1298": {
                "x": {
                    "value": "image_shape[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_1300": {
                "x": {
                    "value": "image_shape[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_1423": {
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(scores, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_1506": {
                "x": {
                    "value": "box_pred_twth",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "decode_clip",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(1333 / 16.0)",
                            "MethodArgument"
                        ],
                        [
                            "np.log(1333 / 16.0)",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "minimum_1531": {
                "x": {
                    "value": "box_pred_twth",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "decode_clip",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(1333 / 16.0)",
                            "MethodArgument"
                        ],
                        [
                            "np.log(1333 / 16.0)",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_1616": {
                "input": {
                    "value": "target_boxes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "log_1636": {
                "x": {
                    "value": "tf.clip_by_value(sigmoid_p, 1e-08, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_1638": {
                "x": {
                    "value": "tf.clip_by_value(1.0 - sigmoid_p, 1e-08, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "meshgrid_1661": {
                "*args": {
                    "value": "tf.range(shape[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.range(shape[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "ij",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_1745": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([-1, group, group_size, h, w]))",
                            "Call"
                        ],
                        [
                            "BatchNorm(x, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "group_norm(x, scope='gn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(act_single_labels[:, 0], 0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, n_out])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1, n_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_1753": {
                "variable": {
                    "value": "xn",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "xn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(xn, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(x, mm, mv, b, g, epsilon)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(x, moving_mean, moving_var, beta, gamma, epsilon)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fused_batch_norm_1764": {
                "variable": {
                    "value": "(xn, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([-1, group, group_size, h, w]))",
                            "Call"
                        ],
                        [
                            "BatchNorm(x, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "group_norm(x, scope='gn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(act_single_labels[:, 0], 0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, n_out])",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('gamma', [chan], initializer=gamma_init)",
                            "Call"
                        ],
                        [
                            "tf.reshape(gamma, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('gamma', [n_out], initializer=gamma_init)",
                            "Call"
                        ],
                        [
                            "tf.ones([n_out], name='gamma')",
                            "Call"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', [chan], initializer=tf.constant_initializer())",
                            "Call"
                        ],
                        [
                            "tf.reshape(beta, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('beta', [n_out], initializer=tf.constant_initializer())",
                            "Call"
                        ],
                        [
                            "tf.zeros([n_out], name='beta')",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "moving_mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('mean/EMA', [n_out], initializer=tf.constant_initializer(), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "moving_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('variance/EMA', [n_out], initializer=tf.constant_initializer(1.0), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "epsilon",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "Constant"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ]
                    ]
                },
                "is_training": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "control_dependencies_1813": {
                "control_inputs": {
                    "value": "[update_op1, update_op2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_1814": {
                "input": {
                    "value": "xn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(xn, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(x, mm, mv, b, g, epsilon)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(x, moving_mean, moving_var, beta, gamma, epsilon)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "output",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_1834": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_1837": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_69": {
                "variable": {
                    "value": "regloss",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "regloss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.multiply(tf.convert_to_tensor(wd, dtype=p.dtype.base_dtype, name='scale'), tf.nn.l2_loss(p), name='%s/wd' % p.op.name)",
                            "Call"
                        ],
                        [
                            "tf.cast(regloss, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "maximum_170": {
                "x": {
                    "value": "box_geo_feat_wg_relu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(box_geo_feat_wg)",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_geo_feat_wg_relu, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(box_geo_feat_wg)",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_geo_feat_wg_relu, perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-06",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_250": {
                "x": {
                    "value": "box_geo_feat_wg_relu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(box_geo_feat_wg)",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_geo_feat_wg_relu, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(box_geo_feat_wg)",
                            "Call"
                        ],
                        [
                            "tf.transpose(box_geo_feat_wg_relu, perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-06",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_285": {
                "x": {
                    "value": "delta_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "center_x - tf.transpose(center_x)",
                            "BinOp"
                        ],
                        [
                            "delta_x / w",
                            "BinOp"
                        ],
                        [
                            "tf.log(tf.maximum(tf.abs(delta_x), 0.001))",
                            "Call"
                        ],
                        [
                            "center1_x - tf.transpose(center2_x)",
                            "BinOp"
                        ],
                        [
                            "delta_x / tf.tile(tf.transpose(w2), [tf.shape(delta_x)[0], 1])",
                            "BinOp"
                        ],
                        [
                            "tf.log(tf.maximum(tf.abs(delta_x), 0.001))",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_289": {
                "x": {
                    "value": "delta_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "center_y - tf.transpose(center_y)",
                            "BinOp"
                        ],
                        [
                            "delta_y / w",
                            "BinOp"
                        ],
                        [
                            "tf.log(tf.maximum(tf.abs(delta_y), 0.001))",
                            "Call"
                        ],
                        [
                            "center1_y - tf.transpose(center2_y)",
                            "BinOp"
                        ],
                        [
                            "delta_y / tf.tile(tf.transpose(w2), [tf.shape(delta_y)[0], 1])",
                            "BinOp"
                        ],
                        [
                            "tf.log(tf.maximum(tf.abs(delta_y), 0.001))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_291": {
                "a": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x2 - x1",
                            "BinOp"
                        ],
                        [
                            "x1 + 1 - x0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_293": {
                "a": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y2 - y1",
                            "BinOp"
                        ],
                        [
                            "y1 + 1 - y0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_318": {
                "a": {
                    "value": "w2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x22 - x21",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_319": {
                "x": {
                    "value": "delta_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "center_x - tf.transpose(center_x)",
                            "BinOp"
                        ],
                        [
                            "delta_x / w",
                            "BinOp"
                        ],
                        [
                            "tf.log(tf.maximum(tf.abs(delta_x), 0.001))",
                            "Call"
                        ],
                        [
                            "center1_x - tf.transpose(center2_x)",
                            "BinOp"
                        ],
                        [
                            "delta_x / tf.tile(tf.transpose(w2), [tf.shape(delta_x)[0], 1])",
                            "BinOp"
                        ],
                        [
                            "tf.log(tf.maximum(tf.abs(delta_x), 0.001))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_322": {
                "a": {
                    "value": "w2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x22 - x21",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_323": {
                "x": {
                    "value": "delta_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "center_y - tf.transpose(center_y)",
                            "BinOp"
                        ],
                        [
                            "delta_y / w",
                            "BinOp"
                        ],
                        [
                            "tf.log(tf.maximum(tf.abs(delta_y), 0.001))",
                            "Call"
                        ],
                        [
                            "center1_y - tf.transpose(center2_y)",
                            "BinOp"
                        ],
                        [
                            "delta_y / tf.tile(tf.transpose(w2), [tf.shape(delta_y)[0], 1])",
                            "BinOp"
                        ],
                        [
                            "tf.log(tf.maximum(tf.abs(delta_y), 0.001))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_325": {
                "a": {
                    "value": "w2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x22 - x21",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_327": {
                "a": {
                    "value": "h2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y22 - y21",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_575": {
                "name_or_scope": {
                    "value": "'block{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_630": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_to_collection_636": {
                "name": {
                    "value": "losses",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='%s/wd' % var.op.name)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_665": {
                "input": {
                    "value": "ref",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_666": {
                "input": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "stack_970": {
                "values": {
                    "value": "[-1, output_shape[1], tf.shape(x)[2] * shape[0], tf.shape(x)[3] * shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_not_1054": {
                "x": {
                    "value": "fg_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_max(iou, axis=1) >= config.fastrcnn_fg_thres",
                            "Compare"
                        ],
                        [
                            "tf.reduce_max(iou, axis=1) >= config.fastrcnn_fg_thres",
                            "Compare"
                        ],
                        [
                            "tf.reduce_max(iou, axis=1) >= config.fastrcnn_fg_thres",
                            "Compare"
                        ]
                    ]
                }
            },
            "logical_not_1140": {
                "x": {
                    "value": "fg_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_max(iou, axis=1) >= config.fastrcnn_fg_thres",
                            "Compare"
                        ],
                        [
                            "tf.reduce_max(iou, axis=1) >= config.fastrcnn_fg_thres",
                            "Compare"
                        ],
                        [
                            "tf.reduce_max(iou, axis=1) >= config.fastrcnn_fg_thres",
                            "Compare"
                        ]
                    ]
                }
            },
            "reduce_max_1188": {
                "input_tensor": {
                    "value": "iou",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pairwise_iou(A, B)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(boxes, gt_boxes)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.eye(tf.shape(gt_boxes)[0]), iou], axis=0)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(boxes, gt_boxes)",
                            "Call"
                        ],
                        [
                            "tf.concat([iou, tf.eye(tf.shape(gt_boxes)[0])], axis=0)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(boxes[i], gt_boxes[i])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_1190": {
                "condition": {
                    "value": "fg_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_max(iou, axis=1) >= config.fastrcnn_fg_thres",
                            "Compare"
                        ],
                        [
                            "tf.reduce_max(iou, axis=1) >= config.fastrcnn_fg_thres",
                            "Compare"
                        ],
                        [
                            "tf.reduce_max(iou, axis=1) >= config.fastrcnn_fg_thres",
                            "Compare"
                        ]
                    ]
                }
            },
            "where_1199": {
                "condition": {
                    "value": "tf.logical_not(fg_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "size_1210": {
                "input": {
                    "value": "gt_boxes[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_1211": {
                "input": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_1212": {
                "input": {
                    "value": "iou",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pairwise_iou(A, B)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(boxes, gt_boxes)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.eye(tf.shape(gt_boxes)[0]), iou], axis=0)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(boxes, gt_boxes)",
                            "Call"
                        ],
                        [
                            "tf.concat([iou, tf.eye(tf.shape(gt_boxes)[0])], axis=0)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(boxes[i], gt_boxes[i])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_1220": {
                "params": {
                    "value": "gt_labels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "fg_inds_wrt_gt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(best_iou_ind, fg_inds)",
                            "Call"
                        ],
                        [
                            "tf.gather(best_iou_ind, fg_inds)",
                            "Call"
                        ],
                        [
                            "tf.gather(best_iou_ind, fg_inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_1221": {
                "input": {
                    "value": "bg_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.where(tf.logical_not(fg_mask)), [-1])",
                            "Call"
                        ],
                        [
                            "tf.random_shuffle(bg_inds)[:num_bg]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(tf.where(tf.logical_not(fg_mask)), [-1])",
                            "Call"
                        ],
                        [
                            "tf.random_shuffle(bg_inds)[:num_bg]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(tf.where(tf.logical_not(fg_mask)), [-1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_1266": {
                "x": {
                    "value": "crop_shape[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_1268": {
                "x": {
                    "value": "crop_shape[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_1297": {
                "x": {
                    "value": "crop_shape[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_1299": {
                "x": {
                    "value": "crop_shape[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_1636": {
                "t": {
                    "value": "sigmoid_p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(logits)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-08",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_1638": {
                "t": {
                    "value": "1.0 - sigmoid_p",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-08",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_1651": {
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(inputs, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_1774": {
                "variable": {
                    "value": "xn",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([-1, group, group_size, h, w]))",
                            "Call"
                        ],
                        [
                            "BatchNorm(x, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "group_norm(x, scope='gn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(act_single_labels[:, 0], 0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, n_out])",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "mm",
                    "type": "Name",
                    "possible_values": []
                },
                "variance": {
                    "value": "mv",
                    "type": "Name",
                    "possible_values": []
                },
                "offset": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('b', [out_channel], initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [output_size], initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [ch_out], initializer=b_init)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": []
                },
                "variance_epsilon": {
                    "value": "epsilon",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "batch_normalization_1777": {
                "variable": {
                    "value": "xn",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([-1, group, group_size, h, w]))",
                            "Call"
                        ],
                        [
                            "BatchNorm(x, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "group_norm(x, scope='gn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(act_single_labels[:, 0], 0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, n_out])",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "moving_mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('mean/EMA', [n_out], initializer=tf.constant_initializer(), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "moving_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('variance/EMA', [n_out], initializer=tf.constant_initializer(1.0), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', [chan], initializer=tf.constant_initializer())",
                            "Call"
                        ],
                        [
                            "tf.reshape(beta, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('beta', [n_out], initializer=tf.constant_initializer())",
                            "Call"
                        ],
                        [
                            "tf.zeros([n_out], name='beta')",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('gamma', [chan], initializer=gamma_init)",
                            "Call"
                        ],
                        [
                            "tf.reshape(gamma, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('gamma', [n_out], initializer=gamma_init)",
                            "Call"
                        ],
                        [
                            "tf.ones([n_out], name='gamma')",
                            "Call"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "epsilon",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_1824": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_62": {
                "value": {
                    "value": "wd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "p.dtype.base_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "scale",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_loss_64": {
                "t": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params",
                            "Name"
                        ]
                    ]
                }
            },
            "shape_177": {
                "input": {
                    "value": "weighted_softmax",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(weighted_logits)",
                            "Call"
                        ],
                        [
                            "tf.reshape(weighted_softmax, (tf.shape(weighted_softmax)[0] * group, tf.shape(weighted_softmax)[-1]))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(weighted_logits)",
                            "Call"
                        ],
                        [
                            "tf.reshape(weighted_softmax, (tf.shape(weighted_softmax)[0] * group, tf.shape(weighted_softmax)[-1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_257": {
                "input": {
                    "value": "weighted_softmax",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(weighted_logits)",
                            "Call"
                        ],
                        [
                            "tf.reshape(weighted_softmax, (tf.shape(weighted_softmax)[0] * group, tf.shape(weighted_softmax)[-1]))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(weighted_logits)",
                            "Call"
                        ],
                        [
                            "tf.reshape(weighted_softmax, (tf.shape(weighted_softmax)[0] * group, tf.shape(weighted_softmax)[-1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_scope_412": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l2_loss_635": {
                "t": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "variables",
                            "Name"
                        ]
                    ]
                }
            },
            "shape_651": {
                "input": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_654": {
                "input": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "stack_740": {
                "values": {
                    "value": "[tf.shape(x)[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_854": {
                "x": {
                    "value": "shape2d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(image)[2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_1031": {
                "input": {
                    "value": "gt_boxes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_1125": {
                "input": {
                    "value": "gt_boxes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "logical_not_1199": {
                "x": {
                    "value": "fg_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_max(iou, axis=1) >= config.fastrcnn_fg_thres",
                            "Compare"
                        ],
                        [
                            "tf.reduce_max(iou, axis=1) >= config.fastrcnn_fg_thres",
                            "Compare"
                        ],
                        [
                            "tf.reduce_max(iou, axis=1) >= config.fastrcnn_fg_thres",
                            "Compare"
                        ]
                    ]
                }
            },
            "shape_1331": {
                "input": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([gt_boxes, boxes], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([boxes, gt_boxes], axis=0)",
                            "Call"
                        ],
                        [
                            "boxes + 1",
                            "BinOp"
                        ],
                        [
                            "transform_fpcoor_for_tf(boxes, image_shape, [crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "transform_fpcoor_for_tf(boxes, image_shape, [crop_size, crop_size])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(boxes)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(boxes)",
                            "Call"
                        ],
                        [
                            "tf.maximum(boxes, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(boxes, tf.to_float(m), name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boxes, [batch_size, -1, 4])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_318": {
                "input": {
                    "value": "delta_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "center_x - tf.transpose(center_x)",
                            "BinOp"
                        ],
                        [
                            "delta_x / w",
                            "BinOp"
                        ],
                        [
                            "tf.log(tf.maximum(tf.abs(delta_x), 0.001))",
                            "Call"
                        ],
                        [
                            "center1_x - tf.transpose(center2_x)",
                            "BinOp"
                        ],
                        [
                            "delta_x / tf.tile(tf.transpose(w2), [tf.shape(delta_x)[0], 1])",
                            "BinOp"
                        ],
                        [
                            "tf.log(tf.maximum(tf.abs(delta_x), 0.001))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_322": {
                "input": {
                    "value": "delta_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "center_y - tf.transpose(center_y)",
                            "BinOp"
                        ],
                        [
                            "delta_y / w",
                            "BinOp"
                        ],
                        [
                            "tf.log(tf.maximum(tf.abs(delta_y), 0.001))",
                            "Call"
                        ],
                        [
                            "center1_y - tf.transpose(center2_y)",
                            "BinOp"
                        ],
                        [
                            "delta_y / tf.tile(tf.transpose(w2), [tf.shape(delta_y)[0], 1])",
                            "BinOp"
                        ],
                        [
                            "tf.log(tf.maximum(tf.abs(delta_y), 0.001))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_initializer_595": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_601": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_740": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([-1, group, group_size, h, w]))",
                            "Call"
                        ],
                        [
                            "BatchNorm(x, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "group_norm(x, scope='gn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(act_single_labels[:, 0], 0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, n_out])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_972": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([-1, group, group_size, h, w]))",
                            "Call"
                        ],
                        [
                            "BatchNorm(x, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "group_norm(x, scope='gn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(act_single_labels[:, 0], 0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, n_out])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_973": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([-1, group, group_size, h, w]))",
                            "Call"
                        ],
                        [
                            "BatchNorm(x, scope='bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "group_norm(x, scope='gn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name=name)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(act_single_labels[:, 0], 0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, 1, n_out])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "obj_detect_imgs.py": {
        "tensorflow": {
            "global_variables_360": {
                "variable": {
                    "value": "allvars",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_368": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "var_list": {
                    "value": "restore_vars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "allvars",
                            "Name"
                        ],
                        [
                            "[var for var in restore_vars if var.name.split(':')[0].split('/')[-1] not in opts]",
                            "ListComp"
                        ],
                        [
                            "[v for v in variables if v.name in intersect]",
                            "ListComp"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_371": {
                "variable": {
                    "value": "ckpt",
                    "type": "Name",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "load_from",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.model_path",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ConfigProto_449": {
                "variable": {
                    "value": "tfconfig",
                    "type": "Name",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_initializer_359": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_359": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_456": {
                "config": {
                    "value": "tfconfig",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "obj_detect_imgs_multi.py": {
        "tensorflow": {
            "global_variables_344": {
                "variable": {
                    "value": "allvars",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_352": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "var_list": {
                    "value": "restore_vars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "allvars",
                            "Name"
                        ],
                        [
                            "[var for var in restore_vars if var.name.split(':')[0].split('/')[-1] not in opts]",
                            "ListComp"
                        ],
                        [
                            "[v for v in variables if v.name in intersect]",
                            "ListComp"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_355": {
                "variable": {
                    "value": "ckpt",
                    "type": "Name",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "load_from",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.model_path",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ConfigProto_490": {
                "variable": {
                    "value": "tfconfig",
                    "type": "Name",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_initializer_343": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_343": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_497": {
                "config": {
                    "value": "tfconfig",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "obj_detect_imgs_multi_queuer.py": {
        "tensorflow": {
            "global_variables_353": {
                "variable": {
                    "value": "allvars",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_361": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "var_list": {
                    "value": "restore_vars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "allvars",
                            "Name"
                        ],
                        [
                            "[var for var in restore_vars if var.name.split(':')[0].split('/')[-1] not in opts]",
                            "ListComp"
                        ],
                        [
                            "[v for v in variables if v.name in intersect]",
                            "ListComp"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_364": {
                "variable": {
                    "value": "ckpt",
                    "type": "Name",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "load_from",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.model_path",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ConfigProto_504": {
                "variable": {
                    "value": "tfconfig",
                    "type": "Name",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_initializer_352": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_352": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_511": {
                "config": {
                    "value": "tfconfig",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "obj_detect_tracking.py": {
        "tensorflow": {
            "global_variables_397": {
                "variable": {
                    "value": "allvars",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_405": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "var_list": {
                    "value": "restore_vars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "allvars",
                            "Name"
                        ],
                        [
                            "[var for var in restore_vars if var.name.split(':')[0].split('/')[-1] not in opts]",
                            "ListComp"
                        ],
                        [
                            "[v for v in variables if v.name in intersect]",
                            "ListComp"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_408": {
                "variable": {
                    "value": "ckpt",
                    "type": "Name",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "load_from",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.model_path",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ConfigProto_507": {
                "variable": {
                    "value": "tfconfig",
                    "type": "Name",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_initializer_396": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_396": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_514": {
                "config": {
                    "value": "tfconfig",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "obj_detect_tracking_multi.py": {
        "tensorflow": {
            "global_variables_384": {
                "variable": {
                    "value": "allvars",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_392": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "var_list": {
                    "value": "restore_vars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "allvars",
                            "Name"
                        ],
                        [
                            "[var for var in restore_vars if var.name.split(':')[0].split('/')[-1] not in opts]",
                            "ListComp"
                        ],
                        [
                            "[v for v in variables if v.name in intersect]",
                            "ListComp"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_395": {
                "variable": {
                    "value": "ckpt",
                    "type": "Name",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "load_from",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.model_path",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ConfigProto_613": {
                "variable": {
                    "value": "tfconfig",
                    "type": "Name",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_initializer_383": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_383": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_620": {
                "config": {
                    "value": "tfconfig",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "obj_detect_tracking_multi_queuer.py": {
        "tensorflow": {
            "global_variables_398": {
                "variable": {
                    "value": "allvars",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_406": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "var_list": {
                    "value": "restore_vars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "allvars",
                            "Name"
                        ],
                        [
                            "[var for var in restore_vars if var.name.split(':')[0].split('/')[-1] not in opts]",
                            "ListComp"
                        ],
                        [
                            "[v for v in variables if v.name in intersect]",
                            "ListComp"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_409": {
                "variable": {
                    "value": "ckpt",
                    "type": "Name",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "load_from",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.model_path",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ConfigProto_656": {
                "variable": {
                    "value": "tfconfig",
                    "type": "Name",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_initializer_397": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_397": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_663": {
                "config": {
                    "value": "tfconfig",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "obj_detect_tracking_multi_queuer_tmot.py": {
        "tensorflow": {
            "global_variables_394": {
                "variable": {
                    "value": "allvars",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_402": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "var_list": {
                    "value": "restore_vars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "allvars",
                            "Name"
                        ],
                        [
                            "[var for var in restore_vars if var.name.split(':')[0].split('/')[-1] not in opts]",
                            "ListComp"
                        ],
                        [
                            "[v for v in variables if v.name in intersect]",
                            "ListComp"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_405": {
                "variable": {
                    "value": "ckpt",
                    "type": "Name",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "load_from",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.model_path",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ConfigProto_659": {
                "variable": {
                    "value": "tfconfig",
                    "type": "Name",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_initializer_393": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_393": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_666": {
                "config": {
                    "value": "tfconfig",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tensorrt_optimize.py": {
        "tensorflow": {
            "ConfigProto_39": {
                "variable": {
                    "value": "tf_config",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_43": {
                "config": {
                    "value": "tf_config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "GraphDef_45": {
                "variable": {
                    "value": "frozen_graph",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GFile_44": {
                "name": {
                    "value": "args.pbfile",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tensorrt_optimize_tf1.15.py": {
        "tensorflow": {
            "ConfigProto_37": {
                "variable": {
                    "value": "tf_config",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_41": {
                "config": {
                    "value": "tf_config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "GraphDef_43": {
                "variable": {
                    "value": "frozen_graph",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GFile_42": {
                "name": {
                    "value": "args.pbfile",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tester.py": {
        "tensorflow": {}
    },
    "trainer.py": {
        "tensorflow": {
            "add_n_29": {
                "variable": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "grads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[g for (g, _) in grad_and_vars]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "multiply_31": {
                "variable": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add_n(grads)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0 / nr_tower",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "polynomial_decay_53": {
                "variable": {
                    "value": "warm_up_lr",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "warm_up_start",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.init_lr * 0.33",
                            "BinOp"
                        ]
                    ]
                },
                "global_step": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "config.warm_up_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end_learning_rate": {
                    "value": "config.init_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "power": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "piecewise_constant_81": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "boundaries": {
                    "value": "boundaries",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[config.warm_up_steps, config.warm_up_steps + config.same_lr_steps]",
                            "List"
                        ]
                    ]
                },
                "values": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[warm_up_lr, config.init_lr, schedule_lr]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_86": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "config.init_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdadeltaOptimizer_89": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.init_lr",
                            "Attribute"
                        ],
                        [
                            "tf.train.piecewise_constant(self.global_step, boundaries, values)",
                            "Call"
                        ],
                        [
                            "outs[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_mean_132": {
                "variable": {
                    "value": "avg_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cosine_decay_63": {
                "variable": {
                    "value": "schedule_lr",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "config.init_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.global_step - config.warm_up_steps - config.same_lr_steps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "max_steps - config.warm_up_steps - config.same_lr_steps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exponential_decay_71": {
                "variable": {
                    "value": "schedule_lr",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "config.init_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(config.train_num_examples / config.im_batch_size * config.num_epoch_per_decay)",
                            "Call"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "config.learning_rate_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_91": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.init_lr",
                            "Attribute"
                        ],
                        [
                            "tf.train.piecewise_constant(self.global_step, boundaries, values)",
                            "Call"
                        ],
                        [
                            "outs[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "device_131": {
                "device_name": {
                    "value": "config.controller",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_31": {
                "inputs": {
                    "value": "grads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[g for (g, _) in grad_and_vars]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_93": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.init_lr",
                            "Attribute"
                        ],
                        [
                            "tf.train.piecewise_constant(self.global_step, boundaries, values)",
                            "Call"
                        ],
                        [
                            "outs[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "device_119": {
                "device_name": {
                    "value": "assign_to_device('/GPU:%s' % gpuid, config.controller)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_95": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.init_lr",
                            "Attribute"
                        ],
                        [
                            "tf.train.piecewise_constant(self.global_step, boundaries, values)",
                            "Call"
                        ],
                        [
                            "outs[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "momentum": {
                    "value": "config.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_127": {
                "t": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-1 * config.clip_gradient_norm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "config.clip_gradient_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "tensorflow": {
            "reshape_678": {
                "variable": {
                    "value": "flat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "out_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[left] + [fixed_shape[i] or tf.shape(tensor)[i] for i in range(start, len(fixed_shape))]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_671": {
                "input": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_675": {
                "input": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "single_video_reid.py": {
        "torch": {
            "mean_282": {
                "variable": {
                    "value": "query_feature",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "query_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "extractor([query_boxes[i] for i in box_idxs])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_287": {
                "variable": {
                    "value": "gallery_featuress",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gallery_featuress",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(gallery_featuress)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_284": {
                "variable": {
                    "value": "gallery_featuress[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "gallery_featuress[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_294": {
                "variable": {
                    "value": "distmat",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, len(gallery_featuress))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "min_299": {
                "variable": {
                    "value": "distmat[0, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "this_distmat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_distance_matrix(query_features, gallery_features, metric='euclidean')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "torchreid/distance.py": {
        "torch": {
            "pow_60": {
                "variable": {
                    "value": "mat1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input1",
                    "type": "Name",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_60": {
                "variable": {
                    "value": "mat1",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_61": {
                "variable": {
                    "value": "mat2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input2",
                    "type": "Name",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_61": {
                "variable": {
                    "value": "mat2",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "t_61": {
                "variable": {
                    "value": "mat2",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_77": {
                "variable": {
                    "value": "input1_normed",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input1",
                    "type": "Name",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_78": {
                "variable": {
                    "value": "input2_normed",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input2",
                    "type": "Name",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_79": {
                "input": {
                    "value": "input1_normed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(input1, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "input2_normed.t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "torchreid/feature_extractor.py": {
        "torch": {
            "load_109": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "fpath",
                    "type": "Name",
                    "possible_values": []
                },
                "map_location": {
                    "value": "map_location",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "device_200": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device(device)",
                            "Call"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_available_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_113": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "fpath",
                    "type": "Name",
                    "possible_values": []
                },
                "pickle_module": {
                    "value": "pickle",
                    "type": "Name",
                    "possible_values": []
                },
                "map_location": {
                    "value": "map_location",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "stack_228": {
                "variable": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "image.unsqueeze(0).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.stack(images, dim=0)",
                            "Call"
                        ],
                        [
                            "images.to(self.device)",
                            "Call"
                        ],
                        [
                            "image.unsqueeze(0).to(self.device)",
                            "Call"
                        ],
                        [
                            "input.to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_249": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "torchreid/models/__init__.py": {
        "torch": {}
    },
    "torchreid/models/densenet.py": {
        "torch": {
            "Sequential_134": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv0', nn.Conv2d(3, num_init_features, kernel_size=7, stride=2, padding=3, bias=False)), ('norm0', nn.BatchNorm2d(num_init_features)), ('relu0', nn.ReLU(inplace=True)), ('pool0', nn.MaxPool2d(kernel_size=3, stride=2, padding=1))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_181": {
                "variable": {
                    "value": "self.global_avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_186": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feature_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "relu_242": {
                "variable": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "F.relu(f, inplace=True)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_63": {
                "variable": {
                    "value": "new_features",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "super(_DenseLayer, self).forward(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(new_features, p=self.drop_rate, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_66": {
                "tensors": {
                    "value": "[x, new_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_219": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_87": {
                "num_features": {
                    "value": "num_input_features",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_88": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "in_channels": {
                    "value": "num_input_features",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_output_features",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_99": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_179": {
                "num_features": {
                    "value": "num_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_init_features",
                            "Name"
                        ],
                        [
                            "num_features + num_layers * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_33": {
                "num_features": {
                    "value": "num_input_features",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "num_input_features",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "bn_size * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "num_features": {
                    "value": "bn_size * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "bn_size * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "growth_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_210": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fc_dims",
                            "Name"
                        ]
                    ]
                }
            },
            "BatchNorm1d_211": {
                "num_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fc_dims",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_212": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_214": {
                "p": {
                    "value": "dropout_p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_139": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_init_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_148": {
                "num_features": {
                    "value": "num_init_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_149": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_152": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "torchreid/models/hacnn.py": {
        "torch": {
            "Conv2d_24": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_c",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_c",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "stride": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_25": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_c",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.stream1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvBlock(in_channels, mid_channels, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.stream2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvBlock(in_channels, mid_channels, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.stream3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvBlock(in_channels, mid_channels, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.stream4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s1, s2, s3, s4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self.stream1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvBlock(in_channels, mid_channels, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "self.stream2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvBlock(in_channels, mid_channels, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "self.stream3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(3, stride=2, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s1, s2, s3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "upsample_105": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.mean(1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, (x.size(2) * 2, x.size(3) * 2), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:]).view(x.size(0), x.size(1))",
                            "Call"
                        ],
                        [
                            "F.grid_sample(x, grid)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x.size(2) * 2, x.size(3) * 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_126": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.mean(1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, (x.size(2) * 2, x.size(3) * 2), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:]).view(x.size(0), x.size(1))",
                            "Call"
                        ],
                        [
                            "F.grid_sample(x, grid)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_151": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_160": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "avg_pool2d_173": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.mean(1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, (x.size(2) * 2, x.size(3) * 2), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:]).view(x.size(0), x.size(1))",
                            "Call"
                        ],
                        [
                            "F.grid_sample(x, grid)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tanh_175": {
                "variable": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_229": {
                "variable": {
                    "value": "self.inception1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "InceptionA(32, nchannels[0])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_236": {
                "variable": {
                    "value": "self.inception2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "InceptionA(nchannels[0], nchannels[1])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_243": {
                "variable": {
                    "value": "self.inception3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "InceptionA(nchannels[1], nchannels[2])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_249": {
                "variable": {
                    "value": "self.fc_global",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(nchannels[2], feat_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_254": {
                "variable": {
                    "value": "self.classifier_global",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feat_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "affine_grid_293": {
                "variable": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tanh(self.fc(x))",
                            "Call"
                        ],
                        [
                            "theta.view(-1, 4, 2)",
                            "Call"
                        ],
                        [
                            "self.hard_attn(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros(theta_i.size(0), 2, 3)",
                            "Call"
                        ],
                        [
                            "theta.cuda()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_294": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.mean(1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.upsample(x, (x.size(2) * 2, x.size(3) * 2), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:]).view(x.size(0), x.size(1))",
                            "Call"
                        ],
                        [
                            "F.grid_sample(x, grid)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.affine_grid(theta, x.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_300": {
                "variable": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "theta_i.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_372": {
                "variable": {
                    "value": "x_global",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x3_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x3 * x3_attn",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "x3_out.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_28": {
                "input": {
                    "value": "self.bn(self.conv(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_261": {
                "variable": {
                    "value": "self.fc_local",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(nchannels[2] * 4, feat_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_266": {
                "variable": {
                    "value": "self.classifier_local",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feat_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cat_385": {
                "variable": {
                    "value": "x_local",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_local_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_50": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_79": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_166": {
                "data": {
                    "value": "[0, -0.75, 0, -0.25, 0, 0.25, 0, 0.75]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_250": {
                "in_features": {
                    "value": "nchannels[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "feat_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_251": {
                "num_features": {
                    "value": "feat_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_275": {
                "data": {
                    "value": "[[1, 0], [0, 0.25]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_278": {
                "data": {
                    "value": "[[1, 0], [0, 0.25]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_281": {
                "data": {
                    "value": "[[1, 0], [0, 0.25]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_284": {
                "data": {
                    "value": "[[1, 0], [0, 0.25]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "upsample_324": {
                "variable": {
                    "value": "x1_trans_i",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x1_trans_i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.stn(x, x1_theta_i)",
                            "Call"
                        ],
                        [
                            "F.upsample(x1_trans_i, (24, 28), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(24, 28)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "upsample_343": {
                "variable": {
                    "value": "x2_trans_i",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x2_trans_i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.stn(x1_out, x2_theta_i)",
                            "Call"
                        ],
                        [
                            "F.upsample(x2_trans_i, (12, 14), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(12, 14)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "upsample_363": {
                "variable": {
                    "value": "x3_trans_i",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x3_trans_i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.stn(x2_out, x3_theta_i)",
                            "Call"
                        ],
                        [
                            "F.upsample(x3_trans_i, (6, 7), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(6, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_381": {
                "variable": {
                    "value": "x_local_i",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x_local_i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x3_local_list[region_idx]",
                            "Subscript"
                        ],
                        [
                            "F.avg_pool2d(x_local_i, x_local_i.size()[2:]).view(x_local_i.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "x_local_i.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_262": {
                "in_features": {
                    "value": "nchannels[2] * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "feat_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_263": {
                "num_features": {
                    "value": "feat_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_393": {
                "tensors": {
                    "value": "[x_global, x_local]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "torchreid/models/inceptionresnetv2.py": {
        "torch": {
            "Conv2d_41": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_71": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(192, 48, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.branch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(192, 64, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.branch3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(3, stride=1, padding=1, count_include_pad=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_92": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(320, 32, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_110": {
                "variable": {
                    "value": "self.branch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(320, 32, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_116": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "320",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_117": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_137": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(320, 256, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_143": {
                "variable": {
                    "value": "self.branch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_162": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(1088, 128, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_172": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "384",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1088",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_173": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_178": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_190": {
                "variable": {
                    "value": "self.branch0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(1088, 256, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_195": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(1088, 256, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_200": {
                "variable": {
                    "value": "self.branch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(1088, 256, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_206": {
                "variable": {
                    "value": "self.branch3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_213": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_227": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(2080, 192, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_237": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "448",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2080",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_276": {
                "variable": {
                    "value": "self.maxpool_3a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_279": {
                "variable": {
                    "value": "self.maxpool_5a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_281": {
                "variable": {
                    "value": "self.repeat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Block35(scale=0.17)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_288": {
                "variable": {
                    "value": "self.repeat_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Block17(scale=0.1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_298": {
                "variable": {
                    "value": "self.repeat_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Block8(scale=0.2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_306": {
                "variable": {
                    "value": "self.global_avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_307": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1536",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_239": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_83": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "torchreid/models/inceptionv4.py": {
        "torch": {
            "Conv2d_41": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_68": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "variable": {
                    "value": "self.branch0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(160, 64, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(160, 64, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_107": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(384, 64, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "variable": {
                    "value": "self.branch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(384, 64, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_133": {
                "variable": {
                    "value": "self.branch3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(3, stride=1, padding=1, count_include_pad=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_153": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(384, 192, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_159": {
                "variable": {
                    "value": "self.branch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_175": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(1024, 192, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_185": {
                "variable": {
                    "value": "self.branch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(1024, 192, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_201": {
                "variable": {
                    "value": "self.branch3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(3, stride=1, padding=1, count_include_pad=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_211": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_220": {
                "variable": {
                    "value": "self.branch0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(1024, 192, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_225": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(1024, 256, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_235": {
                "variable": {
                    "value": "self.branch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_241": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_274": {
                "variable": {
                    "value": "self.branch3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(3, stride=1, padding=1, count_include_pad=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_285": {
                "variable": {
                    "value": "x1",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1_1a, x1_1b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_292": {
                "variable": {
                    "value": "x2",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x2_3a, x2_3b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_296": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_315": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(3, 32, kernel_size=3, stride=2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_339": {
                "variable": {
                    "value": "self.global_avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_340": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1536",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "AvgPool2d_134": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_202": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_275": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "torchreid/models/mlfn.py": {
        "torch": {
            "Conv2d_26": {
                "variable": {
                    "value": "self.fm_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "variable": {
                    "value": "self.fm_bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.fm_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_37": {
                "variable": {
                    "value": "self.fm_bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_38": {
                "variable": {
                    "value": "self.fm_conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "variable": {
                    "value": "self.fm_bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.fsm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_71": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fm_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.fm_bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.fm_conv2(x)",
                            "Call"
                        ],
                        [
                            "self.fm_bn2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "ss * x",
                            "BinOp"
                        ],
                        [
                            "self.fm_conv3(x)",
                            "Call"
                        ],
                        [
                            "self.fm_bn3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.global_avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.fc_x(x)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_76": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fm_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.fm_bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.fm_conv2(x)",
                            "Call"
                        ],
                        [
                            "self.fm_bn2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "ss * x",
                            "BinOp"
                        ],
                        [
                            "self.fm_conv3(x)",
                            "Call"
                        ],
                        [
                            "self.fm_bn3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.global_avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.fc_x(x)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_90": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fm_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.fm_bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.fm_conv2(x)",
                            "Call"
                        ],
                        [
                            "self.fm_bn2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "ss * x",
                            "BinOp"
                        ],
                        [
                            "self.fm_conv3(x)",
                            "Call"
                        ],
                        [
                            "self.fm_bn3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.global_avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.fc_x(x)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_124": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "MaxPool2d_125": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_128": {
                "variable": {
                    "value": "self.feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[MLFNBlock(channels[0], channels[1], 1, [128, 64], self.groups), MLFNBlock(channels[1], channels[1], 1, [128, 64], self.groups), MLFNBlock(channels[1], channels[1], 1, [128, 64], self.groups), MLFNBlock(channels[1], channels[2], 2, [256, 128], self.groups), MLFNBlock(channels[2], channels[2], 1, [256, 128], self.groups), MLFNBlock(channels[2], channels[2], 1, [256, 128], self.groups), MLFNBlock(channels[2], channels[2], 1, [256, 128], self.groups), MLFNBlock(channels[2], channels[3], 2, [512, 128], self.groups), MLFNBlock(channels[3], channels[3], 1, [512, 128], self.groups), MLFNBlock(channels[3], channels[3], 1, [512, 128], self.groups), MLFNBlock(channels[3], channels[3], 1, [512, 128], self.groups), MLFNBlock(channels[3], channels[3], 1, [512, 128], self.groups), MLFNBlock(channels[3], channels[3], 1, [512, 128], self.groups), MLFNBlock(channels[3], channels[4], 2, [512, 128], self.groups), MLFNBlock(channels[4], channels[4], 1, [512, 128], self.groups), MLFNBlock(channels[4], channels[4], 1, [512, 128], self.groups)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_178": {
                "variable": {
                    "value": "self.global_avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_181": {
                "variable": {
                    "value": "self.fc_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(channels[4], embed_dim, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_186": {
                "variable": {
                    "value": "self.fc_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.groups * 16, embed_dim, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_192": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "relu_215": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fm_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.fm_bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.fm_conv2(x)",
                            "Call"
                        ],
                        [
                            "self.fm_bn2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "ss * x",
                            "BinOp"
                        ],
                        [
                            "self.fm_conv3(x)",
                            "Call"
                        ],
                        [
                            "self.fm_bn3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.global_avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.fc_x(x)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_222": {
                "variable": {
                    "value": "s_hat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "s_hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(s_hat, 1)",
                            "Call"
                        ],
                        [
                            "self.fc_s(s_hat)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_43": {
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "fsm_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "num_features": {
                    "value": "fsm_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "fsm_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "fsm_channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "num_features": {
                    "value": "fsm_channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "fsm_channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "num_features": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sigmoid_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_95": {
                "input": {
                    "value": "residual + x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_182": {
                "in_channels": {
                    "value": "channels[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_183": {
                "num_features": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_184": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_187": {
                "in_channels": {
                    "value": "self.groups * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_188": {
                "num_features": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_189": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "torchreid/models/mobilenetv2.py": {
        "torch": {
            "Conv2d_35": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_c",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_c",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "stride": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_38": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_c",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(mid_channels, out_channels, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_120": {
                "variable": {
                    "value": "self.global_avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feature_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "relu6_41": {
                "input": {
                    "value": "self.bn(self.conv(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_169": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channels * expansion_factor",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_56": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_160": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fc_dims",
                            "Name"
                        ]
                    ]
                }
            },
            "BatchNorm1d_161": {
                "num_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fc_dims",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_162": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_164": {
                "p": {
                    "value": "dropout_p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "torchreid/models/mudeep.py": {
        "torch": {
            "Conv2d_24": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_c",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_c",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "stride": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_c",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "MaxPool2d_38": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.stream1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvBlock(96, 96, k=1, s=1, p=0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.stream2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.stream4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvBlock(96, 16, k=1, s=1, p=0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s1, s2, s3, s4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_81": {
                "variable": {
                    "value": "self.stream1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "variable": {
                    "value": "self.stream3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvBlock(96, 48, k=1, s=1, p=0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s1, s2, s3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "self.stream1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "self.stream2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvBlock(256, 64, k=1, s=1, p=0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_112": {
                "variable": {
                    "value": "self.stream4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvBlock(256, 64, k=1, s=1, p=0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_133": {
                "variable": {
                    "value": "self.a1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(1, 256, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_134": {
                "variable": {
                    "value": "self.a2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(1, 256, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_135": {
                "variable": {
                    "value": "self.a3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(1, 256, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_136": {
                "variable": {
                    "value": "self.a4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(1, 256, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AvgPool2d_140": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_176": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(256 * 16 * 8, 4096)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_181": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "relu_28": {
                "input": {
                    "value": "self.bn(self.conv(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AvgPool2d_57": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_103": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_133": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_134": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_135": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_136": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_177": {
                "in_features": {
                    "value": "256 * 16 * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_178": {
                "num_features": {
                    "value": "4096",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "torchreid/models/nasnet.py": {
        "torch": {
            "ZeroPad2d_56": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 0, 1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool2d_57": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ZeroPad2d_70": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 0, 1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AvgPool2d_71": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "variable": {
                    "value": "self.depthwise_conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "dw_kernel",
                    "type": "Name",
                    "possible_values": []
                },
                "stride": {
                    "value": "dw_stride",
                    "type": "Name",
                    "possible_values": []
                },
                "padding": {
                    "value": "dw_padding",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_103": {
                "variable": {
                    "value": "self.pointwise_conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_126": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_130": {
                "variable": {
                    "value": "self.bn_sep_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_133": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_137": {
                "variable": {
                    "value": "self.bn_sep_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_169": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_173": {
                "variable": {
                    "value": "self.bn_sep_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_176": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_180": {
                "variable": {
                    "value": "self.bn_sep_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ZeroPad2d_209": {
                "variable": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(z_padding, 0, z_padding, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_229": {
                "variable": {
                    "value": "self.conv_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_251": {
                "variable": {
                    "value": "self.comb_iter_1_left",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_256": {
                "variable": {
                    "value": "self.comb_iter_2_left",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_263": {
                "variable": {
                    "value": "self.comb_iter_3_right",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_270": {
                "variable": {
                    "value": "self.comb_iter_4_right",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_294": {
                "variable": {
                    "value": "x_out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_comb_iter_1, x_comb_iter_2, x_comb_iter_3, x_comb_iter_4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_306": {
                "variable": {
                    "value": "self.conv_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_325": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_326": {
                "variable": {
                    "value": "self.path_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_340": {
                "variable": {
                    "value": "self.path_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_356": {
                "variable": {
                    "value": "self.final_path_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_403": {
                "variable": {
                    "value": "self.comb_iter_3_right",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_452": {
                "variable": {
                    "value": "x_out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_comb_iter_1, x_comb_iter_2, x_comb_iter_3, x_comb_iter_4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_465": {
                "variable": {
                    "value": "self.conv_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_480": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_481": {
                "variable": {
                    "value": "self.path_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_491": {
                "variable": {
                    "value": "self.path_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_503": {
                "variable": {
                    "value": "self.final_path_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels_left * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_521": {
                "variable": {
                    "value": "self.comb_iter_2_left",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_525": {
                "variable": {
                    "value": "self.comb_iter_3_left",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_528": {
                "variable": {
                    "value": "self.comb_iter_3_right",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_568": {
                "variable": {
                    "value": "x_out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_left, x_comb_iter_0, x_comb_iter_1, x_comb_iter_2, x_comb_iter_3, x_comb_iter_4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_584": {
                "variable": {
                    "value": "self.conv_prev_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_599": {
                "variable": {
                    "value": "self.conv_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_628": {
                "variable": {
                    "value": "self.comb_iter_2_left",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_632": {
                "variable": {
                    "value": "self.comb_iter_3_left",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_635": {
                "variable": {
                    "value": "self.comb_iter_3_right",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_665": {
                "variable": {
                    "value": "x_out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_left, x_comb_iter_0, x_comb_iter_1, x_comb_iter_2, x_comb_iter_3, x_comb_iter_4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_681": {
                "variable": {
                    "value": "self.conv_prev_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_696": {
                "variable": {
                    "value": "self.conv_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_728": {
                "variable": {
                    "value": "self.comb_iter_3_right",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_760": {
                "variable": {
                    "value": "x_out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_comb_iter_1, x_comb_iter_2, x_comb_iter_3, x_comb_iter_4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_773": {
                "variable": {
                    "value": "self.conv_prev_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_788": {
                "variable": {
                    "value": "self.conv_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_846": {
                "variable": {
                    "value": "self.comb_iter_3_right",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_885": {
                "variable": {
                    "value": "x_out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_comb_iter_1, x_comb_iter_2, x_comb_iter_3, x_comb_iter_4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_920": {
                "variable": {
                    "value": "self.conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_1035": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_1036": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_1037": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "24 * filters",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "avg_pool2d_1085": {
                "variable": {
                    "value": "x_cell_15",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x_cell_15",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.cell_15(x_cell_14, x_cell_13)",
                            "Call"
                        ],
                        [
                            "self.relu(x_cell_15)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x_cell_15, x_cell_15.size()[2:])",
                            "Call"
                        ],
                        [
                            "x_cell_15.view(x_cell_15.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x_cell_15)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "x_cell_15.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_233": {
                "in_channels": {
                    "value": "self.stem_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_239": {
                "num_features": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_307": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_310": {
                "in_channels": {
                    "value": "2 * self.num_filters",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_320": {
                "num_features": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_328": {
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_332": {
                "in_channels": {
                    "value": "self.stem_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_filters // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ZeroPad2d_341": {
                "padding": {
                    "value": "(0, 1, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AvgPool2d_343": {
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_347": {
                "in_channels": {
                    "value": "self.stem_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_filters // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_431": {
                "tensors": {
                    "value": "[x_path1, x_path2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_466": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_469": {
                "in_channels": {
                    "value": "in_channels_right",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels_right",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_475": {
                "num_features": {
                    "value": "out_channels_right",
                    "type": "Name",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_483": {
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_487": {
                "in_channels": {
                    "value": "in_channels_left",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels_left",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ZeroPad2d_492": {
                "padding": {
                    "value": "(0, 1, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AvgPool2d_494": {
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_498": {
                "in_channels": {
                    "value": "in_channels_left",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels_left",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_546": {
                "tensors": {
                    "value": "[x_path1, x_path2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_585": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_588": {
                "in_channels": {
                    "value": "in_channels_left",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels_left",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_594": {
                "num_features": {
                    "value": "out_channels_left",
                    "type": "Name",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_600": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_603": {
                "in_channels": {
                    "value": "in_channels_right",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels_right",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_609": {
                "num_features": {
                    "value": "out_channels_right",
                    "type": "Name",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_682": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_685": {
                "in_channels": {
                    "value": "in_channels_left",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels_left",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_691": {
                "num_features": {
                    "value": "out_channels_left",
                    "type": "Name",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_697": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_700": {
                "in_channels": {
                    "value": "in_channels_right",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels_right",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_706": {
                "num_features": {
                    "value": "out_channels_right",
                    "type": "Name",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_774": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_777": {
                "in_channels": {
                    "value": "in_channels_left",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels_left",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_783": {
                "num_features": {
                    "value": "out_channels_left",
                    "type": "Name",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_789": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_792": {
                "in_channels": {
                    "value": "in_channels_right",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels_right",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_798": {
                "num_features": {
                    "value": "out_channels_right",
                    "type": "Name",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_923": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.stem_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_934": {
                "num_features": {
                    "value": "self.stem_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ZeroPad2d_145": {
                "padding": {
                    "value": "(1, 0, 1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "torchreid/models/osnet.py": {
        "torch": {
            "load_482": {
                "variable": {
                    "value": "state_dict",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_55": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_78": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_96": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_109": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_118": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_119": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_139": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "BatchNorm2d_148": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_149": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_178": {
                "variable": {
                    "value": "self.global_avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_179": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_189": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_190": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_gates",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_238": {
                "variable": {
                    "value": "self.conv2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "LightConv3x3(mid_channels, mid_channels)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_242": {
                "variable": {
                    "value": "self.conv2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "LightConv3x3(mid_channels, mid_channels)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_247": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "LightConv3x3(mid_channels, mid_channels)",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_311": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_335": {
                "variable": {
                    "value": "self.global_avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_341": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feature_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_52": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "LayerNorm_188": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "(in_channels // reduction, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sigmoid_198": {
                "variable": {
                    "value": "self.gate_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm2d_260": {
                "variable": {
                    "value": "self.IN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_276": {
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x3 + identity",
                            "BinOp"
                        ],
                        [
                            "self.IN(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_368": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_389": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_200": {
                "variable": {
                    "value": "self.gate_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_362": {
                "*args": {
                    "value": "Conv1x1(out_channels, out_channels)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_380": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fc_dims",
                            "Name"
                        ]
                    ]
                }
            },
            "BatchNorm1d_381": {
                "num_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fc_dims",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_382": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_364": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_384": {
                "p": {
                    "value": "dropout_p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "torchreid/models/osnet_ain.py": {
        "torch": {
            "load_484": {
                "variable": {
                    "value": "state_dict",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_45": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_67": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_109": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_110": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_129": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "BatchNorm2d_138": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_139": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_160": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_185": {
                "variable": {
                    "value": "self.global_avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_186": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_196": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_197": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_gates",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_240": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_273": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm2d_281": {
                "variable": {
                    "value": "self.IN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_332": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_336": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv1x1(channels[1], channels[1])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_342": {
                "variable": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv1x1(channels[2], channels[2])",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_349": {
                "variable": {
                    "value": "self.global_avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_355": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feature_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_42": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "BatchNorm2d_86": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "LayerNorm_195": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "(in_channels // reduction, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sigmoid_205": {
                "variable": {
                    "value": "self.gate_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_260": {
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x3 + identity",
                            "BinOp"
                        ],
                        [
                            "x3 + identity",
                            "BinOp"
                        ]
                    ]
                }
            },
            "relu_295": {
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x3 + identity",
                            "BinOp"
                        ],
                        [
                            "x3 + identity",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Sequential_364": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_385": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_207": {
                "variable": {
                    "value": "self.gate_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_337": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_343": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_376": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fc_dims",
                            "Name"
                        ]
                    ]
                }
            },
            "BatchNorm1d_377": {
                "num_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fc_dims",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_378": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_380": {
                "p": {
                    "value": "dropout_p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "torchreid/models/pcb.py": {
        "torch": {
            "Conv2d_19": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_67": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_76": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_80": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_81": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_125": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_161": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_164": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_165": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_166": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_173": {
                "variable": {
                    "value": "self.parts_avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(self.parts, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_174": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_179": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(self.feature_dim, num_classes) for _ in range(self.parts)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_191": {
                "variable": {
                    "value": "downsample",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_208": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_245": {
                "variable": {
                    "value": "v_g",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "v_g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.parts_avgpool(f)",
                            "Call"
                        ],
                        [
                            "F.normalize(v_g, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.dropout(v_g)",
                            "Call"
                        ],
                        [
                            "F.normalize(v_g, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_114": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_118": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "normalize_261": {
                "variable": {
                    "value": "v_g",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "v_g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.parts_avgpool(f)",
                            "Call"
                        ],
                        [
                            "F.normalize(v_g, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.dropout(v_g)",
                            "Call"
                        ],
                        [
                            "F.normalize(v_g, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_121": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_181": {
                "in_features": {
                    "value": "self.feature_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_192": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_199": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_123": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "torchreid/models/resnet.py": {
        "torch": {
            "Conv2d_33": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_130": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_211": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_215": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_216": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_239": {
                "variable": {
                    "value": "self.global_avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_243": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feature_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Sequential_265": {
                "variable": {
                    "value": "downsample",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_290": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_321": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_312": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fc_dims",
                            "Name"
                        ]
                    ]
                }
            },
            "BatchNorm1d_313": {
                "num_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fc_dims",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_314": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_316": {
                "p": {
                    "value": "dropout_p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "torchreid/models/resnet_ibn_a.py": {
        "torch": {
            "Conv2d_21": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_37": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_70": {
                "variable": {
                    "value": "self.IN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "half1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(planes / 2)",
                            "Call"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_71": {
                "variable": {
                    "value": "self.BN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "half2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "planes - half1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "split_74": {
                "variable": {
                    "value": "split",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.half",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out1, out2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_99": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_103": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_156": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_159": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_160": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_161": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_166": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_170": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feature_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_90": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Sequential_186": {
                "variable": {
                    "value": "downsample",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_206": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_237": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_187": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_194": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_228": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fc_dims",
                            "Name"
                        ]
                    ]
                }
            },
            "BatchNorm1d_229": {
                "num_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fc_dims",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_230": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_232": {
                "p": {
                    "value": "dropout_p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "torchreid/models/resnet_ibn_b.py": {
        "torch": {
            "Conv2d_20": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_77": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_81": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_85": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_139": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_142": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_143": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_144": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_153": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_157": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feature_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_84": {
                "variable": {
                    "value": "self.IN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_173": {
                "variable": {
                    "value": "downsample",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_191": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_222": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_174": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_181": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_213": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fc_dims",
                            "Name"
                        ]
                    ]
                }
            },
            "BatchNorm1d_214": {
                "num_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fc_dims",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_215": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_217": {
                "p": {
                    "value": "dropout_p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "torchreid/models/resnetmid.py": {
        "torch": {
            "Conv2d_19": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_67": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_76": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_80": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_81": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_135": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_138": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_139": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_140": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_148": {
                "variable": {
                    "value": "self.global_avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_154": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feature_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cat_249": {
                "variable": {
                    "value": "v4ab",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v4a, v4b]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_253": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v4ab, v4c]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_161": {
                "variable": {
                    "value": "downsample",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_178": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_209": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_162": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_169": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_200": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fc_dims",
                            "Name"
                        ]
                    ]
                }
            },
            "BatchNorm1d_201": {
                "num_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fc_dims",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_202": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_204": {
                "p": {
                    "value": "dropout_p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "torchreid/models/senet.py": {
        "torch": {
            "AdaptiveAvgPool2d_95": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_99": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_103": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_153": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_154": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_155": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_164": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_165": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_168": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_169": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_187": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_190": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_191": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_199": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_200": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_201": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_202": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_224": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(math.floor(planes * (base_width / 64.0)) * groups)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_227": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(math.floor(planes * (base_width / 64.0)) * groups)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_228": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(math.floor(planes * (base_width / 64.0)) * groups)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(math.floor(planes * (base_width / 64.0)) * groups)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_237": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(math.floor(planes * (base_width / 64.0)) * groups)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_238": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(math.floor(planes * (base_width / 64.0)) * groups)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_239": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_240": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_369": {
                "variable": {
                    "value": "self.layer0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict(layer0_modules)",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_410": {
                "variable": {
                    "value": "self.global_avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_414": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feature_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Sequential_429": {
                "variable": {
                    "value": "downsample",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=downsample_kernel_size, stride=stride, padding=downsample_padding, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_451": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_483": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_367": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_430": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "downsample_kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "downsample_padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_438": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_474": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fc_dims",
                            "Name"
                        ]
                    ]
                }
            },
            "BatchNorm1d_475": {
                "num_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fc_dims",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_476": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_329": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_331": {
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_332": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_335": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_337": {
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_338": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_341": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_345": {
                "num_features": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_346": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_352": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_361": {
                "num_features": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_362": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_478": {
                "p": {
                    "value": "dropout_p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "torchreid/models/shufflenet.py": {
        "torch": {
            "Conv2d_52": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels // 4",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "num_groups_conv1x1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_groups if group_conv1x1 else 1",
                            "IfExp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_59": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels // 4",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels // 4",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels // 4",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels // 4",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_70": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels // 4",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels // 4",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels - in_channels",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "num_groups",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_74": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels - in_channels",
                            "BinOp"
                        ]
                    ]
                }
            },
            "relu_79": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 24, 3, stride=2, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_123": {
                "variable": {
                    "value": "self.stage2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Bottleneck(24, cfg[num_groups][0], 2, num_groups, group_conv1x1=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_132": {
                "variable": {
                    "value": "self.stage3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Bottleneck(cfg[num_groups][0], cfg[num_groups][1], 2, num_groups)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_143": {
                "variable": {
                    "value": "self.stage4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Bottleneck(cfg[num_groups][1], cfg[num_groups][2], 2, num_groups)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_150": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg[num_groups][2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "avg_pool2d_158": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(b, self.g, n, h, w)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(b, c, h, w)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "self.stage4(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:]).view(x.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "AvgPool2d_76": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_85": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([res, out], 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_87": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x + out",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_117": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "24",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_118": {
                "num_features": {
                    "value": "24",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_120": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_85": {
                "tensors": {
                    "value": "[res, out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "torchreid/models/shufflenetv2.py": {
        "torch": {
            "transpose_31": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(batchsize, groups, channels_per_group, height, width)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batchsize, -1, height, width)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "self.stage4(x)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self.branch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inp if self.stride > 1 else branch_features, branch_features, kernel_size=1, stride=1, padding=0, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_149": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(input_channels, output_channels, 3, 2, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_156": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_171": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(input_channels, output_channels, 1, 1, 0, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_176": {
                "variable": {
                    "value": "self.global_avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_178": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "output_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._stage_out_channels[0]",
                            "Subscript"
                        ],
                        [
                            "self._stage_out_channels[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.depthwise_conv(inp, inp, kernel_size=3, stride=self.stride, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "in_channels": {
                    "value": "i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "range(repeats - 1)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "o",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "range(repeats - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_109": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, self.branch2(x2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_111": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.branch1(x), self.branch2(x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "in_channels": {
                    "value": "inp if self.stride > 1 else branch_features",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "branch_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "oup // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_78": {
                "num_features": {
                    "value": "branch_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "oup // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_79": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_87": {
                "num_features": {
                    "value": "branch_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "oup // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_88": {
                "in_channels": {
                    "value": "branch_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "oup // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "branch_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "oup // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_96": {
                "num_features": {
                    "value": "branch_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "oup // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_97": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_150": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "output_channels",
                            "Name"
                        ],
                        [
                            "output_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._stage_out_channels[0]",
                            "Subscript"
                        ],
                        [
                            "self._stage_out_channels[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_151": {
                "num_features": {
                    "value": "output_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._stage_out_channels[0]",
                            "Subscript"
                        ],
                        [
                            "self._stage_out_channels[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_152": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_172": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "output_channels",
                            "Name"
                        ],
                        [
                            "output_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._stage_out_channels[0]",
                            "Subscript"
                        ],
                        [
                            "self._stage_out_channels[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_173": {
                "num_features": {
                    "value": "output_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._stage_out_channels[0]",
                            "Subscript"
                        ],
                        [
                            "self._stage_out_channels[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_174": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_56": {
                "num_features": {
                    "value": "inp",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "inp",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "branch_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "oup // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "num_features": {
                    "value": "branch_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "oup // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_66": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_167": {
                "*args": {
                    "value": "*seq",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "torchreid/models/squeezenet.py": {
        "torch": {
            "Conv2d_26": {
                "variable": {
                    "value": "self.squeeze",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "squeeze_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "variable": {
                    "value": "self.squeeze_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.expand1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "squeeze_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "expand1x1_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "variable": {
                    "value": "self.expand1x1_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.expand3x3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "squeeze_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "expand3x3_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "variable": {
                    "value": "self.expand3x3_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_112": {
                "variable": {
                    "value": "self.global_avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_114": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feature_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cat_39": {
                "tensors": {
                    "value": "[self.expand1x1_activation(self.expand1x1(x)), self.expand3x3_activation(self.expand3x3(x))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 96, kernel_size=7, stride=2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_96": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, kernel_size=3, stride=2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_147": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_83": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_87": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_92": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_98": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_99": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_102": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_105": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_138": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fc_dims",
                            "Name"
                        ]
                    ]
                }
            },
            "BatchNorm1d_139": {
                "num_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fc_dims",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_140": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_142": {
                "p": {
                    "value": "dropout_p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "torchreid/models/xception.py": {
        "torch": {
            "Conv2d_40": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.pointwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_81": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_130": {
                "variable": {
                    "value": "self.rep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*rep",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_162": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_163": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_165": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_166": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_209": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1536",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_212": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_214": {
                "variable": {
                    "value": "self.global_avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_217": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feature_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "relu_274": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pointwise(x)",
                            "Call"
                        ],
                        [
                            "self.rep(inp)",
                            "Call"
                        ],
                        [
                            "x + skip",
                            "BinOp"
                        ],
                        [
                            "self.conv1(input)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.block7(x)",
                            "Call"
                        ],
                        [
                            "self.block8(x)",
                            "Call"
                        ],
                        [
                            "self.block9(x)",
                            "Call"
                        ],
                        [
                            "self.block10(x)",
                            "Call"
                        ],
                        [
                            "self.block11(x)",
                            "Call"
                        ],
                        [
                            "self.block12(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "self.bn4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_278": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pointwise(x)",
                            "Call"
                        ],
                        [
                            "self.rep(inp)",
                            "Call"
                        ],
                        [
                            "x + skip",
                            "BinOp"
                        ],
                        [
                            "self.conv1(input)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.block7(x)",
                            "Call"
                        ],
                        [
                            "self.block8(x)",
                            "Call"
                        ],
                        [
                            "self.block9(x)",
                            "Call"
                        ],
                        [
                            "self.block10(x)",
                            "Call"
                        ],
                        [
                            "self.block11(x)",
                            "Call"
                        ],
                        [
                            "self.block12(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "self.bn4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_295": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pointwise(x)",
                            "Call"
                        ],
                        [
                            "self.rep(inp)",
                            "Call"
                        ],
                        [
                            "x + skip",
                            "BinOp"
                        ],
                        [
                            "self.conv1(input)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.block7(x)",
                            "Call"
                        ],
                        [
                            "self.block8(x)",
                            "Call"
                        ],
                        [
                            "self.block9(x)",
                            "Call"
                        ],
                        [
                            "self.block10(x)",
                            "Call"
                        ],
                        [
                            "self.block11(x)",
                            "Call"
                        ],
                        [
                            "self.block12(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "self.bn4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_299": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pointwise(x)",
                            "Call"
                        ],
                        [
                            "self.rep(inp)",
                            "Call"
                        ],
                        [
                            "x + skip",
                            "BinOp"
                        ],
                        [
                            "self.conv1(input)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.block7(x)",
                            "Call"
                        ],
                        [
                            "self.block8(x)",
                            "Call"
                        ],
                        [
                            "self.block9(x)",
                            "Call"
                        ],
                        [
                            "self.block10(x)",
                            "Call"
                        ],
                        [
                            "self.block11(x)",
                            "Call"
                        ],
                        [
                            "self.block12(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "self.bn4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "variable": {
                    "value": "self.skip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_filters",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_filters",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "strides",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_77": {
                "variable": {
                    "value": "self.skipbn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_filters",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_126": {
                "variable": {
                    "value": "rep[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_250": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_97": {
                "num_features": {
                    "value": "out_filters",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "BatchNorm2d_107": {
                "num_features": {
                    "value": "filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_filters",
                            "Name"
                        ],
                        [
                            "out_filters",
                            "Name"
                        ]
                    ]
                }
            },
            "BatchNorm2d_121": {
                "num_features": {
                    "value": "out_filters",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "MaxPool2d_129": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "strides",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_241": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fc_dims",
                            "Name"
                        ]
                    ]
                }
            },
            "BatchNorm1d_242": {
                "num_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fc_dims",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_243": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_245": {
                "p": {
                    "value": "dropout_p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    }
}