{
    "train_scripts/boston/train.py": {
        "sklearn": {
            "load_boston_31": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "train_test_split_32": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "142857",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "set_default_tensor_type_23": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_156": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_train[:, [x_index, y_index]]",
                            "Subscript"
                        ],
                        [
                            "train_data",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_158": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "val_data in enumerate(val_loader, 0)",
                            "Call"
                        ],
                        [
                            "val_data",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1000000",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_99": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Adam_102": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['lr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_172": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data in enumerate(train_loader, 0)",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RMSprop_105": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['lr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_189": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state_dict': net.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'loss': logloss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "'./checkpoints/%s/epoch%s' % (identifier, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_175": {
                "input": {
                    "value": "torch.log(p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_175": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(d, mode='pdf')",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_200": {
                "input": {
                    "value": "torch.log(val_p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_200": {
                "input": {
                    "value": "val_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(val_data, mode='pdf')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train_scripts/gas/train.py": {
        "sklearn": {
            "train_test_split_90": {
                "variable": {
                    "value": "(X_train, X_test, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "142857",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "set_default_tensor_type_69": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_167": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_train",
                            "variable"
                        ],
                        [
                            "add_train_random_noise(train_data, int(X_train.shape[0] * frac_rand))",
                            "Call"
                        ],
                        [
                            "train_data",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_169": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "val_data in enumerate(val_loader, 0)",
                            "Call"
                        ],
                        [
                            "val_data",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1000000",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_113": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_181": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_test_between_features((0, 4, 7), 0, month1)",
                            "Call"
                        ],
                        [
                            "data_test_between_features((0, 4, 7), 2, month1)",
                            "Call"
                        ],
                        [
                            "data in enumerate(train_loader, 0)",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_198": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state_dict': net.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'loss': logloss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "'./checkpoints/%s/epoch%s' % (identifier, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_184": {
                "input": {
                    "value": "torch.log(p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_184": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(d, mode='pdf')",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_221": {
                "input": {
                    "value": "torch.log(val_p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_221": {
                "input": {
                    "value": "val_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(val_data, mode='pdf')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train_scripts/gas/train_with_clayton.py": {
        "sklearn": {
            "train_test_split_92": {
                "variable": {
                    "value": "(X_train, X_test, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "142857",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "set_default_tensor_type_71": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_171": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_train",
                            "variable"
                        ],
                        [
                            "add_train_random_noise(train_data, int(X_train.shape[0] * frac_rand))",
                            "Call"
                        ],
                        [
                            "train_data",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_173": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "val_data in enumerate(val_loader, 0)",
                            "Call"
                        ],
                        [
                            "val_data",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1000000",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_119": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_186": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_test_between_features((0, 4, 7), 0, month1)",
                            "Call"
                        ],
                        [
                            "data_test_between_features((0, 4, 7), 2, month1)",
                            "Call"
                        ],
                        [
                            "data in enumerate(train_loader, 0)",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_231": {
                "data": {
                    "value": "initial_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5.0",
                            "float"
                        ],
                        [
                            "initial_theta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_203": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state_dict': net.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'loss': logloss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "'./checkpoints/%s/epoch%s' % (identifier, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_189": {
                "input": {
                    "value": "torch.log(p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_189": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(d, mode='pdf')",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_214": {
                "input": {
                    "value": "torch.log(val_p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_214": {
                "input": {
                    "value": "val_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(val_data, mode='pdf')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train_scripts/gas/train_with_frank.py": {
        "sklearn": {
            "train_test_split_92": {
                "variable": {
                    "value": "(X_train, X_test, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "142857",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "set_default_tensor_type_71": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_171": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_train",
                            "variable"
                        ],
                        [
                            "add_train_random_noise(train_data, int(X_train.shape[0] * frac_rand))",
                            "Call"
                        ],
                        [
                            "train_data",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_173": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "val_data in enumerate(val_loader, 0)",
                            "Call"
                        ],
                        [
                            "val_data",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1000000",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_119": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_186": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_test_between_features((0, 4, 7), 0, month1)",
                            "Call"
                        ],
                        [
                            "data_test_between_features((0, 4, 7), 2, month1)",
                            "Call"
                        ],
                        [
                            "data in enumerate(train_loader, 0)",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_231": {
                "data": {
                    "value": "initial_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5.0",
                            "float"
                        ],
                        [
                            "initial_theta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_203": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state_dict': net.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'loss': logloss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "'./checkpoints/%s/epoch%s' % (identifier, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_189": {
                "input": {
                    "value": "torch.log(p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_189": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(d, mode='pdf')",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_214": {
                "input": {
                    "value": "torch.log(val_p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_214": {
                "input": {
                    "value": "val_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(val_data, mode='pdf')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train_scripts/gas/train_with_gumbel.py": {
        "sklearn": {
            "train_test_split_92": {
                "variable": {
                    "value": "(X_train, X_test, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "142857",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "set_default_tensor_type_71": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_171": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_train",
                            "variable"
                        ],
                        [
                            "add_train_random_noise(train_data, int(X_train.shape[0] * frac_rand))",
                            "Call"
                        ],
                        [
                            "train_data",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_173": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "val_data in enumerate(val_loader, 0)",
                            "Call"
                        ],
                        [
                            "val_data",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1000000",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_119": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_186": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_test_between_features((0, 4, 7), 0, month1)",
                            "Call"
                        ],
                        [
                            "data_test_between_features((0, 4, 7), 2, month1)",
                            "Call"
                        ],
                        [
                            "data in enumerate(train_loader, 0)",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_231": {
                "data": {
                    "value": "initial_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5.0",
                            "float"
                        ],
                        [
                            "initial_theta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_203": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state_dict': net.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'loss': logloss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "'./checkpoints/%s/epoch%s' % (identifier, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_189": {
                "input": {
                    "value": "torch.log(p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_189": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(d, mode='pdf')",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_214": {
                "input": {
                    "value": "torch.log(val_p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_214": {
                "input": {
                    "value": "val_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(val_data, mode='pdf')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train_scripts/rdj/train.py": {
        "sklearn": {
            "train_test_split_39": {
                "variable": {
                    "value": "(X_train, X_test, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "142857",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "set_default_tensor_type_27": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_117": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_train[:, [x_index, y_index]]",
                            "Subscript"
                        ],
                        [
                            "add_train_random_noise(train_data, int(train_data.shape[0] * frac_rand))",
                            "Call"
                        ],
                        [
                            "train_data",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_119": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "val_data in enumerate(val_loader, 0)",
                            "Call"
                        ],
                        [
                            "val_data",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1000000",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_62": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_131": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data in enumerate(train_loader, 0)",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_148": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state_dict': net.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'loss': logloss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "'./checkpoints/%s/epoch%s' % (identifier, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_134": {
                "input": {
                    "value": "torch.log(p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_134": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(d, mode='pdf')",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_167": {
                "input": {
                    "value": "torch.log(val_p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_167": {
                "input": {
                    "value": "val_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(val_data, mode='pdf')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train_scripts/rdj/train_with_clayton.py": {
        "sklearn": {
            "train_test_split_37": {
                "variable": {
                    "value": "(X_train, X_test, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "142857",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "set_default_tensor_type_25": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_111": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_train[:, [x_index, y_index]]",
                            "Subscript"
                        ],
                        [
                            "add_train_random_noise(train_data, int(train_data.shape[0] * frac_rand))",
                            "Call"
                        ],
                        [
                            "train_data",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_113": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "val_data in enumerate(val_loader, 0)",
                            "Call"
                        ],
                        [
                            "val_data",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1000000",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_59": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_125": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data in enumerate(train_loader, 0)",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_181": {
                "data": {
                    "value": "initial_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.1",
                            "float"
                        ],
                        [
                            "initial_theta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_142": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state_dict': net.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'loss': logloss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "'./checkpoints/%s/epoch%s' % (identifier, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_128": {
                "input": {
                    "value": "torch.log(p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_128": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(d, mode='pdf')",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_153": {
                "input": {
                    "value": "torch.log(val_p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_153": {
                "input": {
                    "value": "val_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(val_data, mode='pdf')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train_scripts/rdj/train_with_frank.py": {
        "sklearn": {
            "train_test_split_37": {
                "variable": {
                    "value": "(X_train, X_test, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "142857",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "set_default_tensor_type_25": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_111": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_train[:, [x_index, y_index]]",
                            "Subscript"
                        ],
                        [
                            "add_train_random_noise(train_data, int(train_data.shape[0] * frac_rand))",
                            "Call"
                        ],
                        [
                            "train_data",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_113": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "val_data in enumerate(val_loader, 0)",
                            "Call"
                        ],
                        [
                            "val_data",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1000000",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_59": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_125": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data in enumerate(train_loader, 0)",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_181": {
                "data": {
                    "value": "initial_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.1",
                            "float"
                        ],
                        [
                            "initial_theta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_142": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state_dict': net.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'loss': logloss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "'./checkpoints/%s/epoch%s' % (identifier, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_128": {
                "input": {
                    "value": "torch.log(p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_128": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(d, mode='pdf')",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_153": {
                "input": {
                    "value": "torch.log(val_p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_153": {
                "input": {
                    "value": "val_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(val_data, mode='pdf')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train_scripts/rdj/train_with_gumbel.py": {
        "sklearn": {
            "train_test_split_37": {
                "variable": {
                    "value": "(X_train, X_test, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "142857",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "set_default_tensor_type_25": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_111": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_train[:, [x_index, y_index]]",
                            "Subscript"
                        ],
                        [
                            "add_train_random_noise(train_data, int(train_data.shape[0] * frac_rand))",
                            "Call"
                        ],
                        [
                            "train_data",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_113": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "val_data in enumerate(val_loader, 0)",
                            "Call"
                        ],
                        [
                            "val_data",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1000000",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_59": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_125": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data in enumerate(train_loader, 0)",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_181": {
                "data": {
                    "value": "initial_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.1",
                            "float"
                        ],
                        [
                            "initial_theta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_142": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state_dict': net.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'loss': logloss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "'./checkpoints/%s/epoch%s' % (identifier, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_128": {
                "input": {
                    "value": "torch.log(p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_128": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(d, mode='pdf')",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_153": {
                "input": {
                    "value": "torch.log(val_p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_153": {
                "input": {
                    "value": "val_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(val_data, mode='pdf')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train_scripts/stocks/train.py": {
        "sklearn": {
            "train_test_split_35": {
                "variable": {
                    "value": "(X_train, X_test, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "142857",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "set_default_tensor_type_24": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_121": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_train[:, [x_index, y_index]]",
                            "Subscript"
                        ],
                        [
                            "add_train_random_noise(train_data, int(train_data.shape[0] * frac_rand))",
                            "Call"
                        ],
                        [
                            "train_data",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_123": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "val_data in enumerate(val_loader, 0)",
                            "Call"
                        ],
                        [
                            "val_data",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1000000",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_66": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_135": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data in enumerate(train_loader, 0)",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_152": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state_dict': net.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'loss': logloss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "'./checkpoints/%s/epoch%s' % (identifier, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_138": {
                "input": {
                    "value": "torch.log(p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_138": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(d, mode='pdf')",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_172": {
                "input": {
                    "value": "torch.log(val_p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_172": {
                "input": {
                    "value": "val_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(val_data, mode='pdf')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train_scripts/stocks/train_with_clayton.py": {
        "sklearn": {
            "train_test_split_33": {
                "variable": {
                    "value": "(X_train, X_test, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "142857",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "set_default_tensor_type_22": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_116": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_train[:, [x_index, y_index]]",
                            "Subscript"
                        ],
                        [
                            "add_train_random_noise(train_data, int(train_data.shape[0] * frac_rand))",
                            "Call"
                        ],
                        [
                            "train_data",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_118": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "val_data in enumerate(val_loader, 0)",
                            "Call"
                        ],
                        [
                            "val_data",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1000000",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_63": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_130": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data in enumerate(train_loader, 0)",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_185": {
                "data": {
                    "value": "initial_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5.0",
                            "float"
                        ],
                        [
                            "initial_theta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_147": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state_dict': net.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'loss': logloss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "'./checkpoints/%s/epoch%s' % (identifier, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_133": {
                "input": {
                    "value": "torch.log(p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_133": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(d, mode='pdf')",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_158": {
                "input": {
                    "value": "torch.log(val_p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_158": {
                "input": {
                    "value": "val_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(val_data, mode='pdf')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train_scripts/stocks/train_with_frank.py": {
        "sklearn": {
            "train_test_split_33": {
                "variable": {
                    "value": "(X_train, X_test, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "142857",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "set_default_tensor_type_22": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_116": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_train[:, [x_index, y_index]]",
                            "Subscript"
                        ],
                        [
                            "add_train_random_noise(train_data, int(train_data.shape[0] * frac_rand))",
                            "Call"
                        ],
                        [
                            "train_data",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_118": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "val_data in enumerate(val_loader, 0)",
                            "Call"
                        ],
                        [
                            "val_data",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1000000",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_63": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_130": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data in enumerate(train_loader, 0)",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_185": {
                "data": {
                    "value": "initial_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5.0",
                            "float"
                        ],
                        [
                            "initial_theta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_147": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state_dict': net.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'loss': logloss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "'./checkpoints/%s/epoch%s' % (identifier, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_133": {
                "input": {
                    "value": "torch.log(p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_133": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(d, mode='pdf')",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_158": {
                "input": {
                    "value": "torch.log(val_p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_158": {
                "input": {
                    "value": "val_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(val_data, mode='pdf')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train_scripts/stocks/train_with_gumbel.py": {
        "sklearn": {
            "train_test_split_33": {
                "variable": {
                    "value": "(X_train, X_test, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "142857",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "set_default_tensor_type_22": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_116": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_train[:, [x_index, y_index]]",
                            "Subscript"
                        ],
                        [
                            "add_train_random_noise(train_data, int(train_data.shape[0] * frac_rand))",
                            "Call"
                        ],
                        [
                            "train_data",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_118": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "val_data in enumerate(val_loader, 0)",
                            "Call"
                        ],
                        [
                            "val_data",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1000000",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_63": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_130": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data in enumerate(train_loader, 0)",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_185": {
                "data": {
                    "value": "initial_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5.0",
                            "float"
                        ],
                        [
                            "initial_theta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_147": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state_dict': net.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'loss': logloss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "'./checkpoints/%s/epoch%s' % (identifier, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_133": {
                "input": {
                    "value": "torch.log(p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_133": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(d, mode='pdf')",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_158": {
                "input": {
                    "value": "torch.log(val_p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_158": {
                "input": {
                    "value": "val_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(val_data, mode='pdf')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dirac_phi.py": {
        "torch": {
            "ParameterList_28": {
                "variable": {
                    "value": "self.shift_raw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(x) for x in self.shift_raw_]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ParameterList_30": {
                "variable": {
                    "value": "self.lc_raw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(x) for x in self.lc_raw_]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ones_79": {
                "variable": {
                    "value": "initial_state",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_queries, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_38": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shift_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shift_sizes",
                            "variable"
                        ]
                    ]
                }
            },
            "zeros_43": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "lc_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lc_sizes",
                            "variable"
                        ]
                    ]
                }
            },
            "exp_83": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_29": {
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_30": {
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_103": {
                "variable": {
                    "value": "lc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lc_raw[ell - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_114": {
                "variable": {
                    "value": "lc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lc_raw[ell - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_97": {
                "input": {
                    "value": "-t_2d * s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_119": {
                "input": {
                    "value": "-t_2d * s",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "gen_data.py": {
        "torch": {
            "set_default_tensor_type_11": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_15": {
                "input": {
                    "value": "net(s, 'pdf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_17": {
                "input": {
                    "value": "log_ll",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-torch.log(net(s, 'pdf'))",
                            "UnaryOp"
                        ]
                    ]
                }
            }
        }
    },
    "gen_scripts/clayton.py": {
        "torch": {
            "set_default_tensor_type_9": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_16": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_33": {
                "variable": {
                    "value": "log_ll",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phi.pdf(s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_34": {
                "input": {
                    "value": "log_ll",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(phi.pdf(s))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "gen_scripts/frank.py": {
        "torch": {
            "set_default_tensor_type_9": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_30": {
                "data": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "15.0",
                            "float"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_33": {
                "input": {
                    "value": "log_ll",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_data(phi, ndims, N, seed)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "gen_scripts/joe.py": {
        "torch": {
            "set_default_tensor_type_9": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_16": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_33": {
                "variable": {
                    "value": "log_ll",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phi.pdf(s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_34": {
                "input": {
                    "value": "log_ll",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(phi.pdf(s))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "get_rng_state_331": {
                "variable": {
                    "value": "old_rng_state",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_334": {
                "variable": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "N",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "ndims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.size()[1]",
                            "Subscript"
                        ],
                        [
                            "ndims",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_365": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.1, 0.2, 0.3], [0.2, 0.3, 0.4], [1.0, 1.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_375": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.1, 0.2], [0.2, 0.3], [0.25, 0.7]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_392": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.1, 0.2, 0.3], [0.2, 0.3, 0.4], [0.99, 0.99, 0.99]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_406": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.1, 0.2, 0.3], [0.2, 0.3, 0.4], [0.99, 0.99, 0.99]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_423": {
                "variable": {
                    "value": "xv1_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "xv1.flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_424": {
                "variable": {
                    "value": "xv2_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "xv2.flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_425": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xv1_tensor, xv2_tensor)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "t_425": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_442": {
                "variable": {
                    "value": "xv2_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "xv2.flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_444": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xv1_tensor, xv2_tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_505": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "train_cop.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_like_101": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U[:, dim].detach().clone()",
                            "Call"
                        ],
                        [
                            "y.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_166": {
                "variable": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U[:, dim].detach().clone()",
                            "Call"
                        ],
                        [
                            "y.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_168": {
                "variable": {
                    "value": "ub",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U[:, dim].detach().clone()",
                            "Call"
                        ],
                        [
                            "y.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "all_172": {
                "input": {
                    "value": "lb < ub",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_201": {
                "input": {
                    "value": "ub - lb <= tol",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "softmax_254": {
                "variable": {
                    "value": "mix_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_255": {
                "variable": {
                    "value": "exps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-t_[:, None].expand(nquery, nmix) * torch.exp(self.slope)[None, :].expand(nquery, nmix)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_258": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mix_ * exps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_266": {
                "variable": {
                    "value": "self.mix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([np.log(0.25)], requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_268": {
                "variable": {
                    "value": "self.slope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[10.0, 1000000.0]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_332": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "142857",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_rng_state_353": {
                "new_state": {
                    "value": "old_rng_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.random.get_rng_state()",
                            "Call"
                        ]
                    ]
                }
            },
            "gradcheck_368": {
                "func": {
                    "value": "phi_net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MixExpPhi()",
                            "Call"
                        ],
                        [
                            "MixExpPhi()",
                            "Call"
                        ],
                        [
                            "MixExpPhi2FixedSlope()",
                            "Call"
                        ],
                        [
                            "MixExpPhi()",
                            "Call"
                        ],
                        [
                            "MixExpPhi()",
                            "Call"
                        ],
                        [
                            "MixExpPhi()",
                            "Call"
                        ],
                        [
                            "MixExpPhi()",
                            "Call"
                        ],
                        [
                            "MixExpPhi2FixedSlope()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0.1, 0.2, 0.3], [0.2, 0.3, 0.4], [1.0, 1.0, 1.0]]).requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.1, 0.2], [0.2, 0.3], [0.25, 0.7]]).requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.1, 0.2, 0.3], [0.2, 0.3, 0.4], [0.99, 0.99, 0.99]]).requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.1, 0.2, 0.3], [0.2, 0.3, 0.4], [0.99, 0.99, 0.99]]).requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "torch.stack((xv1_tensor, xv2_tensor)).double().t().requires_grad_(True)",
                            "Call"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradgradcheck_369": {
                "func": {
                    "value": "phi_net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MixExpPhi()",
                            "Call"
                        ],
                        [
                            "MixExpPhi()",
                            "Call"
                        ],
                        [
                            "MixExpPhi2FixedSlope()",
                            "Call"
                        ],
                        [
                            "MixExpPhi()",
                            "Call"
                        ],
                        [
                            "MixExpPhi()",
                            "Call"
                        ],
                        [
                            "MixExpPhi()",
                            "Call"
                        ],
                        [
                            "MixExpPhi()",
                            "Call"
                        ],
                        [
                            "MixExpPhi2FixedSlope()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(query,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradcheck_378": {
                "func": {
                    "value": "phi_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PhiInv(phi_net)",
                            "Call"
                        ],
                        [
                            "PhiInv(phi_net)",
                            "Call"
                        ],
                        [
                            "PhiInv(phi_net)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(query,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradgradcheck_379": {
                "func": {
                    "value": "phi_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PhiInv(phi_net)",
                            "Call"
                        ],
                        [
                            "PhiInv(phi_net)",
                            "Call"
                        ],
                        [
                            "PhiInv(phi_net)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(query,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradcheck_410": {
                "func": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f",
                            "Call"
                        ],
                        [
                            "phi(z)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(query,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradgradcheck_412": {
                "func": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f",
                            "Call"
                        ],
                        [
                            "phi(z)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(query,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_539": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_125": {
                "variable": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(y)",
                            "Call"
                        ],
                        [
                            "t0.clone().detach()",
                            "Call"
                        ],
                        [
                            "t - g_t / fp_t",
                            "BinOp"
                        ],
                        [
                            "t_candidate",
                            "variable"
                        ],
                        [
                            "(lb + ub) / 2",
                            "BinOp"
                        ],
                        [
                            "newton_root(self.phi, y, max_iter=max_iter, tol=tol)",
                            "Call"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_138": {
                "input": {
                    "value": "g_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f_t - y",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "all_176": {
                "input": {
                    "value": "f_ub >= f_lb",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_178": {
                "input": {
                    "value": "f_lb >= f_ub",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_199": {
                "input": {
                    "value": "ub - lb > 0.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Parameter_239": {
                "variable": {
                    "value": "self.mix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([np.log(0.2), np.log(0.8)], requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_241": {
                "variable": {
                    "value": "self.slope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.log(torch.tensor([10.0, 1000000.0], requires_grad=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_246": {
                "variable": {
                    "value": "self.mix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_w[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_247": {
                "variable": {
                    "value": "self.slope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_w[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_443": {
                "input": {
                    "value": "xv2_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(xv2.flatten())",
                            "Call"
                        ],
                        [
                            "torch.tensor(xv2.flatten())",
                            "Call"
                        ]
                    ]
                }
            },
            "log_499": {
                "input": {
                    "value": "gen_cop(s, mode='pdf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_499": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "all_181": {
                "input": {
                    "value": "f_ub >= y",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_182": {
                "input": {
                    "value": "f_lb <= y",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_183": {
                "input": {
                    "value": "f_ub <= y",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_184": {
                "input": {
                    "value": "f_lb >= y",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "tensor_266": {
                "data": {
                    "value": "[np.log(0.25)]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_481": {
                "input": {
                    "value": "new_cop(s, mode='pdf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_481": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_515": {
                "input": {
                    "value": "new_cop(s, mode='pdf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_515": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_516": {
                "input": {
                    "value": "cop(s, mode='pdf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_516": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_523": {
                "input": {
                    "value": "train_cop(s, mode='pdf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_523": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_110": {
                "outputs": {
                    "value": "f_t.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(y)",
                            "Call"
                        ],
                        [
                            "t0.clone().detach()",
                            "Call"
                        ],
                        [
                            "t - g_t / fp_t",
                            "BinOp"
                        ],
                        [
                            "t_candidate",
                            "variable"
                        ],
                        [
                            "(lb + ub) / 2",
                            "BinOp"
                        ],
                        [
                            "newton_root(self.phi, y, max_iter=max_iter, tol=tol)",
                            "Call"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "any_111": {
                "input": {
                    "value": "torch.isnan(fp_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_239": {
                "data": {
                    "value": "[np.log(0.2), np.log(0.8)]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_242": {
                "input": {
                    "value": "torch.tensor([10.0, 1000000.0], requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_271": {
                "input": {
                    "value": "-self.mix[0]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_272": {
                "input": {
                    "value": "-t * self.slope[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_67": {
                "outputs": {
                    "value": "f.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PhiInv.FastInverse.apply(y, topt, f_topt, phi)",
                            "Call"
                        ],
                        [
                            "1.0 / (1 + torch.exp(-self.mix[0]))",
                            "BinOp"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "isnan_111": {
                "input": {
                    "value": "fp_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.grad(f_t.sum(), t)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "abs_119": {
                "input": {
                    "value": "g_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f_t - y",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_130": {
                "input": {
                    "value": "g_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f_t - y",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_242": {
                "data": {
                    "value": "[10.0, 1000000.0]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_295": {
                "outputs": {
                    "value": "cur.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U[:, dim].detach().clone()",
                            "Call"
                        ],
                        [
                            "y.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_256": {
                "input": {
                    "value": "self.slope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_305": {
                "outputs": {
                    "value": "cur.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U[:, dim].detach().clone()",
                            "Call"
                        ],
                        [
                            "y.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_313": {
                "outputs": {
                    "value": "cur.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U[:, dim].detach().clone()",
                            "Call"
                        ],
                        [
                            "y.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "phi_listing.py": {
        "torch": {
            "Exponential_27": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "torch.ones(shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.theta",
                            "Attribute"
                        ],
                        [
                            "self.theta",
                            "Attribute"
                        ],
                        [
                            "self.theta",
                            "Attribute"
                        ],
                        [
                            "self.theta",
                            "Attribute"
                        ],
                        [
                            "self.theta",
                            "Attribute"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_58": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.theta",
                            "Attribute"
                        ],
                        [
                            "self.theta",
                            "Attribute"
                        ],
                        [
                            "self.theta",
                            "Attribute"
                        ],
                        [
                            "self.theta",
                            "Attribute"
                        ],
                        [
                            "self.theta",
                            "Attribute"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Gamma_74": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration": {
                    "value": "1.0 / self.theta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "rate": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_like_86": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X[:, 0] ** (-self.theta) + X[:, 1] ** (-self.theta) - 1.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_110": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.theta",
                            "Attribute"
                        ],
                        [
                            "self.theta",
                            "Attribute"
                        ],
                        [
                            "self.theta",
                            "Attribute"
                        ],
                        [
                            "self.theta",
                            "Attribute"
                        ],
                        [
                            "self.theta",
                            "Attribute"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rand_134": {
                "variable": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_136": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(n)",
                            "Call"
                        ]
                    ]
                }
            },
            "ceil_145": {
                "variable": {
                    "value": "ret[z]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "ginv_u[z]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "floor_146": {
                "variable": {
                    "value": "ret[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "ginv_u[j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_193": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.theta",
                            "Attribute"
                        ],
                        [
                            "self.theta",
                            "Attribute"
                        ],
                        [
                            "self.theta",
                            "Attribute"
                        ],
                        [
                            "self.theta",
                            "Attribute"
                        ],
                        [
                            "self.theta",
                            "Attribute"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_215": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.theta",
                            "Attribute"
                        ],
                        [
                            "self.theta",
                            "Attribute"
                        ],
                        [
                            "self.theta",
                            "Attribute"
                        ],
                        [
                            "self.theta",
                            "Attribute"
                        ],
                        [
                            "self.theta",
                            "Attribute"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_219": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - torch.sqrt(1 + 2 * theta ** 2 * t)) / theta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "any_114": {
                "input": {
                    "value": "t < eps",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "exp_154": {
                "input": {
                    "value": "-self.theta * (torch.log(1.0 - y) + torch.lgamma(1.0 - alpha))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_157": {
                "input": {
                    "value": "torch.lgamma(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_22": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_27": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(n, ndims)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "log_40": {
                "input": {
                    "value": "torch.exp(-t) * (torch.exp(-theta) - 1) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_48": {
                "input": {
                    "value": "1 + (torch.exp(-self.theta * X[:, 0]) - 1) * (torch.exp(-self.theta * X[:, 1]) - 1) / (torch.exp(-self.theta) - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_66": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_95": {
                "input": {
                    "value": "X[:, 0] ** (-self.theta) + X[:, 1] ** (-self.theta) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_127": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "floor_139": {
                "input": {
                    "value": "ginv_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Ginv(U)",
                            "Call"
                        ]
                    ]
                }
            },
            "lgamma_157": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "lgamma_160": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_199": {
                "input": {
                    "value": "-(t + offsetx) ** (1 / theta)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_208": {
                "input": {
                    "value": "-(u_ + v_)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_67": {
                "input": {
                    "value": "t - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_96": {
                "*size": {
                    "value": "X.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_128": {
                "input": {
                    "value": "t - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_205": {
                "input": {
                    "value": "X[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_206": {
                "input": {
                    "value": "X[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_154": {
                "input": {
                    "value": "1.0 - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "lgamma_154": {
                "input": {
                    "value": "1.0 - alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_164": {
                "input": {
                    "value": "self.lbeta(n, 1.0 - alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_219": {
                "input": {
                    "value": "1 + 2 * theta ** 2 * t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_40": {
                "input": {
                    "value": "-theta",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_123": {
                "input": {
                    "value": "-t_",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_50": {
                "input": {
                    "value": "-self.theta * X[:, 1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_49": {
                "input": {
                    "value": "-self.theta * X[:, 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "DataLoader_76": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_data[:num_train]",
                            "Subscript"
                        ],
                        [
                            "train_data",
                            "Method Argument"
                        ],
                        [
                            "train_data",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_81": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "val_data in enumerate(val_loader, 0)",
                            "Call"
                        ],
                        [
                            "val_data in enumerate(val_loader, 0)",
                            "Call"
                        ],
                        [
                            "val_data",
                            "Method Argument"
                        ],
                        [
                            "val_data",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1000000",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_152": {
                "variable": {
                    "value": "epsilon_lower",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "epsilon_lower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.random_sample(data.shape) * width",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(epsilon_lower)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_153": {
                "variable": {
                    "value": "epsilon_upper",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "epsilon_upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.random_sample(data.shape) * width",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(epsilon_upper)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_155": {
                "variable": {
                    "value": "bounds_lower",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.zeros_like(data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_156": {
                "variable": {
                    "value": "bounds_upper",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones_like(data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "train_bounds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[train_bounds_lower, train_bounds_upper]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_186": {
                "variable": {
                    "value": "val_bounds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[val_bounds_lower, val_bounds_upper]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_189": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_bounds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([train_bounds_lower, train_bounds_upper], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_191": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "val_data in enumerate(val_loader, 0)",
                            "Call"
                        ],
                        [
                            "val_data in enumerate(val_loader, 0)",
                            "Call"
                        ],
                        [
                            "val_data",
                            "Method Argument"
                        ],
                        [
                            "val_data",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1000000",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_52": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Adam_55": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['lr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data in enumerate(train_loader, 0)",
                            "Call"
                        ],
                        [
                            "data in enumerate(train_loader, 0)",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_155": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data in enumerate(train_loader, 0)",
                            "Call"
                        ],
                        [
                            "data in enumerate(train_loader, 0)",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_156": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data in enumerate(train_loader, 0)",
                            "Call"
                        ],
                        [
                            "data in enumerate(train_loader, 0)",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_203": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data in enumerate(train_loader, 0)",
                            "Call"
                        ],
                        [
                            "data in enumerate(train_loader, 0)",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_208": {
                "variable": {
                    "value": "cross1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[data[:, 0:1], data[:, 3:4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_210": {
                "variable": {
                    "value": "cross2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[data[:, 2:3], data[:, 1:2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_213": {
                "variable": {
                    "value": "joint",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[big, small, cross1, cross2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RMSprop_58": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['lr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_110": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state_dict': net.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'loss': logloss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "'./checkpoints/%s/epoch%s' % (identifier, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_235": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state_dict': net.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'loss': logloss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "'./checkpoints/%s/epoch%s' % (identifier, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_96": {
                "input": {
                    "value": "torch.log(p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_214": {
                "data": {
                    "value": "joint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([big, small, cross1, cross2], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_221": {
                "input": {
                    "value": "torch.log(P)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_96": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(d, mode='pdf')",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_133": {
                "input": {
                    "value": "torch.log(val_p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_221": {
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "P_big + P_small - P_cross1 - P_cross2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_258": {
                "input": {
                    "value": "torch.log(val_p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_133": {
                "input": {
                    "value": "val_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(val_data, mode='pdf')",
                            "Call"
                        ],
                        [
                            "net(val_data, mode='pdf')",
                            "Call"
                        ]
                    ]
                }
            },
            "log_258": {
                "input": {
                    "value": "val_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(val_data, mode='pdf')",
                            "Call"
                        ],
                        [
                            "net(val_data, mode='pdf')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train_scripts/clayton.py": {
        "torch": {
            "set_default_tensor_type_12": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "data": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_58": {
                "input": {
                    "value": "cop(train_data, mode='pdf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_59": {
                "input": {
                    "value": "cop(test_data, mode='pdf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_61": {
                "input": {
                    "value": "train_ll",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_log_ll(data_name, num_train, num_test)",
                            "Call"
                        ],
                        [
                            "-torch.log(cop(train_data, mode='pdf'))",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "mean_62": {
                "input": {
                    "value": "test_ll",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_log_ll(data_name, num_train, num_test)",
                            "Call"
                        ],
                        [
                            "-torch.log(cop(test_data, mode='pdf'))",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "mean_64": {
                "input": {
                    "value": "train_ll",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_log_ll(data_name, num_train, num_test)",
                            "Call"
                        ],
                        [
                            "-torch.log(cop(train_data, mode='pdf'))",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "mean_65": {
                "input": {
                    "value": "test_ll",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_log_ll(data_name, num_train, num_test)",
                            "Call"
                        ],
                        [
                            "-torch.log(cop(test_data, mode='pdf'))",
                            "UnaryOp"
                        ]
                    ]
                }
            }
        }
    },
    "train_scripts/clayton_noisy.py": {
        "torch": {
            "set_default_tensor_type_12": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_59": {
                "input": {
                    "value": "train_ll",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_log_ll(data_name, num_train, num_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_60": {
                "input": {
                    "value": "test_ll",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_log_ll(data_name, num_train, num_test)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train_scripts/frank.py": {
        "torch": {
            "set_default_tensor_type_13": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_55": {
                "input": {
                    "value": "train_ll",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_log_ll(data_name, num_train, num_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_56": {
                "input": {
                    "value": "test_ll",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_log_ll(data_name, num_train, num_test)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train_scripts/joe.py": {
        "torch": {
            "set_default_tensor_type_12": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_54": {
                "input": {
                    "value": "train_ll",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_log_ll(data_name, num_train, num_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_55": {
                "input": {
                    "value": "test_ll",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_log_ll(data_name, num_train, num_test)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}