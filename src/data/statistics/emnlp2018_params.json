{
    "acnn.py": {
        "tensorflow": {
            "placeholder_17": {
                "variable": {
                    "value": "self.input_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, max_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_18": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_19": {
                "variable": {
                    "value": "self.input_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_z",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_20": {
                "variable": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_21": {
                "variable": {
                    "value": "self.l2_reg_lambda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "l2_reg_lambda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_22": {
                "variable": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_105": {
                "variable": {
                    "value": "all_acnn_features",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "combine_acnn_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_111": {
                "variable": {
                    "value": "conv2_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "all_acnn_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(combine_acnn_features, 3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, max_length, num_filters_total, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_133": {
                "variable": {
                    "value": "all_conv2_features",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "combine_conv2_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_139": {
                "variable": {
                    "value": "conv3_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "all_conv2_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(combine_conv2_features, 3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, max_length, num_filters_total, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_161": {
                "variable": {
                    "value": "all_conv3_features",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "combine_conv3_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_162": {
                "variable": {
                    "value": "reshaped_conv3_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "all_conv3_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(combine_conv3_features, 3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_filters_total]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_167": {
                "variable": {
                    "value": "l2_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_28": {
                "variable": {
                    "value": "embed_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([vocab_size, embedding_size], -embed_initial, embed_initial)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "embed_weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_33": {
                "variable": {
                    "value": "embedded_words",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embed_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_uniform([vocab_size, embedding_size], -embed_initial, embed_initial), name='embed_weights')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.input_x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_34": {
                "variable": {
                    "value": "embedded_words_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded_words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embed_weights, self.input_x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_40": {
                "variable": {
                    "value": "self.h_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "embedded_words_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(embedded_words, -1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_99": {
                "variable": {
                    "value": "added_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "auto_correlated_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.matmul(reshaped_function_f, flat_kernel_B, name='auto_cor'), (self.batch_size, max_length, 1, -1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "convolved_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(self.h_drop, kernel_A, strides=[1, 1, embedding_size, 1], padding='SAME', name='conv1')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_100": {
                "variable": {
                    "value": "auto_correlation",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(added_outputs, b_conv1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "relu1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_128": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv_2_output, b_conv2)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "relu2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_156": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv3_output, b_conv3)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "relu3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_169": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "ww",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filters_total, 128]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_173": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[128])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_175": {
                "variable": {
                    "value": "local4",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(reshaped_conv3_features, W) + b",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "local4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_179": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[128, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_184": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[num_classes])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "xw_plus_b_186": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "local4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(reshaped_conv3_features, W) + b, name='local4')",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', shape=[128, num_classes], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[128]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_classes]), name='b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_188": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(local4, w, b, name='scores')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "less_189": {
                "variable": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(scores, name='sigmoid')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.fill(tf.shape(probs), 0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_190": {
                "variable": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "condition": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(probs, tf.fill(tf.shape(probs), 0.5))",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.zeros(tf.shape(probs))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.ones(tf.shape(probs))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_196": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(local4, w, b, name='scores')",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_203": {
                "variable": {
                    "value": "fscore_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.input_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int64",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_204": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int64",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_205": {
                "variable": {
                    "value": "input_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int64",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_209": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masked_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fscore_mask * predictions",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_int32_210": {
                "variable": {
                    "value": "self.nprediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(masked_prediction)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "nprediction",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_214": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masked_input_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fscore_mask * input_y",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_int32_215": {
                "variable": {
                    "value": "self.ntarget",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(masked_input_y)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "ntarget",
                    "type": "str",
                    "possible_values": []
                }
            },
            "count_nonzero_218": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_input_y * masked_prediction",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_219": {
                "variable": {
                    "value": "self.ncorrect",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.count_nonzero(masked_input_y * masked_prediction)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "ncorrect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_27": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_27": {
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_39": {
                "name": {
                    "value": "dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_66": {
                "variable": {
                    "value": "kernel_B",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal(kernel_B_shape, stddev=weight_initial)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_67": {
                "variable": {
                    "value": "flat_kernel_B",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "kernel_B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(kernel_B_shape, stddev=weight_initial), name='w')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, num_filters)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "extract_image_patches_68": {
                "variable": {
                    "value": "patches",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "self.h_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ksizes": {
                    "value": "[1, conv1_filter_sizes[i], embedding_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, embedding_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "rates": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "patches",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_75": {
                "variable": {
                    "value": "reshaped_patches",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.extract_image_patches(self.h_drop, ksizes=[1, conv1_filter_sizes[i], embedding_size, 1], strides=[1, 1, embedding_size, 1], rates=[1, 1, 1, 1], padding='SAME', name='patches')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, conv1_filter_sizes[i], embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_79": {
                "variable": {
                    "value": "function_f",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijl,ikl->ijk",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "reshaped_patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(patches, [-1, conv1_filter_sizes[i], embedding_size])",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "reshaped_patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(patches, [-1, conv1_filter_sizes[i], embedding_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_80": {
                "variable": {
                    "value": "reshaped_function_f",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "function_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum('ijl,ikl->ijk', reshaped_patches, reshaped_patches)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size * max_length, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_81": {
                "variable": {
                    "value": "auto_correlated_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.matmul(reshaped_function_f, flat_kernel_B, name='auto_cor')",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, max_length, 1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Variable_88": {
                "variable": {
                    "value": "kernel_A",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal(kernel_A_shape, stddev=weight_initial)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_89": {
                "variable": {
                    "value": "b_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.0, shape=[num_filters])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_90": {
                "variable": {
                    "value": "convolved_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(kernel_A_shape, stddev=weight_initial), name='w')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, embedding_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_115": {
                "variable": {
                    "value": "kernel_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal(kernel_conv2_shape, stddev=weight_initial)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_120": {
                "variable": {
                    "value": "b_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[num_filters])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_121": {
                "variable": {
                    "value": "conv_2_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(all_acnn_features, [-1, max_length, num_filters_total, 1])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(kernel_conv2_shape, stddev=weight_initial), name='w')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, num_filters_total, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_143": {
                "variable": {
                    "value": "kernel_conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal(kernel_conv3_shape, stddev=weight_initial)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_148": {
                "variable": {
                    "value": "b_conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[num_filters])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_149": {
                "variable": {
                    "value": "conv3_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(all_conv2_features, [-1, max_length, num_filters_total, 1])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel_conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(kernel_conv3_shape, stddev=weight_initial), name='w')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, num_filters_total, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_168": {
                "name": {
                    "value": "local4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_174": {
                "t": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('ww', shape=[num_filters_total, 128], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_178": {
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_185": {
                "t": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', shape=[128, num_classes], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_195": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_202": {
                "name": {
                    "value": "fscore",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_61": {
                "device_name": {
                    "value": "device_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_61": {
                "name": {
                    "value": "auto-correlation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_86": {
                "name": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_100": {
                "value": {
                    "value": "added_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(auto_correlated_input, convolved_input)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.0, shape=[num_filters]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_113": {
                "name": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_128": {
                "value": {
                    "value": "conv_2_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(conv2_input, kernel_conv2, strides=[1, 1, num_filters_total, 1], padding='SAME', name='conv2')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_141": {
                "name": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_156": {
                "value": {
                    "value": "conv3_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(conv3_input, kernel_conv3, strides=[1, 1, num_filters_total, 1], padding='SAME', name='conv3')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b_conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_173": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[128]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_184": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fill_189": {
                "dims": {
                    "value": "tf.shape(probs)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_191": {
                "shape": {
                    "value": "tf.shape(probs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_191": {
                "shape": {
                    "value": "tf.shape(probs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_197": {
                "a": {
                    "value": "self.input_z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_66": {
                "shape": {
                    "value": "kernel_B_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[conv1_filter_sizes[i], conv1_filter_sizes[i], num_filters]",
                            "List"
                        ]
                    ]
                },
                "stddev": {
                    "value": "weight_initial",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_81": {
                "a": {
                    "value": "reshaped_function_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(function_f, [self.batch_size * max_length, -1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "flat_kernel_B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(kernel_B, (-1, num_filters))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "auto_cor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "truncated_normal_88": {
                "shape": {
                    "value": "kernel_A_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[conv1_filter_sizes[i], embedding_size, 1, num_filters]",
                            "List"
                        ]
                    ]
                },
                "stddev": {
                    "value": "weight_initial",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_89": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_116": {
                "shape": {
                    "value": "kernel_conv2_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[conv2_filter_sizes[j], num_filters_total, 1, num_filters]",
                            "List"
                        ]
                    ]
                },
                "stddev": {
                    "value": "weight_initial",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_120": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_144": {
                "shape": {
                    "value": "kernel_conv3_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[conv3_filter_sizes[k], num_filters_total, 1, num_filters]",
                            "List"
                        ]
                    ]
                },
                "stddev": {
                    "value": "weight_initial",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_148": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_175": {
                "a": {
                    "value": "reshaped_conv3_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(all_conv3_features, [-1, num_filters_total])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('ww', shape=[num_filters_total, 128], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_189": {
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(scores, name='sigmoid')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_191": {
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(scores, name='sigmoid')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_198": {
                "input_tensor": {
                    "value": "masked_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(self.input_z) * losses",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_198": {
                "x": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "prediction.py": {
        "tensorflow": {
            "latest_checkpoint_35": {
                "variable": {
                    "value": "checkpoint_file",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "os.path.join(FLAGS.checkpoint_dir, 'checkpoints')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Graph_38": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DEFINE_string_9": {
                "name": {
                    "value": "input_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Data source for input file",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_10": {
                "name": {
                    "value": "checkpoint_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Checkpoint dir from training run",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_13": {
                "name": {
                    "value": "output_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory to save results",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_40": {
                "variable": {
                    "value": "session_conf",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "FLAGS.allow_soft_placement",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "FLAGS.log_device_placement",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_43": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "session_conf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=FLAGS.allow_soft_placement, log_device_placement=FLAGS.log_device_placement)",
                            "Call"
                        ]
                    ]
                }
            },
            "import_meta_graph_46": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "'{}.meta'.format(checkpoint_file)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "reader.py": {
        "tensorflow": {}
    },
    "train.py": {
        "tensorflow": {
            "Graph_59": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DEFINE_string_13": {
                "name": {
                    "value": "data_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Data source for the input and output files.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_14": {
                "name": {
                    "value": "checkpoint_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Dir to saving checkpoints and training summaries",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_17": {
                "name": {
                    "value": "embed_dim",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "290",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Dimensionality of word embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_18": {
                "name": {
                    "value": "num_filters",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of filters per filter size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_19": {
                "name": {
                    "value": "conv1_filter_sizes",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "12,7",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Comma-separated conv1 filter sizes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_20": {
                "name": {
                    "value": "conv2_filter_sizes",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10,6",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Comma-separated conv2 filter sizes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_21": {
                "name": {
                    "value": "conv3_filter_sizes",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "8,5",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Comma-separated conv3 filter sizes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_22": {
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.53",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Dropout keep probability",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_23": {
                "name": {
                    "value": "l2_reg_lambda",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.23",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "L2 regularization lambda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_24": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Learning rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_25": {
                "name": {
                    "value": "embed_initial",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.09",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The standard deviation of word embedding initializer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_26": {
                "name": {
                    "value": "weight_initial",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.09",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "The standard deviation of weight initializers",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_27": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Training batch size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_28": {
                "name": {
                    "value": "num_epochs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of training epochs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_29": {
                "name": {
                    "value": "num_checkpoints",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of checkpoints to store",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_30": {
                "name": {
                    "value": "dev_batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "143",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Dev batch size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_33": {
                "name": {
                    "value": "device_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Device name to be used in ACNN layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_63": {
                "variable": {
                    "value": "session_conf",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "FLAGS.allow_soft_placement",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "FLAGS.log_device_placement",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_66": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "session_conf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=FLAGS.allow_soft_placement, log_device_placement=FLAGS.log_device_placement)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_82": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_83": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_95": {
                "variable": {
                    "value": "grad_summaries_merged",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "grad_summaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "scalar_103": {
                "variable": {
                    "value": "loss_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "cnn.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_106": {
                "variable": {
                    "value": "train_summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[loss_summary, grad_summaries_merged]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FileWriter_108": {
                "variable": {
                    "value": "train_summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "train_summary_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, 'summaries', 'train')",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_111": {
                "variable": {
                    "value": "dev_summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[loss_summary]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FileWriter_113": {
                "variable": {
                    "value": "dev_summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "dev_summary_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, 'summaries', 'dev')",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_119": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "FLAGS.num_checkpoints",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_step_227": {
                "variable": {
                    "value": "current_step",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session(config=session_conf)",
                            "Call"
                        ]
                    ]
                },
                "global_step_tensor": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='global_step', trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_91": {
                "variable": {
                    "value": "grad_hist_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}/grad/hist'.format(v.name)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "scalar_92": {
                "variable": {
                    "value": "sparsity_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}/grad/sparsity'.format(v.name)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.nn.zero_fraction(g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zero_fraction_92": {
                "value": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    }
}