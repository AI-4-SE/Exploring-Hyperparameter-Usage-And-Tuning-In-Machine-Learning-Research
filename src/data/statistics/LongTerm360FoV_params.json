{
    "mycode/dataIO2.py": {
        "sklearn": {
            "MinMaxScaler_94": {
                "variable": {
                    "value": "min_max_scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MinMaxScaler_109": {
                "variable": {
                    "value": "min_max_scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mycode/dataIO_gaze_center.py": {
        "sklearn": {
            "MinMaxScaler_102": {
                "variable": {
                    "value": "min_max_scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MinMaxScaler_117": {
                "variable": {
                    "value": "min_max_scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mycode/dataIO_new.py": {
        "sklearn": {
            "MinMaxScaler_154": {
                "variable": {
                    "value": "min_max_scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MinMaxScaler_169": {
                "variable": {
                    "value": "min_max_scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mycode/kenel_dens_esti.py": {
        "sklearn": {
            "KernelDensity_30": {
                "variable": {
                    "value": "kde",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "tophat",
                    "type": "str",
                    "possible_values": []
                },
                "bandwidth": {
                    "value": "0.75",
                    "type": "float",
                    "possible_values": []
                }
            },
            "KernelDensity_36": {
                "variable": {
                    "value": "kde",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "gaussian",
                    "type": "str",
                    "possible_values": []
                },
                "bandwidth": {
                    "value": "0.75",
                    "type": "float",
                    "possible_values": []
                }
            },
            "KernelDensity_74": {
                "variable": {
                    "value": "log_dens",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['gaussian', 'tophat', 'epanechnikov']",
                            "List"
                        ]
                    ]
                }
            },
            "KernelDensity_104": {
                "variable": {
                    "value": "kde",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['gaussian', 'tophat', 'epanechnikov']",
                            "List"
                        ]
                    ]
                },
                "bandwidth": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "mycode/kenel_dens_esti_FoV.py": {
        "sklearn": {}
    },
    "mycode/splitter.py": {
        "sklearn": {
            "KMeans_35": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mycode/splitter2.py": {
        "sklearn": {}
    },
    "mycode/train_test.py": {
        "sklearn": {}
    },
    "mycode/truncated_linear.py": {
        "sklearn": {
            "LinearRegression_79": {
                "variable": {
                    "value": "regr",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mycode/visualise.py": {
        "sklearn": {}
    },
    "mycode/CNN.py": {
        "tensorflow": {
            "conv2d_18": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(x, W, strides=[1, strides, strides, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, strides, strides, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_19": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(x, W, strides=[1, strides, strides, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "div_31": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(tensor, tf.reduce_min(tensor))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.subtract(tf.reduce_max(tensor), tf.reduce_min(tensor))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_41": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(tensor, tf.reduce_min(tensor))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.subtract(tf.reduce_max(tensor), tf.reduce_min(tensor))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_44": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(tensor, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_57": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(conv2, weights['wc3'], biases['bc3'])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "weights['out']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_58": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(conv3, weights['out'], strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(out, biases['out'])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases['out']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "placeholder_112": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, num_user, 2 * cfg.running_length * fps, data_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_113": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, cfg.running_length * fps, data_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_118": {
                "variable": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_squared_error_161": {
                "variable": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "predicted_tail",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out[:, -1, -cfg.running_length * fps:, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, cfg.running_length * fps, data_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_163": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "cfg.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_164": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(cfg.LEARNING_RATE, trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_178": {
                "variable": {
                    "value": "summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "summaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Saver_179": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_187": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_20": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(x, W, strides=[1, strides, strides, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool_25": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(x, W, strides=[1, strides, strides, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, k, k, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, k, k, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "subtract_32": {
                "x": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.div(tf.subtract(tensor, tf.reduce_min(tensor)), tf.subtract(tf.reduce_max(tensor), tf.reduce_min(tensor)))",
                            "Call"
                        ],
                        [
                            "tf.multiply(tensor, tf.constant(2 * np.pi)) - tf.constant(np.pi)",
                            "BinOp"
                        ],
                        [
                            "tf.div(tf.subtract(tensor, tf.reduce_min(tensor)), tf.subtract(tf.reduce_max(tensor), tf.reduce_min(tensor)))",
                            "Call"
                        ],
                        [
                            "tf.subtract(tf.multiply(tensor, 2), 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reduce_min(tensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_33": {
                "x": {
                    "value": "tf.reduce_max(tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_min(tensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_34": {
                "x": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.div(tf.subtract(tensor, tf.reduce_min(tensor)), tf.subtract(tf.reduce_max(tensor), tf.reduce_min(tensor)))",
                            "Call"
                        ],
                        [
                            "tf.multiply(tensor, tf.constant(2 * np.pi)) - tf.constant(np.pi)",
                            "BinOp"
                        ],
                        [
                            "tf.div(tf.subtract(tensor, tf.reduce_min(tensor)), tf.subtract(tf.reduce_max(tensor), tf.reduce_min(tensor)))",
                            "Call"
                        ],
                        [
                            "tf.subtract(tf.multiply(tensor, 2), 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(2 * np.pi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_34": {
                "value": {
                    "value": "2 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "subtract_42": {
                "x": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.div(tf.subtract(tensor, tf.reduce_min(tensor)), tf.subtract(tf.reduce_max(tensor), tf.reduce_min(tensor)))",
                            "Call"
                        ],
                        [
                            "tf.multiply(tensor, tf.constant(2 * np.pi)) - tf.constant(np.pi)",
                            "BinOp"
                        ],
                        [
                            "tf.div(tf.subtract(tensor, tf.reduce_min(tensor)), tf.subtract(tf.reduce_max(tensor), tf.reduce_min(tensor)))",
                            "Call"
                        ],
                        [
                            "tf.subtract(tf.multiply(tensor, 2), 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reduce_min(tensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_43": {
                "x": {
                    "value": "tf.reduce_max(tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_min(tensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_44": {
                "x": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.div(tf.subtract(tensor, tf.reduce_min(tensor)), tf.subtract(tf.reduce_max(tensor), tf.reduce_min(tensor)))",
                            "Call"
                        ],
                        [
                            "tf.multiply(tensor, tf.constant(2 * np.pi)) - tf.constant(np.pi)",
                            "BinOp"
                        ],
                        [
                            "tf.div(tf.subtract(tensor, tf.reduce_min(tensor)), tf.subtract(tf.reduce_max(tensor), tf.reduce_min(tensor)))",
                            "Call"
                        ],
                        [
                            "tf.subtract(tf.multiply(tensor, 2), 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_121": {
                "initial_value": {
                    "value": "tf.random_normal([9, 9, data_dim, 256], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_122": {
                "initial_value": {
                    "value": "tf.random_normal([9, 9, 256, 512], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_123": {
                "initial_value": {
                    "value": "tf.random_normal([9, 9, 512, 512], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_125": {
                "initial_value": {
                    "value": "tf.random_normal([9, 9, 512, data_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_133": {
                "initial_value": {
                    "value": "tf.random_normal([256], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_134": {
                "initial_value": {
                    "value": "tf.random_normal([512], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_135": {
                "initial_value": {
                    "value": "tf.random_normal([512], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_136": {
                "initial_value": {
                    "value": "tf.random_normal([data_dim], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FileWriter_206": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "./tfsummary/",
                    "type": "str",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_min_32": {
                "input_tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.div(tf.subtract(tensor, tf.reduce_min(tensor)), tf.subtract(tf.reduce_max(tensor), tf.reduce_min(tensor)))",
                            "Call"
                        ],
                        [
                            "tf.multiply(tensor, tf.constant(2 * np.pi)) - tf.constant(np.pi)",
                            "BinOp"
                        ],
                        [
                            "tf.div(tf.subtract(tensor, tf.reduce_min(tensor)), tf.subtract(tf.reduce_max(tensor), tf.reduce_min(tensor)))",
                            "Call"
                        ],
                        [
                            "tf.subtract(tf.multiply(tensor, 2), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_33": {
                "input_tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.div(tf.subtract(tensor, tf.reduce_min(tensor)), tf.subtract(tf.reduce_max(tensor), tf.reduce_min(tensor)))",
                            "Call"
                        ],
                        [
                            "tf.multiply(tensor, tf.constant(2 * np.pi)) - tf.constant(np.pi)",
                            "BinOp"
                        ],
                        [
                            "tf.div(tf.subtract(tensor, tf.reduce_min(tensor)), tf.subtract(tf.reduce_max(tensor), tf.reduce_min(tensor)))",
                            "Call"
                        ],
                        [
                            "tf.subtract(tf.multiply(tensor, 2), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_min_33": {
                "input_tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.div(tf.subtract(tensor, tf.reduce_min(tensor)), tf.subtract(tf.reduce_max(tensor), tf.reduce_min(tensor)))",
                            "Call"
                        ],
                        [
                            "tf.multiply(tensor, tf.constant(2 * np.pi)) - tf.constant(np.pi)",
                            "BinOp"
                        ],
                        [
                            "tf.div(tf.subtract(tensor, tf.reduce_min(tensor)), tf.subtract(tf.reduce_max(tensor), tf.reduce_min(tensor)))",
                            "Call"
                        ],
                        [
                            "tf.subtract(tf.multiply(tensor, 2), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_min_42": {
                "input_tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.div(tf.subtract(tensor, tf.reduce_min(tensor)), tf.subtract(tf.reduce_max(tensor), tf.reduce_min(tensor)))",
                            "Call"
                        ],
                        [
                            "tf.multiply(tensor, tf.constant(2 * np.pi)) - tf.constant(np.pi)",
                            "BinOp"
                        ],
                        [
                            "tf.div(tf.subtract(tensor, tf.reduce_min(tensor)), tf.subtract(tf.reduce_max(tensor), tf.reduce_min(tensor)))",
                            "Call"
                        ],
                        [
                            "tf.subtract(tf.multiply(tensor, 2), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_43": {
                "input_tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.div(tf.subtract(tensor, tf.reduce_min(tensor)), tf.subtract(tf.reduce_max(tensor), tf.reduce_min(tensor)))",
                            "Call"
                        ],
                        [
                            "tf.multiply(tensor, tf.constant(2 * np.pi)) - tf.constant(np.pi)",
                            "BinOp"
                        ],
                        [
                            "tf.div(tf.subtract(tensor, tf.reduce_min(tensor)), tf.subtract(tf.reduce_max(tensor), tf.reduce_min(tensor)))",
                            "Call"
                        ],
                        [
                            "tf.subtract(tf.multiply(tensor, 2), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_min_43": {
                "input_tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.div(tf.subtract(tensor, tf.reduce_min(tensor)), tf.subtract(tf.reduce_max(tensor), tf.reduce_min(tensor)))",
                            "Call"
                        ],
                        [
                            "tf.multiply(tensor, tf.constant(2 * np.pi)) - tf.constant(np.pi)",
                            "BinOp"
                        ],
                        [
                            "tf.div(tf.subtract(tensor, tf.reduce_min(tensor)), tf.subtract(tf.reduce_max(tensor), tf.reduce_min(tensor)))",
                            "Call"
                        ],
                        [
                            "tf.subtract(tf.multiply(tensor, 2), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_177": {
                "name": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Session_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_227": {
                "ref": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(cfg.LEARNING_RATE, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "lr_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.LEARNING_RATE * 0.5 ** (epoch / 100)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "mycode/FOV_trj_pred_LSTM_concatState.py": {
        "tensorflow": {
            "placeholder_75": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, truncated_backprop_length, data_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_84": {
                "variable": {
                    "value": "init_state",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_layers, 2, batch_size, n_hidden]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unstack_85": {
                "variable": {
                    "value": "state_per_layer_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "init_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [num_layers, 2, batch_size, n_hidden])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_92": {
                "variable": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_424": {
                "variable": {
                    "value": "summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "summaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Saver_426": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_427": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "cfg.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_428": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(cfg.LEARNING_RATE, trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_451": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_77": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, cfg.running_length, data_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_79": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, cfg.predict_len, data_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MultiRNNCell_132": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "cells",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "dynamic_rnn_135": {
                "variable": {
                    "value": "(states_series, current_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.ConvLSTMCell(conv_ndims=2, input_shape=[num_user - 1, fps, 3], output_channels=32, kernel_shape=[num_user - 1, 3], use_bias=True, skip_connection=False, forget_bias=1.0, initializers=None, name='conv_lstm_cell')",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell, output_keep_prob=1.0 - dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.MultiRNNCell(cells)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.LSTMCell(n_hidden, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell, output_keep_prob=1.0 - dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.MultiRNNCell(cells)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.LSTMCell(n_hidden, state_is_tuple=True, name='decoder_cell')",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell, output_keep_prob=1.0 - dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.MultiRNNCell(cells)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', [None, truncated_backprop_length, data_dim])",
                            "Call"
                        ]
                    ]
                },
                "initial_state": {
                    "value": "initial_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cell.zero_state(batch_size, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "time_major": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MultiRNNCell_149": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "cells",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "dynamic_rnn_152": {
                "variable": {
                    "value": "(states_series, current_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.ConvLSTMCell(conv_ndims=2, input_shape=[num_user - 1, fps, 3], output_channels=32, kernel_shape=[num_user - 1, 3], use_bias=True, skip_connection=False, forget_bias=1.0, initializers=None, name='conv_lstm_cell')",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell, output_keep_prob=1.0 - dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.MultiRNNCell(cells)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.LSTMCell(n_hidden, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell, output_keep_prob=1.0 - dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.MultiRNNCell(cells)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.LSTMCell(n_hidden, state_is_tuple=True, name='decoder_cell')",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell, output_keep_prob=1.0 - dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.MultiRNNCell(cells)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', [None, truncated_backprop_length, data_dim])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_state": {
                    "value": "rnn_tuple_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple([tf.contrib.rnn.LSTMStateTuple(state_per_layer_list[idx][0], state_per_layer_list[idx][1]) for idx in range(num_layers)])",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_170": {
                "variable": {
                    "value": "state_per_layer_list_decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "init_state_decoder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat_current_state_convLSTM(current_state, current_state_others, mode='init_decoder')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MultiRNNCell_182": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "cells",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "dynamic_rnn_185": {
                "variable": {
                    "value": "(states_series, last_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.ConvLSTMCell(conv_ndims=2, input_shape=[num_user - 1, fps, 3], output_channels=32, kernel_shape=[num_user - 1, 3], use_bias=True, skip_connection=False, forget_bias=1.0, initializers=None, name='conv_lstm_cell')",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell, output_keep_prob=1.0 - dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.MultiRNNCell(cells)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.LSTMCell(n_hidden, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell, output_keep_prob=1.0 - dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.MultiRNNCell(cells)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.LSTMCell(n_hidden, state_is_tuple=True, name='decoder_cell')",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell, output_keep_prob=1.0 - dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.MultiRNNCell(cells)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "last_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 1, data_dim])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_state": {
                    "value": "rnn_tuple_state_decoder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple([tf.contrib.rnn.LSTMStateTuple(state_per_layer_list_decoder[idx][0], state_per_layer_list_decoder[idx][1]) for idx in range(num_layers)])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_200": {
                "variable": {
                    "value": "concat_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack((c, h, mlp_state), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_263": {
                "variable": {
                    "value": "concat_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack((states_series, states_series_others), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, cfg.running_length, n_hidden * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_274": {
                "variable": {
                    "value": "ux",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(state, 3 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 2 * 2, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_275": {
                "variable": {
                    "value": "uy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(state, 3 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 2 * 2, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_276": {
                "variable": {
                    "value": "uz",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(state, 3 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 2 * 2, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_278": {
                "variable": {
                    "value": "varx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.slice(pred, [0, 3], [-1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_279": {
                "variable": {
                    "value": "vary",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.slice(pred, [0, 4], [-1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_280": {
                "variable": {
                    "value": "varz",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.slice(pred, [0, 5], [-1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_285": {
                "variable": {
                    "value": "u1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(state, 3 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 2 * 2, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_286": {
                "variable": {
                    "value": "u2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(state, 3 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 2 * 2, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_288": {
                "variable": {
                    "value": "var1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.slice(pred, [0, 2], [-1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_289": {
                "variable": {
                    "value": "var2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.slice(pred, [0, 3], [-1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "moments_301": {
                "variable": {
                    "value": "(gt_mean_x, gt_var_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "target_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[:, 0, 0:data_dim:3]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(y[:, :, :fps * 1, 0])",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_302": {
                "variable": {
                    "value": "(gt_mean_y, gt_var_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "target_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[:, 0, 1:data_dim:3]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(y[:, :, :fps * 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_303": {
                "variable": {
                    "value": "(gt_mean_z, gt_var_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "target_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[:, 0, 2:data_dim:3]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(y[:, :, :fps * 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flatten_319": {
                "variable": {
                    "value": "target_x",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "y[:, :, :fps * 1, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "flatten_320": {
                "variable": {
                    "value": "target_y",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "y[:, :, :fps * 1, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "flatten_321": {
                "variable": {
                    "value": "target_z",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "y[:, :, :fps * 1, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "moments_322": {
                "variable": {
                    "value": "(pop_mean_x, pop_var_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "target_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[:, 0, 0:data_dim:3]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(y[:, :, :fps * 1, 0])",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_323": {
                "variable": {
                    "value": "(pop_mean_y, pop_var_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "target_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[:, 0, 1:data_dim:3]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(y[:, :, :fps * 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_324": {
                "variable": {
                    "value": "(pop_mean_z, pop_var_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "target_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[:, 0, 2:data_dim:3]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(y[:, :, :fps * 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_335": {
                "variable": {
                    "value": "(gt_mean_phi, gt_var_phi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "target_phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[:, 0, 0:data_dim:3]",
                            "Subscript"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_336": {
                "variable": {
                    "value": "(gt_mean_theta, gt_var_theta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "target_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[:, 0, 1:data_dim:3]",
                            "Subscript"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_370": {
                "variable": {
                    "value": "x_others",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, cfg.running_length, num_user - 1, fps, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DropoutWrapper_130": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.ConvLSTMCell(conv_ndims=2, input_shape=[num_user - 1, fps, 3], output_channels=32, kernel_shape=[num_user - 1, 3], use_bias=True, skip_connection=False, forget_bias=1.0, initializers=None, name='conv_lstm_cell')",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell, output_keep_prob=1.0 - dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.MultiRNNCell(cells)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.LSTMCell(n_hidden, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell, output_keep_prob=1.0 - dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.MultiRNNCell(cells)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.LSTMCell(n_hidden, state_is_tuple=True, name='decoder_cell')",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell, output_keep_prob=1.0 - dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.MultiRNNCell(cells)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "1.0 - dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LSTMCell_146": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64 * 2",
                            "BinOp"
                        ]
                    ]
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DropoutWrapper_147": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.ConvLSTMCell(conv_ndims=2, input_shape=[num_user - 1, fps, 3], output_channels=32, kernel_shape=[num_user - 1, 3], use_bias=True, skip_connection=False, forget_bias=1.0, initializers=None, name='conv_lstm_cell')",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell, output_keep_prob=1.0 - dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.MultiRNNCell(cells)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.LSTMCell(n_hidden, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell, output_keep_prob=1.0 - dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.MultiRNNCell(cells)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.LSTMCell(n_hidden, state_is_tuple=True, name='decoder_cell')",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell, output_keep_prob=1.0 - dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.MultiRNNCell(cells)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "1.0 - dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LSTMCell_179": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64 * 2",
                            "BinOp"
                        ]
                    ]
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_cell",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DropoutWrapper_180": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.ConvLSTMCell(conv_ndims=2, input_shape=[num_user - 1, fps, 3], output_channels=32, kernel_shape=[num_user - 1, 3], use_bias=True, skip_connection=False, forget_bias=1.0, initializers=None, name='conv_lstm_cell')",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell, output_keep_prob=1.0 - dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.MultiRNNCell(cells)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.LSTMCell(n_hidden, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell, output_keep_prob=1.0 - dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.MultiRNNCell(cells)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.LSTMCell(n_hidden, state_is_tuple=True, name='decoder_cell')",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell, output_keep_prob=1.0 - dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.MultiRNNCell(cells)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "1.0 - dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_228": {
                "variable": {
                    "value": "concat_state0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack((h0, h_others0), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_229": {
                "variable": {
                    "value": "concat_state1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack((h1, h_others1), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_230": {
                "variable": {
                    "value": "concat_memo0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack((c0, c_others0), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_231": {
                "variable": {
                    "value": "concat_memo1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack((c1, c_others1), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_254": {
                "variable": {
                    "value": "concat_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack((h, h_others), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_255": {
                "variable": {
                    "value": "concat_memo",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack((c, c_others), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_293": {
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_376": {
                "variable": {
                    "value": "last_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1, data_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_434": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-10",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "FileWriter_465": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "'./tfsummary/' + tag",
                    "type": "BinOp",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_583": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTMStateTuple_86": {
                "c": {
                    "value": "state_per_layer_list[idx][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "h": {
                    "value": "state_per_layer_list[idx][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_200": {
                "values": {
                    "value": "(c, h, mlp_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_263": {
                "values": {
                    "value": "(states_series, states_series_others)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "slice_278": {
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(state, 3 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 2 * 2, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_279": {
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(state, 3 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 2 * 2, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_280": {
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(state, 3 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 2 * 2, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_288": {
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(state, 3 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 2 * 2, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_289": {
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(state, 3 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 2 * 2, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_423": {
                "name": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Session_462": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTMStateTuple_171": {
                "c": {
                    "value": "state_per_layer_list_decoder[idx][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "h": {
                    "value": "state_per_layer_list_decoder[idx][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "flatten_220": {
                "structure": {
                    "value": "c_others0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(tf.contrib.layers.flatten(c_others0, 0), 64, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "expand_composites": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_222": {
                "structure": {
                    "value": "h_others0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(tf.contrib.layers.flatten(h_others0, 0), 64, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "expand_composites": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_224": {
                "structure": {
                    "value": "c_others1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(tf.contrib.layers.flatten(c_others1, 0), 64, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "expand_composites": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_226": {
                "structure": {
                    "value": "h_others1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(tf.contrib.layers.flatten(h_others1, 0), 64, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "expand_composites": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_228": {
                "values": {
                    "value": "(h0, h_others0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_229": {
                "values": {
                    "value": "(h1, h_others1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_230": {
                "values": {
                    "value": "(c0, c_others0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_231": {
                "values": {
                    "value": "(c1, c_others1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_250": {
                "structure": {
                    "value": "c_others",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(tf.contrib.layers.flatten(c_others, 0), 64, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "expand_composites": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_252": {
                "structure": {
                    "value": "h_others",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(tf.contrib.layers.flatten(h_others, 0), 64, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "expand_composites": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_254": {
                "values": {
                    "value": "(h, h_others)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_255": {
                "values": {
                    "value": "(c, c_others)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "assign_485": {
                "ref": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(cfg.LEARNING_RATE, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "lr_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.LEARNING_RATE * 0.5 ** (epoch / 100)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "mycode/MLP.py": {
        "tensorflow": {
            "placeholder_32": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_input]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, cfg.predict_len, data_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_129": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "cfg.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_130": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(cfg.LEARNING_RATE, trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_143": {
                "variable": {
                    "value": "summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "summaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Saver_144": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_initializer_147": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_61": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, weights['h1'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['b1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_62": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(x, weights['h1']), biases['b1'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_64": {
                "variable": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(layer_1, weights['h2'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['b2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_65": {
                "variable": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(layer_1, weights['h2']), biases['b2'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer_2)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_79": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_43": {
                "initial_value": {
                    "value": "tf.random_normal([n_input, n_hidden_1], stddev=0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_44": {
                "initial_value": {
                    "value": "tf.random_normal([n_hidden_1, n_hidden_2], stddev=0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_47": {
                "initial_value": {
                    "value": "tf.random_normal([n_hidden_2, n_output], stddev=0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_50": {
                "initial_value": {
                    "value": "tf.random_normal([n_hidden_1], stddev=0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_51": {
                "initial_value": {
                    "value": "tf.random_normal([n_hidden_2], stddev=0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_54": {
                "initial_value": {
                    "value": "tf.random_normal([n_output], stddev=0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_80": {
                "input_tensor": {
                    "value": "tf.where(tf.greater(diff, tf.constant(np.pi)), tf.square(tf.constant(2 * np.pi) - diff), tf.square(diff))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FileWriter_151": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "'./tfsummary/' + tag",
                    "type": "BinOp",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_61": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "weights['h1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_64": {
                "a": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(x, weights['h1']), biases['b1'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer_1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['h2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_71": {
                "a": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(layer_1, weights['h2']), biases['b2'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer_2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['out']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_80": {
                "condition": {
                    "value": "tf.greater(diff, tf.constant(np.pi))",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.square(tf.constant(2 * np.pi) - diff)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.square(diff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_140": {
                "name": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Session_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "greater_80": {
                "x": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(out - y)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(np.pi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_81": {
                "x": {
                    "value": "tf.constant(2 * np.pi) - diff",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_82": {
                "x": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(out - y)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_80": {
                "value": {
                    "value": "np.pi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_81": {
                "value": {
                    "value": "2 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_174": {
                "ref": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(cfg.LEARNING_RATE, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "lr_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.LEARNING_RATE * 0.5 ** (epoch / 100)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "mycode/attention_decoder.py": {
        "tensorflow": {
            "Print_10": {
                "input_": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[T, tf.shape(T)]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_10": {
                "input": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "mycode/baseline_knn_mean.py": {
        "tensorflow": {}
    },
    "mycode/cost.py": {
        "tensorflow": {
            "abs_14": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_64": {
                "variable": {
                    "value": "inside_log",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "inside_log",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / 4 * (var1 / (var2 + 1e-10) + var2 / (var1 + 1e-10) + 2)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(inside_log, 1e-10, 100.0)",
                            "Call"
                        ],
                        [
                            "tf.div(tf.sqrt(var2), tf.sqrt(var1) + 1e-10)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inside_log, 1e-10, 100)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "100.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "div_76": {
                "variable": {
                    "value": "inside_log",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.sqrt(var2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.sqrt(var1) + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_77": {
                "variable": {
                    "value": "inside_log",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "inside_log",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / 4 * (var1 / (var2 + 1e-10) + var2 / (var1 + 1e-10) + 2)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(inside_log, 1e-10, 100.0)",
                            "Call"
                        ],
                        [
                            "tf.div(tf.sqrt(var2), tf.sqrt(var1) + 1e-10)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inside_log, 1e-10, 100)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_78": {
                "variable": {
                    "value": "KLd",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.div((u1 - u2) ** 2 + var1 - var2, 2.0 * var2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.log(inside_log)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_217": {
                "variable": {
                    "value": "lossx",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "lossx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.log(varx + K.epsilon()) + (x - ux) ** 2 / (varx + K.epsilon())",
                            "BinOp"
                        ],
                        [
                            "cliplayer2(lossx)",
                            "Call"
                        ],
                        [
                            "tf.log(varx + eps) + (x - ux) ** 2 / (varx + eps)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(lossx, -10, 10)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-10",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_218": {
                "variable": {
                    "value": "lossy",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "lossy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.log(vary + K.epsilon()) + (y - uy) ** 2 / (vary + K.epsilon())",
                            "BinOp"
                        ],
                        [
                            "cliplayer2(lossy)",
                            "Call"
                        ],
                        [
                            "tf.log(vary + eps) + (y - uy) ** 2 / (vary + eps)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(lossy, -10, 10)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-10",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_219": {
                "variable": {
                    "value": "lossz",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "lossz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.log(varz + K.epsilon()) + (z - uz) ** 2 / (varz + K.epsilon())",
                            "BinOp"
                        ],
                        [
                            "cliplayer2(lossz)",
                            "Call"
                        ],
                        [
                            "tf.log(varz + eps) + (z - uz) ** 2 / (varz + eps)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(lossz, -10, 10)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-10",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_225": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.reduce_sum(lossx + lossy + lossz + lossxyz, axis=2), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_262": {
                "variable": {
                    "value": "loss_gaussian",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.reduce_sum(-tf.log(gaussianx + gaussiany + gaussianz + 1e-20), axis=2), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_279": {
                "variable": {
                    "value": "sigma_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sigma_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred[2]",
                            "Subscript"
                        ],
                        [
                            "tf.abs(sigma_theta)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(sigmas[:, 2 * ii], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_280": {
                "variable": {
                    "value": "sigma_phi",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sigma_phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred[3]",
                            "Subscript"
                        ],
                        [
                            "tf.abs(sigma_phi)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(sigmas[:, 2 * ii + 1], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_281": {
                "variable": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred[4]",
                            "Subscript"
                        ],
                        [
                            "tf.clip_by_value(rho, -1, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(rhos[:, ii], 1)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_347": {
                "variable": {
                    "value": "convariance_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.less(min_eig, tf.constant(0.0))",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "f2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_401": {
                "variable": {
                    "value": "elems_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[flatten_me(x1), flatten_me(x2), flatten_me(x3), flatten_me(mu1), flatten_me(mu2), flatten_me(mu3), flatten_me(sigma1), flatten_me(sigma2), flatten_me(sigma3), flatten_me(rho12), flatten_me(rho13), flatten_me(rho23)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_404": {
                "variable": {
                    "value": "elems_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(elems_flat, [12, -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "map_fn_405": {
                "variable": {
                    "value": "likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda x: likelihood_mvn(x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "elems_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([flatten_me(x1), flatten_me(x2), flatten_me(x3), flatten_me(mu1), flatten_me(mu2), flatten_me(mu3), flatten_me(sigma1), flatten_me(sigma2), flatten_me(sigma3), flatten_me(rho12), flatten_me(rho13), flatten_me(rho23)])",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(elems_flat, [12, -1]), (1, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_421": {
                "variable": {
                    "value": "loss_bernoulli",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-tf.log((end_of_stroke + eps) * y_end_of_stroke + (1 - end_of_stroke + eps) * (1 - y_end_of_stroke))",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_469": {
                "input_tensor": {
                    "value": "gaussian",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-tf.square((x - mu) / sigma) / 2) / tf.sqrt(2 * np.pi * tf.square(sigma))",
                            "BinOp"
                        ],
                        [
                            "mixture_pi * temp",
                            "BinOp"
                        ],
                        [
                            "multivariate_gaussian(expand(y1, 1, n_mixture), expand(y2, 1, n_mixture), expand(y3, 1, n_mixture), mu1, mu2, mu3, sigma1, sigma2, sigma3, rho12, rho13, rho23)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_539": {
                "input_tensor": {
                    "value": "gaussian",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-tf.square((x - mu) / sigma) / 2) / tf.sqrt(2 * np.pi * tf.square(sigma))",
                            "BinOp"
                        ],
                        [
                            "mixture_pi * temp",
                            "BinOp"
                        ],
                        [
                            "multivariate_gaussian(expand(y1, 1, n_mixture), expand(y2, 1, n_mixture), expand(y3, 1, n_mixture), mu1, mu2, mu3, sigma1, sigma2, sigma3, rho12, rho13, rho23)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_610": {
                "variable": {
                    "value": "deltax",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x[:, :-1] - x[:, 1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_611": {
                "variable": {
                    "value": "deltay",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y[:, :-1] - y[:, 1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_612": {
                "variable": {
                    "value": "deltaz",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z[:, :-1] - z[:, 1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_629": {
                "variable": {
                    "value": "reg",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(x ** 2 + y ** 2 + z ** 2 - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_15": {
                "input_tensor": {
                    "value": "tf.where(tf.greater(diff, tf.constant(np.pi)), tf.square(tf.constant(2 * np.pi) - diff), tf.square(diff))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_50": {
                "input_tensor": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "losses.mean_squared_error(y_true, y_pred)",
                            "Call"
                        ],
                        [
                            "cost + 0.5 * reg",
                            "BinOp"
                        ],
                        [
                            "cost_x + cost_y + cost_z",
                            "BinOp"
                        ],
                        [
                            "cost + alpha * (cost_x_pop + cost_y_pop + cost_z_pop)",
                            "BinOp"
                        ],
                        [
                            "cost_phi + cost_theta",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(cost_x) + tf.reduce_mean(cost_y) + tf.reduce_mean(cost_z)",
                            "BinOp"
                        ],
                        [
                            "tf.losses.mean_squared_error(x, duplicate(gt_mean_x)) / tf.clip_by_value(2 * gt_var_x, 1e-10, 5) + tf.losses.mean_squared_error(y, duplicate(gt_mean_y)) / tf.clip_by_value(2 * gt_var_y, 1e-10, 5) + tf.losses.mean_squared_error(z, duplicate(gt_mean_z)) / tf.clip_by_value(2 * gt_var_z, 1e-10, 5) + tf.losses.mean_squared_error(x, duplicate(pop_mean_x)) / tf.clip_by_value(2 * pop_var_x, 1e-10, 5) + tf.losses.mean_squared_error(y, duplicate(pop_mean_y)) / tf.clip_by_value(2 * pop_var_y, 1e-10, 5) + tf.losses.mean_squared_error(z, duplicate(pop_mean_z)) / tf.clip_by_value(2 * pop_var_z, 1e-10, 5) + tf.log(tf.clip_by_value(tf.sqrt(gt_var_x) * tf.sqrt(pop_var_x), 1e-10, 5))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_58": {
                "input_tensor": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "losses.mean_squared_error(y_true, y_pred)",
                            "Call"
                        ],
                        [
                            "cost + 0.5 * reg",
                            "BinOp"
                        ],
                        [
                            "cost_x + cost_y + cost_z",
                            "BinOp"
                        ],
                        [
                            "cost + alpha * (cost_x_pop + cost_y_pop + cost_z_pop)",
                            "BinOp"
                        ],
                        [
                            "cost_phi + cost_theta",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(cost_x) + tf.reduce_mean(cost_y) + tf.reduce_mean(cost_z)",
                            "BinOp"
                        ],
                        [
                            "tf.losses.mean_squared_error(x, duplicate(gt_mean_x)) / tf.clip_by_value(2 * gt_var_x, 1e-10, 5) + tf.losses.mean_squared_error(y, duplicate(gt_mean_y)) / tf.clip_by_value(2 * gt_var_y, 1e-10, 5) + tf.losses.mean_squared_error(z, duplicate(gt_mean_z)) / tf.clip_by_value(2 * gt_var_z, 1e-10, 5) + tf.losses.mean_squared_error(x, duplicate(pop_mean_x)) / tf.clip_by_value(2 * pop_var_x, 1e-10, 5) + tf.losses.mean_squared_error(y, duplicate(pop_mean_y)) / tf.clip_by_value(2 * pop_var_y, 1e-10, 5) + tf.losses.mean_squared_error(z, duplicate(pop_mean_z)) / tf.clip_by_value(2 * pop_var_z, 1e-10, 5) + tf.log(tf.clip_by_value(tf.sqrt(gt_var_x) * tf.sqrt(pop_var_x), 1e-10, 5))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_311": {
                "variable": {
                    "value": "utheta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "us[:, 2 * ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_312": {
                "variable": {
                    "value": "uphi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "us[:, 2 * ii + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_313": {
                "variable": {
                    "value": "sigma_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigmas[:, 2 * ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_314": {
                "variable": {
                    "value": "sigma_phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigmas[:, 2 * ii + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_315": {
                "variable": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rhos[:, ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_316": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mixture_pi[:, ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_383": {
                "tensor": {
                    "value": "tf.stack(likelihood)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, x1.shape[1].value, x1.shape[2].value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_406": {
                "tensor": {
                    "value": "tf.stack(likelihood)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cfg.batch_size, x1.shape[1].value, x1.shape[2].value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_428": {
                "values": {
                    "value": "[tf.expand_dims(x, dim) for _ in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_613": {
                "input_tensor": {
                    "value": "tf.pow(deltax + deltay + deltaz, 1.25)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_15": {
                "condition": {
                    "value": "tf.greater(diff, tf.constant(np.pi))",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.square(tf.constant(2 * np.pi) - diff)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.square(diff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_squared_error_35": {
                "y_true": {
                    "value": "gt_var_x",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "varx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.slice_layer(2, 3, 4)(y_pred)",
                            "Call"
                        ],
                        [
                            "cliplayer(varx)",
                            "Call"
                        ],
                        [
                            "K.repeat_elements(varx, 30, axis=-1)",
                            "Call"
                        ],
                        [
                            "y_pred[3]",
                            "Subscript"
                        ],
                        [
                            "expand(varx, -1, cfg.fps)",
                            "Call"
                        ],
                        [
                            "y_pred[3]",
                            "Subscript"
                        ],
                        [
                            "expand(varx, -1, cfg.fps)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_squared_error_36": {
                "y_true": {
                    "value": "gt_var_y",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "vary",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.slice_layer(2, 4, 5)(y_pred)",
                            "Call"
                        ],
                        [
                            "cliplayer(vary)",
                            "Call"
                        ],
                        [
                            "K.repeat_elements(vary, 30, axis=-1)",
                            "Call"
                        ],
                        [
                            "y_pred[4]",
                            "Subscript"
                        ],
                        [
                            "expand(vary, -1, cfg.fps)",
                            "Call"
                        ],
                        [
                            "y_pred[4]",
                            "Subscript"
                        ],
                        [
                            "expand(vary, -1, cfg.fps)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_squared_error_37": {
                "y_true": {
                    "value": "gt_var_z",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "varz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.slice_layer(2, 5, 6)(y_pred)",
                            "Call"
                        ],
                        [
                            "cliplayer(varz)",
                            "Call"
                        ],
                        [
                            "K.repeat_elements(varz, 30, axis=-1)",
                            "Call"
                        ],
                        [
                            "y_pred[5]",
                            "Subscript"
                        ],
                        [
                            "expand(varz, -1, cfg.fps)",
                            "Call"
                        ],
                        [
                            "y_pred[5]",
                            "Subscript"
                        ],
                        [
                            "expand(varz, -1, cfg.fps)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_squared_error_55": {
                "y_true": {
                    "value": "gt_var_phi",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "var1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_squared_error_56": {
                "y_true": {
                    "value": "gt_var_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "var2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_76": {
                "x": {
                    "value": "var1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "div_78": {
                "x": {
                    "value": "(u1 - u2) ** 2 + var1 - var2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2.0 * var2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_78": {
                "x": {
                    "value": "inside_log",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / 4 * (var1 / (var2 + 1e-10) + var2 / (var1 + 1e-10) + 2)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(inside_log, 1e-10, 100.0)",
                            "Call"
                        ],
                        [
                            "tf.div(tf.sqrt(var2), tf.sqrt(var1) + 1e-10)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inside_log, 1e-10, 100)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_99": {
                "input_tensor": {
                    "value": "cost_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.mean_squared_error(gt_mean_y, uy) + tf.losses.mean_squared_error(gt_var_y, vary)",
                            "BinOp"
                        ],
                        [
                            "metric_func(uy, gt_mean_y, vary, gt_var_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_104": {
                "shape": {
                    "value": "[32, 30]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_119": {
                "input_": {
                    "value": "predict_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_120": {
                "input_": {
                    "value": "predict_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_121": {
                "input_": {
                    "value": "predict_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_129": {
                "x": {
                    "value": "tf.clip_by_value(tf.sqrt(gt_var_x) * tf.sqrt(pop_var_x), 1e-10, 5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_131": {
                "input_tensor": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "losses.mean_squared_error(y_true, y_pred)",
                            "Call"
                        ],
                        [
                            "cost + 0.5 * reg",
                            "BinOp"
                        ],
                        [
                            "cost_x + cost_y + cost_z",
                            "BinOp"
                        ],
                        [
                            "cost + alpha * (cost_x_pop + cost_y_pop + cost_z_pop)",
                            "BinOp"
                        ],
                        [
                            "cost_phi + cost_theta",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(cost_x) + tf.reduce_mean(cost_y) + tf.reduce_mean(cost_z)",
                            "BinOp"
                        ],
                        [
                            "tf.losses.mean_squared_error(x, duplicate(gt_mean_x)) / tf.clip_by_value(2 * gt_var_x, 1e-10, 5) + tf.losses.mean_squared_error(y, duplicate(gt_mean_y)) / tf.clip_by_value(2 * gt_var_y, 1e-10, 5) + tf.losses.mean_squared_error(z, duplicate(gt_mean_z)) / tf.clip_by_value(2 * gt_var_z, 1e-10, 5) + tf.losses.mean_squared_error(x, duplicate(pop_mean_x)) / tf.clip_by_value(2 * pop_var_x, 1e-10, 5) + tf.losses.mean_squared_error(y, duplicate(pop_mean_y)) / tf.clip_by_value(2 * pop_var_y, 1e-10, 5) + tf.losses.mean_squared_error(z, duplicate(pop_mean_z)) / tf.clip_by_value(2 * pop_var_z, 1e-10, 5) + tf.log(tf.clip_by_value(tf.sqrt(gt_var_x) * tf.sqrt(pop_var_x), 1e-10, 5))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_213": {
                "x": {
                    "value": "varx + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_214": {
                "x": {
                    "value": "vary + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_215": {
                "x": {
                    "value": "varz + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_223": {
                "x": {
                    "value": "uy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred[:, :, :, 1][:, :, :, np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "util.slice_layer(2, 1, 2)(y_pred)",
                            "Call"
                        ],
                        [
                            "K.repeat_elements(uy, 30, axis=-1)",
                            "Call"
                        ],
                        [
                            "y_pred[1]",
                            "Subscript"
                        ],
                        [
                            "expand(uy, -1, cfg.fps)",
                            "Call"
                        ],
                        [
                            "y_pred[1]",
                            "Subscript"
                        ],
                        [
                            "expand(uy, -1, cfg.fps)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_225": {
                "input_tensor": {
                    "value": "lossx + lossy + lossz + lossxyz",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_235": {
                "x": {
                    "value": "-tf.square((x - mu) / sigma) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_235": {
                "x": {
                    "value": "2 * np.pi * tf.square(sigma)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_258": {
                "x": {
                    "value": "varx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.slice_layer(2, 3, 4)(y_pred)",
                            "Call"
                        ],
                        [
                            "cliplayer(varx)",
                            "Call"
                        ],
                        [
                            "K.repeat_elements(varx, 30, axis=-1)",
                            "Call"
                        ],
                        [
                            "y_pred[3]",
                            "Subscript"
                        ],
                        [
                            "expand(varx, -1, cfg.fps)",
                            "Call"
                        ],
                        [
                            "y_pred[3]",
                            "Subscript"
                        ],
                        [
                            "expand(varx, -1, cfg.fps)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_259": {
                "x": {
                    "value": "vary",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.slice_layer(2, 4, 5)(y_pred)",
                            "Call"
                        ],
                        [
                            "cliplayer(vary)",
                            "Call"
                        ],
                        [
                            "K.repeat_elements(vary, 30, axis=-1)",
                            "Call"
                        ],
                        [
                            "y_pred[4]",
                            "Subscript"
                        ],
                        [
                            "expand(vary, -1, cfg.fps)",
                            "Call"
                        ],
                        [
                            "y_pred[4]",
                            "Subscript"
                        ],
                        [
                            "expand(vary, -1, cfg.fps)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_260": {
                "x": {
                    "value": "varz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.slice_layer(2, 5, 6)(y_pred)",
                            "Call"
                        ],
                        [
                            "cliplayer(varz)",
                            "Call"
                        ],
                        [
                            "K.repeat_elements(varz, 30, axis=-1)",
                            "Call"
                        ],
                        [
                            "y_pred[5]",
                            "Subscript"
                        ],
                        [
                            "expand(varz, -1, cfg.fps)",
                            "Call"
                        ],
                        [
                            "y_pred[5]",
                            "Subscript"
                        ],
                        [
                            "expand(varz, -1, cfg.fps)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_262": {
                "input_tensor": {
                    "value": "-tf.log(gaussianx + gaussiany + gaussianz + 1e-20)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_291": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.mean(K.sum(K.sum(lossx + lossy + lossz + lossxyz, axis=2), axis=1))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.reduce_sum(tf.reduce_sum(lossx + lossy + lossz + lossxyz, axis=2), axis=1))",
                            "Call"
                        ],
                        [
                            "tf.log(sigma_theta) + tf.log(sigma_phi) + 0.5 * tf.log(1 - rho ** 2) + 0.5 / (1 - rho ** 2) * temp",
                            "BinOp"
                        ],
                        [
                            "loss_gaussian + cfg.berrnoulli_loss_weight * berrnoulli_loss(end_of_stroke, y_true)",
                            "BinOp"
                        ],
                        [
                            "loss_gaussian",
                            "Name"
                        ],
                        [
                            "loss_gaussian",
                            "Name"
                        ],
                        [
                            "weights * (y_true * K.log(y_pred))",
                            "BinOp"
                        ],
                        [
                            "-K.sum(loss, -1)",
                            "UnaryOp"
                        ],
                        [
                            "tf.losses.mean_squared_error(this_y, predict_sample) + lamdaTV * total_variation_loss_tf(predict_sample)",
                            "BinOp"
                        ],
                        [
                            "loss + lambdareg * sum1reg_tf(predict_sample)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_323": {
                "input_tensor": {
                    "value": "-tf.log(temp)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_330": {
                "x": {
                    "value": "-z / (2 * (1 - tf.square(rho)))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_346": {
                "tensor": {
                    "value": "tf.stack(convariance_mat)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "less_347": {
                "x": {
                    "value": "min_eig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "e[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_383": {
                "values": {
                    "value": "likelihood",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.map_fn(lambda x: likelihood_mvn(x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11]), elems_flat)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_399": {
                "tensor": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_404": {
                "tensor": {
                    "value": "elems_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([flatten_me(x1), flatten_me(x2), flatten_me(x3), flatten_me(mu1), flatten_me(mu2), flatten_me(mu3), flatten_me(sigma1), flatten_me(sigma2), flatten_me(sigma3), flatten_me(rho12), flatten_me(rho13), flatten_me(rho23)])",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(elems_flat, [12, -1]), (1, 0))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[12, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_406": {
                "values": {
                    "value": "likelihood",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.map_fn(lambda x: likelihood_mvn(x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11]), elems_flat)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_613": {
                "x": {
                    "value": "deltax + deltay + deltaz",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "1.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "square_629": {
                "x": {
                    "value": "x ** 2 + y ** 2 + z ** 2 - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_squared_error_636": {
                "y_true": {
                    "value": "this_y",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predict_sample",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "greater_15": {
                "x": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(out - y)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(np.pi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_16": {
                "x": {
                    "value": "tf.constant(2 * np.pi) - diff",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_17": {
                "x": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(out - y)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_squared_error_45": {
                "y_true": {
                    "value": "pop_var_x",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "varx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.slice_layer(2, 3, 4)(y_pred)",
                            "Call"
                        ],
                        [
                            "cliplayer(varx)",
                            "Call"
                        ],
                        [
                            "K.repeat_elements(varx, 30, axis=-1)",
                            "Call"
                        ],
                        [
                            "y_pred[3]",
                            "Subscript"
                        ],
                        [
                            "expand(varx, -1, cfg.fps)",
                            "Call"
                        ],
                        [
                            "y_pred[3]",
                            "Subscript"
                        ],
                        [
                            "expand(varx, -1, cfg.fps)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_squared_error_46": {
                "y_true": {
                    "value": "pop_var_y",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "vary",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.slice_layer(2, 4, 5)(y_pred)",
                            "Call"
                        ],
                        [
                            "cliplayer(vary)",
                            "Call"
                        ],
                        [
                            "K.repeat_elements(vary, 30, axis=-1)",
                            "Call"
                        ],
                        [
                            "y_pred[4]",
                            "Subscript"
                        ],
                        [
                            "expand(vary, -1, cfg.fps)",
                            "Call"
                        ],
                        [
                            "y_pred[4]",
                            "Subscript"
                        ],
                        [
                            "expand(vary, -1, cfg.fps)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_squared_error_47": {
                "y_true": {
                    "value": "pop_var_z",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "varz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.slice_layer(2, 5, 6)(y_pred)",
                            "Call"
                        ],
                        [
                            "cliplayer(varz)",
                            "Call"
                        ],
                        [
                            "K.repeat_elements(varz, 30, axis=-1)",
                            "Call"
                        ],
                        [
                            "y_pred[5]",
                            "Subscript"
                        ],
                        [
                            "expand(varz, -1, cfg.fps)",
                            "Call"
                        ],
                        [
                            "y_pred[5]",
                            "Subscript"
                        ],
                        [
                            "expand(varz, -1, cfg.fps)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_65": {
                "x": {
                    "value": "inside_log",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / 4 * (var1 / (var2 + 1e-10) + var2 / (var1 + 1e-10) + 2)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(inside_log, 1e-10, 100.0)",
                            "Call"
                        ],
                        [
                            "tf.div(tf.sqrt(var2), tf.sqrt(var1) + 1e-10)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(inside_log, 1e-10, 100)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_129": {
                "t": {
                    "value": "tf.sqrt(gt_var_x) * tf.sqrt(pop_var_x)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_328": {
                "x": {
                    "value": "(x2 - mu2) / sigma2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_331": {
                "x": {
                    "value": "1 - tf.square(rho)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_346": {
                "values": {
                    "value": "convariance_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.less(min_eig, tf.constant(0.0)), f1, f2)",
                            "Call"
                        ],
                        [
                            "[[tf.square(sigma1_), rho12_ * sigma1_ * sigma2_, rho13_ * sigma1_ * sigma3_], [rho12_ * sigma1_ * sigma2_, tf.square(sigma2_), rho23_ * sigma2_ * sigma3_], [rho13_ * sigma1_ * sigma3_, rho23_ * sigma2_ * sigma3_, tf.square(sigma3_)]]",
                            "List"
                        ],
                        [
                            "_make_positive_semidefinite_tf(convariance_mat, n)",
                            "Call"
                        ],
                        [
                            "[[tf.square(sigma1_), rho12_ * sigma1_ * sigma2_, rho13_ * sigma1_ * sigma3_], [rho12_ * sigma1_ * sigma2_, tf.square(sigma2_), rho23_ * sigma2_ * sigma3_], [rho13_ * sigma1_ * sigma3_, rho23_ * sigma2_ * sigma3_, tf.square(sigma3_)]]",
                            "List"
                        ],
                        [
                            "_make_positive_semidefinite_tf(convariance_mat, n)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_347": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_422": {
                "x": {
                    "value": "(end_of_stroke + eps) * y_end_of_stroke + (1 - end_of_stroke + eps) * (1 - y_end_of_stroke)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_428": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(predict_sample, [0, 0, 0], [-1, -1, 1])[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "y_true[:, :, 0::3]",
                            "Subscript"
                        ],
                        [
                            "y_true[:, :, 0::3]",
                            "Subscript"
                        ],
                        [
                            "y_true[:, :, 0::3]",
                            "Subscript"
                        ],
                        [
                            "pred_raw_trj[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "pred_raw_trj[:, :, 0::3]",
                            "Subscript"
                        ],
                        [
                            "pred_raw_trj[:, :, 0::3]",
                            "Subscript"
                        ],
                        [
                            "pred_raw_trj[:, :, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_469": {
                "x": {
                    "value": "tf.reduce_sum(gaussian, 1) + 1e-20",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_539": {
                "x": {
                    "value": "tf.reduce_sum(gaussian, 1) + 1e-20",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_15": {
                "value": {
                    "value": "np.pi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_65": {
                "t": {
                    "value": "var1 + var2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "8.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sqrt_71": {
                "x": {
                    "value": "var1 * var2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_squared_error_128": {
                "y_true": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(predict_sample, [0, 0, 2], [-1, -1, 1])[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "y_true[:, :, 2::3]",
                            "Subscript"
                        ],
                        [
                            "y_true[:, :, 2::3]",
                            "Subscript"
                        ],
                        [
                            "y_true[:, :, 2::3]",
                            "Subscript"
                        ],
                        [
                            "tf.square((x1 - mu1) / sigma1) + tf.square((x2 - mu2) / sigma2) - 2 * rho * (x1 - mu1) * (x2 - mu2) / (sigma1 * sigma2)",
                            "BinOp"
                        ],
                        [
                            "pred_raw_trj[:, :, 2]",
                            "Subscript"
                        ],
                        [
                            "pred_raw_trj[:, :, 2::3]",
                            "Subscript"
                        ],
                        [
                            "pred_raw_trj[:, :, 2::3]",
                            "Subscript"
                        ],
                        [
                            "pred_raw_trj[:, :, 2]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "duplicate(pop_mean_z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_128": {
                "t": {
                    "value": "2 * pop_var_z",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_235": {
                "x": {
                    "value": "(x - mu) / sigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_289": {
                "x": {
                    "value": "1 - rho ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_323": {
                "x": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(thetagt - utheta) ** 2 / sigma_theta ** 2 + (phigt - uphi) ** 2 / sigma_phi ** 2 - 2 * rho * (thetagt - utheta) * (phigt - uphi) / sigma_theta / sigma_phi",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "temp + weight * likelihood_loss_phi_theta_tf(y_true, [utheta, uphi, sigma_theta, sigma_phi, rho], use_reduce=False)",
                            "BinOp"
                        ],
                        [
                            "bivariate_gaussian(expand(y1, 1, n_mixture), expand(y2, 1, n_mixture), mu1, mu2, sigma1, sigma2, rhos)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_345": {
                "num_rows": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "square_391": {
                "x": {
                    "value": "sigma1_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sigma1[batch_ind, mixture_ind, time_ind]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "square_392": {
                "x": {
                    "value": "sigma2_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sigma2[batch_ind, mixture_ind, time_ind]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "square_393": {
                "x": {
                    "value": "sigma3_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sigma3[batch_ind, mixture_ind, time_ind]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "constant_16": {
                "value": {
                    "value": "2 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_squared_error_127": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(predict_sample, [0, 0, 1], [-1, -1, 1])[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "y_true[:, :, 1::3]",
                            "Subscript"
                        ],
                        [
                            "y_true[:, :, 1::3]",
                            "Subscript"
                        ],
                        [
                            "y_true[:, :, 1::3]",
                            "Subscript"
                        ],
                        [
                            "pred_raw_trj[:, :, 1]",
                            "Subscript"
                        ],
                        [
                            "pred_raw_trj[:, :, 1::3]",
                            "Subscript"
                        ],
                        [
                            "pred_raw_trj[:, :, 1::3]",
                            "Subscript"
                        ],
                        [
                            "pred_raw_trj[:, :, 1]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "duplicate(pop_mean_y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_127": {
                "t": {
                    "value": "2 * pop_var_y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_129": {
                "x": {
                    "value": "pop_var_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_262": {
                "x": {
                    "value": "gaussianx + gaussiany + gaussianz + 1e-20",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_331": {
                "x": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred[4]",
                            "Subscript"
                        ],
                        [
                            "tf.clip_by_value(rho, -1, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(rhos[:, ii], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_squared_error_126": {
                "y_true": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(predict_sample, [0, 0, 0], [-1, -1, 1])[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "y_true[:, :, 0::3]",
                            "Subscript"
                        ],
                        [
                            "y_true[:, :, 0::3]",
                            "Subscript"
                        ],
                        [
                            "y_true[:, :, 0::3]",
                            "Subscript"
                        ],
                        [
                            "pred_raw_trj[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "pred_raw_trj[:, :, 0::3]",
                            "Subscript"
                        ],
                        [
                            "pred_raw_trj[:, :, 0::3]",
                            "Subscript"
                        ],
                        [
                            "pred_raw_trj[:, :, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "duplicate(pop_mean_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_126": {
                "t": {
                    "value": "2 * pop_var_x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_330": {
                "x": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred[4]",
                            "Subscript"
                        ],
                        [
                            "tf.clip_by_value(rho, -1, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(rhos[:, ii], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_376": {
                "x": {
                    "value": "sigma1_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sigma1[batch_ind, mixture_ind, time_ind]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "square_377": {
                "x": {
                    "value": "sigma2_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sigma2[batch_ind, mixture_ind, time_ind]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "square_378": {
                "x": {
                    "value": "sigma3_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sigma3[batch_ind, mixture_ind, time_ind]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_squared_error_125": {
                "y_true": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(predict_sample, [0, 0, 2], [-1, -1, 1])[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "y_true[:, :, 2::3]",
                            "Subscript"
                        ],
                        [
                            "y_true[:, :, 2::3]",
                            "Subscript"
                        ],
                        [
                            "y_true[:, :, 2::3]",
                            "Subscript"
                        ],
                        [
                            "tf.square((x1 - mu1) / sigma1) + tf.square((x2 - mu2) / sigma2) - 2 * rho * (x1 - mu1) * (x2 - mu2) / (sigma1 * sigma2)",
                            "BinOp"
                        ],
                        [
                            "pred_raw_trj[:, :, 2]",
                            "Subscript"
                        ],
                        [
                            "pred_raw_trj[:, :, 2::3]",
                            "Subscript"
                        ],
                        [
                            "pred_raw_trj[:, :, 2::3]",
                            "Subscript"
                        ],
                        [
                            "pred_raw_trj[:, :, 2]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "duplicate(gt_mean_z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_125": {
                "t": {
                    "value": "2 * gt_var_z",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_squared_error_123": {
                "y_true": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(predict_sample, [0, 0, 0], [-1, -1, 1])[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "y_true[:, :, 0::3]",
                            "Subscript"
                        ],
                        [
                            "y_true[:, :, 0::3]",
                            "Subscript"
                        ],
                        [
                            "y_true[:, :, 0::3]",
                            "Subscript"
                        ],
                        [
                            "pred_raw_trj[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "pred_raw_trj[:, :, 0::3]",
                            "Subscript"
                        ],
                        [
                            "pred_raw_trj[:, :, 0::3]",
                            "Subscript"
                        ],
                        [
                            "pred_raw_trj[:, :, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "duplicate(gt_mean_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_123": {
                "t": {
                    "value": "2 * gt_var_x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_squared_error_124": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(predict_sample, [0, 0, 1], [-1, -1, 1])[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "y_true[:, :, 1::3]",
                            "Subscript"
                        ],
                        [
                            "y_true[:, :, 1::3]",
                            "Subscript"
                        ],
                        [
                            "y_true[:, :, 1::3]",
                            "Subscript"
                        ],
                        [
                            "pred_raw_trj[:, :, 1]",
                            "Subscript"
                        ],
                        [
                            "pred_raw_trj[:, :, 1::3]",
                            "Subscript"
                        ],
                        [
                            "pred_raw_trj[:, :, 1::3]",
                            "Subscript"
                        ],
                        [
                            "pred_raw_trj[:, :, 1]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "duplicate(gt_mean_y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_124": {
                "t": {
                    "value": "2 * gt_var_y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mycode/dcgan.py": {
        "tensorflow": {}
    },
    "mycode/lstm.py": {
        "tensorflow": {
            "placeholder_128": {
                "variable": {
                    "value": "init_state",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_layers, 2, batch_size, n_hidden]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unstack_129": {
                "variable": {
                    "value": "state_per_layer_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "init_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [num_layers, 2, batch_size, n_hidden])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_136": {
                "variable": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_550": {
                "variable": {
                    "value": "summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "summaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Saver_552": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_554": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "cfg.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_556": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(cfg.LEARNING_RATE, trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_569": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_114": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1, data_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_115": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1, data_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_150": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(inputs, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv1d_152": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(inputs, 1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv1d_159": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(inputs=inputs, filters=128, kernel_size=5, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv1d_166": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(inputs=conv1, filters=256, kernel_size=5, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "fps * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unstack_186": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, 1, data_dim])",
                            "Call"
                        ],
                        [
                            "tf.placeholder('float', [None, truncated_backprop_length, data_dim])",
                            "Call"
                        ],
                        [
                            "tf.placeholder('float', [None, truncated_backprop_length, 48 * data_dim])",
                            "Call"
                        ],
                        [
                            "tf.unstack(x, truncated_backprop_length, 1)",
                            "Call"
                        ]
                    ]
                },
                "num": {
                    "value": "truncated_backprop_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.running_length",
                            "Attribute"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_189": {
                "variable": {
                    "value": "lstm_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "Constant"
                        ]
                    ]
                }
            },
            "static_rnn_193": {
                "variable": {
                    "value": "(outputs, states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "lstm_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.BasicLSTMCell(n_hidden)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, 1, data_dim])",
                            "Call"
                        ],
                        [
                            "tf.placeholder('float', [None, truncated_backprop_length, data_dim])",
                            "Call"
                        ],
                        [
                            "tf.placeholder('float', [None, truncated_backprop_length, 48 * data_dim])",
                            "Call"
                        ],
                        [
                            "tf.unstack(x, truncated_backprop_length, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "seqlen",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_204": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(outputs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(outputs, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(tf.reshape(outputs, [-1, n_hidden]), index)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_205": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(outputs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(outputs, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(tf.reshape(outputs, [-1, n_hidden]), index)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_212": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.reshape(outputs, [-1, n_hidden])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, batch_size) * truncated_backprop_length + (seqlen - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "MultiRNNCell_226": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "cells",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_250": {
                "variable": {
                    "value": "concat_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack((c, h, mlp_state), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_260": {
                "variable": {
                    "value": "concat_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack((states_series, states_series_others), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, cfg.running_length, n_hidden * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_271": {
                "variable": {
                    "value": "ux",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat_states_series(states_series, states_series_others)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 2 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 5, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 32, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(pred, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 121, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 120, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 200, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_272": {
                "variable": {
                    "value": "uy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat_states_series(states_series, states_series_others)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 2 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 5, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 32, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(pred, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 121, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 120, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 200, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_273": {
                "variable": {
                    "value": "uz",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat_states_series(states_series, states_series_others)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 2 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 5, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 32, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(pred, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 121, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 120, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 200, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_275": {
                "variable": {
                    "value": "varx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.slice(pred, [0, 3], [-1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_276": {
                "variable": {
                    "value": "vary",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.slice(pred, [0, 4], [-1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_277": {
                "variable": {
                    "value": "varz",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.slice(pred, [0, 5], [-1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_284": {
                "variable": {
                    "value": "ux",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat_states_series(states_series, states_series_others)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 2 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 5, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 32, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(pred, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 121, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 120, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 200, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_285": {
                "variable": {
                    "value": "uy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat_states_series(states_series, states_series_others)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 2 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 5, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 32, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(pred, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 121, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 120, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 200, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_286": {
                "variable": {
                    "value": "uz",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat_states_series(states_series, states_series_others)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 2 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 5, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 32, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(pred, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 121, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 120, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 200, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_290": {
                "variable": {
                    "value": "varx",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(state, 3, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 32, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(pred2, 3, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.exp(pred2)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_291": {
                "variable": {
                    "value": "vary",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(state, 3, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 32, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(pred2, 3, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.exp(pred2)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_292": {
                "variable": {
                    "value": "varz",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(state, 3, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 32, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(pred2, 3, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.exp(pred2)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_298": {
                "variable": {
                    "value": "u1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat_states_series(states_series, states_series_others)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 2 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 5, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 32, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(pred, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 121, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 120, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 200, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_299": {
                "variable": {
                    "value": "u2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat_states_series(states_series, states_series_others)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 2 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 5, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 32, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(pred, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 121, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 120, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 200, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_301": {
                "variable": {
                    "value": "var1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.slice(pred, [0, 2], [-1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_302": {
                "variable": {
                    "value": "var2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.slice(pred, [0, 3], [-1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_308": {
                "variable": {
                    "value": "utheta",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat_states_series(states_series, states_series_others)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 2 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 5, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 32, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(pred, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 121, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 120, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 200, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_309": {
                "variable": {
                    "value": "uphi",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat_states_series(states_series, states_series_others)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 2 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 5, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 32, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(pred, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 121, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 120, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 200, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_310": {
                "variable": {
                    "value": "sigma_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat_states_series(states_series, states_series_others)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 2 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 5, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 32, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(pred, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 121, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 120, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 200, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_311": {
                "variable": {
                    "value": "sigma_phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat_states_series(states_series, states_series_others)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 2 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 5, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 32, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(pred, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 121, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 120, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 200, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_312": {
                "variable": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat_states_series(states_series, states_series_others)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 2 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 5, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 32, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(pred, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 121, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 120, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 200, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_314": {
                "variable": {
                    "value": "sigma_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sigma_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(pred, [0, 2], [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.abs(sigma_theta)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_315": {
                "variable": {
                    "value": "sigma_phi",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sigma_phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(pred, [0, 3], [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.abs(sigma_phi)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_316": {
                "variable": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(pred, [0, 4], [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(rho, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_326": {
                "variable": {
                    "value": "ux",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat_states_series(states_series, states_series_others)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 2 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 5, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 32, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(pred, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 121, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 120, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 200, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_327": {
                "variable": {
                    "value": "uy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat_states_series(states_series, states_series_others)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 2 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 5, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 32, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(pred, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 121, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 120, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 200, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_328": {
                "variable": {
                    "value": "uz",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat_states_series(states_series, states_series_others)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 2 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 5, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 32, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(pred, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 121, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 120, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 200, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_333": {
                "variable": {
                    "value": "pred2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(state, 3, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 32, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(pred2, 3, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.exp(pred2)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_334": {
                "variable": {
                    "value": "varx",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(state, 3, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 32, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(pred2, 3, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.exp(pred2)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_335": {
                "variable": {
                    "value": "vary",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(state, 3, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 32, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(pred2, 3, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.exp(pred2)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_336": {
                "variable": {
                    "value": "varz",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(state, 3, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 32, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(pred2, 3, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.exp(pred2)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_343": {
                "variable": {
                    "value": "internal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "internal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(state, 64, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(internal, rate=0.2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 128, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(internal, rate=0.2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 256, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 64, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(internal, rate=0.2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 128, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(internal, rate=0.2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 256, activation_fn=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "dropout_345": {
                "variable": {
                    "value": "internal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "internal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(state, 64, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(internal, rate=0.2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 128, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(internal, rate=0.2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 256, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 64, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(internal, rate=0.2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 128, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(internal, rate=0.2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 256, activation_fn=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "slice_355": {
                "variable": {
                    "value": "mixture_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat_states_series(states_series, states_series_others)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 2 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 5, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 32, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(pred, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 121, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 120, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 200, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 20]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_356": {
                "variable": {
                    "value": "us",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat_states_series(states_series, states_series_others)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 2 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 5, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 32, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(pred, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 121, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 120, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 200, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 20]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 40]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_357": {
                "variable": {
                    "value": "sigmas",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat_states_series(states_series, states_series_others)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 2 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 5, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 32, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(pred, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 121, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 120, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 200, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 60]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 40]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_358": {
                "variable": {
                    "value": "rhos",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat_states_series(states_series, states_series_others)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 2 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 5, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 32, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(pred, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 121, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 120, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 200, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 100]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 20]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_364": {
                "variable": {
                    "value": "pi_exp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mixture_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(pred, [0, 0], [-1, 20])",
                            "Call"
                        ],
                        [
                            "pi_exp / tf.concat([tf.expand_dims(pi_exp_sum, 1) for _ in range(20)], 1)",
                            "BinOp"
                        ],
                        [
                            "tf.slice(pred, [0, 0], [-1, 20])",
                            "Call"
                        ],
                        [
                            "pi_exp / tf.concat([tf.expand_dims(pi_exp_sum, 1) for _ in range(20)], 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_365": {
                "variable": {
                    "value": "pi_exp_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pi_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(mixture_pi)",
                            "Call"
                        ],
                        [
                            "tf.exp(mixture_pi)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_368": {
                "variable": {
                    "value": "sigmas",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sigmas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(pred, [0, 60], [-1, 40])",
                            "Call"
                        ],
                        [
                            "tf.exp(sigmas)",
                            "Call"
                        ],
                        [
                            "tf.slice(pred, [0, 80], [-1, 60])",
                            "Call"
                        ],
                        [
                            "tf.exp(sigmas)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_369": {
                "variable": {
                    "value": "rhos",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rhos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(pred, [0, 100], [-1, 20])",
                            "Call"
                        ],
                        [
                            "tf.tanh(rhos)",
                            "Call"
                        ],
                        [
                            "tf.slice(pred, [0, 140], [-1, 60])",
                            "Call"
                        ],
                        [
                            "tf.tanh(rhos)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_380": {
                "variable": {
                    "value": "internal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "internal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(state, 64, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(internal, rate=0.2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 128, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(internal, rate=0.2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 256, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 64, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(internal, rate=0.2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 128, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(internal, rate=0.2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 256, activation_fn=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "dropout_382": {
                "variable": {
                    "value": "internal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "internal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(state, 64, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(internal, rate=0.2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 128, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(internal, rate=0.2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 256, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 64, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(internal, rate=0.2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 128, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(internal, rate=0.2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 256, activation_fn=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "slice_388": {
                "variable": {
                    "value": "mixture_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat_states_series(states_series, states_series_others)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 2 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 5, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 32, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(pred, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 121, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 120, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 200, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 20]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_389": {
                "variable": {
                    "value": "us",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat_states_series(states_series, states_series_others)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 2 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 5, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 32, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(pred, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 121, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 120, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 200, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 20]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 60]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_390": {
                "variable": {
                    "value": "sigmas",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat_states_series(states_series, states_series_others)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 2 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 5, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 32, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(pred, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 121, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 120, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 200, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 80]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 60]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_391": {
                "variable": {
                    "value": "rhos",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat_states_series(states_series, states_series_others)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 2 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 5, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 32, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(pred, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 121, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 120, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 200, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 140]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 60]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_394": {
                "variable": {
                    "value": "pi_exp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mixture_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(pred, [0, 0], [-1, 20])",
                            "Call"
                        ],
                        [
                            "pi_exp / tf.concat([tf.expand_dims(pi_exp_sum, 1) for _ in range(20)], 1)",
                            "BinOp"
                        ],
                        [
                            "tf.slice(pred, [0, 0], [-1, 20])",
                            "Call"
                        ],
                        [
                            "pi_exp / tf.concat([tf.expand_dims(pi_exp_sum, 1) for _ in range(20)], 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_395": {
                "variable": {
                    "value": "pi_exp_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pi_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(mixture_pi)",
                            "Call"
                        ],
                        [
                            "tf.exp(mixture_pi)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_398": {
                "variable": {
                    "value": "sigmas",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sigmas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(pred, [0, 60], [-1, 40])",
                            "Call"
                        ],
                        [
                            "tf.exp(sigmas)",
                            "Call"
                        ],
                        [
                            "tf.slice(pred, [0, 80], [-1, 60])",
                            "Call"
                        ],
                        [
                            "tf.exp(sigmas)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_399": {
                "variable": {
                    "value": "rhos",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rhos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(pred, [0, 100], [-1, 20])",
                            "Call"
                        ],
                        [
                            "tf.tanh(rhos)",
                            "Call"
                        ],
                        [
                            "tf.slice(pred, [0, 140], [-1, 60])",
                            "Call"
                        ],
                        [
                            "tf.tanh(rhos)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_412": {
                "variable": {
                    "value": "others",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 47, cfg.running_length, data_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_106": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, truncated_backprop_length, data_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_108": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, truncated_backprop_length, 48 * data_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_110": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, cfg.running_length, data_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_112": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, cfg.predict_len, data_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LSTMCell_223": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "Constant"
                        ]
                    ]
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DropoutWrapper_224": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(n_hidden, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell, output_keep_prob=1.0 - dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.MultiRNNCell(cells)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "1.0 - dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dynamic_rnn_238": {
                "variable": {
                    "value": "(states_series, current_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(n_hidden, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell, output_keep_prob=1.0 - dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.MultiRNNCell(cells)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, 1, data_dim])",
                            "Call"
                        ],
                        [
                            "tf.placeholder('float', [None, truncated_backprop_length, data_dim])",
                            "Call"
                        ],
                        [
                            "tf.placeholder('float', [None, truncated_backprop_length, 48 * data_dim])",
                            "Call"
                        ],
                        [
                            "tf.unstack(x, truncated_backprop_length, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_state": {
                    "value": "rnn_tuple_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple([tf.contrib.rnn.LSTMStateTuple(state_per_layer_list[idx][0], state_per_layer_list[idx][1]) for idx in range(num_layers)])",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_360": {
                "variable": {
                    "value": "end_stroke",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat_states_series(states_series, states_series_others)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 2 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 5, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 32, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(pred, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 121, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 120, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 200, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 120]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_562": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "FileWriter_588": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "'./tfsummary/' + tag",
                    "type": "BinOp",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_130": {
                "c": {
                    "value": "state_per_layer_list[idx][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "h": {
                    "value": "state_per_layer_list[idx][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_208": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(outputs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(outputs, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(tf.reshape(outputs, [-1, n_hidden]), index)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_212": {
                "tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(outputs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(outputs, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(tf.reshape(outputs, [-1, n_hidden]), index)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, n_hidden]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_215": {
                "a": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(outputs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(outputs, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(tf.reshape(outputs, [-1, n_hidden]), index)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['out']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dynamic_rnn_231": {
                "variable": {
                    "value": "(states_series, current_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(n_hidden, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell, output_keep_prob=1.0 - dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.MultiRNNCell(cells)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, 1, data_dim])",
                            "Call"
                        ],
                        [
                            "tf.placeholder('float', [None, truncated_backprop_length, data_dim])",
                            "Call"
                        ],
                        [
                            "tf.placeholder('float', [None, truncated_backprop_length, 48 * data_dim])",
                            "Call"
                        ],
                        [
                            "tf.unstack(x, truncated_backprop_length, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_state": {
                    "value": "rnn_tuple_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple([tf.contrib.rnn.LSTMStateTuple(state_per_layer_list[idx][0], state_per_layer_list[idx][1]) for idx in range(num_layers)])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_250": {
                "values": {
                    "value": "(c, h, mlp_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_260": {
                "values": {
                    "value": "(states_series, states_series_others)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "slice_275": {
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat_states_series(states_series, states_series_others)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 2 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 5, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 32, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(pred, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 121, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 120, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 200, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_276": {
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat_states_series(states_series, states_series_others)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 2 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 5, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 32, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(pred, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 121, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 120, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 200, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_277": {
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat_states_series(states_series, states_series_others)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 2 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 5, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 32, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(pred, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 121, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 120, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 200, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_301": {
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat_states_series(states_series, states_series_others)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 2 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 5, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 32, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(pred, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 121, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 120, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 200, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_302": {
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat_states_series(states_series, states_series_others)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 2 * 2, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 5, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(state, 32, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(pred, 3, activation_fn=tf.nn.tanh)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 121, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 120, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(internal, 200, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_366": {
                "values": {
                    "value": "[tf.expand_dims(pi_exp_sum, 1) for _ in range(20)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_396": {
                "values": {
                    "value": "[tf.expand_dims(pi_exp_sum, 1) for _ in range(20)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_549": {
                "name": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Session_585": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_665": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_229": {
                "name_or_scope": {
                    "value": "dynamicRNN",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_361": {
                "x": {
                    "value": "end_stroke",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(pred, [0, 120], [-1, 1])",
                            "Call"
                        ],
                        [
                            "1 / (1 + tf.exp(end_stroke))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_366": {
                "input": {
                    "value": "pi_exp_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(pi_exp, 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(pi_exp, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_396": {
                "input": {
                    "value": "pi_exp_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(pi_exp, 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(pi_exp, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_squared_error_491": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, 1, data_dim])",
                            "Call"
                        ],
                        [
                            "tf.placeholder('float', [None, cfg.running_length, data_dim])",
                            "Call"
                        ],
                        [
                            "tf.placeholder('float', [None, cfg.predict_len, data_dim])",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predict_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_cnn_model_fn(current_state[1][1])",
                            "Call"
                        ],
                        [
                            "pred_cnn_model_fn(current_state[1][1])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_462": {
                "variable": {
                    "value": "this_input_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(util.generate_fake_batch_tf(ux, varx), util.generate_fake_batch_tf(uy, vary), util.generate_fake_batch_tf(uz, varz))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_465": {
                "variable": {
                    "value": "this_input_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "this_input_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predict_sample",
                            "Name"
                        ],
                        [
                            "tf.stack((util.generate_fake_batch_tf(ux, varx), util.generate_fake_batch_tf(uy, vary), util.generate_fake_batch_tf(uz, varz)), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(this_input_temp, [batch_size, 1, fps * 3])",
                            "Call"
                        ],
                        [
                            "predict_sample",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 1, fps * 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_467": {
                "variable": {
                    "value": "history_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "input_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.concat((history_input, this_input_temp), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat((history_input, this_input_temp), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_468": {
                "variable": {
                    "value": "input_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(history_input, this_input_temp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_495": {
                "variable": {
                    "value": "this_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, 1, data_dim])",
                            "Call"
                        ],
                        [
                            "tf.placeholder('float', [None, cfg.running_length, data_dim])",
                            "Call"
                        ],
                        [
                            "tf.placeholder('float', [None, cfg.predict_len, data_dim])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_601": {
                "ref": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(cfg.LEARNING_RATE, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "lr_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.LEARNING_RATE * 0.5 ** (epoch / cfg.lr_epoch_step)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_457": {
                "input": {
                    "value": "y[:, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_502": {
                "variable": {
                    "value": "history_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "input_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.concat((history_input, this_input_temp), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat((history_input, this_input_temp), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_503": {
                "variable": {
                    "value": "input_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(history_input, this_input_temp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_507": {
                "variable": {
                    "value": "this_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None, 1, data_dim])",
                            "Call"
                        ],
                        [
                            "tf.placeholder('float', [None, cfg.running_length, data_dim])",
                            "Call"
                        ],
                        [
                            "tf.placeholder('float', [None, cfg.predict_len, data_dim])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, time_ind, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_480": {
                "input": {
                    "value": "y[:, time_ind, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mycode/lstm_example.py": {
        "tensorflow": {
            "placeholder_103": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, seq_max_len, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_104": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_106": {
                "variable": {
                    "value": "seqlen",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_159": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(logits=pred, labels=y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_160": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                }
            },
            "equal_163": {
                "variable": {
                    "value": "correct_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(pred, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_164": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_pred, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_167": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unstack_124": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', [None, seq_max_len, 1])",
                            "Call"
                        ],
                        [
                            "tf.unstack(x, seq_max_len, 1)",
                            "Call"
                        ]
                    ]
                },
                "num": {
                    "value": "seq_max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "Constant"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_127": {
                "variable": {
                    "value": "lstm_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "static_rnn_131": {
                "variable": {
                    "value": "(outputs, states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "lstm_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.BasicLSTMCell(n_hidden)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', [None, seq_max_len, 1])",
                            "Call"
                        ],
                        [
                            "tf.unstack(x, seq_max_len, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "seqlen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [None])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_143": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(outputs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(outputs, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(tf.reshape(outputs, [-1, n_hidden]), index)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_144": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(outputs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(outputs, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(tf.reshape(outputs, [-1, n_hidden]), index)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_151": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.reshape(outputs, [-1, n_hidden])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, batch_size) * seq_max_len + (seqlen - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Variable_110": {
                "initial_value": {
                    "value": "tf.random_normal([n_hidden, n_classes])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_113": {
                "initial_value": {
                    "value": "tf.random_normal([n_classes])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_159": {
                "logits": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dynamicRNN(x, seqlen, weights, biases)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', [None, n_classes])",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_163": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', [None, n_classes])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_164": {
                "x": {
                    "value": "correct_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(pred, 1), tf.argmax(y, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_147": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(outputs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(outputs, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(tf.reshape(outputs, [-1, n_hidden]), index)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_151": {
                "tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(outputs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(outputs, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(tf.reshape(outputs, [-1, n_hidden]), index)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, n_hidden]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_154": {
                "a": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(outputs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(outputs, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(tf.reshape(outputs, [-1, n_hidden]), index)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['out']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "mycode/provide_hidden_state.py": {
        "tensorflow": {
            "reshape_27": {
                "variable": {
                    "value": "others_future_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "others_future",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(others_future, [batch_size, cfg.running_length * 47])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_31": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(others_future_reshape, weights['h1'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['b1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_33": {
                "variable": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(layer_1, weights['h2'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['b2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_50": {
                "variable": {
                    "value": "others_future",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "others_future",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(others_future, [batch_size, cfg.running_length * 47])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, cfg.running_length * 47]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MultiRNNCell_67": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "cells",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "dynamic_rnn_70": {
                "variable": {
                    "value": "(states_series, current_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(n_hidden, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.MultiRNNCell(cells)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_state": {
                    "value": "rnn_tuple_state",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_14": {
                "initial_value": {
                    "value": "tf.random_normal([n_input, n_hidden_1], stddev=0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_15": {
                "initial_value": {
                    "value": "tf.random_normal([n_hidden_1, n_hidden_2], stddev=0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_20": {
                "initial_value": {
                    "value": "tf.random_normal([n_hidden_1], stddev=0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_21": {
                "initial_value": {
                    "value": "tf.random_normal([n_hidden_2], stddev=0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_31": {
                "a": {
                    "value": "others_future_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "weights['h1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_33": {
                "a": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(others_future, n_hidden_1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(others_future, n_hidden_1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['h2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "LSTM_others",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LSTMCell_65": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mycode/seq2seq_example.py": {
        "tensorflow": {
            "size_98": {
                "variable": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.iterator.source_sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_126": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "trainable_variables_127": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_168": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "hparams.num_keep_ckpts",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_360": {
                "variable": {
                    "value": "tgt_sos_id",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.tgt_vocab_table.lookup(tf.constant(hparams.sos))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_362": {
                "variable": {
                    "value": "tgt_eos_id",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.tgt_vocab_table.lookup(tf.constant(hparams.eos))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_492": {
                "variable": {
                    "value": "crossent",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "target_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.iterator.target_output",
                            "Attribute"
                        ],
                        [
                            "tf.transpose(target_output)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output_layer(outputs.rnn_output)",
                            "Call"
                        ],
                        [
                            "tf.no_op()",
                            "Call"
                        ],
                        [
                            "outputs.rnn_output",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sequence_mask_494": {
                "variable": {
                    "value": "target_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "self.iterator.target_sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "max_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_max_time(target_output)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "logits.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_624": {
                "variable": {
                    "value": "(bi_outputs, bi_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "fw_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._build_encoder_cell(hparams, num_bi_layers, num_bi_residual_layers, base_gpu=base_gpu)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "bw_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._build_encoder_cell(hparams, num_bi_layers, num_bi_residual_layers, base_gpu=base_gpu + num_bi_layers)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": []
                },
                "time_major": {
                    "value": "self.time_major",
                    "type": "Attribute",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_scope_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_123": {
                "variable": {
                    "value": "self.predict_count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.iterator.target_sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_132": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "hparams.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_146": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.train_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                },
                "colocate_gradients_with_ops": {
                    "value": "hparams.colocate_gradients_with_ops",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_159": {
                "variable": {
                    "value": "self.train_summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.summary.scalar('lr', self.learning_rate), tf.summary.scalar('train_loss', self.train_loss)] + grad_norm_summary",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_190": {
                "variable": {
                    "value": "warmup_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.log(0.01) / warmup_steps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cond_196": {
                "pred": {
                    "value": "self.global_step < hparams.warmup_steps",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : inv_decay * self.learning_rate",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self.learning_rate",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate_warump_cond",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cond_229": {
                "pred": {
                    "value": "self.global_step < start_decay_step",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : self.learning_rate",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.train.exponential_decay(self.learning_rate, self.global_step - start_decay_step, decay_steps, decay_factor, staircase=True)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate_decay_cond",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_345": {
                "variable": {
                    "value": "max_encoder_length",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "source_sequence_length",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "to_int32_346": {
                "variable": {
                    "value": "maximum_iterations",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.round(tf.to_float(max_encoder_length) * decoding_length_factor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_490": {
                "variable": {
                    "value": "target_output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "target_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.iterator.target_output",
                            "Attribute"
                        ],
                        [
                            "tf.transpose(target_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_497": {
                "variable": {
                    "value": "target_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "target_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(self.iterator.target_sequence_length, max_time, dtype=logits.dtype)",
                            "Call"
                        ],
                        [
                            "tf.transpose(target_weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_op_504": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_546": {
                "variable": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iterator.source",
                            "Attribute"
                        ],
                        [
                            "tf.transpose(source)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_551": {
                "variable": {
                    "value": "encoder_emb_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iterator.source",
                            "Attribute"
                        ],
                        [
                            "tf.transpose(source)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_101": {
                "name_or_scope": {
                    "value": "scope or 'build_network'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "Dense_103": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "hparams.tgt_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "output_projection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_140": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_292": {
                "name_or_scope": {
                    "value": "scope or 'dynamic_seq2seq'",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "variable_scope_371": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_382": {
                "variable": {
                    "value": "decoder_emb_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "target_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iterator.target_input",
                            "Attribute"
                        ],
                        [
                            "tf.transpose(target_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "fill_417": {
                "variable": {
                    "value": "start_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tgt_sos_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(self.tgt_vocab_table.lookup(tf.constant(hparams.sos)), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_499": {
                "input_tensor": {
                    "value": "crossent * target_weights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_500": {
                "x": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_548": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dynamic_rnn_561": {
                "variable": {
                    "value": "(encoder_outputs, encoder_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._build_encoder_cell(hparams, num_layers, num_residual_layers)",
                            "Call"
                        ],
                        [
                            "model_helper.create_rnn_cell(unit_type=hparams.unit_type, num_units=hparams.num_units, num_layers=self.num_decoder_layers, num_residual_layers=self.num_decoder_residual_layers, forget_bias=hparams.forget_bias, dropout=hparams.dropout, num_gpus=self.num_gpus, mode=self.mode, single_cell_fn=self.single_cell_fn)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "encoder_emb_inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.embedding_encoder, source)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "iterator.source_sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "time_major": {
                    "value": "self.time_major",
                    "type": "Attribute",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_633": {
                "values": {
                    "value": "bi_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_102": {
                "name_or_scope": {
                    "value": "decoder/output_projection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_111": {
                "input_tensor": {
                    "value": "self.iterator.source_sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_112": {
                "input_tensor": {
                    "value": "self.iterator.target_sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_141": {
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_143": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_192": {
                "x": {
                    "value": "warmup_steps - self.global_step",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exponential_decay_232": {
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.global_step - start_decay_step",
                    "type": "BinOp",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "int(remain_steps / decay_times)",
                            "Call"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "decay_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ],
                        [
                            "1.0",
                            "Constant"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "round_346": {
                "x": {
                    "value": "tf.to_float(max_encoder_length) * decoding_length_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_360": {
                "value": {
                    "value": "hparams.sos",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_362": {
                "value": {
                    "value": "hparams.eos",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_381": {
                "variable": {
                    "value": "target_input",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "target_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iterator.target_input",
                            "Attribute"
                        ],
                        [
                            "tf.transpose(target_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_op_459": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_469": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_190": {
                "x": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "device_302": {
                "device_name": {
                    "value": "model_helper.get_device_str(self.num_encoder_layers - 1, self.num_gpus)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int64_119": {
                "x": {
                    "value": "self.sample_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_160": {
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_161": {
                "name": {
                    "value": "train_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.train_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_347": {
                "x": {
                    "value": "max_encoder_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(source_sequence_length)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mycode/social/grid.py": {
        "tensorflow": {
            "stack_78": {
                "variable": {
                    "value": "frame_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "frame_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(frame_mask, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.cast(frame_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "frame_mask * id_mask",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(frame_mask, axis=0)",
                            "Call"
                        ],
                        [
                            "np.zeros((max_n_peds, max_n_peds, grid_side ** 2))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_79": {
                "variable": {
                    "value": "frame_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "frame_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(frame_mask, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.cast(frame_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "frame_mask * id_mask",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(frame_mask, axis=0)",
                            "Call"
                        ],
                        [
                            "np.zeros((max_n_peds, max_n_peds, grid_side ** 2))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensordot_40": {
                "variable": {
                    "value": "id_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(pids, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(tf.expand_dims(pids, axis=1))",
                    "type": "Call",
                    "possible_values": []
                },
                "axes": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_43": {
                "variable": {
                    "value": "id_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "id_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Lambda(compute_id_mask)(pids)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(tf.expand_dims(pids, axis=1), tf.transpose(tf.expand_dims(pids, axis=1)), axes=(1, 0))",
                            "Call"
                        ],
                        [
                            "tf.cast(id_mask, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(tf.logical_not(tf.cast(tf.eye(max_n_peds), tf.bool)), id_mask)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(id_mask, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.cast(id_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "np.dot(np.expand_dims(pids, axis=1), np.expand_dims(pids, axis=1).T)",
                            "Call"
                        ],
                        [
                            "id_mask * ~np.eye(max_n_peds).astype(np.bool)",
                            "BinOp"
                        ],
                        [
                            "np.expand_dims(id_mask, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_and_45": {
                "variable": {
                    "value": "id_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.logical_not(tf.cast(tf.eye(max_n_peds), tf.bool))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "id_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Lambda(compute_id_mask)(pids)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(tf.expand_dims(pids, axis=1), tf.transpose(tf.expand_dims(pids, axis=1)), axes=(1, 0))",
                            "Call"
                        ],
                        [
                            "tf.cast(id_mask, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(tf.logical_not(tf.cast(tf.eye(max_n_peds), tf.bool)), id_mask)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(id_mask, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.cast(id_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "np.dot(np.expand_dims(pids, axis=1), np.expand_dims(pids, axis=1).T)",
                            "Call"
                        ],
                        [
                            "id_mask * ~np.eye(max_n_peds).astype(np.bool)",
                            "BinOp"
                        ],
                        [
                            "np.expand_dims(id_mask, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_47": {
                "variable": {
                    "value": "id_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "id_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Lambda(compute_id_mask)(pids)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(tf.expand_dims(pids, axis=1), tf.transpose(tf.expand_dims(pids, axis=1)), axes=(1, 0))",
                            "Call"
                        ],
                        [
                            "tf.cast(id_mask, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(tf.logical_not(tf.cast(tf.eye(max_n_peds), tf.bool)), id_mask)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(id_mask, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.cast(id_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "np.dot(np.expand_dims(pids, axis=1), np.expand_dims(pids, axis=1).T)",
                            "Call"
                        ],
                        [
                            "id_mask * ~np.eye(max_n_peds).astype(np.bool)",
                            "BinOp"
                        ],
                        [
                            "np.expand_dims(id_mask, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_48": {
                "variable": {
                    "value": "id_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "id_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Lambda(compute_id_mask)(pids)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(tf.expand_dims(pids, axis=1), tf.transpose(tf.expand_dims(pids, axis=1)), axes=(1, 0))",
                            "Call"
                        ],
                        [
                            "tf.cast(id_mask, tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(tf.logical_not(tf.cast(tf.eye(max_n_peds), tf.bool)), id_mask)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(id_mask, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.cast(id_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "np.dot(np.expand_dims(pids, axis=1), np.expand_dims(pids, axis=1).T)",
                            "Call"
                        ],
                        [
                            "id_mask * ~np.eye(max_n_peds).astype(np.bool)",
                            "BinOp"
                        ],
                        [
                            "np.expand_dims(id_mask, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_72": {
                "variable": {
                    "value": "self_frame_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.map_fn(lambda c: tf.eye(grid_side ** 2, dtype=np.int32)[c], cell_index)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_75": {
                "input": {
                    "value": "is_neighbor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Lambda(lambda pos: tf.cast(tf.reduce_all(tf.concat([tl[self_index] <= pos, pos < br[self_index]], axis=1), axis=1), np.int32))(pos)",
                            "Call"
                        ],
                        [
                            "np.all(np.concatenate([tl[self_index] <= pos, pos < br[self_index]], axis=1), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_40": {
                "input": {
                    "value": "pids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frame[:, 0]",
                            "Subscript"
                        ],
                        [
                            "frame[:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_41": {
                "a": {
                    "value": "tf.expand_dims(pids, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_not_46": {
                "x": {
                    "value": "tf.cast(tf.eye(max_n_peds), tf.bool)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "map_fn_72": {
                "fn": {
                    "value": "lambda c: tf.eye(grid_side ** 2, dtype=np.int32)[c]",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "cell_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cell_xy[:, 0] + cell_xy[:, 1] * grid_side",
                            "BinOp"
                        ],
                        [
                            "cell_index * is_neighbor",
                            "BinOp"
                        ],
                        [
                            "cell_xy[:, 0] + cell_xy[:, 1] * grid_side",
                            "BinOp"
                        ],
                        [
                            "cell_index * is_neighbor",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_14": {
                "values": {
                    "value": "tf.map_fn(lambda frame: func(frame), x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_41": {
                "input": {
                    "value": "pids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frame[:, 0]",
                            "Subscript"
                        ],
                        [
                            "frame[:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_46": {
                "x": {
                    "value": "tf.eye(max_n_peds)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_fn_14": {
                "fn": {
                    "value": "lambda frame: func(frame)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "eye_46": {
                "num_rows": {
                    "value": "max_n_peds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frame.shape.as_list()[0]",
                            "Subscript"
                        ],
                        [
                            "frame.shape[0]",
                            "Subscript"
                        ],
                        [
                            "frame.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_61": {
                "x": {
                    "value": "tf.reduce_all(tf.concat([tl[self_index] <= pos, pos < br[self_index]], axis=1), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_65": {
                "x": {
                    "value": "tf.floor((pos - tl[self_index]) / bound * grid_side)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_all_61": {
                "input_tensor": {
                    "value": "tf.concat([tl[self_index] <= pos, pos < br[self_index]], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "floor_66": {
                "x": {
                    "value": "(pos - tl[self_index]) / bound * grid_side",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_73": {
                "num_rows": {
                    "value": "grid_side ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_62": {
                "values": {
                    "value": "[tl[self_index] <= pos, pos < br[self_index]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mycode/social/my_social_pooling.py": {
        "tensorflow": {
            "reshape_46": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, pxy_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_47": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "o_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, out_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "not_equal_52": {
                "variable": {
                    "value": "exist_rows",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "not_exist_pid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "boolean_mask_53": {
                "variable": {
                    "value": "y_exist",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y_batch, (-1, pxy_dim))",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "exist_rows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.not_equal(pids, not_exist_pid)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_54": {
                "variable": {
                    "value": "o_exist",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(o_batch, (-1, out_dim))",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "exist_rows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.not_equal(pids, not_exist_pid)",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_60": {
                "variable": {
                    "value": "log_prob_exist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "log_prob_exist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normal2d_log_pdf(o_exist, pos_exist)",
                            "Call"
                        ],
                        [
                            "tf.minimum(log_prob_exist, 0.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "mycode/social/tf_normal_sampler.py": {
        "tensorflow": {
            "cholesky_41": {
                "input": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Lambda(lambda inputs: K.stack(inputs, axis=0))([x_var, xy_cor, xy_cor, y_var])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda cov: K.permute_dimensions(cov, (1, 0)))(cov)",
                            "Call"
                        ],
                        [
                            "Reshape((2, 2))(cov)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda inputs: K.stack(inputs, axis=0))([x_var, xy_cor, xy_cor, y_var])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda cov: K.permute_dimensions(cov, (1, 0)))(cov)",
                            "Call"
                        ],
                        [
                            "Reshape((2, 2))(cov)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_64": {
                "tensor": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Lambda(lambda o: tf.reshape(o, (-1, 5)))(output_batch)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_73": {
                "tensor": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "expected_sample_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "original_output_shape[:-1].concatenate(sample.shape[-1]).as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "cholesky_113": {
                "input": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Lambda(lambda inputs: K.stack(inputs, axis=0))([x_var, xy_cor, xy_cor, y_var])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda cov: K.permute_dimensions(cov, (1, 0)))(cov)",
                            "Call"
                        ],
                        [
                            "Reshape((2, 2))(cov)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda inputs: K.stack(inputs, axis=0))([x_var, xy_cor, xy_cor, y_var])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda cov: K.permute_dimensions(cov, (1, 0)))(cov)",
                            "Call"
                        ],
                        [
                            "Reshape((2, 2))(cov)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mycode/utility.py": {
        "tensorflow": {
            "moments_30": {
                "variable": {
                    "value": "(gt_mean_x, gt_var_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "target_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[:, :, 0::3]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(y[:, :, :fps * 1, 0])",
                            "Call"
                        ],
                        [
                            "y[:, :, :, 0]",
                            "Subscript"
                        ],
                        [
                            "y[:, :, 0::3]",
                            "Subscript"
                        ],
                        [
                            "y[:, :, :, :, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "axes": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_31": {
                "variable": {
                    "value": "(gt_mean_y, gt_var_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "target_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[:, :, 1::3]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(y[:, :, :fps * 1, 1])",
                            "Call"
                        ],
                        [
                            "y[:, :, :, 1]",
                            "Subscript"
                        ],
                        [
                            "y[:, :, 1::3]",
                            "Subscript"
                        ],
                        [
                            "y[:, :, :, :, 1]",
                            "Subscript"
                        ]
                    ]
                },
                "axes": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_32": {
                "variable": {
                    "value": "(gt_mean_z, gt_var_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "target_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[:, :, 2::3]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(y[:, :, :fps * 1, 2])",
                            "Call"
                        ],
                        [
                            "y[:, :, :, 2]",
                            "Subscript"
                        ],
                        [
                            "y[:, :, 2::3]",
                            "Subscript"
                        ],
                        [
                            "y[:, :, :, :, 2]",
                            "Subscript"
                        ]
                    ]
                },
                "axes": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flatten_48": {
                "variable": {
                    "value": "target_x",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "y[:, :, :fps * 1, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "flatten_49": {
                "variable": {
                    "value": "target_y",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "y[:, :, :fps * 1, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "flatten_50": {
                "variable": {
                    "value": "target_z",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "y[:, :, :fps * 1, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "moments_51": {
                "variable": {
                    "value": "(pop_mean_x, pop_var_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "target_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[:, :, 0::3]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(y[:, :, :fps * 1, 0])",
                            "Call"
                        ],
                        [
                            "y[:, :, :, 0]",
                            "Subscript"
                        ],
                        [
                            "y[:, :, 0::3]",
                            "Subscript"
                        ],
                        [
                            "y[:, :, :, :, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_52": {
                "variable": {
                    "value": "(pop_mean_y, pop_var_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "target_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[:, :, 1::3]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(y[:, :, :fps * 1, 1])",
                            "Call"
                        ],
                        [
                            "y[:, :, :, 1]",
                            "Subscript"
                        ],
                        [
                            "y[:, :, 1::3]",
                            "Subscript"
                        ],
                        [
                            "y[:, :, :, :, 1]",
                            "Subscript"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_53": {
                "variable": {
                    "value": "(pop_mean_z, pop_var_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "target_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[:, :, 2::3]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(y[:, :, :fps * 1, 2])",
                            "Call"
                        ],
                        [
                            "y[:, :, :, 2]",
                            "Subscript"
                        ],
                        [
                            "y[:, :, 2::3]",
                            "Subscript"
                        ],
                        [
                            "y[:, :, :, :, 2]",
                            "Subscript"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_64": {
                "variable": {
                    "value": "(gt_mean_phi, gt_var_phi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "target_phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[:, 0, 0::3]",
                            "Subscript"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_65": {
                "variable": {
                    "value": "(gt_mean_theta, gt_var_theta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "target_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[:, 0, 1::3]",
                            "Subscript"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_233": {
                "variable": {
                    "value": "ux",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_234": {
                "variable": {
                    "value": "uy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_235": {
                "variable": {
                    "value": "uz",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_237": {
                "variable": {
                    "value": "varx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.slice(pred, [0, 3], [-1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_238": {
                "variable": {
                    "value": "vary",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.slice(pred, [0, 4], [-1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_239": {
                "variable": {
                    "value": "varz",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.slice(pred, [0, 5], [-1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_853": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "other_users_this_sec[:, 0, :, :] - target_user_last_sec[:, 0, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, num_others, 6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_854": {
                "variable": {
                    "value": "ave_distance",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(other_users_this_sec - target_user_last_sec).reshape(num_others, fps, 3)",
                            "Call"
                        ],
                        [
                            "np.sqrt(np.sum(distance ** 2, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(other_users_this_sec[:, 0, :, :] - target_user_last_sec[:, 0, :], [-1, num_others, 6])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "top_k_855": {
                "variable": {
                    "value": "(_, neighbor_ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "ave_distance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.mean(distance, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(distance, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "reshape_16": {
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, cfg.predict_len, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_18": {
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_237": {
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_238": {
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_239": {
                "input_": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_88": {
                "x": {
                    "value": "var[ii]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}