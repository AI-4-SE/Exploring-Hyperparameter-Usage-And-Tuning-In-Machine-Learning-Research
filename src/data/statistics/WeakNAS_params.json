{
    "WeakNAS.py": {
        "sklearn": {
            "RandomForestRegressor_297": {
                "variable": {
                    "value": "regr",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "args.random_forest_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MLPRegressor_299": {
                "variable": {
                    "value": "regr",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_layer_sizes": {
                    "value": "args.mlp_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "args.mlp_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_487": {
                "variable": {
                    "value": "bench_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.bench_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_132": {
                "seed": {
                    "value": "rand_seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "random.randint(0, 2 ** 32 - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_133": {
                "seed": {
                    "value": "rand_seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "random.randint(0, 2 ** 32 - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_all_134": {
                "seed": {
                    "value": "rand_seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "random.randint(0, 2 ** 32 - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_num_threads_353": {
                "int": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/data/parsers/parser_tfds.py": {
        "tensorflow": {
            "set_visible_devices_18": {
                "devices": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InputContext_132": {
                "variable": {
                    "value": "input_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_input_pipelines": {
                    "value": "self.dist_num_replicas * num_workers",
                    "type": "BinOp",
                    "possible_values": []
                },
                "input_pipeline_id": {
                    "value": "self.dist_rank * num_workers + worker_id",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_replicas_in_sync": {
                    "value": "self.dist_num_replicas",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "is_available_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/data/tf_preprocessing.py": {
        "tensorflow": {
            "equal_86": {
                "variable": {
                    "value": "match",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_87": {
                "variable": {
                    "value": "match",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "match",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.equal(a, b)",
                            "Call"
                        ],
                        [
                            "tf.cast(match, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_93": {
                "variable": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.0, 0.0, 1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "extract_jpeg_shape_102": {
                "variable": {
                    "value": "original_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cond_105": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "bad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_at_least_x_are_equal(original_shape, tf.shape(image), 3)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : _decode_and_center_crop(image_bytes, image_size)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.image.resize([image], [image_size, image_size], resize_method)[0]",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "extract_jpeg_shape_115": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_119": {
                "variable": {
                    "value": "padded_center_crop_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_size / (image_size + CROP_PADDING) * tf.cast(tf.minimum(image_height, image_width), tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_126": {
                "variable": {
                    "value": "crop_window",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[offset_height, offset_width, padded_center_crop_size, padded_center_crop_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "decode_and_crop_jpeg_128": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": []
                },
                "crop_window": {
                    "value": "crop_window",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.stack([offset_y, offset_x, target_height, target_width])",
                            "Call"
                        ],
                        [
                            "tf.stack([offset_height, offset_width, padded_center_crop_size, padded_center_crop_size])",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_flip_left_right_136": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "distorted_bounding_box_crop(image_bytes, bbox, min_object_covered=0.1, aspect_ratio_range=(3.0 / 4, 4.0 / 3.0), area_range=(0.08, 1.0), max_attempts=10, scope=None)",
                            "Call"
                        ],
                        [
                            "tf.cond(bad, lambda : _decode_and_center_crop(image_bytes, image_size), lambda : tf.image.resize([image], [image_size, image_size], resize_method)[0])",
                            "Call"
                        ],
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize([image], [image_size, image_size], resize_method)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_decode_and_random_crop(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "_flip(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ],
                        [
                            "_decode_and_center_crop(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_155": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "distorted_bounding_box_crop(image_bytes, bbox, min_object_covered=0.1, aspect_ratio_range=(3.0 / 4, 4.0 / 3.0), area_range=(0.08, 1.0), max_attempts=10, scope=None)",
                            "Call"
                        ],
                        [
                            "tf.cond(bad, lambda : _decode_and_center_crop(image_bytes, image_size), lambda : tf.image.resize([image], [image_size, image_size], resize_method)[0])",
                            "Call"
                        ],
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize([image], [image_size, image_size], resize_method)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_decode_and_random_crop(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "_flip(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ],
                        [
                            "_decode_and_center_crop(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_image_dtype_156": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "distorted_bounding_box_crop(image_bytes, bbox, min_object_covered=0.1, aspect_ratio_range=(3.0 / 4, 4.0 / 3.0), area_range=(0.08, 1.0), max_attempts=10, scope=None)",
                            "Call"
                        ],
                        [
                            "tf.cond(bad, lambda : _decode_and_center_crop(image_bytes, image_size), lambda : tf.image.resize([image], [image_size, image_size], resize_method)[0])",
                            "Call"
                        ],
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize([image], [image_size, image_size], resize_method)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_decode_and_random_crop(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "_flip(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ],
                        [
                            "_decode_and_center_crop(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bfloat16 if use_bfloat16 else tf.float32",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "reshape_175": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "distorted_bounding_box_crop(image_bytes, bbox, min_object_covered=0.1, aspect_ratio_range=(3.0 / 4, 4.0 / 3.0), area_range=(0.08, 1.0), max_attempts=10, scope=None)",
                            "Call"
                        ],
                        [
                            "tf.cond(bad, lambda : _decode_and_center_crop(image_bytes, image_size), lambda : tf.image.resize([image], [image_size, image_size], resize_method)[0])",
                            "Call"
                        ],
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize([image], [image_size, image_size], resize_method)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_decode_and_random_crop(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "_flip(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ],
                        [
                            "_decode_and_center_crop(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_image_dtype_176": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "distorted_bounding_box_crop(image_bytes, bbox, min_object_covered=0.1, aspect_ratio_range=(3.0 / 4, 4.0 / 3.0), area_range=(0.08, 1.0), max_attempts=10, scope=None)",
                            "Call"
                        ],
                        [
                            "tf.cond(bad, lambda : _decode_and_center_crop(image_bytes, image_size), lambda : tf.image.resize([image], [image_size, image_size], resize_method)[0])",
                            "Call"
                        ],
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize([image], [image_size, image_size], resize_method)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_decode_and_random_crop(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "_flip(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ],
                        [
                            "_decode_and_center_crop(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bfloat16 if use_bfloat16 else tf.float32",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "extract_jpeg_shape_64": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sample_distorted_bounding_box_65": {
                "variable": {
                    "value": "sample_distorted_bounding_box",
                    "type": "Variable",
                    "possible_values": []
                },
                "image_size": {
                    "value": "shape",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.extract_jpeg_shape(image_bytes)",
                            "Call"
                        ],
                        [
                            "tf.image.extract_jpeg_shape(image_bytes)",
                            "Call"
                        ]
                    ]
                },
                "bounding_boxes": {
                    "value": "bbox",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant([0.0, 0.0, 1.0, 1.0], dtype=tf.float32, shape=[1, 1, 4])",
                            "Call"
                        ]
                    ]
                },
                "min_object_covered": {
                    "value": "min_object_covered",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "aspect_ratio_range": {
                    "value": "aspect_ratio_range",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(0.75",
                            "MethodArgument"
                        ]
                    ]
                },
                "area_range": {
                    "value": "area_range",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(0.05",
                            "MethodArgument"
                        ]
                    ]
                },
                "max_attempts": {
                    "value": "max_attempts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_image_if_no_bounding_boxes": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unstack_76": {
                "variable": {
                    "value": "(offset_y, offset_x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "bbox_begin",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unstack_77": {
                "variable": {
                    "value": "(target_height, target_width, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "bbox_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_78": {
                "variable": {
                    "value": "crop_window",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[offset_y, offset_x, target_height, target_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "decode_and_crop_jpeg_79": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": []
                },
                "crop_window": {
                    "value": "crop_window",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.stack([offset_y, offset_x, target_height, target_width])",
                            "Call"
                        ],
                        [
                            "tf.stack([offset_height, offset_width, padded_center_crop_size, padded_center_crop_size])",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "greater_equal_88": {
                "x": {
                    "value": "tf.reduce_sum(match)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "name_scope_63": {
                "name": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_88": {
                "input_tensor": {
                    "value": "match",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.equal(a, b)",
                            "Call"
                        ],
                        [
                            "tf.cast(match, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_103": {
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "distorted_bounding_box_crop(image_bytes, bbox, min_object_covered=0.1, aspect_ratio_range=(3.0 / 4, 4.0 / 3.0), area_range=(0.08, 1.0), max_attempts=10, scope=None)",
                            "Call"
                        ],
                        [
                            "tf.cond(bad, lambda : _decode_and_center_crop(image_bytes, image_size), lambda : tf.image.resize([image], [image_size, image_size], resize_method)[0])",
                            "Call"
                        ],
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize([image], [image_size, image_size], resize_method)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_decode_and_random_crop(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "_flip(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ],
                        [
                            "_decode_and_center_crop(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "resize_129": {
                "images": {
                    "value": "[image]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[image_size, image_size]",
                    "type": "List",
                    "possible_values": []
                },
                "method": {
                    "value": "resize_method",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "tf.image.ResizeMethod.BICUBIC if interpolation == 'bicubic' else tf.image.ResizeMethod.BILINEAR",
                            "IfExp"
                        ],
                        [
                            "tf.image.ResizeMethod.BICUBIC if interpolation == 'bicubic' else tf.image.ResizeMethod.BILINEAR",
                            "IfExp"
                        ]
                    ]
                }
            },
            "placeholder_216": {
                "variable": {
                    "value": "self._image_bytes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_226": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_121": {
                "x": {
                    "value": "tf.minimum(image_height, image_width)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_215": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "resize_108": {
                "images": {
                    "value": "[image]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[image_size, image_size]",
                    "type": "List",
                    "possible_values": []
                },
                "method": {
                    "value": "resize_method",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "tf.image.ResizeMethod.BICUBIC if interpolation == 'bicubic' else tf.image.ResizeMethod.BILINEAR",
                            "IfExp"
                        ],
                        [
                            "tf.image.ResizeMethod.BICUBIC if interpolation == 'bicubic' else tf.image.ResizeMethod.BILINEAR",
                            "IfExp"
                        ]
                    ]
                }
            },
            "minimum_121": {
                "x": {
                    "value": "image_height",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "image_width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch-image-models/avg_checkpoints.py": {
        "torch": {
            "load_40": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "finfo_100": {
                "variable": {
                    "value": "float32_info",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_107": {
                "obj": {
                    "value": "final_state_dict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "args.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "_use_new_zipfile_serialization": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_109": {
                "obj": {
                    "value": "final_state_dict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "args.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/benchmark.py": {
        "torch": {
            "randn_183": {
                "variable": {
                    "value": "self.example_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.batch_size,) + self.input_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.data_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "synchronize_118": {
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "script_167": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "obj": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_251": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_253": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_262": {
                "*size": {
                    "value": "(batch_size,) + self.target_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_377": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/clean_checkpoint.py": {
        "torch": {
            "load_40": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_61": {
                "obj": {
                    "value": "new_state_dict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "OrderedDict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "_TEMP_NAME",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'./_checkpoint.pth'",
                            "Constant"
                        ]
                    ]
                },
                "_use_new_zipfile_serialization": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_63": {
                "obj": {
                    "value": "new_state_dict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "OrderedDict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "_TEMP_NAME",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'./_checkpoint.pth'",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch-image-models/convert/convert_from_mxnet.py": {
        "torch": {
            "from_numpy_45": {
                "variable": {
                    "value": "torch_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mv.data().asnumpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_61": {
                "variable": {
                    "value": "torch_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mv.data().asnumpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_66": {
                "obj": {
                    "value": "torch_net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "torch_filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'./%s.pth' % torch_name",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch-image-models/inference.py": {
        "torch": {
            "DataParallel_81": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_model(args.model, num_classes=args.num_classes, in_chans=3, pretrained=args.pretrained, checkpoint_path=args.checkpoint)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=list(range(args.num_gpu))).cuda()",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "list(range(args.num_gpu))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/sotabench.py": {
        "torch": {
            "randn_512": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size,) + tuple(data_config['input_size'])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_cache_536": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_510": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/tests/test_layers.py": {
        "torch": {
            "Linear_13": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "isclose_41": {
                "input": {
                    "value": "out_jit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_run(x, act_type)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "out_me",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_run(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "isclose_46": {
                "input": {
                    "value": "out_basic",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_run(x, act_type)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "out_jit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_run(x, act_type)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_25": {
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/tests/test_models.py": {
        "torch": {
            "randn_50": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, *input_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_76": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, *input_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "script_176": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_model(model_name, pretrained=False)",
                            "Call"
                        ],
                        [
                            "create_model(model_name, pretrained=False, num_classes=42)",
                            "Call"
                        ],
                        [
                            "create_model(model_name, pretrained=False)",
                            "Call"
                        ],
                        [
                            "create_model(model_name, pretrained=False)",
                            "Call"
                        ],
                        [
                            "torch.jit.script(model)",
                            "Call"
                        ],
                        [
                            "create_model(model_name, pretrained=False, features_only=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_106": {
                "variable": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, *input_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "isnan_54": {
                "input": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "model.forward_features(input_tensor)",
                            "Call"
                        ],
                        [
                            "model.forward(input_tensor)",
                            "Call"
                        ],
                        [
                            "model.forward(input_tensor)",
                            "Call"
                        ],
                        [
                            "model(torch.randn((batch_size, *input_size)))",
                            "Call"
                        ],
                        [
                            "model(torch.randn((batch_size, *input_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "any_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_85": {
                "input": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "model.forward_features(input_tensor)",
                            "Call"
                        ],
                        [
                            "model.forward(input_tensor)",
                            "Call"
                        ],
                        [
                            "model.forward(input_tensor)",
                            "Call"
                        ],
                        [
                            "model(torch.randn((batch_size, *input_size)))",
                            "Call"
                        ],
                        [
                            "model(torch.randn((batch_size, *input_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "any_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_177": {
                "*size": {
                    "value": "(batch_size, *input_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "isnan_180": {
                "input": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "model.forward_features(input_tensor)",
                            "Call"
                        ],
                        [
                            "model.forward(input_tensor)",
                            "Call"
                        ],
                        [
                            "model.forward(input_tensor)",
                            "Call"
                        ],
                        [
                            "model(torch.randn((batch_size, *input_size)))",
                            "Call"
                        ],
                        [
                            "model(torch.randn((batch_size, *input_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "any_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_208": {
                "*size": {
                    "value": "(batch_size, *input_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "isnan_213": {
                "input": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "any_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/data/dataset.py": {
        "torch": {
            "tensor_52": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/data/distributed_sampler.py": {
        "torch": {
            "is_available_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/data/loader.py": {
        "torch": {}
    },
    "pytorch-image-models/timm/data/mixup.py": {
        "torch": {
            "full_19": {
                "size": {
                    "value": "(x.size()[0], num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "off_value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "smoothing / num_classes",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_305": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, *batch[0][0].shape)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_312": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[b[1] for b in batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_174": {
                "data": {
                    "value": "lam_batch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.concatenate((lam_batch, lam_batch[::-1]))",
                            "Call"
                        ],
                        [
                            "np.concatenate((lam_batch, np.ones(num_elem)))",
                            "Call"
                        ],
                        [
                            "np.concatenate((lam_batch, lam_batch[::-1]))",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_174": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_194": {
                "data": {
                    "value": "lam_batch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.concatenate((lam_batch, lam_batch[::-1]))",
                            "Call"
                        ],
                        [
                            "np.concatenate((lam_batch, np.ones(num_elem)))",
                            "Call"
                        ],
                        [
                            "np.concatenate((lam_batch, lam_batch[::-1]))",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_194": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_250": {
                "data": {
                    "value": "lam_batch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.concatenate((lam_batch, lam_batch[::-1]))",
                            "Call"
                        ],
                        [
                            "np.concatenate((lam_batch, np.ones(num_elem)))",
                            "Call"
                        ],
                        [
                            "np.concatenate((lam_batch, lam_batch[::-1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_250": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_278": {
                "data": {
                    "value": "lam_batch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.concatenate((lam_batch, lam_batch[::-1]))",
                            "Call"
                        ],
                        [
                            "np.concatenate((lam_batch, np.ones(num_elem)))",
                            "Call"
                        ],
                        [
                            "np.concatenate((lam_batch, lam_batch[::-1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_278": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_247": {
                "ndarray": {
                    "value": "mixed.astype(np.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_275": {
                "ndarray": {
                    "value": "mixed_i.astype(np.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_276": {
                "ndarray": {
                    "value": "mixed_j.astype(np.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_296": {
                "ndarray": {
                    "value": "mixed.astype(np.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/data/random_erasing.py": {
        "torch": {
            "empty_18": {
                "*size": {
                    "value": "patch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "empty_20": {
                "*size": {
                    "value": "(patch_size[0], 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_22": {
                "*size": {
                    "value": "(patch_size[0], 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch-image-models/timm/data/transforms.py": {
        "torch": {
            "from_numpy_30": {
                "ndarray": {
                    "value": "np_img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(pil_img, dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(np_img, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.rollaxis(np_img, 2)",
                            "Call"
                        ],
                        [
                            "np.array(pil_img, dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(np_img, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.rollaxis(np_img, 2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch-image-models/timm/data/transforms_factory.py": {
        "torch": {
            "tensor_38": {
                "data": {
                    "value": "mean",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "IMAGENET_DEFAULT_MEAN",
                            "MethodArgument"
                        ],
                        [
                            "IMAGENET_DEFAULT_MEAN",
                            "MethodArgument"
                        ],
                        [
                            "IMAGENET_DEFAULT_MEAN",
                            "MethodArgument"
                        ],
                        [
                            "IMAGENET_DEFAULT_MEAN",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_39": {
                "data": {
                    "value": "std",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "IMAGENET_DEFAULT_STD",
                            "MethodArgument"
                        ],
                        [
                            "IMAGENET_DEFAULT_STD",
                            "MethodArgument"
                        ],
                        [
                            "IMAGENET_DEFAULT_STD",
                            "MethodArgument"
                        ],
                        [
                            "IMAGENET_DEFAULT_STD",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_117": {
                "data": {
                    "value": "mean",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "IMAGENET_DEFAULT_MEAN",
                            "MethodArgument"
                        ],
                        [
                            "IMAGENET_DEFAULT_MEAN",
                            "MethodArgument"
                        ],
                        [
                            "IMAGENET_DEFAULT_MEAN",
                            "MethodArgument"
                        ],
                        [
                            "IMAGENET_DEFAULT_MEAN",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_118": {
                "data": {
                    "value": "std",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "IMAGENET_DEFAULT_STD",
                            "MethodArgument"
                        ],
                        [
                            "IMAGENET_DEFAULT_STD",
                            "MethodArgument"
                        ],
                        [
                            "IMAGENET_DEFAULT_STD",
                            "MethodArgument"
                        ],
                        [
                            "IMAGENET_DEFAULT_STD",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_160": {
                "data": {
                    "value": "mean",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "IMAGENET_DEFAULT_MEAN",
                            "MethodArgument"
                        ],
                        [
                            "IMAGENET_DEFAULT_MEAN",
                            "MethodArgument"
                        ],
                        [
                            "IMAGENET_DEFAULT_MEAN",
                            "MethodArgument"
                        ],
                        [
                            "IMAGENET_DEFAULT_MEAN",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_161": {
                "data": {
                    "value": "std",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "IMAGENET_DEFAULT_STD",
                            "MethodArgument"
                        ],
                        [
                            "IMAGENET_DEFAULT_STD",
                            "MethodArgument"
                        ],
                        [
                            "IMAGENET_DEFAULT_STD",
                            "MethodArgument"
                        ],
                        [
                            "IMAGENET_DEFAULT_STD",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch-image-models/timm/loss/asymmetric_loss.py": {
        "torch": {
            "sigmoid_24": {
                "variable": {
                    "value": "x_sigmoid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LogSoftmax_58": {
                "variable": {
                    "value": "self.logsoftmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_74": {
                "variable": {
                    "value": "self.targets_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_79": {
                "variable": {
                    "value": "xs_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.logsoftmax(inputs)",
                            "Call"
                        ],
                        [
                            "log_preds * asymmetric_w",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_83": {
                "variable": {
                    "value": "asymmetric_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - xs_pos - xs_neg",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.gamma_pos * targets + self.gamma_neg * anti_targets",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_45": {
                "variable": {
                    "value": "one_sided_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - pt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "one_sided_gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.gamma_pos * y + self.gamma_neg * (1 - y)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_33": {
                "input": {
                    "value": "xs_pos.clamp(min=self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_34": {
                "input": {
                    "value": "xs_neg.clamp(min=self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_grad_enabled_40": {
                "mode": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_grad_enabled_47": {
                "mode": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/loss/cross_entropy.py": {
        "torch": {
            "log_softmax_21": {
                "variable": {
                    "value": "logprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_35": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-target * F.log_softmax(x, dim=-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_35": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "kl_div_48": {
                "input": {
                    "value": "F.log_softmax(out_s / self.T, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "F.softmax(out_t / self.T, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_48": {
                "input": {
                    "value": "out_s / self.T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_49": {
                "input": {
                    "value": "out_t / self.T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/loss/jsd.py": {
        "torch": {
            "split_29": {
                "variable": {
                    "value": "logits_split",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "split_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output.shape[0] // self.num_splits",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_36": {
                "variable": {
                    "value": "logp_mixture",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(probs).mean(axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-07",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_36": {
                "variable": {
                    "value": "logp_mixture",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_24": {
                "variable": {
                    "value": "self.cross_entropy_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_33": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_36": {
                "tensors": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[F.softmax(logits, dim=1) for logits in logits_split]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "mean_36": {
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "kl_div_37": {
                "input": {
                    "value": "logp_mixture",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.clamp(torch.stack(probs).mean(axis=0), 1e-07, 1).log()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "p_split",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/byoanet.py": {
        "torch": {
            "Identity_273": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_282": {
                "variable": {
                    "value": "self.conv2_kxk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_366": {
                "variable": {
                    "value": "self.final_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_286": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_288": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/byobnet.py": {
        "torch": {
            "Identity_258": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_289": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_331": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_382": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_429": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_656": {
                "*args": {
                    "value": "*stages",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_697": {
                "variable": {
                    "value": "self.final_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_294": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_295": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_337": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_339": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_340": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_388": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_389": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_390": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_434": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_436": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_437": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_474": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_475": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linspace_611": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "sum(depths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_611": {
                "tensor": {
                    "value": "depths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[sum([bc.d for bc in stage_bcs]) for stage_bcs in block_cfgs]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Sequential_652": {
                "*args": {
                    "value": "*blocks",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_557": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/cait.py": {
        "torch": {
            "Linear_83": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_86": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_87": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_88": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_124": {
                "variable": {
                    "value": "self.gamma_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_values * torch.ones(dim)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_125": {
                "variable": {
                    "value": "self.gamma_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_values * torch.ones(dim)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_cls, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_146": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_147": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_149": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_151": {
                "variable": {
                    "value": "self.proj_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_heads",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "12",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_heads",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "12",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_152": {
                "variable": {
                    "value": "self.proj_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_heads",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "12",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_heads",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "12",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_154": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_191": {
                "variable": {
                    "value": "self.gamma_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_values * torch.ones(dim)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_192": {
                "variable": {
                    "value": "self.gamma_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_values * torch.ones(dim)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_231": {
                "variable": {
                    "value": "self.cls_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_232": {
                "variable": {
                    "value": "self.pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_233": {
                "variable": {
                    "value": "self.pos_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_236": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[block_layers(dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[i], norm_layer=norm_layer, act_layer=act_layer, attn_block=attn_block, mlp_block=mlp_block, init_values=init_scale) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_243": {
                "variable": {
                    "value": "self.blocks_token_only",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[block_layers_token(dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio_clstk, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=0.0, attn_drop=0.0, drop_path=0.0, norm_layer=norm_layer, act_layer=act_layer, attn_block=attn_block_token_only, mlp_block=mlp_block_token_only, init_values=init_scale) for i in range(depth_token_only)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_288": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_tokens, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Identity_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_231": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_232": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.patch_embed.num_patches",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_254": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs.pop('num_classes', default_num_classes)",
                            "Call"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_254": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_124": {
                "*size": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_125": {
                "*size": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_191": {
                "*size": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_192": {
                "*size": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/cell_operations.py": {
        "torch": {
            "Sequential_43": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "track_running_stats": {
                    "value": "track_running_stats",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_165": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "track_running_stats": {
                    "value": "track_running_stats",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_189": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "track_running_stats": {
                    "value": "track_running_stats",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_225": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "track_running_stats": {
                    "value": "track_running_stats",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_252": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_264": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "track_running_stats": {
                    "value": "track_running_stats",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_287": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_288": {
                "variable": {
                    "value": "self.local_conv_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_293": {
                "variable": {
                    "value": "self.W_K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_294": {
                "variable": {
                    "value": "self.W_Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_311": {
                "variable": {
                    "value": "part_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "local_feat_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_315": {
                "variable": {
                    "value": "weight_att",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "part_K",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.W_K(part_feature)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "part_Q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.W_Q(part_feature).transpose(1, 2).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_316": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_att",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.bmm(part_K, part_Q)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_317": {
                "variable": {
                    "value": "aggreateF",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.softmax(weight_att, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "part_feature",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat(local_feat_list, dim=2).view(batch, -1, self.part)",
                            "Call"
                        ],
                        [
                            "part_feature.transpose(1, 2).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_317": {
                "variable": {
                    "value": "aggreateF",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_323": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(features, dim=2).expand(batch, self.hidden, H, W)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_324": {
                "variable": {
                    "value": "final_fea",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_342": {
                "variable": {
                    "value": "self.ops1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(nn.ReLU(inplace=False), nn.Conv2d(C, C, (1, 3), stride=(1, 2), padding=(0, 1), groups=8, bias=False), nn.Conv2d(C, C, (3, 1), stride=(2, 1), padding=(1, 0), groups=8, bias=False), nn.BatchNorm2d(C, affine=True), nn.ReLU(inplace=False), nn.Conv2d(C, C, 1, stride=1, padding=0, bias=False), nn.BatchNorm2d(C, affine=True)), nn.Sequential(nn.ReLU(inplace=False), nn.Conv2d(C, C, (1, 3), stride=(1, 2), padding=(0, 1), groups=8, bias=False), nn.Conv2d(C, C, (3, 1), stride=(2, 1), padding=(1, 0), groups=8, bias=False), nn.BatchNorm2d(C, affine=True), nn.ReLU(inplace=False), nn.Conv2d(C, C, 1, stride=1, padding=0, bias=False), nn.BatchNorm2d(C, affine=True))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_360": {
                "variable": {
                    "value": "self.ops2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(nn.MaxPool2d(3, stride=1, padding=1), nn.BatchNorm2d(C, affine=True)), nn.Sequential(nn.MaxPool2d(3, stride=2, padding=1), nn.BatchNorm2d(C, affine=True))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(kernel_size=2, stride=2, padding=0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_142": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_160": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_256": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConstantPad2d_259": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_270": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.convs[0](x), self.convs[1](y[:, :, 1:, 1:])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_382": {
                "tensors": {
                    "value": "[X0, X1, X2, X3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_46": {
                "num_features": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "track_running_stats": {
                    "value": "track_running_stats",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_58": {
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "num_features": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "track_running_stats": {
                    "value": "track_running_stats",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_75": {
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_78": {
                "num_features": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "track_running_stats": {
                    "value": "track_running_stats",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MaxPool2d_143": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_162": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_261": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_107": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_108": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_291": {
                "*args": {
                    "value": "nn.ReLU()",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_343": {
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_351": {
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_361": {
                "*args": {
                    "value": "nn.MaxPool2d(3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_364": {
                "*args": {
                    "value": "nn.MaxPool2d(3, stride=2, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_258": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_outs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_291": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_291": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_291": {
                "num_features": {
                    "value": "self.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_344": {
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_345": {
                "in_channels": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "groups": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_346": {
                "in_channels": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "groups": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_347": {
                "num_features": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_348": {
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_349": {
                "in_channels": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_350": {
                "num_features": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_352": {
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_353": {
                "in_channels": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "groups": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_354": {
                "in_channels": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "groups": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_355": {
                "num_features": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_356": {
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_357": {
                "in_channels": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_358": {
                "num_features": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_362": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_363": {
                "num_features": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_365": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_366": {
                "num_features": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/coat.py": {
        "torch": {
            "ModuleList_82": {
                "variable": {
                    "value": "self.conv_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_109": {
                "variable": {
                    "value": "v_img_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "v_img",
                    "type": "Name",
                    "possible_values": [
                        [
                            "v[:, :, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "v_img.transpose(-1, -2).reshape(B, h * Ch, H, W)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.channel_splits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "conv_v_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "conv_v_img_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_117": {
                "variable": {
                    "value": "EV_hat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "EV_hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "q_img * conv_v_img",
                            "BinOp"
                        ],
                        [
                            "F.pad(EV_hat, (0, 0, 1, 0, 0, 0))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 1, 0, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_129": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_130": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_131": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_132": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_169": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "k // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_185": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_token, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_283": {
                "variable": {
                    "value": "img_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_tokens",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x[:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "img_tokens.transpose(1, 2).reshape(B, C, H, W)",
                            "Call"
                        ],
                        [
                            "F.interpolate(img_tokens, scale_factor=scale_factor, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "img_tokens.reshape(B, C, -1).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_token, img_tokens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_359": {
                "variable": {
                    "value": "self.cls_token1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, embed_dims[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_360": {
                "variable": {
                    "value": "self.cls_token2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, embed_dims[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_361": {
                "variable": {
                    "value": "self.cls_token3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, embed_dims[2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_362": {
                "variable": {
                    "value": "self.cls_token4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, embed_dims[3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_381": {
                "variable": {
                    "value": "self.serial_blocks1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SerialBlock(dim=embed_dims[0], num_heads=num_heads, mlp_ratio=mlp_ratios[0], qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr, norm_layer=norm_layer, shared_cpe=self.cpe1, shared_crpe=self.crpe1) for _ in range(serial_depths[0])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_391": {
                "variable": {
                    "value": "self.serial_blocks2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SerialBlock(dim=embed_dims[1], num_heads=num_heads, mlp_ratio=mlp_ratios[1], qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr, norm_layer=norm_layer, shared_cpe=self.cpe2, shared_crpe=self.crpe2) for _ in range(serial_depths[1])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_401": {
                "variable": {
                    "value": "self.serial_blocks3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SerialBlock(dim=embed_dims[2], num_heads=num_heads, mlp_ratio=mlp_ratios[2], qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr, norm_layer=norm_layer, shared_cpe=self.cpe3, shared_crpe=self.crpe3) for _ in range(serial_depths[2])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_411": {
                "variable": {
                    "value": "self.serial_blocks4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SerialBlock(dim=embed_dims[3], num_heads=num_heads, mlp_ratio=mlp_ratios[3], qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr, norm_layer=norm_layer, shared_cpe=self.cpe4, shared_crpe=self.crpe4) for _ in range(serial_depths[3])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_481": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_tokens, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "variable": {
                    "value": "cur_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "cur_head_split * Ch",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cur_head_split * Ch",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(cur_window, cur_window)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(padding_size, padding_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(dilation, dilation)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "groups": {
                    "value": "cur_head_split * Ch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_423": {
                "variable": {
                    "value": "self.parallel_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ParallelBlock(dims=embed_dims, num_heads=num_heads, mlp_ratios=mlp_ratios, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr, norm_layer=norm_layer, shared_cpes=[self.cpe1, self.cpe2, self.cpe3, self.cpe4], shared_crpes=[self.crpe1, self.crpe2, self.crpe3, self.crpe4]) for _ in range(parallel_depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_578": {
                "variable": {
                    "value": "merged_cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x2_cls, x3_cls, x4_cls)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Identity_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_359": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_360": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_361": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dims[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_362": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dims[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv1d_445": {
                "variable": {
                    "value": "self.aggregate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_446": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dims[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_449": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dims[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_476": {
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_476": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/cspnet.py": {
        "torch": {
            "Sequential_134": {
                "variable": {
                    "value": "stem",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_252": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_290": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_365": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_271": {
                "tensors": {
                    "value": "[xs, xb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_148": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_151": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_313": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "sum(cfg['depth'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_313": {
                "tensor": {
                    "value": "cfg['depth']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/densenet.py": {
        "torch": {
            "cat_62": {
                "variable": {
                    "value": "concated_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_109": {
                "variable": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv2(self.norm2(bottleneck_output))",
                            "Call"
                        ],
                        [
                            "F.dropout(new_features, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "layer(features)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_135": {
                "tensors": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[init_features]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_177": {
                "variable": {
                    "value": "stem_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_179": {
                "variable": {
                    "value": "stem_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.MaxPool2d(kernel_size=3, stride=1, padding=1), aa_layer(channels=num_init_features, stride=2)]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_187": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv0', nn.Conv2d(in_chans, stem_chs_1, 3, stride=2, padding=1, bias=False)), ('norm0', norm_layer(stem_chs_1)), ('conv1', nn.Conv2d(stem_chs_1, stem_chs_2, 3, stride=1, padding=1, bias=False)), ('norm1', norm_layer(stem_chs_2)), ('conv2', nn.Conv2d(stem_chs_2, num_init_features, 3, stride=1, padding=1, bias=False)), ('norm2', norm_layer(num_init_features)), ('pool0', stem_pool)])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_197": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv0', nn.Conv2d(in_chans, num_init_features, kernel_size=7, stride=2, padding=3, bias=False)), ('norm0', norm_layer(num_init_features)), ('pool0', stem_pool)])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_142": {
                "in_channels": {
                    "value": "num_input_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_output_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "num_input_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "bn_size * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "bn_size * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "growth_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_147": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_180": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_188": {
                "in_channels": {
                    "value": "in_chans",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "stem_chs_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3 * (growth_rate // 4)",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_190": {
                "in_channels": {
                    "value": "stem_chs_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3 * (growth_rate // 4)",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "stem_chs_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_init_features if 'narrow' in stem_type else 6 * (growth_rate // 4)",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_192": {
                "in_channels": {
                    "value": "stem_chs_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_init_features if 'narrow' in stem_type else 6 * (growth_rate // 4)",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_init_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "growth_rate * 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_198": {
                "in_channels": {
                    "value": "in_chans",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_init_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "growth_rate * 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/dla.py": {
        "torch": {
            "Conv2d_56": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "planes",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_58": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_62": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "planes",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_planes",
                    "type": "Call",
                    "possible_values": [
                        [
                            "int(math.floor(outplanes * (base_width / 64)) * cardinality)",
                            "Call"
                        ],
                        [
                            "mid_planes // self.expansion",
                            "BinOp"
                        ],
                        [
                            "int(math.floor(outplanes * (base_width / 64)) * cardinality)",
                            "Call"
                        ],
                        [
                            "mid_planes // self.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_93": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mid_planes",
                    "type": "Call",
                    "possible_values": [
                        [
                            "int(math.floor(outplanes * (base_width / 64)) * cardinality)",
                            "Call"
                        ],
                        [
                            "mid_planes // self.expansion",
                            "BinOp"
                        ],
                        [
                            "int(math.floor(outplanes * (base_width / 64)) * cardinality)",
                            "Call"
                        ],
                        [
                            "mid_planes // self.expansion",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_94": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_planes",
                    "type": "Call",
                    "possible_values": [
                        [
                            "int(math.floor(outplanes * (base_width / 64)) * cardinality)",
                            "Call"
                        ],
                        [
                            "mid_planes // self.expansion",
                            "BinOp"
                        ],
                        [
                            "int(math.floor(outplanes * (base_width / 64)) * cardinality)",
                            "Call"
                        ],
                        [
                            "mid_planes // self.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_planes",
                    "type": "Call",
                    "possible_values": [
                        [
                            "int(math.floor(outplanes * (base_width / 64)) * cardinality)",
                            "Call"
                        ],
                        [
                            "mid_planes // self.expansion",
                            "BinOp"
                        ],
                        [
                            "int(math.floor(outplanes * (base_width / 64)) * cardinality)",
                            "Call"
                        ],
                        [
                            "mid_planes // self.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "cardinality",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_97": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mid_planes",
                    "type": "Call",
                    "possible_values": [
                        [
                            "int(math.floor(outplanes * (base_width / 64)) * cardinality)",
                            "Call"
                        ],
                        [
                            "mid_planes // self.expansion",
                            "BinOp"
                        ],
                        [
                            "int(math.floor(outplanes * (base_width / 64)) * cardinality)",
                            "Call"
                        ],
                        [
                            "mid_planes // self.expansion",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_98": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_planes",
                    "type": "Call",
                    "possible_values": [
                        [
                            "int(math.floor(outplanes * (base_width / 64)) * cardinality)",
                            "Call"
                        ],
                        [
                            "mid_planes // self.expansion",
                            "BinOp"
                        ],
                        [
                            "int(math.floor(outplanes * (base_width / 64)) * cardinality)",
                            "Call"
                        ],
                        [
                            "mid_planes // self.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_99": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outplanes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_100": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_137": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "planes",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_planes * scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_138": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mid_planes * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_148": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "convs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_149": {
                "variable": {
                    "value": "self.bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "bns",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv2d_153": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_planes * scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_154": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outplanes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_155": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_165": {
                "variable": {
                    "value": "spx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "torch.cat(spo, 1)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.width",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_175": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "spo",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_189": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_191": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_192": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Identity_216": {
                "variable": {
                    "value": "self.project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_268": {
                "variable": {
                    "value": "self.base_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_chans, channels[0], kernel_size=7, stride=1, padding=3, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_151": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_308": {
                "*args": {
                    "value": "*modules",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_332": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv(torch.cat(x, 1))",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "x + children[0]",
                            "BinOp"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.root(x2, x1, *children)",
                            "Call"
                        ],
                        [
                            "self.tree2(x1, children=children)",
                            "Call"
                        ],
                        [
                            "self.base_layer(x)",
                            "Call"
                        ],
                        [
                            "self.level0(x)",
                            "Call"
                        ],
                        [
                            "self.level1(x)",
                            "Call"
                        ],
                        [
                            "self.level2(x)",
                            "Call"
                        ],
                        [
                            "self.level3(x)",
                            "Call"
                        ],
                        [
                            "self.level4(x)",
                            "Call"
                        ],
                        [
                            "self.level5(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_197": {
                "tensors": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv(torch.cat(x, 1))",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "x + children[0]",
                            "BinOp"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.root(x2, x1, *children)",
                            "Call"
                        ],
                        [
                            "self.tree2(x1, children=children)",
                            "Call"
                        ],
                        [
                            "self.base_layer(x)",
                            "Call"
                        ],
                        [
                            "self.level0(x)",
                            "Call"
                        ],
                        [
                            "self.level1(x)",
                            "Call"
                        ],
                        [
                            "self.level2(x)",
                            "Call"
                        ],
                        [
                            "self.level3(x)",
                            "Call"
                        ],
                        [
                            "self.level4(x)",
                            "Call"
                        ],
                        [
                            "self.level5(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_215": {
                "kernel_size": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_215": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_225": {
                "variable": {
                    "value": "self.project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size=1, stride=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_269": {
                "in_channels": {
                    "value": "in_chans",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_270": {
                "num_features": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_271": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_144": {
                "in_channels": {
                    "value": "mid_planes",
                    "type": "Call",
                    "possible_values": [
                        [
                            "int(math.floor(outplanes * (base_width / 64)) * cardinality)",
                            "Call"
                        ],
                        [
                            "mid_planes // self.expansion",
                            "BinOp"
                        ],
                        [
                            "int(math.floor(outplanes * (base_width / 64)) * cardinality)",
                            "Call"
                        ],
                        [
                            "mid_planes // self.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_planes",
                    "type": "Call",
                    "possible_values": [
                        [
                            "int(math.floor(outplanes * (base_width / 64)) * cardinality)",
                            "Call"
                        ],
                        [
                            "mid_planes // self.expansion",
                            "BinOp"
                        ],
                        [
                            "int(math.floor(outplanes * (base_width / 64)) * cardinality)",
                            "Call"
                        ],
                        [
                            "mid_planes // self.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "cardinality",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_147": {
                "num_features": {
                    "value": "mid_planes",
                    "type": "Call",
                    "possible_values": [
                        [
                            "int(math.floor(outplanes * (base_width / 64)) * cardinality)",
                            "Call"
                        ],
                        [
                            "mid_planes // self.expansion",
                            "BinOp"
                        ],
                        [
                            "int(math.floor(outplanes * (base_width / 64)) * cardinality)",
                            "Call"
                        ],
                        [
                            "mid_planes // self.expansion",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_226": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_227": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_303": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "planes",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride if i == 0 else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_305": {
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_306": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/dpn.py": {
        "torch": {
            "cat_164": {
                "variable": {
                    "value": "dense",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_s2, out2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_185": {
                "variable": {
                    "value": "blocks[conv1_pool]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_235": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "blocks",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_69": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_136": {
                "variable": {
                    "value": "x_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_256": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/efficientnet.py": {
        "torch": {
            "Sequential_430": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*builder(stem_size, block_args)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_504": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*builder(stem_size, block_args)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_448": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_472": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_stem(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.blocks(x)",
                            "Call"
                        ],
                        [
                            "self.conv_head(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_stem(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "b(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_447": {
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/efficientnet_blocks.py": {
        "torch": {
            "Conv2d_38": {
                "variable": {
                    "value": "self.conv_reduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "reduced_chs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "block_in_chs or in_chs if reduce_from_block else in_chs",
                            "IfExp"
                        ],
                        [
                            "make_divisible(reduced_chs * se_ratio, divisor)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.conv_expand",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "reduced_chs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "block_in_chs or in_chs if reduce_from_block else in_chs",
                            "IfExp"
                        ],
                        [
                            "make_divisible(reduced_chs * se_ratio, divisor)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_chs",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_230": {
                "variable": {
                    "value": "self.routing_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_chs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_experts",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_236": {
                "variable": {
                    "value": "pooled_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "drop_path(x, self.drop_path_rate, self.training)",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ],
                        [
                            "self.conv_dw(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.se(x)",
                            "Call"
                        ],
                        [
                            "self.conv_pw(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "drop_path(x, self.drop_path_rate, self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_pw(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.conv_dw(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "self.se(x)",
                            "Call"
                        ],
                        [
                            "self.conv_pwl(x)",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "drop_path(x, self.drop_path_rate, self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_pw(x, routing_weights)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.conv_dw(x, routing_weights)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "self.se(x)",
                            "Call"
                        ],
                        [
                            "self.conv_pwl(x, routing_weights)",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "drop_path(x, self.drop_path_rate, self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_exp(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.se(x)",
                            "Call"
                        ],
                        [
                            "self.conv_pwl(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "drop_path(x, self.drop_path_rate, self.training)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flatten_236": {
                "variable": {
                    "value": "pooled_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_237": {
                "variable": {
                    "value": "routing_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.routing_fn(pooled_inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/efficientnet_builder.py": {
        "torch": {
            "Sequential_399": {
                "*args": {
                    "value": "*blocks",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/features.py": {
        "torch": {
            "cat_209": {
                "tensors": {
                    "value": "x",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args[-1]",
                            "Subscript"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/ghostnet.py": {
        "torch": {
            "Sequential_53": {
                "variable": {
                    "value": "self.primary_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inp, init_channels, kernel_size, stride, kernel_size // 2, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.cheap_operation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(init_channels, new_channels, dw_size, 1, dw_size // 2, groups=init_channels, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_147": {
                "variable": {
                    "value": "self.conv_stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chans",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "stem_chs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "make_divisible(16 * width, 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_149": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "stem_chs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "make_divisible(16 * width, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_150": {
                "variable": {
                    "value": "self.act1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_154": {
                "variable": {
                    "value": "stages",
                    "type": "Variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_177": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*stages",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_182": {
                "variable": {
                    "value": "self.conv_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "prev_chs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "stem_chs",
                            "Name"
                        ],
                        [
                            "out_chs",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_chs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "make_divisible(exp_size * width, 4)",
                            "Call"
                        ],
                        [
                            "make_divisible(c * width, 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_183": {
                "variable": {
                    "value": "self.act2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "variable": {
                    "value": "self.conv_dw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_chs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "make_divisible(exp_size * width, 4)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_chs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "make_divisible(exp_size * width, 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "dw_kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(dw_kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "mid_chs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "make_divisible(exp_size * width, 4)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_89": {
                "variable": {
                    "value": "self.bn_dw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mid_chs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "make_divisible(exp_size * width, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_chs, in_chs, dw_kernel_size, stride=stride, padding=(dw_kernel_size - 1) // 2, groups=in_chs, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_210": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.ghost1(x)",
                            "Call"
                        ],
                        [
                            "self.conv_dw(x)",
                            "Call"
                        ],
                        [
                            "self.bn_dw(x)",
                            "Call"
                        ],
                        [
                            "self.se(x)",
                            "Call"
                        ],
                        [
                            "self.ghost2(x)",
                            "Call"
                        ],
                        [
                            "x + self.shortcut(shortcut)",
                            "BinOp"
                        ],
                        [
                            "self.conv_stem(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.blocks(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "self.conv_head(x)",
                            "Call"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "init_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math.ceil(oup / ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "num_features": {
                    "value": "init_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math.ceil(oup / ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "init_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math.ceil(oup / ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "new_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "init_channels * (ratio - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "dw_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "dw_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "init_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math.ceil(oup / ratio)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "num_features": {
                    "value": "new_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "init_channels * (ratio - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Sequential_174": {
                "*args": {
                    "value": "ConvBnAct(prev_chs, out_chs, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_56": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "in_channels": {
                    "value": "in_chs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_chs",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "dw_kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(dw_kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "in_chs",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_108": {
                "num_features": {
                    "value": "in_chs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_109": {
                "in_channels": {
                    "value": "in_chs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_chs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "make_divisible(exp_size * width, 4)",
                            "Call"
                        ],
                        [
                            "make_divisible(c * width, 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_110": {
                "num_features": {
                    "value": "out_chs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "make_divisible(exp_size * width, 4)",
                            "Call"
                        ],
                        [
                            "make_divisible(c * width, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_170": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/gluon_xception.py": {
        "torch": {
            "Conv2d_52": {
                "variable": {
                    "value": "self.conv_dw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "planes[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "planes[i]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_padding(kernel_size, stride, dilation)",
                            "Call"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "planes[i]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.conv_pw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "planes[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(planes,) * 3",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.rep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "rep",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chans",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_138": {
                "variable": {
                    "value": "self.act1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_140": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_142": {
                "variable": {
                    "value": "self.act2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_145": {
                "variable": {
                    "value": "self.block1_act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_150": {
                "variable": {
                    "value": "self.mid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('block%d' % i, Block(728, 728, stride=1, dilation=middle_dilation, norm_layer=norm_layer)) for i in range(4, 20)])",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_156": {
                "variable": {
                    "value": "self.block20_act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_160": {
                "variable": {
                    "value": "self.act3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_164": {
                "variable": {
                    "value": "self.act4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_170": {
                "variable": {
                    "value": "self.act5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.skip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_85": {
                "variable": {
                    "value": "rep[act%d % (i + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_94": {
                "variable": {
                    "value": "rep[act1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_229": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_dw(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.conv_pw(x)",
                            "Call"
                        ],
                        [
                            "self.rep(x) + skip",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block1_act(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.mid(x)",
                            "Call"
                        ],
                        [
                            "self.block20(x)",
                            "Call"
                        ],
                        [
                            "self.block20_act(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "self.act3(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "self.bn4(x)",
                            "Call"
                        ],
                        [
                            "self.act4(x)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "self.bn5(x)",
                            "Call"
                        ],
                        [
                            "self.act5(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "planes[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "planes[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/hardcorenas.py": {
        "torch": {}
    },
    "pytorch-image-models/timm/models/helpers.py": {
        "torch": {
            "load_26": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_55": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_297": {
                "variable": {
                    "value": "new_bn",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "state_dict[n + '.weight'][0]",
                    "type": "Call",
                    "possible_values": [
                        [
                            "checkpoint",
                            "Name"
                        ],
                        [
                            "new_state_dict",
                            "Name"
                        ],
                        [
                            "load_state_dict(checkpoint_path, use_ema)",
                            "Call"
                        ],
                        [
                            "load_state_dict_from_hf(hf_hub_id)",
                            "Call"
                        ],
                        [
                            "load_state_dict_from_url(pretrained_url, progress=progress, map_location='cpu')",
                            "Call"
                        ],
                        [
                            "filter_fn(state_dict)",
                            "Call"
                        ],
                        [
                            "filter_fn(state_dict, model)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "eps": {
                    "value": "old_module.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "old_module.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "affine": {
                    "value": "old_module.affine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/hrnet.py": {
        "torch": {
            "ReLU_404": {
                "variable": {
                    "value": "self.fuse_act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_515": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chans",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "stem_width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg['STEM_WIDTH']",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_516": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "stem_width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg['STEM_WIDTH']",
                            "Subscript"
                        ]
                    ]
                },
                "momentum": {
                    "value": "_BN_MOMENTUM",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_517": {
                "variable": {
                    "value": "self.act1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_518": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "stem_width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg['STEM_WIDTH']",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_519": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "_BN_MOMENTUM",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_520": {
                "variable": {
                    "value": "self.act2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_584": {
                "variable": {
                    "value": "incre_modules",
                    "type": "Variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "incre_modules",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "nn.ModuleList(incre_modules)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_600": {
                "variable": {
                    "value": "downsamp_modules",
                    "type": "Variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "downsamp_modules",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "nn.ModuleList(downsamp_modules)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_602": {
                "variable": {
                    "value": "final_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=self.head_channels[3] * head_block.expansion, out_channels=self.num_features, kernel_size=1, stride=1, padding=0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_421": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.num_inchannels[branch_index], num_channels[branch_index] * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_433": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_440": {
                "modules": {
                    "value": "branches",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_476": {
                "modules": {
                    "value": "fuse_layers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_593": {
                "variable": {
                    "value": "downsamp_module",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=in_channels, out_channels=out_channels, kernel_size=3, stride=2, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_638": {
                "modules": {
                    "value": "transition_layers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_643": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_653": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_727": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "self.stages(x)",
                            "Call"
                        ],
                        [
                            "[incre(f) for (f, incre) in zip(x, self.incre_modules)]",
                            "ListComp"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Identity_444": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_603": {
                "in_channels": {
                    "value": "self.head_channels[3] * head_block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_607": {
                "num_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "_BN_MOMENTUM",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_608": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_672": {
                "*args": {
                    "value": "*modules",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_422": {
                "in_channels": {
                    "value": "self.num_inchannels[branch_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_channels[branch_index] * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_425": {
                "num_features": {
                    "value": "num_channels[branch_index] * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "_BN_MOMENTUM",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "ModuleList_474": {
                "modules": {
                    "value": "fuse_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv2d_594": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.head_channels[i] * head_block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.head_channels[i + 1] * head_block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_596": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.head_channels[i + 1] * head_block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "_BN_MOMENTUM",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_597": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_644": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "planes * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_645": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "_BN_MOMENTUM",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "Sequential_636": {
                "*args": {
                    "value": "*conv3x3s",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_453": {
                "*args": {
                    "value": "nn.Conv2d(num_inchannels[j], num_inchannels[i], 1, 1, 0, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_621": {
                "*args": {
                    "value": "nn.Conv2d(num_channels_pre_layer[i], num_channels_cur_layer[i], 3, 1, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_626": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_632": {
                "*args": {
                    "value": "nn.Conv2d(inchannels, outchannels, 3, 2, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_454": {
                "in_channels": {
                    "value": "num_inchannels[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_inchannels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_455": {
                "num_features": {
                    "value": "num_inchannels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "_BN_MOMENTUM",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "Upsample_456": {
                "scale_factor": {
                    "value": "2 ** (j - i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Identity_458": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_473": {
                "*args": {
                    "value": "*conv3x3s",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_622": {
                "in_channels": {
                    "value": "num_channels_pre_layer[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_channels_cur_layer[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_623": {
                "num_features": {
                    "value": "num_channels_cur_layer[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "_BN_MOMENTUM",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_624": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_633": {
                "in_channels": {
                    "value": "inchannels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_channels_pre_layer[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outchannels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_channels_cur_layer[i] if j == i - num_branches_pre else inchannels",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_634": {
                "num_features": {
                    "value": "outchannels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_channels_cur_layer[i] if j == i - num_branches_pre else inchannels",
                            "IfExp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "_BN_MOMENTUM",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_635": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_464": {
                "*args": {
                    "value": "nn.Conv2d(num_inchannels[j], num_outchannels_conv3x3, 3, 2, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_469": {
                "*args": {
                    "value": "nn.Conv2d(num_inchannels[j], num_outchannels_conv3x3, 3, 2, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_465": {
                "in_channels": {
                    "value": "num_inchannels[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_outchannels_conv3x3",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "num_inchannels[i]",
                            "Subscript"
                        ],
                        [
                            "num_inchannels[j]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_466": {
                "num_features": {
                    "value": "num_outchannels_conv3x3",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "num_inchannels[i]",
                            "Subscript"
                        ],
                        [
                            "num_inchannels[j]",
                            "Subscript"
                        ]
                    ]
                },
                "momentum": {
                    "value": "_BN_MOMENTUM",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_470": {
                "in_channels": {
                    "value": "num_inchannels[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_outchannels_conv3x3",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "num_inchannels[i]",
                            "Subscript"
                        ],
                        [
                            "num_inchannels[j]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_471": {
                "num_features": {
                    "value": "num_outchannels_conv3x3",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "num_inchannels[i]",
                            "Subscript"
                        ],
                        [
                            "num_inchannels[j]",
                            "Subscript"
                        ]
                    ]
                },
                "momentum": {
                    "value": "_BN_MOMENTUM",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_472": {
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/hub.py": {
        "torch": {
            "load_95": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(get_cache_dir(), filename)",
                            "Call"
                        ],
                        [
                            "_download_from_hf(model_id, 'config.json')",
                            "Call"
                        ],
                        [
                            "_download_from_hf(model_id, 'pytorch_model.bin')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/inception_resnet_v2.py": {
        "torch": {
            "Conv2d_41": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(192, 48, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.branch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(192, 64, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.branch3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(3, stride=1, padding=1, count_include_pad=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(320, 32, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "self.branch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(320, 32, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_103": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "320",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_123": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(320, 256, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_129": {
                "variable": {
                    "value": "self.branch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_147": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(1088, 128, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_153": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "384",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1088",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_154": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_170": {
                "variable": {
                    "value": "self.branch0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(1088, 256, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_175": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(1088, 256, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_180": {
                "variable": {
                    "value": "self.branch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(1088, 256, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_186": {
                "variable": {
                    "value": "self.branch3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_193": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_206": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(2080, 192, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_212": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "448",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2080",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_218": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_239": {
                "variable": {
                    "value": "self.maxpool_3a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_244": {
                "variable": {
                    "value": "self.maxpool_5a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_246": {
                "variable": {
                    "value": "self.repeat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Block35(scale=0.17)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_261": {
                "variable": {
                    "value": "self.repeat_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Block17(scale=0.1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_286": {
                "variable": {
                    "value": "self.repeat_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Block8(scale=0.2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_332": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d_1a(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d_2a(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d_2b(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool_3a(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d_3b(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d_4a(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool_5a(x)",
                            "Call"
                        ],
                        [
                            "self.mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.repeat(x)",
                            "Call"
                        ],
                        [
                            "self.mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.repeat_1(x)",
                            "Call"
                        ],
                        [
                            "self.mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.repeat_2(x)",
                            "Call"
                        ],
                        [
                            "self.block8(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d_7b(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.classif(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AvgPool2d_71": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_213": {
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/inception_v3.py": {
        "torch": {
            "avg_pool2d_79": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Pool1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Pool2(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "self.forward_preaux(x)",
                            "Call"
                        ],
                        [
                            "self.forward_postaux(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.forward_preaux(x)",
                            "Call"
                        ],
                        [
                            "self.forward_postaux(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_109": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Pool1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Pool2(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "self.forward_preaux(x)",
                            "Call"
                        ],
                        [
                            "self.forward_postaux(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.forward_preaux(x)",
                            "Call"
                        ],
                        [
                            "self.forward_postaux(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_153": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Pool1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Pool2(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "self.forward_preaux(x)",
                            "Call"
                        ],
                        [
                            "self.forward_postaux(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.forward_preaux(x)",
                            "Call"
                        ],
                        [
                            "self.forward_postaux(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_187": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Pool1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Pool2(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "self.forward_preaux(x)",
                            "Call"
                        ],
                        [
                            "self.forward_postaux(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.forward_preaux(x)",
                            "Call"
                        ],
                        [
                            "self.forward_postaux(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_223": {
                "variable": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_2(branch3x3)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_231": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_233": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Pool1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Pool2(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "self.forward_preaux(x)",
                            "Call"
                        ],
                        [
                            "self.forward_postaux(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.forward_preaux(x)",
                            "Call"
                        ],
                        [
                            "self.forward_postaux(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_258": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Pool1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Pool2(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "self.forward_preaux(x)",
                            "Call"
                        ],
                        [
                            "self.forward_postaux(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.forward_preaux(x)",
                            "Call"
                        ],
                        [
                            "self.forward_postaux(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_265": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Pool1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Pool2(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "self.forward_preaux(x)",
                            "Call"
                        ],
                        [
                            "self.forward_postaux(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.forward_preaux(x)",
                            "Call"
                        ],
                        [
                            "self.forward_postaux(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flatten_267": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Pool1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Pool2(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "self.forward_preaux(x)",
                            "Call"
                        ],
                        [
                            "self.forward_postaux(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.forward_preaux(x)",
                            "Call"
                        ],
                        [
                            "self.forward_postaux(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_278": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_279": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_301": {
                "variable": {
                    "value": "self.Pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_304": {
                "variable": {
                    "value": "self.Pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_87": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[branch3x3, branch7x7x3, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_116": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[branch3x3, branch7x7x3, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_161": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[branch3x3, branch7x7x3, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_193": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[branch3x3, branch7x7x3, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_241": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[branch3x3, branch7x7x3, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_284": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Pool1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Pool2(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "self.forward_preaux(x)",
                            "Call"
                        ],
                        [
                            "self.forward_postaux(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.forward_preaux(x)",
                            "Call"
                        ],
                        [
                            "self.forward_postaux(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_398": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Pool1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Pool2(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "self.forward_preaux(x)",
                            "Call"
                        ],
                        [
                            "self.forward_postaux(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.forward_preaux(x)",
                            "Call"
                        ],
                        [
                            "self.forward_postaux(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_421": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Pool1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Pool2(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "self.forward_preaux(x)",
                            "Call"
                        ],
                        [
                            "self.forward_postaux(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.forward_preaux(x)",
                            "Call"
                        ],
                        [
                            "self.forward_postaux(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/inception_v4.py": {
        "torch": {
            "Conv2d_31": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_46": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.branch0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(160, 64, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(160, 64, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_83": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(384, 64, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "self.branch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(384, 64, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_108": {
                "variable": {
                    "value": "self.branch3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(3, stride=1, padding=1, count_include_pad=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(384, 192, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_133": {
                "variable": {
                    "value": "self.branch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_139": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_148": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(1024, 192, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_154": {
                "variable": {
                    "value": "self.branch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(1024, 192, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_162": {
                "variable": {
                    "value": "self.branch3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(3, stride=1, padding=1, count_include_pad=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_172": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_180": {
                "variable": {
                    "value": "self.branch0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(1024, 192, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_185": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(1024, 256, kernel_size=1, stride=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_192": {
                "variable": {
                    "value": "self.branch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_198": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_218": {
                "variable": {
                    "value": "self.branch3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(3, stride=1, padding=1, count_include_pad=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_229": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1_1a, x1_1b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_236": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x2_3a, x2_3b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_240": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_252": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(in_chans, 32, kernel_size=3, stride=2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_301": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.last_linear(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AvgPool2d_109": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_163": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_219": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/layers/activations.py": {
        "torch": {
            "relu6_75": {
                "variable": {
                    "value": "inner",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gelu_135": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softplus_33": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "prelu_131": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gelu_145": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu6_92": {
                "input": {
                    "value": "x + 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/layers/activations_jit.py": {
        "torch": {
            "softplus_29": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/layers/activations_me.py": {
        "torch": {
            "sigmoid_24": {
                "variable": {
                    "value": "x_sigmoid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_67": {
                "variable": {
                    "value": "x_sigmoid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "softplus_68": {
                "variable": {
                    "value": "x_tanh_sp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tanh_68": {
                "variable": {
                    "value": "x_tanh_sp",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_142": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "(x >= -3.0) & (x <= 3.0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "x": {
                    "value": "x / 3.0 + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "m",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.ones_like(x) * ((x >= -3.0) & (x <= 3.0)) / 6.0",
                            "BinOp"
                        ],
                        [
                            "torch.ones_like(x) * (x >= 3.0)",
                            "BinOp"
                        ],
                        [
                            "torch.where((x >= -3.0) & (x <= 3.0), x / 3.0 + 0.5, m)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(x) * (x >= -2.0)",
                            "BinOp"
                        ],
                        [
                            "torch.where((x >= -2.0) & (x <= 0.0), x + 1.0, m)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_186": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "(x >= -2.0) & (x <= 0.0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "x": {
                    "value": "x + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "m",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.ones_like(x) * ((x >= -3.0) & (x <= 3.0)) / 6.0",
                            "BinOp"
                        ],
                        [
                            "torch.ones_like(x) * (x >= 3.0)",
                            "BinOp"
                        ],
                        [
                            "torch.where((x >= -3.0) & (x <= 3.0), x / 3.0 + 0.5, m)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(x) * (x >= -2.0)",
                            "BinOp"
                        ],
                        [
                            "torch.where((x >= -2.0) & (x <= 0.0), x + 1.0, m)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_19": {
                "input": {
                    "value": "x",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tanh_62": {
                "input": {
                    "value": "F.softplus(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_141": {
                "input": {
                    "value": "x",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_like_185": {
                "input": {
                    "value": "x",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "softplus_62": {
                "input": {
                    "value": "x",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_like_106": {
                "input": {
                    "value": "x",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_160": {
                "data": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_161": {
                "data": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_162": {
                "data": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/layers/adaptive_avgmax_pool.py": {
        "torch": {
            "adaptive_avg_pool2d_25": {
                "variable": {
                    "value": "x_avg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.adaptive_avg_pool2d(x, output_size)",
                            "Call"
                        ],
                        [
                            "adaptive_avgmax_pool2d(x, output_size)",
                            "Call"
                        ],
                        [
                            "adaptive_catavgmax_pool2d(x, output_size)",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool2d(x, output_size)",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(1)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "output_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "adaptive_max_pool2d_26": {
                "variable": {
                    "value": "x_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "x",
                    "type": null,
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_31": {
                "variable": {
                    "value": "x_avg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.adaptive_avg_pool2d(x, output_size)",
                            "Call"
                        ],
                        [
                            "adaptive_avgmax_pool2d(x, output_size)",
                            "Call"
                        ],
                        [
                            "adaptive_catavgmax_pool2d(x, output_size)",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool2d(x, output_size)",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(1)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "output_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "adaptive_max_pool2d_32": {
                "variable": {
                    "value": "x_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "x",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_33": {
                "tensors": {
                    "value": "(x_avg, x_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_40": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.adaptive_avg_pool2d(x, output_size)",
                            "Call"
                        ],
                        [
                            "adaptive_avgmax_pool2d(x, output_size)",
                            "Call"
                        ],
                        [
                            "adaptive_catavgmax_pool2d(x, output_size)",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool2d(x, output_size)",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(1)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "output_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_87": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "adaptive_max_pool2d_46": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "x",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_93": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "output_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AdaptiveMaxPool2d_99": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "output_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch-image-models/timm/models/layers/blur_pool.py": {
        "torch": {
            "tensor_36": {
                "variable": {
                    "value": "coeffs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "(np.poly1d((0.5, 0.5)) ** (self.filt_size - 1)).coeffs.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_41": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.pad(x, self.padding, 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_42": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.pad(x, self.padding, 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.filt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "x.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/layers/bottleneck_attn.py": {
        "torch": {
            "pad_43": {
                "variable": {
                    "value": "x_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "q @ rel_k.transpose(-1, -2)",
                            "BinOp"
                        ],
                        [
                            "x.reshape(-1, W, 2 * W - 1)",
                            "Call"
                        ],
                        [
                            "x_pad[:, :W, W - 1:]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(B, H, 1, W, W).expand(-1, -1, H, -1, -1)",
                            "Call"
                        ],
                        [
                            "self.qkv(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(B, -1, self.dim_head, H * W).transpose(-1, -2)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flatten_43": {
                "variable": {
                    "value": "x_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_44": {
                "variable": {
                    "value": "x_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_pad",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.pad(x, [0, 1]).flatten(1)",
                            "Call"
                        ],
                        [
                            "F.pad(x_pad, [0, W - 1])",
                            "Call"
                        ],
                        [
                            "x_pad.reshape(-1, W + 1, 2 * W - 1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, W - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_65": {
                "variable": {
                    "value": "self.height_rel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.height * 2 - 1, dim_head) * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_66": {
                "variable": {
                    "value": "self.width_rel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.width * 2 - 1, dim_head) * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.dim_out * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "split_116": {
                "variable": {
                    "value": "(q, k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "q @ rel_k.transpose(-1, -2)",
                            "BinOp"
                        ],
                        [
                            "x.reshape(-1, W, 2 * W - 1)",
                            "Call"
                        ],
                        [
                            "x_pad[:, :W, W - 1:]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(B, H, 1, W, W).expand(-1, -1, H, -1, -1)",
                            "Call"
                        ],
                        [
                            "self.qkv(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(B, -1, self.dim_head, H * W).transpose(-1, -2)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.num_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_103": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Identity_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_65": {
                "*size": {
                    "value": "self.height * 2 - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "dim_head",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_66": {
                "*size": {
                    "value": "self.width * 2 - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "dim_head",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/layers/cbam.py": {
        "torch": {
            "Conv2d_22": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "adaptive_max_pool2d_28": {
                "variable": {
                    "value": "x_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "x",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_55": {
                "variable": {
                    "value": "x_avg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.channel(x)",
                            "Call"
                        ],
                        [
                            "self.spatial(x)",
                            "Call"
                        ],
                        [
                            "self.channel(x)",
                            "Call"
                        ],
                        [
                            "self.spatial(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "x_attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_avg, x_max]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_70": {
                "variable": {
                    "value": "x_avg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.channel(x)",
                            "Call"
                        ],
                        [
                            "self.spatial(x)",
                            "Call"
                        ],
                        [
                            "self.channel(x)",
                            "Call"
                        ],
                        [
                            "self.spatial(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_56": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.channel(x)",
                            "Call"
                        ],
                        [
                            "self.spatial(x)",
                            "Call"
                        ],
                        [
                            "self.channel(x)",
                            "Call"
                        ],
                        [
                            "self.spatial(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_71": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.channel(x)",
                            "Call"
                        ],
                        [
                            "self.spatial(x)",
                            "Call"
                        ],
                        [
                            "self.channel(x)",
                            "Call"
                        ],
                        [
                            "self.spatial(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "adaptive_max_pool2d_42": {
                "*args": {
                    "value": "x",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/layers/classifier.py": {
        "torch": {
            "Identity_25": {
                "variable": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_53": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=float(self.drop_rate), training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "float(self.drop_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/layers/cond_conv2d.py": {
        "torch": {
            "Parameter_63": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_experts, weight_num_param)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_86": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "routing_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_67": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_experts, self.out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_91": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "routing_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_100": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(1, B * C, H, W)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(routing_weights, self.weight)",
                            "Call"
                        ],
                        [
                            "weight.view(new_weight_shape)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.matmul(routing_weights, self.bias)",
                            "Call"
                        ],
                        [
                            "bias.view(B * self.out_channels)",
                            "Call"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups * B",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/layers/conv2d_same.py": {
        "torch": {
            "conv2d_17": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pad_same(x, weight.shape[-2:], stride, dilation)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "in_chs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_chs",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs.pop('padding', '')",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch-image-models/timm/models/layers/conv_bn_act.py": {
        "torch": {}
    },
    "pytorch-image-models/timm/models/layers/create_attn.py": {
        "torch": {}
    },
    "pytorch-image-models/timm/models/layers/create_norm_act.py": {
        "torch": {
            "script_47": {
                "variable": {
                    "value": "layer_instance",
                    "type": "Variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "layer_instance",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layer(num_features, apply_act=apply_act, **kwargs)",
                            "Call"
                        ],
                        [
                            "torch.jit.script(layer_instance)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch-image-models/timm/models/layers/drop.py": {
        "torch": {
            "meshgrid_38": {
                "variable": {
                    "value": "(w_i, h_i)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(W).to(x.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(H).to(x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_41": {
                "variable": {
                    "value": "valid_block",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_block",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(w_i >= clipped_block_size // 2) & (w_i < W - (clipped_block_size - 1) // 2) & ((h_i >= clipped_block_size // 2) & (h_i < H - (clipped_block_size - 1) // 2))",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(valid_block, (1, 1, H, W)).to(dtype=x.dtype)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, 1, H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_pool2d_90": {
                "variable": {
                    "value": "block_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "block_mask.to(x.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "clipped_block_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(block_size, min(W, H))",
                            "Call"
                        ],
                        [
                            "min(block_size, min(W, H))",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "clipped_block_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_45": {
                "variable": {
                    "value": "uniform_noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, C, H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_like_47": {
                "variable": {
                    "value": "uniform_noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "x * block_mask + normal_noise * (1 - block_mask)",
                            "BinOp"
                        ],
                        [
                            "x * block_mask * normalize_scale",
                            "BinOp"
                        ],
                        [
                            "x * (1.0 - block_mask) + normal_noise * block_mask",
                            "BinOp"
                        ],
                        [
                            "x * block_mask * normalize_scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "arange_38": {
                "start": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_pool2d_49": {
                "input": {
                    "value": "-block_mask",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "clipped_block_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(block_size, min(W, H))",
                            "Call"
                        ],
                        [
                            "min(block_size, min(W, H))",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "clipped_block_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_154": {
                "*size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x.shape[0],) + (1,) * (x.ndim - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_56": {
                "*size": {
                    "value": "(1, C, H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_like_56": {
                "input": {
                    "value": "x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "x * block_mask + normal_noise * (1 - block_mask)",
                            "BinOp"
                        ],
                        [
                            "x * block_mask * normalize_scale",
                            "BinOp"
                        ],
                        [
                            "x * (1.0 - block_mask) + normal_noise * block_mask",
                            "BinOp"
                        ],
                        [
                            "x * block_mask * normalize_scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_86": {
                "*size": {
                    "value": "(1, C, H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_like_89": {
                "input": {
                    "value": "x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "x * block_mask + normal_noise * (1 - block_mask)",
                            "BinOp"
                        ],
                        [
                            "x * block_mask * normalize_scale",
                            "BinOp"
                        ],
                        [
                            "x * (1.0 - block_mask) + normal_noise * block_mask",
                            "BinOp"
                        ],
                        [
                            "x * block_mask * normalize_scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_94": {
                "*size": {
                    "value": "(1, C, H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_like_94": {
                "input": {
                    "value": "x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "x * block_mask + normal_noise * (1 - block_mask)",
                            "BinOp"
                        ],
                        [
                            "x * block_mask * normalize_scale",
                            "BinOp"
                        ],
                        [
                            "x * (1.0 - block_mask) + normal_noise * block_mask",
                            "BinOp"
                        ],
                        [
                            "x * block_mask * normalize_scale",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch-image-models/timm/models/layers/eca.py": {
        "torch": {
            "Conv1d_59": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "max(t if t % 2 else t + 1, 3)",
                            "Call"
                        ],
                        [
                            "max(t if t % 2 else t + 1, 3)",
                            "Call"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_98": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "max(t if t % 2 else t + 1, 3)",
                            "Call"
                        ],
                        [
                            "max(t if t % 2 else t + 1, 3)",
                            "Call"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_104": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.mean((2, 3)).view(x.shape[0], 1, -1)",
                            "Call"
                        ],
                        [
                            "self.conv(y)",
                            "Call"
                        ],
                        [
                            "y.view(x.shape[0], -1, 1, 1).sigmoid()",
                            "Call"
                        ],
                        [
                            "x.mean((2, 3)).view(x.shape[0], 1, -1)",
                            "Call"
                        ],
                        [
                            "F.pad(y, (self.padding, self.padding), mode='circular')",
                            "Call"
                        ],
                        [
                            "self.conv(y)",
                            "Call"
                        ],
                        [
                            "y.view(x.shape[0], -1, 1, 1).sigmoid()",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(self.padding, self.padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "circular",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/layers/evo_norm.py": {
        "torch": {
            "Parameter_23": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(param_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_24": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(param_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_62": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(param_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_63": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(param_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_26": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(param_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_65": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(param_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_23": {
                "*size": {
                    "value": "param_shape",
                    "type": "Tuple",
                    "possible_values": [
                        [
                            "(1, num_features, 1, 1)",
                            "Tuple"
                        ],
                        [
                            "(1, num_features, 1, 1)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "zeros_24": {
                "*size": {
                    "value": "param_shape",
                    "type": "Tuple",
                    "possible_values": [
                        [
                            "(1, num_features, 1, 1)",
                            "Tuple"
                        ],
                        [
                            "(1, num_features, 1, 1)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "ones_27": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_62": {
                "*size": {
                    "value": "param_shape",
                    "type": "Tuple",
                    "possible_values": [
                        [
                            "(1, num_features, 1, 1)",
                            "Tuple"
                        ],
                        [
                            "(1, num_features, 1, 1)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "zeros_63": {
                "*size": {
                    "value": "param_shape",
                    "type": "Tuple",
                    "possible_values": [
                        [
                            "(1, num_features, 1, 1)",
                            "Tuple"
                        ],
                        [
                            "(1, num_features, 1, 1)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "ones_26": {
                "*size": {
                    "value": "param_shape",
                    "type": "Tuple",
                    "possible_values": [
                        [
                            "(1, num_features, 1, 1)",
                            "Tuple"
                        ],
                        [
                            "(1, num_features, 1, 1)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "ones_65": {
                "*size": {
                    "value": "param_shape",
                    "type": "Tuple",
                    "possible_values": [
                        [
                            "(1, num_features, 1, 1)",
                            "Tuple"
                        ],
                        [
                            "(1, num_features, 1, 1)",
                            "Tuple"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch-image-models/timm/models/layers/halo_attn.py": {
        "torch": {
            "pad_50": {
                "variable": {
                    "value": "x_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "q @ rel_k.transpose(-1, -2)",
                            "BinOp"
                        ],
                        [
                            "x.reshape(-1, W, rel_size)",
                            "Call"
                        ],
                        [
                            "x_pad[:, :W, win_size - 1:]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(B, H, 1, W, win_size).expand(-1, -1, win_size, -1, -1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flatten_50": {
                "variable": {
                    "value": "x_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_51": {
                "variable": {
                    "value": "x_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_pad",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.pad(x, [0, 1]).flatten(1)",
                            "Call"
                        ],
                        [
                            "F.pad(x_pad, [0, rel_size - W])",
                            "Call"
                        ],
                        [
                            "x_pad.reshape(-1, W + 1, rel_size)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, rel_size - W]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_80": {
                "variable": {
                    "value": "self.height_rel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(win_size * 2 - 1, dim_head) * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_81": {
                "variable": {
                    "value": "self.width_rel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(win_size * 2 - 1, dim_head) * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.dim_qk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_124": {
                "variable": {
                    "value": "self.kv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.dim_qk + self.dim_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unfold_144": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Call",
                    "possible_values": [
                        [
                            "q.reshape(-1, self.block_size, self.block_size, self.dim_head)",
                            "Call"
                        ],
                        [
                            "q.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.q(x)",
                            "Call"
                        ],
                        [
                            "F.unfold(q, kernel_size=self.block_size // self.stride, stride=self.block_size // self.stride)",
                            "Call"
                        ],
                        [
                            "q.reshape(B * self.num_heads, self.dim_head, -1, num_blocks).transpose(1, 3)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.block_size // self.stride",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.block_size // self.stride",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unfold_151": {
                "variable": {
                    "value": "kv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.kv(x)",
                            "Call"
                        ],
                        [
                            "F.unfold(kv, kernel_size=self.win_size, stride=self.block_size, padding=self.halo_size)",
                            "Call"
                        ],
                        [
                            "kv.reshape(B * self.num_heads, self.dim_head + self.dim_v // self.num_heads, -1, num_blocks).transpose(1, 3)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.win_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.block_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.halo_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_154": {
                "variable": {
                    "value": "(k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "kv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.kv(x)",
                            "Call"
                        ],
                        [
                            "F.unfold(kv, kernel_size=self.win_size, stride=self.block_size, padding=self.halo_size)",
                            "Call"
                        ],
                        [
                            "kv.reshape(B * self.num_heads, self.dim_head + self.dim_v // self.num_heads, -1, num_blocks).transpose(1, 3)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[self.dim_head, self.dim_v // self.num_heads]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "fold_161": {
                "variable": {
                    "value": "attn_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_out.reshape(B, -1, num_blocks)",
                    "type": "Call",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(H // self.stride, W // self.stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.block_size // self.stride",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.block_size // self.stride",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_80": {
                "*size": {
                    "value": "win_size * 2 - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "dim_head",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_81": {
                "*size": {
                    "value": "win_size * 2 - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "dim_head",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch-image-models/timm/models/layers/inplace_abn.py": {
        "torch": {
            "Parameter_65": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_66": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_70": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_71": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_65": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/layers/lambda_layer.py": {
        "torch": {
            "Conv2d_48": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_heads * dim_head + dim_head + self.dim_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_52": {
                "variable": {
                    "value": "self.norm_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_heads * dim_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_53": {
                "variable": {
                    "value": "self.norm_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.dim_v",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv3d_56": {
                "variable": {
                    "value": "self.conv_lambda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_head",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(r, r, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(r // 2, r // 2, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "split_69": {
                "variable": {
                    "value": "(q, k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "qkv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.qkv(x)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[self.num_heads * self.dim_k, self.dim_k, self.dim_v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_73": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k.reshape(B, self.dim_k, M)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "AvgPool2d_58": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Identity_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/layers/linear.py": {
        "torch": {
            "linear_17": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight.to(dtype=input.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.bias.to(dtype=input.dtype) if self.bias is not None else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "linear_19": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/layers/median_pool.py": {
        "torch": {
            "pad_46": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.pad(x, self._padding(x), mode='reflect')",
                            "Call"
                        ],
                        [
                            "x.unfold(2, self.k[0], self.stride[0]).unfold(3, self.k[1], self.stride[1])",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(x.size()[:4] + (-1,)).median(dim=-1)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "pad": {
                    "value": "self._padding(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/layers/mixed_conv2d.py": {
        "torch": {
            "split_48": {
                "variable": {
                    "value": "x_split",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(x_out, 1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.splits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[c(x_split[i]) for (i, c) in enumerate(self.values())]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/layers/mlp.py": {
        "torch": {
            "Linear_15": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "BoolOp",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_features",
                    "type": "BoolOp",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "BoolOp",
                    "possible_values": [
                        [
                            "out_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "out_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_18": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_features * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_features",
                    "type": "BoolOp",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "BoolOp",
                    "possible_values": [
                        [
                            "out_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "out_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_40": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch-image-models/timm/models/layers/norm.py": {
        "torch": {
            "group_norm_14": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "self.num_groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/layers/norm_act.py": {
        "torch": {
            "batch_norm_49": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.batch_norm(x, self.running_mean, self.running_var, self.weight, self.bias, self.training or not self.track_running_stats, exponential_average_factor, self.eps)",
                            "Call"
                        ],
                        [
                            "self._forward_jit(x)",
                            "Call"
                        ],
                        [
                            "self._forward_python(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "F.group_norm(x, self.num_groups, self.weight, self.bias, self.eps)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training or not self.track_running_stats",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "exponential_average_factor",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "self.momentum",
                            "Attribute"
                        ],
                        [
                            "1.0 / float(self.num_batches_tracked)",
                            "BinOp"
                        ],
                        [
                            "self.momentum",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_norm_83": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.batch_norm(x, self.running_mean, self.running_var, self.weight, self.bias, self.training or not self.track_running_stats, exponential_average_factor, self.eps)",
                            "Call"
                        ],
                        [
                            "self._forward_jit(x)",
                            "Call"
                        ],
                        [
                            "self._forward_python(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "F.group_norm(x, self.num_groups, self.weight, self.bias, self.eps)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ]
                    ]
                },
                "num_groups": {
                    "value": "self.num_groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Identity_27": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_80": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/layers/operations.py": {
        "torch": {
            "Parameter_32": {
                "variable": {
                    "value": "module.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.cat([weight, weight[:, index, :, :].clone()], dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_52": {
                "variable": {
                    "value": "module.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.cat([weight, weight[index, :, :, :].clone()], dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "module.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[running_mean, running_mean[index].clone()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "module.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[running_var, running_var[index].clone()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randint_30": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "weight.size(1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(new_channels - in_channels,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_50": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "weight.size(0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(new_channels - out_channels,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_74": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "num_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "module.num_features",
                            "Attribute"
                        ]
                    ]
                },
                "size": {
                    "value": "(new_features - num_features,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_79": {
                "variable": {
                    "value": "module.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.cat([weight, weight[index].clone()], dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_81": {
                "variable": {
                    "value": "module.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.cat([bias, bias[index].clone()], dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_100": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(3, stride=stride, padding=1, count_include_pad=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_118": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(3, stride=stride, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_136": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_159": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_187": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_259": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_260": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_261": {
                "variable": {
                    "value": "self.conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_262": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_266": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.conv_1(x), self.conv_2(x[:, :, 1:, 1:])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_33": {
                "tensors": {
                    "value": "[weight, weight[:, index, :, :].clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_53": {
                "tensors": {
                    "value": "[weight, weight[index, :, :, :].clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(3, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_80": {
                "tensors": {
                    "value": "[weight, weight[index].clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_82": {
                "tensors": {
                    "value": "[bias, bias[index].clone()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_101": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_102": {
                "num_features": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_119": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_120": {
                "num_features": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_137": {
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_138": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_139": {
                "num_features": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_160": {
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_161": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_162": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_163": {
                "num_features": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_188": {
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_189": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_190": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_191": {
                "num_features": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_192": {
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_193": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_194": {
                "in_channels": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_195": {
                "num_features": {
                    "value": "C_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_275": {
                "tensors": {
                    "value": "[index1, index2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/layers/padding.py": {
        "torch": {
            "pad_32": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2], value=value)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/layers/patch_embed.py": {
        "torch": {
            "Conv2d_27": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chans",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "patch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "to_2tuple(patch_size)",
                            "Call"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "patch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "to_2tuple(patch_size)",
                            "Call"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/layers/pool2d_same.py": {
        "torch": {
            "avg_pool2d_18": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pad_same(x, kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "pad_same(x, kernel_size, stride, value=-float('inf'))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "to_2tuple(kernel_size)",
                            "Call"
                        ],
                        [
                            "to_2tuple(kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "stride or kernel_size",
                            "BoolOp"
                        ],
                        [
                            "to_2tuple(stride)",
                            "Call"
                        ],
                        [
                            "to_2tuple(stride)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "ceil_mode",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "count_include_pad": {
                    "value": "count_include_pad",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_pool2d_38": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pad_same(x, kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "pad_same(x, kernel_size, stride, value=-float('inf'))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "to_2tuple(kernel_size)",
                            "Call"
                        ],
                        [
                            "to_2tuple(kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "stride or kernel_size",
                            "BoolOp"
                        ],
                        [
                            "to_2tuple(stride)",
                            "Call"
                        ],
                        [
                            "to_2tuple(stride)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "to_2tuple(dilation)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "ceil_mode": {
                    "value": "ceil_mode",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AvgPool2d_67": {
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "to_2tuple(kernel_size)",
                            "Call"
                        ],
                        [
                            "to_2tuple(kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "stride or kernel_size",
                            "BoolOp"
                        ],
                        [
                            "to_2tuple(stride)",
                            "Call"
                        ],
                        [
                            "to_2tuple(stride)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "kwargs.pop('padding', '')",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MaxPool2d_69": {
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "to_2tuple(kernel_size)",
                            "Call"
                        ],
                        [
                            "to_2tuple(kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "stride or kernel_size",
                            "BoolOp"
                        ],
                        [
                            "to_2tuple(stride)",
                            "Call"
                        ],
                        [
                            "to_2tuple(stride)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "kwargs.pop('padding', '')",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch-image-models/timm/models/layers/se.py": {
        "torch": {
            "Conv2d_25": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "reduction_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "reduction_channels",
                            "Name"
                        ],
                        [
                            "make_divisible(channels * reduction_ratio, divisor, min_channels)",
                            "Call"
                        ],
                        [
                            "make_divisible(channels // reduction, divisor, min_channels)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "reduction_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "reduction_channels",
                            "Name"
                        ],
                        [
                            "make_divisible(channels * reduction_ratio, divisor, min_channels)",
                            "Call"
                        ],
                        [
                            "make_divisible(channels // reduction, divisor, min_channels)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/layers/selective_kernel.py": {
        "torch": {
            "Conv2d_30": {
                "variable": {
                    "value": "self.fc_reduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "attn_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "max(int(out_channels / attn_reduction), min_attn_channels)",
                            "Call"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "self.fc_select",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "attn_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "max(int(out_channels / attn_reduction), min_attn_channels)",
                            "Call"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels * num_paths",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_44": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.sum(1).mean((2, 3), keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc_reduce(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.fc_select(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, self.num_paths, C // self.num_paths, H, W)",
                            "Call"
                        ],
                        [
                            "torch.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack(x_paths, dim=1)",
                            "Call"
                        ],
                        [
                            "x * x_attn",
                            "BinOp"
                        ],
                        [
                            "torch.sum(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_100": {
                "variable": {
                    "value": "self.paths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConvBnAct(in_channels, out_channels, kernel_size=k, dilation=d, **conv_kwargs) for (k, d) in zip(kernel_size, dilation)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_114": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_paths",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[op(x_split[i]) for (i, op) in enumerate(self.paths)]",
                            "ListComp"
                        ],
                        [
                            "[op(x) for op in self.paths]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_117": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.sum(1).mean((2, 3), keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc_reduce(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.fc_select(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, self.num_paths, C // self.num_paths, H, W)",
                            "Call"
                        ],
                        [
                            "torch.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack(x_paths, dim=1)",
                            "Call"
                        ],
                        [
                            "x * x_attn",
                            "BinOp"
                        ],
                        [
                            "torch.sum(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_110": {
                "variable": {
                    "value": "x_split",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.sum(1).mean((2, 3), keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc_reduce(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.fc_select(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, self.num_paths, C // self.num_paths, H, W)",
                            "Call"
                        ],
                        [
                            "torch.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack(x_paths, dim=1)",
                            "Call"
                        ],
                        [
                            "x * x_attn",
                            "BinOp"
                        ],
                        [
                            "torch.sum(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.in_channels // self.num_paths",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/layers/separable_conv.py": {
        "torch": {}
    },
    "pytorch-image-models/timm/models/layers/space_to_depth.py": {
        "torch": {}
    },
    "pytorch-image-models/timm/models/layers/split_attn.py": {
        "torch": {
            "Conv2d_43": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mid_chs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels * radix",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups * radix",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_48": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "attn_chs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "max(in_channels * radix // reduction_factor, 32)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_51": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "attn_chs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "max(in_channels * radix // reduction_factor, 32)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_chs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels * radix",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "adaptive_avg_pool2d_76": {
                "variable": {
                    "value": "x_gap",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_gap",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x_gap, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x_gap)",
                            "Call"
                        ],
                        [
                            "self.bn1(x_gap)",
                            "Call"
                        ],
                        [
                            "self.act1(x_gap)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_24": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.view(batch, self.cardinality, self.radix, -1).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch, -1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "self.drop_block(x)",
                            "Call"
                        ],
                        [
                            "self.act0(x)",
                            "Call"
                        ],
                        [
                            "x.reshape((B, self.radix, RC // self.radix, H, W))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_27": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.view(batch, self.cardinality, self.radix, -1).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch, -1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "self.drop_block(x)",
                            "Call"
                        ],
                        [
                            "self.act0(x)",
                            "Call"
                        ],
                        [
                            "x.reshape((B, self.radix, RC // self.radix, H, W))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch-image-models/timm/models/layers/split_batchnorm.py": {
        "torch": {
            "ModuleList_25": {
                "variable": {
                    "value": "self.aux_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.BatchNorm2d(num_features, eps, momentum, affine, track_running_stats) for _ in range(num_splits - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_36": {
                "tensors": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[super().forward(split_input[0])]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "num_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "affine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "track_running_stats": {
                    "value": "track_running_stats",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch-image-models/timm/models/layers/std_conv.py": {
        "torch": {
            "std_mean_9": {
                "variable": {
                    "value": "(std, mean)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "module.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "unbiased": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "std_mean_31": {
                "variable": {
                    "value": "(std, mean)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "unbiased": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_36": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.conv2d(x, self.get_weight(), self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "pad_same(x, self.kernel_size, self.stride, self.dilation)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.get_weight(), self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "pad_same(x, self.kernel_size, self.stride, self.dilation)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.get_weight()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "std_mean_57": {
                "variable": {
                    "value": "(std, mean)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "unbiased": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_64": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.conv2d(x, self.get_weight(), self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "pad_same(x, self.kernel_size, self.stride, self.dilation)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.get_weight(), self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "pad_same(x, self.kernel_size, self.stride, self.dilation)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.get_weight()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_85": {
                "variable": {
                    "value": "self.gain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.full((self.out_channels, 1, 1, 1), gain_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_118": {
                "variable": {
                    "value": "self.gain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.full((self.out_channels, 1, 1, 1), gain_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "std_mean_94": {
                "variable": {
                    "value": "(std, mean)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "unbiased": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_99": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.conv2d(x, self.get_weight(), self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "pad_same(x, self.kernel_size, self.stride, self.dilation)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.get_weight(), self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "pad_same(x, self.kernel_size, self.stride, self.dilation)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.get_weight()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "std_mean_136": {
                "variable": {
                    "value": "(std, mean)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "unbiased": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_143": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.conv2d(x, self.get_weight(), self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "pad_same(x, self.kernel_size, self.stride, self.dilation)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.get_weight(), self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "pad_same(x, self.kernel_size, self.stride, self.dilation)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.get_weight()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_85": {
                "size": {
                    "value": "(self.out_channels, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "gain_init",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "full_118": {
                "size": {
                    "value": "(self.out_channels, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "gain_init",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "layer_norm_92": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.weight.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "layer_norm_134": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.weight.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/layers/swin_attn.py": {
        "torch": {
            "Parameter_107": {
                "variable": {
                    "value": "self.relative_position_bias_table",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((2 * self.win_size - 1) * (2 * self.win_size - 1), num_heads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_113": {
                "variable": {
                    "value": "coords_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.win_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_114": {
                "variable": {
                    "value": "coords_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.win_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_115": {
                "variable": {
                    "value": "coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.meshgrid([coords_h, coords_w])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_116": {
                "variable": {
                    "value": "coords_flatten",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coords",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(torch.meshgrid([coords_h, coords_w]))",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_125": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim_out * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_126": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Softmax_127": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_84": {
                "variable": {
                    "value": "img_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, H, W, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "roll_140": {
                "variable": {
                    "value": "shifted_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.view(B, H // win_size, win_size, W // win_size, win_size, C)",
                            "Call"
                        ],
                        [
                            "windows.view(B, H // win_size, W // win_size, win_size, win_size, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2, 4, 5).contiguous().view(B, H, W, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "(attn @ v).transpose(1, 2).reshape(BW, N, self.dim_out)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.win_size, self.win_size, self.dim_out)",
                            "Call"
                        ],
                        [
                            "torch.roll(shifted_x, shifts=(self.shift_size, self.shift_size), dims=(1, 2))",
                            "Call"
                        ],
                        [
                            "shifted_x",
                            "Name"
                        ],
                        [
                            "x.view(B, H, W, self.dim_out).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "(-self.shift_size, -self.shift_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dims": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "roll_175": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shifted_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.roll(x, shifts=(-self.shift_size, -self.shift_size), dims=(1, 2))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "window_reverse(x, self.win_size, H, W)",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "(self.shift_size, self.shift_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dims": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_109": {
                "*size": {
                    "value": "(2 * self.win_size - 1) * (2 * self.win_size - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_heads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "meshgrid_115": {
                "*tensors": {
                    "value": "[coords_h, coords_w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AvgPool2d_128": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Identity_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/layers/test_time_pool.py": {
        "torch": {
            "avg_pool2d_33": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.base.forward_features(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=self.original_pool, stride=1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "adaptive_avgmax_pool2d(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.original_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.base.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.base.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/layers/weight_init.py": {
        "torch": {
            "no_grad_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/mlp_mixer.py": {
        "torch": {
            "Sequential_108": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[MixerBlock(hidden_dim, self.stem.num_patches, tokens_dim, channels_dim, mlp_layer=mlp_layer, norm_layer=norm_layer, act_layer=act_layer, drop=drop_rate, drop_path=drop_path_rate) for _ in range(num_blocks)]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_114": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Identity_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/mobilenetv3.py": {
        "torch": {
            "Sequential_109": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*builder(stem_size, block_args)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_184": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*builder(stem_size, block_args)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_153": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_stem(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.blocks(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "self.conv_head(x)",
                            "Call"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv_stem(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "b(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Identity_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_126": {
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/nasnet.py": {
        "torch": {
            "ReLU_38": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_41": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "variable": {
                    "value": "self.act_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_74": {
                "variable": {
                    "value": "self.bn_sep_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "middle_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels if stem_cell else in_channels",
                            "IfExp"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "variable": {
                    "value": "self.act_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_78": {
                "variable": {
                    "value": "self.bn_sep_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "x_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_comb_iter_1, x_comb_iter_2, x_comb_iter_3, x_comb_iter_4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_145": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_146": {
                "variable": {
                    "value": "self.path_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_150": {
                "variable": {
                    "value": "self.path_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_155": {
                "variable": {
                    "value": "self.final_path_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.num_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_201": {
                "variable": {
                    "value": "x_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_comb_iter_1, x_comb_iter_2, x_comb_iter_3, x_comb_iter_4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_211": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_212": {
                "variable": {
                    "value": "self.path_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_216": {
                "variable": {
                    "value": "self.path_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_221": {
                "variable": {
                    "value": "self.final_path_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_chs_left * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_261": {
                "variable": {
                    "value": "x_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_left, x_comb_iter_0, x_comb_iter_1, x_comb_iter_2, x_comb_iter_3, x_comb_iter_4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_307": {
                "variable": {
                    "value": "x_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_left, x_comb_iter_0, x_comb_iter_1, x_comb_iter_2, x_comb_iter_3, x_comb_iter_4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_355": {
                "variable": {
                    "value": "x_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_comb_iter_1, x_comb_iter_2, x_comb_iter_3, x_comb_iter_4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_403": {
                "variable": {
                    "value": "x_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_comb_iter_1, x_comb_iter_2, x_comb_iter_3, x_comb_iter_4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_494": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_549": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.depthwise_conv2d(x)",
                            "Call"
                        ],
                        [
                            "self.pointwise_conv2d(x)",
                            "Call"
                        ],
                        [
                            "self.act_1(x)",
                            "Call"
                        ],
                        [
                            "self.separable_1(x)",
                            "Call"
                        ],
                        [
                            "self.bn_sep_1(x)",
                            "Call"
                        ],
                        [
                            "self.act_2(x)",
                            "Call"
                        ],
                        [
                            "self.separable_2(x)",
                            "Call"
                        ],
                        [
                            "self.bn_sep_2(x)",
                            "Call"
                        ],
                        [
                            "self.act(x_cell_17)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.last_linear(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AvgPool2d_147": {
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_148": {
                "in_channels": {
                    "value": "self.stem_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ZeroPad2d_151": {
                "padding": {
                    "value": "(-1, 1, -1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AvgPool2d_152": {
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_153": {
                "in_channels": {
                    "value": "self.stem_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_180": {
                "tensors": {
                    "value": "[x_path1, x_path2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_213": {
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_214": {
                "in_channels": {
                    "value": "in_chs_left",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_chs_left",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ZeroPad2d_217": {
                "padding": {
                    "value": "(-1, 1, -1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AvgPool2d_218": {
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_219": {
                "in_channels": {
                    "value": "in_chs_left",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_chs_left",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_240": {
                "tensors": {
                    "value": "[x_path1, x_path2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/nasnet_search.py": {
        "torch": {
            "ModuleList_61": {
                "variable": {
                    "value": "self._ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_98": {
                "variable": {
                    "value": "self.stem0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, C // 2, kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "self.stem1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_114": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_127": {
                "variable": {
                    "value": "self.global_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_87": {
                "tensors": {
                    "value": "[states[i] for i in self._concat]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_100": {
                "num_features": {
                    "value": "C // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_101": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "in_channels": {
                    "value": "C // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_103": {
                "num_features": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_107": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_108": {
                "in_channels": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_109": {
                "num_features": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/nasnet_search_new.py": {
        "torch": {
            "Sequential_42": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, C * stem_multiplier, kernel_size=3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_53": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "self.lastact",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(C_prev)",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_68": {
                "variable": {
                    "value": "self.global_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "C_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C * stem_multiplier",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "num_features": {
                    "value": "C * stem_multiplier",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_67": {
                "num_features": {
                    "value": "C_prev",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/nfnet.py": {
        "torch": {
            "MaxPool2d_417": {
                "variable": {
                    "value": "stem[pool]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_529": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*stages",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_301": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_420": {
                "*args": {
                    "value": "stem",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_538": {
                "variable": {
                    "value": "self.final_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_354": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_355": {
                "data": {
                    "value": "torch.tensor(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_355": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_485": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "sum(cfg.depths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_485": {
                "tensor": {
                    "value": "cfg.depths",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_528": {
                "*args": {
                    "value": "*blocks",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/ofa/imagenet_classification/data_providers/base_provider.py": {
        "torch": {
            "Generator_44": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_46": {
                "variable": {
                    "value": "rand_indexes",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "train_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch-image-models/timm/models/ofa/imagenet_classification/data_providers/imagenet.py": {
        "torch": {}
    },
    "pytorch-image-models/timm/models/ofa/imagenet_classification/elastic_nn/modules/dynamic_layers.py": {
        "torch": {
            "index_select_23": {
                "variable": {
                    "value": "bn.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "bn.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_24": {
                "variable": {
                    "value": "bn.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "bn.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_26": {
                "variable": {
                    "value": "bn.running_mean.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "bn.running_mean.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_27": {
                "variable": {
                    "value": "bn.running_var.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "bn.running_var.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_134": {
                "variable": {
                    "value": "self.depth_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv', DynamicSeparableConv2d(max_middle_channel, self.kernel_size_list, self.stride)), ('bn', DynamicBatchNorm2d(max_middle_channel)), ('act', build_activation(self.act_func))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_142": {
                "variable": {
                    "value": "self.point_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv', DynamicConv2d(max_middle_channel, max(self.out_channel_list))), ('bn', DynamicBatchNorm2d(max(self.out_channel_list)))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_263": {
                "variable": {
                    "value": "importance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(self.point_linear.conv.conv.weight.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(0, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sort_286": {
                "variable": {
                    "value": "(sorted_importance, sorted_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "importance",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(torch.abs(self.point_linear.conv.conv.weight.data), dim=(0, 2, 3))",
                            "Call"
                        ],
                        [
                            "torch.cat(importance_chunks, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(self.conv3.conv.conv.weight.data), dim=(0, 2, 3))",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(self.conv2.conv.conv.weight.data), dim=(0, 2, 3))",
                            "Call"
                        ],
                        [
                            "torch.cat(importance_chunks, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(importance_chunks, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "index_select_287": {
                "variable": {
                    "value": "self.point_linear.conv.conv.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.point_linear.conv.conv.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "sorted_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_292": {
                "variable": {
                    "value": "self.depth_conv.conv.conv.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.depth_conv.conv.conv.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "sorted_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_433": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv', DynamicConv2d(max(self.in_channel_list), max_middle_channel)), ('bn', DynamicBatchNorm2d(max_middle_channel)), ('act', build_activation(self.act_func, inplace=True))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_439": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv', DynamicConv2d(max_middle_channel, max_middle_channel, kernel_size, stride)), ('bn', DynamicBatchNorm2d(max_middle_channel)), ('act', build_activation(self.act_func, inplace=True))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_445": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv', DynamicConv2d(max_middle_channel, max(self.out_channel_list))), ('bn', DynamicBatchNorm2d(max(self.out_channel_list)))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_577": {
                "variable": {
                    "value": "importance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(self.conv3.conv.conv.weight.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(0, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sort_599": {
                "variable": {
                    "value": "(sorted_importance, sorted_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "importance",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(torch.abs(self.point_linear.conv.conv.weight.data), dim=(0, 2, 3))",
                            "Call"
                        ],
                        [
                            "torch.cat(importance_chunks, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(self.conv3.conv.conv.weight.data), dim=(0, 2, 3))",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(self.conv2.conv.conv.weight.data), dim=(0, 2, 3))",
                            "Call"
                        ],
                        [
                            "torch.cat(importance_chunks, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(importance_chunks, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "index_select_600": {
                "variable": {
                    "value": "self.conv3.conv.conv.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3.conv.conv.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "sorted_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_602": {
                "variable": {
                    "value": "self.conv2.conv.conv.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2.conv.conv.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "sorted_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_605": {
                "variable": {
                    "value": "importance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(self.conv2.conv.conv.weight.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(0, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sort_626": {
                "variable": {
                    "value": "(sorted_importance, sorted_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "importance",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(torch.abs(self.point_linear.conv.conv.weight.data), dim=(0, 2, 3))",
                            "Call"
                        ],
                        [
                            "torch.cat(importance_chunks, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(self.conv3.conv.conv.weight.data), dim=(0, 2, 3))",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(self.conv2.conv.conv.weight.data), dim=(0, 2, 3))",
                            "Call"
                        ],
                        [
                            "torch.cat(importance_chunks, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(importance_chunks, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "index_select_628": {
                "variable": {
                    "value": "self.conv2.conv.conv.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2.conv.conv.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "sorted_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_630": {
                "variable": {
                    "value": "self.conv1.conv.conv.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1.conv.conv.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "sorted_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_51": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "variable": {
                    "value": "self.inverted_bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv', DynamicConv2d(max(self.in_channel_list), max_middle_channel)), ('bn', DynamicBatchNorm2d(max_middle_channel)), ('act', build_activation(self.act_func))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_266": {
                "variable": {
                    "value": "importance_chunks",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "importance",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(torch.abs(self.point_linear.conv.conv.weight.data), dim=(0, 2, 3))",
                            "Call"
                        ],
                        [
                            "torch.cat(importance_chunks, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(self.conv3.conv.conv.weight.data), dim=(0, 2, 3))",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(self.conv2.conv.conv.weight.data), dim=(0, 2, 3))",
                            "Call"
                        ],
                        [
                            "torch.cat(importance_chunks, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(importance_chunks, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "channel_per_group",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.depth_conv.bn.channel_per_group",
                            "Attribute"
                        ],
                        [
                            "self.conv2.bn.channel_per_group",
                            "Attribute"
                        ],
                        [
                            "self.conv1.bn.channel_per_group",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_269": {
                "variable": {
                    "value": "importance",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "importance_chunks",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.split(importance, channel_per_group)",
                            "Call"
                        ],
                        [
                            "torch.split(importance, channel_per_group)",
                            "Call"
                        ],
                        [
                            "torch.split(importance, channel_per_group)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "index_select_299": {
                "variable": {
                    "value": "se_expand.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "se_expand.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "sorted_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_300": {
                "variable": {
                    "value": "se_expand.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "se_expand.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "sorted_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_303": {
                "variable": {
                    "value": "se_reduce.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "se_reduce.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "sorted_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_305": {
                "variable": {
                    "value": "se_importance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(se_expand.weight.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(0, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sort_306": {
                "variable": {
                    "value": "(se_importance, se_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "se_importance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(torch.abs(se_expand.weight.data), dim=(0, 2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "index_select_308": {
                "variable": {
                    "value": "se_expand.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "se_expand.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "se_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_309": {
                "variable": {
                    "value": "se_reduce.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "se_reduce.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "se_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_310": {
                "variable": {
                    "value": "se_reduce.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "se_reduce.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "se_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_314": {
                "variable": {
                    "value": "self.inverted_bottleneck.conv.conv.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.inverted_bottleneck.conv.conv.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "sorted_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "split_580": {
                "variable": {
                    "value": "importance_chunks",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "importance",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(torch.abs(self.point_linear.conv.conv.weight.data), dim=(0, 2, 3))",
                            "Call"
                        ],
                        [
                            "torch.cat(importance_chunks, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(self.conv3.conv.conv.weight.data), dim=(0, 2, 3))",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(self.conv2.conv.conv.weight.data), dim=(0, 2, 3))",
                            "Call"
                        ],
                        [
                            "torch.cat(importance_chunks, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(importance_chunks, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "channel_per_group",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.depth_conv.bn.channel_per_group",
                            "Attribute"
                        ],
                        [
                            "self.conv2.bn.channel_per_group",
                            "Attribute"
                        ],
                        [
                            "self.conv1.bn.channel_per_group",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_583": {
                "variable": {
                    "value": "importance",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "importance_chunks",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.split(importance, channel_per_group)",
                            "Call"
                        ],
                        [
                            "torch.split(importance, channel_per_group)",
                            "Call"
                        ],
                        [
                            "torch.split(importance, channel_per_group)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_608": {
                "variable": {
                    "value": "importance_chunks",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "importance",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(torch.abs(self.point_linear.conv.conv.weight.data), dim=(0, 2, 3))",
                            "Call"
                        ],
                        [
                            "torch.cat(importance_chunks, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(self.conv3.conv.conv.weight.data), dim=(0, 2, 3))",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(self.conv2.conv.conv.weight.data), dim=(0, 2, 3))",
                            "Call"
                        ],
                        [
                            "torch.cat(importance_chunks, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(importance_chunks, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "channel_per_group",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.depth_conv.bn.channel_per_group",
                            "Attribute"
                        ],
                        [
                            "self.conv2.bn.channel_per_group",
                            "Attribute"
                        ],
                        [
                            "self.conv1.bn.channel_per_group",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_611": {
                "variable": {
                    "value": "importance",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "importance_chunks",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.split(importance, channel_per_group)",
                            "Call"
                        ],
                        [
                            "torch.split(importance, channel_per_group)",
                            "Call"
                        ],
                        [
                            "torch.split(importance, channel_per_group)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_263": {
                "input": {
                    "value": "self.point_linear.conv.conv.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_453": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv', DynamicConv2d(max(self.in_channel_list), max(self.out_channel_list), stride=stride)), ('bn', DynamicBatchNorm2d(max(self.out_channel_list)))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_577": {
                "input": {
                    "value": "self.conv3.conv.conv.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_605": {
                "input": {
                    "value": "self.conv2.conv.conv.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_305": {
                "input": {
                    "value": "se_expand.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_458": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('avg_pool', nn.AvgPool2d(kernel_size=stride, stride=stride, padding=0, ceil_mode=True)), ('conv', DynamicConv2d(max(self.in_channel_list), max(self.out_channel_list))), ('bn', DynamicBatchNorm2d(max(self.out_channel_list)))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_268": {
                "input": {
                    "value": "chunk",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "importance_chunks",
                            "Name"
                        ],
                        [
                            "importance_chunks",
                            "Name"
                        ],
                        [
                            "importance_chunks",
                            "Name"
                        ]
                    ]
                }
            },
            "mean_582": {
                "input": {
                    "value": "chunk",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "importance_chunks",
                            "Name"
                        ],
                        [
                            "importance_chunks",
                            "Name"
                        ],
                        [
                            "importance_chunks",
                            "Name"
                        ]
                    ]
                }
            },
            "mean_610": {
                "input": {
                    "value": "chunk",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "importance_chunks",
                            "Name"
                        ],
                        [
                            "importance_chunks",
                            "Name"
                        ],
                        [
                            "importance_chunks",
                            "Name"
                        ]
                    ]
                }
            },
            "AvgPool2d_459": {
                "kernel_size": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/ofa/imagenet_classification/elastic_nn/modules/dynamic_op.py": {
        "torch": {
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.max_in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.max_in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "max(self.kernel_size_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.max_in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_85": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "filters",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv.weight[:out_channel, :in_channel, start:end, start:end]",
                            "Subscript"
                        ],
                        [
                            "start_filter",
                            "Name"
                        ],
                        [
                            "self.get_active_filter(in_channel, kernel_size).contiguous()",
                            "Call"
                        ],
                        [
                            "self.conv.weight_standardization(filters) if isinstance(self.conv, MyConv2d) else filters",
                            "IfExp"
                        ],
                        [
                            "self.get_active_filter(out_channel, in_channel).contiguous()",
                            "Call"
                        ],
                        [
                            "self.conv.weight_standardization(filters) if isinstance(self.conv, MyConv2d) else filters",
                            "IfExp"
                        ],
                        [
                            "self.conv.weight[:, :, start:end, start:end]",
                            "Subscript"
                        ],
                        [
                            "torch.cat(filter_crops, dim=0)",
                            "Call"
                        ],
                        [
                            "self.get_active_filter(kernel_size, groups).contiguous()",
                            "Call"
                        ],
                        [
                            "self.conv.weight_standardization(filters) if isinstance(self.conv, MyConv2d) else filters",
                            "IfExp"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Call",
                    "possible_values": [
                        [
                            "get_same_padding(kernel_size)",
                            "Call"
                        ],
                        [
                            "get_same_padding(self.kernel_size)",
                            "Call"
                        ],
                        [
                            "get_same_padding(kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "in_channel",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_102": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.max_in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.max_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_119": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "filters",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv.weight[:out_channel, :in_channel, start:end, start:end]",
                            "Subscript"
                        ],
                        [
                            "start_filter",
                            "Name"
                        ],
                        [
                            "self.get_active_filter(in_channel, kernel_size).contiguous()",
                            "Call"
                        ],
                        [
                            "self.conv.weight_standardization(filters) if isinstance(self.conv, MyConv2d) else filters",
                            "IfExp"
                        ],
                        [
                            "self.get_active_filter(out_channel, in_channel).contiguous()",
                            "Call"
                        ],
                        [
                            "self.conv.weight_standardization(filters) if isinstance(self.conv, MyConv2d) else filters",
                            "IfExp"
                        ],
                        [
                            "self.conv.weight[:, :, start:end, start:end]",
                            "Subscript"
                        ],
                        [
                            "torch.cat(filter_crops, dim=0)",
                            "Call"
                        ],
                        [
                            "self.get_active_filter(kernel_size, groups).contiguous()",
                            "Call"
                        ],
                        [
                            "self.conv.weight_standardization(filters) if isinstance(self.conv, MyConv2d) else filters",
                            "IfExp"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Call",
                    "possible_values": [
                        [
                            "get_same_padding(kernel_size)",
                            "Call"
                        ],
                        [
                            "get_same_padding(self.kernel_size)",
                            "Call"
                        ],
                        [
                            "get_same_padding(kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_135": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "max(self.kernel_size_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "min(self.groups_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "chunk_147": {
                "variable": {
                    "value": "sub_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "filters",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv.weight[:out_channel, :in_channel, start:end, start:end]",
                            "Subscript"
                        ],
                        [
                            "start_filter",
                            "Name"
                        ],
                        [
                            "self.get_active_filter(in_channel, kernel_size).contiguous()",
                            "Call"
                        ],
                        [
                            "self.conv.weight_standardization(filters) if isinstance(self.conv, MyConv2d) else filters",
                            "IfExp"
                        ],
                        [
                            "self.get_active_filter(out_channel, in_channel).contiguous()",
                            "Call"
                        ],
                        [
                            "self.conv.weight_standardization(filters) if isinstance(self.conv, MyConv2d) else filters",
                            "IfExp"
                        ],
                        [
                            "self.conv.weight[:, :, start:end, start:end]",
                            "Subscript"
                        ],
                        [
                            "torch.cat(filter_crops, dim=0)",
                            "Call"
                        ],
                        [
                            "self.get_active_filter(kernel_size, groups).contiguous()",
                            "Call"
                        ],
                        [
                            "self.conv.weight_standardization(filters) if isinstance(self.conv, MyConv2d) else filters",
                            "IfExp"
                        ]
                    ]
                },
                "chunks": {
                    "value": "groups",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.active_groups",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_156": {
                "variable": {
                    "value": "filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "filter_crops",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_168": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "filters",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv.weight[:out_channel, :in_channel, start:end, start:end]",
                            "Subscript"
                        ],
                        [
                            "start_filter",
                            "Name"
                        ],
                        [
                            "self.get_active_filter(in_channel, kernel_size).contiguous()",
                            "Call"
                        ],
                        [
                            "self.conv.weight_standardization(filters) if isinstance(self.conv, MyConv2d) else filters",
                            "IfExp"
                        ],
                        [
                            "self.get_active_filter(out_channel, in_channel).contiguous()",
                            "Call"
                        ],
                        [
                            "self.conv.weight_standardization(filters) if isinstance(self.conv, MyConv2d) else filters",
                            "IfExp"
                        ],
                        [
                            "self.conv.weight[:, :, start:end, start:end]",
                            "Subscript"
                        ],
                        [
                            "torch.cat(filter_crops, dim=0)",
                            "Call"
                        ],
                        [
                            "self.get_active_filter(kernel_size, groups).contiguous()",
                            "Call"
                        ],
                        [
                            "self.conv.weight_standardization(filters) if isinstance(self.conv, MyConv2d) else filters",
                            "IfExp"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Call",
                    "possible_values": [
                        [
                            "get_same_padding(kernel_size)",
                            "Call"
                        ],
                        [
                            "get_same_padding(self.kernel_size)",
                            "Call"
                        ],
                        [
                            "get_same_padding(kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.active_groups",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_181": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.max_feature_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_274": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.conv2d(x, filters, None, self.stride, padding, self.dilation, in_channel)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, filters, None, self.stride, padding, self.dilation, 1)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, filters, None, self.stride, padding, self.dilation, groups)",
                            "Call"
                        ],
                        [
                            "self.bn_forward(x, self.bn, feature_dim)",
                            "Call"
                        ],
                        [
                            "x.mean(3, keepdim=True).mean(2, keepdim=True)",
                            "Call"
                        ],
                        [
                            "F.conv2d(y, reduce_filter, reduce_bias, 1, 0, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.fc.relu(y)",
                            "Call"
                        ],
                        [
                            "F.conv2d(y, expand_filter, expand_bias, 1, 0, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.fc.h_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "F.linear(x, weight, bias)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "reduce_filter",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_active_reduce_weight(num_mid, in_channel, groups=groups).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "reduce_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_active_reduce_bias(num_mid)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_280": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.conv2d(x, filters, None, self.stride, padding, self.dilation, in_channel)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, filters, None, self.stride, padding, self.dilation, 1)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, filters, None, self.stride, padding, self.dilation, groups)",
                            "Call"
                        ],
                        [
                            "self.bn_forward(x, self.bn, feature_dim)",
                            "Call"
                        ],
                        [
                            "x.mean(3, keepdim=True).mean(2, keepdim=True)",
                            "Call"
                        ],
                        [
                            "F.conv2d(y, reduce_filter, reduce_bias, 1, 0, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.fc.relu(y)",
                            "Call"
                        ],
                        [
                            "F.conv2d(y, expand_filter, expand_bias, 1, 0, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.fc.h_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "F.linear(x, weight, bias)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "expand_filter",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_active_expand_weight(num_mid, in_channel, groups=groups).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "expand_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_active_expand_bias(in_channel, groups=groups)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_296": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.max_in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.max_out_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_313": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_active_weight(out_features, in_features).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_active_bias(out_features)",
                            "Call"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "group_norm_218": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "n_groups",
                    "type": "Name",
                    "possible_values": [
                        [
                            "n_channels // self.channel_per_group",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight[:n_channels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias[:n_channels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "chunk_236": {
                "variable": {
                    "value": "sub_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc.reduce.weight[:num_mid, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "chunks": {
                    "value": "groups",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.active_groups",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "chunk_250": {
                "variable": {
                    "value": "sub_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc.expand.weight[:, :num_mid, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "chunks": {
                    "value": "groups",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.active_groups",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "chunk_261": {
                "variable": {
                    "value": "sub_bias_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc.expand.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "chunks": {
                    "value": "groups",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.active_groups",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_43": {
                "variable": {
                    "value": "scale_params[%s_matrix % param_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.eye(ks_small ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_67": {
                "variable": {
                    "value": "_input_filter",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_input_filter",
                    "type": "Call",
                    "possible_values": [
                        [
                            "start_filter[:, :, start:end, start:end]",
                            "Subscript"
                        ],
                        [
                            "_input_filter.contiguous()",
                            "Call"
                        ],
                        [
                            "_input_filter.view(_input_filter.size(0), _input_filter.size(1), -1)",
                            "Call"
                        ],
                        [
                            "_input_filter.view(-1, _input_filter.size(2))",
                            "Call"
                        ],
                        [
                            "F.linear(_input_filter, self.__getattr__('%dto%d_matrix' % (src_ks, target_ks)))",
                            "Call"
                        ],
                        [
                            "_input_filter.view(filters.size(0), filters.size(1), target_ks ** 2)",
                            "Call"
                        ],
                        [
                            "_input_filter.view(filters.size(0), filters.size(1), target_ks, target_ks)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.__getattr__('%dto%d_matrix' % (src_ks, target_ks))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_norm_197": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "bn.running_mean[:feature_dim]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "running_var": {
                    "value": "bn.running_var[:feature_dim]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "bn.weight[:feature_dim]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "bn.bias[:feature_dim]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "training": {
                    "value": "bn.training or not bn.track_running_stats",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "exponential_average_factor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "1.0 / float(bn.num_batches_tracked)",
                            "BinOp"
                        ],
                        [
                            "bn.momentum",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "bn.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_237": {
                "tensors": {
                    "value": "[sub_filter[:, :sub_in_channels, :, :] for sub_filter in sub_filters]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_251": {
                "tensors": {
                    "value": "[sub_filter[:sub_in_channels, :, :, :] for sub_filter in sub_filters]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_262": {
                "tensors": {
                    "value": "[sub_bias[:sub_in_channels] for sub_bias in sub_bias_list]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_43": {
                "n": {
                    "value": "ks_small ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/ofa/imagenet_classification/elastic_nn/networks/mbv3.py": {
        "torch": {
            "randn_418": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "236",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "236",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/ofa/imagenet_classification/elastic_nn/networks/ofa_mbv3.py": {
        "torch": {
            "randn_344": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "236",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "236",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/ofa/imagenet_classification/elastic_nn/training/progressive_shrinking.py": {
        "torch": {
            "load_204": {
                "f": {
                    "value": "model_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_119": {
                "variable": {
                    "value": "soft_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.teacher_model(images).detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_144": {
                "variable": {
                    "value": "kd_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "run_manager.net(images)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "soft_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.teacher_model(images).detach()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch-image-models/timm/models/ofa/imagenet_classification/elastic_nn/utils.py": {
        "torch": {
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_36": {
                "variable": {
                    "value": "batch_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_mean",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.mean(0, keepdim=True).mean(2, keepdim=True).mean(3, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(batch_mean)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_37": {
                "variable": {
                    "value": "batch_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_var",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(x - batch_mean) * (x - batch_mean)",
                            "BinOp"
                        ],
                        [
                            "batch_var.mean(0, keepdim=True).mean(2, keepdim=True).mean(3, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(batch_var)",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_norm_44": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "batch_mean",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.mean(0, keepdim=True).mean(2, keepdim=True).mean(3, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(batch_mean)",
                            "Call"
                        ]
                    ]
                },
                "running_var": {
                    "value": "batch_var",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(x - batch_mean) * (x - batch_mean)",
                            "BinOp"
                        ],
                        [
                            "batch_var.mean(0, keepdim=True).mean(2, keepdim=True).mean(3, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(batch_var)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "bn.weight[:_feature_dim]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "bn.bias[:_feature_dim]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "training": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/ofa/imagenet_classification/networks/mobilenet_v3.py": {
        "torch": {
            "ModuleList_20": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "blocks",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch-image-models/timm/models/ofa/imagenet_classification/networks/proxyless_nets.py": {
        "torch": {
            "ModuleList_41": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "blocks",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch-image-models/timm/models/ofa/imagenet_classification/networks/resnets.py": {
        "torch": {
            "ModuleList_18": {
                "variable": {
                    "value": "self.input_stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "input_stem",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[ConvLayer(3, input_channel, kernel_size=7, stride=2, use_bn=True, act_func='relu', ops_order='weight_bn_act')]",
                            "List"
                        ],
                        [
                            "[ConvLayer(3, mid_input_channel, 3, stride=2, use_bn=True, act_func='relu'), ResidualBlock(ConvLayer(mid_input_channel, mid_input_channel, 3, stride=1, use_bn=True, act_func='relu'), IdentityLayer(mid_input_channel, mid_input_channel)), ConvLayer(mid_input_channel, input_channel, 3, stride=1, use_bn=True, act_func='relu')]",
                            "List"
                        ]
                    ]
                }
            },
            "MaxPool2d_19": {
                "variable": {
                    "value": "self.max_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_20": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "blocks",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch-image-models/timm/models/ofa/imagenet_classification/run_manager/distributed_run_manager.py": {
        "torch": {
            "CrossEntropyLoss_62": {
                "variable": {
                    "value": "self.test_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_61": {
                "variable": {
                    "value": "self.train_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_150": {
                "obj": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'state_dict': self.net.state_dict()}",
                            "Dict"
                        ],
                        [
                            "torch.load(model_fname, map_location='cpu')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "f": {
                    "value": "model_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_171": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_fname",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fin.readline()",
                            "Call"
                        ],
                        [
                            "model_fname[:-1]",
                            "Subscript"
                        ],
                        [
                            "'%s/checkpoint.pth.tar' % self.save_path",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_154": {
                "obj": {
                    "value": "{'state_dict': checkpoint['state_dict']}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "best_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self.save_path, 'model_best.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_313": {
                "variable": {
                    "value": "soft_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.teacher_model(images).detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mse_loss_325": {
                "variable": {
                    "value": "kd_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(images)",
                            "Call"
                        ],
                        [
                            "self.net(images)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "soft_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.teacher_model(images).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_311": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/ofa/imagenet_classification/run_manager/run_manager.py": {
        "torch": {
            "CrossEntropyLoss_74": {
                "variable": {
                    "value": "self.test_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_221": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.net",
                            "Attribute"
                        ],
                        [
                            "nn.DataParallel(net)",
                            "Call"
                        ],
                        [
                            "self.network",
                            "Attribute"
                        ],
                        [
                            "self.network",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_73": {
                "variable": {
                    "value": "self.train_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_374": {
                "variable": {
                    "value": "soft_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.teacher_model(images).detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mse_loss_386": {
                "variable": {
                    "value": "kd_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(images)",
                            "Call"
                        ],
                        [
                            "self.net(images)",
                            "Call"
                        ],
                        [
                            "self.net(images)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "soft_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.teacher_model(images).detach()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch-image-models/timm/models/ofa/model_zoo.py": {
        "torch": {
            "load_31": {
                "f": {
                    "value": "download_url(url_base + net_id + '/init', model_dir='.torch/ofa_specialized/%s/' % net_id)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_62": {
                "f": {
                    "value": "download_url(url_base + net_id, model_dir='.torch/ofa_nets')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_74": {
                "f": {
                    "value": "download_url('https://hanlab.mit.edu/files/proxylessNAS/%s.pth' % net_id)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/ofa/nas/accuracy_predictor/acc_dataset_old.py": {
        "torch": {
            "tensor_155": {
                "variable": {
                    "value": "X_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "X_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(X_all, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "X_all[shuffle_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_156": {
                "variable": {
                    "value": "Y_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "Y_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(Y_all)",
                            "Call"
                        ],
                        [
                            "Y_all[shuffle_idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randperm_159": {
                "variable": {
                    "value": "shuffle_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(X_all)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_174": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "RegDataset(X_train, Y_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "n_workers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_177": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "RegDataset(X_test, Y_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "n_workers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch-image-models/timm/models/ofa/nas/accuracy_predictor/acc_predictor.py": {
        "torch": {
            "Sequential_31": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_32": {
                "variable": {
                    "value": "self.base_acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, device=self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(X)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_35": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "*args": {
                    "value": "nn.Linear(self.arch_encoder.n_dim if i == 0 else self.hidden_size, self.hidden_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "self.arch_encoder.n_dim if i == 0 else self.hidden_size",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/ofa/tutorial/accuracy_predictor.py": {
        "torch": {
            "Sequential_28": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(128, 400)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "all_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_feats",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_feats, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "400",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "400",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "400",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "400",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "400",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "400",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_41": {
                "f": {
                    "value": "fname",
                    "type": "Name",
                    "possible_values": [
                        [
                            "download_url('https://hanlab.mit.edu/files/OnceForAll/tutorial/acc_predictor.pth')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_41": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/ofa/tutorial/flops_table.py": {
        "torch": {
            "randn_33": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*input_size",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_57": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*input_size",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/ofa/tutorial/imagenet_eval_helper.py": {
        "torch": {
            "CrossEntropyLoss_81": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/ofa/utils/common_tools.py": {
        "torch": {
            "zeros_248": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_249": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_267": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/ofa/utils/flops_counter.py": {
        "torch": {
            "zeros_22": {
                "variable": {
                    "value": "m.total_ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_28": {
                "variable": {
                    "value": "m.total_ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_54": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/ofa/utils/layers.py": {
        "torch": {
            "ModuleList_344": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_358": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_450": {
                "variable": {
                    "value": "self.depth_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict(depth_conv_modules)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_452": {
                "variable": {
                    "value": "self.point_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv', nn.Conv2d(feature_dim, out_channels, 1, 1, 0, bias=False)), ('bn', nn.BatchNorm2d(out_channels))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_580": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv', nn.Conv2d(self.in_channels, feature_dim, 1, 1, 0, bias=False)), ('bn', nn.BatchNorm2d(feature_dim)), ('act', build_activation(self.act_func, inplace=True))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_587": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv', nn.Conv2d(feature_dim, feature_dim, kernel_size, stride, pad, groups=groups, bias=False)), ('bn', nn.BatchNorm2d(feature_dim)), ('act', build_activation(self.act_func, inplace=True))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_593": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv', nn.Conv2d(feature_dim, self.out_channels, 1, 1, 0, bias=False)), ('bn', nn.BatchNorm2d(self.out_channels))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout2d_70": {
                "variable": {
                    "value": "modules[dropout]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_270": {
                "variable": {
                    "value": "modules[dropout]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_340": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_346": {
                "variable": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_435": {
                "variable": {
                    "value": "self.inverted_bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv', nn.Conv2d(self.in_channels, feature_dim, 1, 1, 0, bias=False)), ('bn', nn.BatchNorm2d(feature_dim)), ('act', build_activation(self.act_func, inplace=True))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "variable": {
                    "value": "modules[bn]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "variable": {
                    "value": "modules[bn]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_261": {
                "variable": {
                    "value": "modules[bn]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_263": {
                "variable": {
                    "value": "modules[bn]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_274": {
                "in_features": {
                    "value": "self.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_601": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv', nn.Conv2d(in_channels, out_channels, 1, stride, 0, bias=False)), ('bn', nn.BatchNorm2d(out_channels))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_160": {
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_same_padding(self.kernel_size)",
                            "Call"
                        ],
                        [
                            "padding * self.dilation",
                            "BinOp"
                        ]
                    ]
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "min_divisible_value(self.in_channels, self.groups)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_444": {
                "in_channels": {
                    "value": "feature_dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "round(self.in_channels * self.expand_ratio)",
                            "Call"
                        ],
                        [
                            "self.mid_channels",
                            "Attribute"
                        ],
                        [
                            "round(self.out_channels * self.expand_ratio)",
                            "Call"
                        ],
                        [
                            "self.mid_channels",
                            "Attribute"
                        ],
                        [
                            "make_divisible(feature_dim, MyNetwork.CHANNEL_DIVISIBLE)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "feature_dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "round(self.in_channels * self.expand_ratio)",
                            "Call"
                        ],
                        [
                            "self.mid_channels",
                            "Attribute"
                        ],
                        [
                            "round(self.out_channels * self.expand_ratio)",
                            "Call"
                        ],
                        [
                            "self.mid_channels",
                            "Attribute"
                        ],
                        [
                            "make_divisible(feature_dim, MyNetwork.CHANNEL_DIVISIBLE)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "(self.kernel_size, self.kernel_size)",
                            "Tuple"
                        ],
                        [
                            "self.kernel_size",
                            "Attribute"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "Call",
                    "possible_values": [
                        [
                            "get_same_padding(self.kernel_size)",
                            "Call"
                        ],
                        [
                            "get_same_padding(self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "feature_dim if self.groups is None else min_divisible_value(feature_dim, self.groups)",
                            "IfExp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_445": {
                "num_features": {
                    "value": "feature_dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "round(self.in_channels * self.expand_ratio)",
                            "Call"
                        ],
                        [
                            "self.mid_channels",
                            "Attribute"
                        ],
                        [
                            "round(self.out_channels * self.expand_ratio)",
                            "Call"
                        ],
                        [
                            "self.mid_channels",
                            "Attribute"
                        ],
                        [
                            "make_divisible(feature_dim, MyNetwork.CHANNEL_DIVISIBLE)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_606": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('avg_pool', nn.AvgPool2d(kernel_size=stride, stride=stride, padding=0, ceil_mode=True)), ('conv', nn.Conv2d(in_channels, out_channels, 1, 1, 0, bias=False)), ('bn', nn.BatchNorm2d(out_channels))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_453": {
                "in_channels": {
                    "value": "feature_dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "round(self.in_channels * self.expand_ratio)",
                            "Call"
                        ],
                        [
                            "self.mid_channels",
                            "Attribute"
                        ],
                        [
                            "round(self.out_channels * self.expand_ratio)",
                            "Call"
                        ],
                        [
                            "self.mid_channels",
                            "Attribute"
                        ],
                        [
                            "make_divisible(feature_dim, MyNetwork.CHANNEL_DIVISIBLE)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_454": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_581": {
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "round(self.in_channels * self.expand_ratio)",
                            "Call"
                        ],
                        [
                            "self.mid_channels",
                            "Attribute"
                        ],
                        [
                            "round(self.out_channels * self.expand_ratio)",
                            "Call"
                        ],
                        [
                            "self.mid_channels",
                            "Attribute"
                        ],
                        [
                            "make_divisible(feature_dim, MyNetwork.CHANNEL_DIVISIBLE)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_582": {
                "num_features": {
                    "value": "feature_dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "round(self.in_channels * self.expand_ratio)",
                            "Call"
                        ],
                        [
                            "self.mid_channels",
                            "Attribute"
                        ],
                        [
                            "round(self.out_channels * self.expand_ratio)",
                            "Call"
                        ],
                        [
                            "self.mid_channels",
                            "Attribute"
                        ],
                        [
                            "make_divisible(feature_dim, MyNetwork.CHANNEL_DIVISIBLE)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_588": {
                "in_channels": {
                    "value": "feature_dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "round(self.in_channels * self.expand_ratio)",
                            "Call"
                        ],
                        [
                            "self.mid_channels",
                            "Attribute"
                        ],
                        [
                            "round(self.out_channels * self.expand_ratio)",
                            "Call"
                        ],
                        [
                            "self.mid_channels",
                            "Attribute"
                        ],
                        [
                            "make_divisible(feature_dim, MyNetwork.CHANNEL_DIVISIBLE)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "feature_dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "round(self.in_channels * self.expand_ratio)",
                            "Call"
                        ],
                        [
                            "self.mid_channels",
                            "Attribute"
                        ],
                        [
                            "round(self.out_channels * self.expand_ratio)",
                            "Call"
                        ],
                        [
                            "self.mid_channels",
                            "Attribute"
                        ],
                        [
                            "make_divisible(feature_dim, MyNetwork.CHANNEL_DIVISIBLE)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "(self.kernel_size, self.kernel_size)",
                            "Tuple"
                        ],
                        [
                            "self.kernel_size",
                            "Attribute"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "Call",
                    "possible_values": [
                        [
                            "get_same_padding(self.kernel_size)",
                            "Call"
                        ],
                        [
                            "get_same_padding(self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "feature_dim if self.groups is None else min_divisible_value(feature_dim, self.groups)",
                            "IfExp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_589": {
                "num_features": {
                    "value": "feature_dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "round(self.in_channels * self.expand_ratio)",
                            "Call"
                        ],
                        [
                            "self.mid_channels",
                            "Attribute"
                        ],
                        [
                            "round(self.out_channels * self.expand_ratio)",
                            "Call"
                        ],
                        [
                            "self.mid_channels",
                            "Attribute"
                        ],
                        [
                            "make_divisible(feature_dim, MyNetwork.CHANNEL_DIVISIBLE)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_594": {
                "in_channels": {
                    "value": "feature_dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "round(self.in_channels * self.expand_ratio)",
                            "Call"
                        ],
                        [
                            "self.mid_channels",
                            "Attribute"
                        ],
                        [
                            "round(self.out_channels * self.expand_ratio)",
                            "Call"
                        ],
                        [
                            "self.mid_channels",
                            "Attribute"
                        ],
                        [
                            "make_divisible(feature_dim, MyNetwork.CHANNEL_DIVISIBLE)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_595": {
                "num_features": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_436": {
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "round(self.in_channels * self.expand_ratio)",
                            "Call"
                        ],
                        [
                            "self.mid_channels",
                            "Attribute"
                        ],
                        [
                            "round(self.out_channels * self.expand_ratio)",
                            "Call"
                        ],
                        [
                            "self.mid_channels",
                            "Attribute"
                        ],
                        [
                            "make_divisible(feature_dim, MyNetwork.CHANNEL_DIVISIBLE)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_437": {
                "num_features": {
                    "value": "feature_dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "round(self.in_channels * self.expand_ratio)",
                            "Call"
                        ],
                        [
                            "self.mid_channels",
                            "Attribute"
                        ],
                        [
                            "round(self.out_channels * self.expand_ratio)",
                            "Call"
                        ],
                        [
                            "self.mid_channels",
                            "Attribute"
                        ],
                        [
                            "make_divisible(feature_dim, MyNetwork.CHANNEL_DIVISIBLE)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_602": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_603": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AvgPool2d_607": {
                "kernel_size": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_608": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_609": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/ofa/utils/my_dataloader/my_data_loader.py": {
        "torch": {
            "empty_336": {
                "variable": {
                    "value": "self._base_seed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchSampler_223": {
                "variable": {
                    "value": "batch_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_InfiniteConstantSampler()",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_available_332": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomSampler_217": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_219": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "current_device_733": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/ofa/utils/my_dataloader/my_data_worker.py": {
        "torch": {
            "set_num_threads_127": {
                "int": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_129": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/ofa/utils/my_dataloader/my_distributed_sampler.py": {
        "torch": {
            "Generator_22": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_24": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.sub_index_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ],
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "Generator_53": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_tensor_45": {
                "data": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_57": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "replacement": {
                    "value": "self.replacement",
                    "type": "Attribute",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ],
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch-image-models/timm/models/ofa/utils/my_modules.py": {
        "torch": {
            "GroupNorm_61": {
                "variable": {
                    "value": "gn_m",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "num_groups",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sub_m.num_features // min_divisible_value(sub_m.num_features, gn_channel_per_group)",
                            "BinOp"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "sub_m.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "sub_m.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_156": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight_standardization(self.weight)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/ofa/utils/pytorch_modules.py": {
        "torch": {
            "transpose_67": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.view(batch_size, self.groups, channels_per_group, height, width)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, -1, height, width)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('reduce', nn.Conv2d(self.channel, num_mid, 1, 1, 0, bias=True)), ('relu', nn.ReLU(inplace=True)), ('expand', nn.Conv2d(num_mid, self.channel, 1, 1, 0, bias=True)), ('h_sigmoid', Hsigmoid(inplace=True))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "inplace": {
                    "value": "inplace",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU6_41": {
                "inplace": {
                    "value": "inplace",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu6_109": {
                "input": {
                    "value": "x + 3.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "self.inplace",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu6_96": {
                "input": {
                    "value": "x + 3.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "self.inplace",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_153": {
                "input": {
                    "value": "outputs[:, k, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "targets[:, k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sigmoid_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_127": {
                "in_channels": {
                    "value": "self.channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_mid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "make_divisible(self.channel // self.reduction, divisor=MyNetwork.CHANNEL_DIVISIBLE)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_128": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_129": {
                "in_channels": {
                    "value": "num_mid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "make_divisible(self.channel // self.reduction, divisor=MyNetwork.CHANNEL_DIVISIBLE)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/ofa/utils/pytorch_utils.py": {
        "torch": {
            "flip_23": {
                "variable": {
                    "value": "flipped_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(data_shape, device=get_net_device(net))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_29": {
                "variable": {
                    "value": "flipped_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "onehot_target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "label_smooth(target, n_classes, label_smoothing)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_37": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.unsqueeze(target, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_38": {
                "variable": {
                    "value": "soft_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, n_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "target.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogSoftmax_46": {
                "variable": {
                    "value": "logsoftmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_154": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[batch_size] + list(input_shape)",
                            "BinOp"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "get_net_device(net)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_47": {
                "input": {
                    "value": "torch.sum(-soft_target * logsoftmax(pred), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_218": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net_params",
                    "type": "List",
                    "possible_values": [
                        [
                            "[{'params': net_params, 'weight_decay': weight_decay}]",
                            "List"
                        ],
                        [
                            "[{'params': net_params[0], 'weight_decay': weight_decay}, {'params': net_params[1], 'weight_decay': 0}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "init_lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Variable",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "nesterov",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_47": {
                "input": {
                    "value": "-soft_target * logsoftmax(pred)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_220": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net_params",
                    "type": "List",
                    "possible_values": [
                        [
                            "[{'params': net_params, 'weight_decay': weight_decay}]",
                            "List"
                        ],
                        [
                            "[{'params': net_params[0], 'weight_decay': weight_decay}, {'params': net_params[1], 'weight_decay': 0}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "init_lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cross_entropy_81": {
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_141": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "kl_div_64": {
                "input": {
                    "value": "F.log_softmax(out_s / self.T, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "F.softmax(out_t / self.T, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "KLDivLoss_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_79": {
                "input": {
                    "value": "outputs / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_80": {
                "input": {
                    "value": "teacher_outputs / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_64": {
                "input": {
                    "value": "out_s / self.T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_65": {
                "input": {
                    "value": "out_t / self.T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/ofa_mbv3.py": {
        "torch": {
            "randn_325": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "236",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "236",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/pit.py": {
        "torch": {
            "ModuleList_81": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[Block(dim=embed_dim, num_heads=heads, mlp_ratio=mlp_ratio, qkv_bias=True, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=drop_path_prob[i], norm_layer=partial(nn.LayerNorm, eps=1e-06)) for i in range(depth)]",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_tokens, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_122": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "stride + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "stride // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'zeros'",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "in_feature",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_125": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_feature",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_138": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "patch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "to_2tuple(patch_size)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_169": {
                "variable": {
                    "value": "self.pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, base_dims[0] * heads[0], height, width)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_172": {
                "variable": {
                    "value": "self.cls_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, self.num_tokens, base_dims[0] * heads[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_173": {
                "variable": {
                    "value": "self.pos_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_188": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "base_dims[-1] * heads[-1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_169": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "base_dims[0] * heads[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "height",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math.floor((img_size[0] + 2 * padding - patch_size[0]) / stride + 1)",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math.floor((img_size[1] + 2 * padding - patch_size[1]) / stride + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_172": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "base_dims[0] * heads[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_192": {
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs.pop('num_classes', default_num_classes)",
                            "Call"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_193": {
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Identity_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_214": {
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs.pop('num_classes', default_num_classes)",
                            "Call"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_215": {
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Identity_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linspace_177": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "sum(depth)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_177": {
                "tensor": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/pnasnet.py": {
        "torch": {
            "ReLU_59": {
                "variable": {
                    "value": "self.act_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "variable": {
                    "value": "self.bn_sep_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "middle_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels if stem_cell else in_channels",
                            "IfExp"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "variable": {
                    "value": "self.act_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "variable": {
                    "value": "self.bn_sep_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_85": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_98": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_99": {
                "variable": {
                    "value": "self.path_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('avgpool', nn.AvgPool2d(1, stride=2, count_include_pad=False)), ('conv', create_conv2d(in_channels, out_channels // 2, kernel_size=1, padding=padding))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "variable": {
                    "value": "self.path_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('pad', nn.ZeroPad2d((-1, 1, -1, 1))), ('avgpool', nn.AvgPool2d(1, stride=2, count_include_pad=False)), ('conv', create_conv2d(in_channels, out_channels // 2, kernel_size=1, padding=padding))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_108": {
                "variable": {
                    "value": "self.final_path_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_144": {
                "variable": {
                    "value": "x_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_comb_iter_0, x_comb_iter_1, x_comb_iter_2, x_comb_iter_3, x_comb_iter_4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_156": {
                "variable": {
                    "value": "self.comb_iter_0_right",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('max_pool', create_pool2d('max', 3, stride=2, padding=pad_type)), ('conv', create_conv2d(in_chs_left, out_chs_left, kernel_size=1, padding=pad_type)), ('bn', nn.BatchNorm2d(out_chs_left, eps=0.001))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_287": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_330": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.depthwise_conv2d(x)",
                            "Call"
                        ],
                        [
                            "self.pointwise_conv2d(x)",
                            "Call"
                        ],
                        [
                            "self.act_1(x)",
                            "Call"
                        ],
                        [
                            "self.separable_1(x)",
                            "Call"
                        ],
                        [
                            "self.bn_sep_1(x)",
                            "Call"
                        ],
                        [
                            "self.act_2(x)",
                            "Call"
                        ],
                        [
                            "self.separable_2(x)",
                            "Call"
                        ],
                        [
                            "self.bn_sep_2(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.act(x_cell_11)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.last_linear(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_114": {
                "tensors": {
                    "value": "[x_path1, x_path2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_100": {
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ZeroPad2d_104": {
                "padding": {
                    "value": "(-1, 1, -1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AvgPool2d_105": {
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_159": {
                "num_features": {
                    "value": "out_chs_left",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/regnet.py": {
        "torch": {
            "Identity_191": {
                "variable": {
                    "value": "pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_195": {
                "*args": {
                    "value": "*[pool, ConvBnAct(in_chs, out_chs, 1, stride=1, norm_layer=norm_layer, act_layer=None)]",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/res2net.py": {
        "torch": {
            "Conv2d_65": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "width * scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_75": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "convs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_76": {
                "variable": {
                    "value": "self.bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "bns",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv2d_83": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "width * scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "planes * self.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_100": {
                "variable": {
                    "value": "spx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "torch.cat(spo, 1)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.se(out)",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.width",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "spo",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_79": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "in_channels": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(math.floor(planes * (base_width / 64.0))) * cardinality",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(math.floor(planes * (base_width / 64.0))) * cardinality",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "first_dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "first_dilation or dilation",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "first_dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "first_dilation or dilation",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "cardinality",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/resnest.py": {
        "torch": {
            "Conv2d_80": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "group_width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(planes * (base_width / 64.0)) * cardinality",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "group_width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(planes * (base_width / 64.0)) * cardinality",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "group_width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(planes * (base_width / 64.0)) * cardinality",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "group_width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(planes * (base_width / 64.0)) * cardinality",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "first_dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "first_dilation or dilation",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "first_dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "first_dilation or dilation",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "cardinality",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_83": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "avd_stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "stride",
                            "Name"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_97": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "avd_stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "stride",
                            "Name"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/resnet.py": {
        "torch": {
            "Conv2d_297": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "planes * block_fn.expansion",
                            "BinOp"
                        ],
                        [
                            "stem_width * 2 if deep_stem else 64",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "first_planes",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "planes // reduce_first",
                            "BinOp"
                        ],
                        [
                            "width // reduce_first",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1 if use_aa else stride",
                    "type": "IfExp",
                    "possible_values": []
                },
                "padding": {
                    "value": "first_dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "first_dilation or dilation if kernel_size > 1 else 1",
                            "IfExp"
                        ],
                        [
                            "first_dilation or dilation",
                            "BoolOp"
                        ],
                        [
                            "first_dilation or dilation",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "first_dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "first_dilation or dilation if kernel_size > 1 else 1",
                            "IfExp"
                        ],
                        [
                            "first_dilation or dilation",
                            "BoolOp"
                        ],
                        [
                            "first_dilation or dilation",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_304": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "first_planes",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "planes // reduce_first",
                            "BinOp"
                        ],
                        [
                            "width // reduce_first",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outplanes",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "planes * self.expansion",
                            "BinOp"
                        ],
                        [
                            "planes * self.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "dilation * stride",
                            "BinOp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "dilation * stride",
                            "BinOp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_364": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "planes * block_fn.expansion",
                            "BinOp"
                        ],
                        [
                            "stem_width * 2 if deep_stem else 64",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "first_planes",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "planes // reduce_first",
                            "BinOp"
                        ],
                        [
                            "width // reduce_first",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_368": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "first_planes",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "planes // reduce_first",
                            "BinOp"
                        ],
                        [
                            "width // reduce_first",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(math.floor(planes * (base_width / 64)) * cardinality)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1 if use_aa else stride",
                    "type": "IfExp",
                    "possible_values": []
                },
                "padding": {
                    "value": "first_dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "first_dilation or dilation if kernel_size > 1 else 1",
                            "IfExp"
                        ],
                        [
                            "first_dilation or dilation",
                            "BoolOp"
                        ],
                        [
                            "first_dilation or dilation",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "first_dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "first_dilation or dilation if kernel_size > 1 else 1",
                            "IfExp"
                        ],
                        [
                            "first_dilation or dilation",
                            "BoolOp"
                        ],
                        [
                            "first_dilation or dilation",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "cardinality",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_375": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(math.floor(planes * (base_width / 64)) * cardinality)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outplanes",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "planes * self.expansion",
                            "BinOp"
                        ],
                        [
                            "planes * self.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_433": {
                "*args": {
                    "value": "*[nn.Conv2d(in_channels, out_channels, kernel_size, stride=stride, padding=p, dilation=first_dilation, bias=False), norm_layer(out_channels)]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_445": {
                "variable": {
                    "value": "pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_450": {
                "*args": {
                    "value": "*[pool, nn.Conv2d(in_channels, out_channels, 1, stride=1, padding=0, bias=False), norm_layer(out_channels)]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_596": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Conv2d(in_chans, stem_chs[0], 3, stride=2, padding=1, bias=False), norm_layer(stem_chs[0]), act_layer(inplace=True), nn.Conv2d(stem_chs[0], stem_chs[1], 3, stride=1, padding=1, bias=False), norm_layer(stem_chs[1]), act_layer(inplace=True), nn.Conv2d(stem_chs[1], inplanes, 3, stride=1, padding=1, bias=False)]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_605": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chans",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "planes * block_fn.expansion",
                            "BinOp"
                        ],
                        [
                            "stem_width * 2 if deep_stem else 64",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_612": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*filter(None, [nn.Conv2d(inplanes, inplanes, 3, stride=1 if aa_layer else 2, padding=1, bias=False), aa_layer(channels=inplanes, stride=2) if aa_layer else None, norm_layer(inplanes), act_layer(inplace=True)])",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_675": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.drop_block(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.aa(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.drop_block(x)",
                            "Call"
                        ],
                        [
                            "self.se(x)",
                            "Call"
                        ],
                        [
                            "self.drop_path(x)",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.drop_block(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.drop_block(x)",
                            "Call"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "self.aa(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "self.drop_block(x)",
                            "Call"
                        ],
                        [
                            "self.se(x)",
                            "Call"
                        ],
                        [
                            "self.drop_path(x)",
                            "Call"
                        ],
                        [
                            "self.act3(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=float(self.drop_rate), training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "float(self.drop_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_620": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.MaxPool2d(kernel_size=3, stride=1, padding=1), aa_layer(channels=inplanes, stride=2)]",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_624": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_434": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1 if stride == 1 and dilation == 1 else kernel_size",
                            "IfExp"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1 if stage_idx == 0 else 2",
                            "IfExp"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "stride if block_idx == 0 else 1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_padding(kernel_size, stride, first_dilation)",
                            "Call"
                        ]
                    ]
                },
                "dilation": {
                    "value": "first_dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "first_dilation or dilation if kernel_size > 1 else 1",
                            "IfExp"
                        ],
                        [
                            "first_dilation or dilation",
                            "BoolOp"
                        ],
                        [
                            "first_dilation or dilation",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_452": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_502": {
                "*args": {
                    "value": "*blocks",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_597": {
                "in_channels": {
                    "value": "in_chans",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "stem_chs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_600": {
                "in_channels": {
                    "value": "stem_chs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "stem_chs[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_603": {
                "in_channels": {
                    "value": "stem_chs[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "planes * block_fn.expansion",
                            "BinOp"
                        ],
                        [
                            "stem_width * 2 if deep_stem else 64",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_613": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "planes * block_fn.expansion",
                            "BinOp"
                        ],
                        [
                            "stem_width * 2 if deep_stem else 64",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "planes * block_fn.expansion",
                            "BinOp"
                        ],
                        [
                            "stem_width * 2 if deep_stem else 64",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1 if aa_layer else 2",
                    "type": "IfExp",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_621": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/resnetv2.py": {
        "torch": {
            "from_numpy_118": {
                "ndarray": {
                    "value": "conv_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_weights.transpose([3, 2, 0, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_260": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConstantPad2d_299": {
                "variable": {
                    "value": "stem[pad]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_300": {
                "variable": {
                    "value": "stem[pool]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_308": {
                "*args": {
                    "value": "stem",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_337": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_242": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_306": {
                "variable": {
                    "value": "stem[pool]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Identity_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_244": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_353": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_388": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linspace_335": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "block_dpr[block_idx] if block_dpr else 0.0",
                            "IfExp"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "sum(layers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_335": {
                "tensor": {
                    "value": "layers",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/rexnet.py": {
        "torch": {
            "Conv2d_58": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "reduction_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "reduction_channels or make_divisible(int(channels * se_ratio), divisor=divisor)",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_59": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "reduction_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "reduction_channels or make_divisible(int(channels * se_ratio), divisor=divisor)",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "reduction_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "reduction_channels or make_divisible(int(channels * se_ratio), divisor=divisor)",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_176": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/search_cells.py": {
        "torch": {
            "ModuleDict_18": {
                "variable": {
                    "value": "self.edges",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_142": {
                "variable": {
                    "value": "self._ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_167": {
                "variable": {
                    "value": "self._ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleDict_168": {
                "variable": {
                    "value": "self.edges",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_194": {
                "tensors": {
                    "value": "states[-self._multiplier:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_222": {
                "tensors": {
                    "value": "states[-self._multiplier:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_238": {
                "tensors": {
                    "value": "states[-self._multiplier:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_40": {
                "variable": {
                    "value": "self.edges[node_str]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "modules": {
                    "value": "xlists",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[OPS[op_name](C_in, C_out, stride, affine, track_running_stats) for op_name in op_names_list[index]]",
                            "ListComp"
                        ],
                        [
                            "[OPS[op_name](C_in, C_out, 1, affine, track_running_stats) for op_name in op_names_list[index]]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch-image-models/timm/models/selecsls.py": {
        "torch": {
            "Sequential_103": {
                "*args": {
                    "value": "nn.Conv2d(in_chs, out_chs, k, stride, padding=padding, dilation=dilation, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_164": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[conv_bn(*conv_args) for conv_args in cfg['head']]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "in_channels": {
                    "value": "in_chs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_chs",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(stride - 1 + dilation * (k - 1)) // 2",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_105": {
                "num_features": {
                    "value": "out_chs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_106": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_194": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "[x]",
                            "List"
                        ],
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.head(self.from_seq(x))",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_97": {
                "tensors": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "[x]",
                            "List"
                        ],
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.head(self.from_seq(x))",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_134": {
                "tensors": {
                    "value": "[d1, d2, d3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_137": {
                "tensors": {
                    "value": "[d1, d2, d3, x[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/senet.py": {
        "torch": {
            "Conv2d_74": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_77": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_127": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_128": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_131": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_132": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_134": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_135": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_152": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_154": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_155": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_157": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_158": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_159": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_160": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_176": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math.floor(planes * (base_width / 64)) * groups",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_178": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math.floor(planes * (base_width / 64)) * groups",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_179": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math.floor(planes * (base_width / 64)) * groups",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math.floor(planes * (base_width / 64)) * groups",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_181": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math.floor(planes * (base_width / 64)) * groups",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_182": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math.floor(planes * (base_width / 64)) * groups",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_183": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_184": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_195": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_197": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_198": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_200": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_201": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_297": {
                "variable": {
                    "value": "self.layer0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict(layer0_modules)",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_299": {
                "variable": {
                    "value": "self.pool0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_355": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=downsample_kernel_size, stride=stride, padding=downsample_padding, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_367": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_389": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.mean((2, 3), keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.layer0(x)",
                            "Call"
                        ],
                        [
                            "self.pool0(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.last_linear(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.logits(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_356": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "downsample_kernel_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "downsample_padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_359": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_280": {
                "in_channels": {
                    "value": "in_chans",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_281": {
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_282": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_283": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_284": {
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_285": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_286": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_287": {
                "num_features": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_288": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_292": {
                "in_channels": {
                    "value": "in_chans",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_294": {
                "num_features": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_295": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/sknet.py": {
        "torch": {}
    },
    "pytorch-image-models/timm/models/swin_transformer.py": {
        "torch": {
            "Parameter_144": {
                "variable": {
                    "value": "self.relative_position_bias_table",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((2 * window_size[0] - 1) * (2 * window_size[1] - 1), num_heads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_148": {
                "variable": {
                    "value": "coords_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.window_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_149": {
                "variable": {
                    "value": "coords_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.window_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_150": {
                "variable": {
                    "value": "coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.meshgrid([coords_h, coords_w])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_151": {
                "variable": {
                    "value": "coords_flatten",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coords",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(torch.meshgrid([coords_h, coords_w]))",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_160": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_161": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_162": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_163": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Softmax_166": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_325": {
                "variable": {
                    "value": "self.reduction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_343": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x0, x1, x2, x3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_392": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SwinTransformerBlock(dim=dim, input_resolution=input_resolution, num_heads=num_heads, window_size=window_size, shift_size=0 if i % 2 == 0 else window_size // 2, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop, attn_drop=attn_drop, drop_path=drop_path[i] if isinstance(drop_path, list) else drop_path, norm_layer=norm_layer) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_479": {
                "variable": {
                    "value": "self.pos_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_501": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool1d_504": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flatten_531": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.view(B, H // window_size, window_size, W // window_size, window_size, C)",
                            "Call"
                        ],
                        [
                            "windows.view(B, H // window_size, W // window_size, window_size, window_size, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2, 4, 5).contiguous().view(B, H, W, -1)",
                            "Call"
                        ],
                        [
                            "(attn @ v).transpose(1, 2).reshape(B_, N, C)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "torch.roll(shifted_x, shifts=(self.shift_size, self.shift_size), dims=(1, 2))",
                            "Call"
                        ],
                        [
                            "shifted_x",
                            "Name"
                        ],
                        [
                            "x.view(B, H * W, C)",
                            "Call"
                        ],
                        [
                            "shortcut + self.drop_path(x)",
                            "BinOp"
                        ],
                        [
                            "x + self.drop_path(self.mlp(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "torch.cat([x0, x1, x2, x3], -1)",
                            "Call"
                        ],
                        [
                            "x.view(B, -1, 4 * C)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.reduction(x)",
                            "Call"
                        ],
                        [
                            "checkpoint.checkpoint(blk, x)",
                            "Call"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed(x)",
                            "Call"
                        ],
                        [
                            "x + self.absolute_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.pos_drop(x)",
                            "Call"
                        ],
                        [
                            "self.layers(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_250": {
                "variable": {
                    "value": "img_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, H, W, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "roll_283": {
                "variable": {
                    "value": "shifted_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.view(B, H // window_size, window_size, W // window_size, window_size, C)",
                            "Call"
                        ],
                        [
                            "windows.view(B, H // window_size, W // window_size, window_size, window_size, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2, 4, 5).contiguous().view(B, H, W, -1)",
                            "Call"
                        ],
                        [
                            "(attn @ v).transpose(1, 2).reshape(B_, N, C)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "torch.roll(shifted_x, shifts=(self.shift_size, self.shift_size), dims=(1, 2))",
                            "Call"
                        ],
                        [
                            "shifted_x",
                            "Name"
                        ],
                        [
                            "x.view(B, H * W, C)",
                            "Call"
                        ],
                        [
                            "shortcut + self.drop_path(x)",
                            "BinOp"
                        ],
                        [
                            "x + self.drop_path(self.mlp(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "torch.cat([x0, x1, x2, x3], -1)",
                            "Call"
                        ],
                        [
                            "x.view(B, -1, 4 * C)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.reduction(x)",
                            "Call"
                        ],
                        [
                            "checkpoint.checkpoint(blk, x)",
                            "Call"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embed(x)",
                            "Call"
                        ],
                        [
                            "x + self.absolute_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.pos_drop(x)",
                            "Call"
                        ],
                        [
                            "self.layers(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "(-self.shift_size, -self.shift_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dims": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "roll_300": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shifted_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.roll(x, shifts=(-self.shift_size, -self.shift_size), dims=(1, 2))",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "window_reverse(attn_windows, self.window_size, H, W)",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "(self.shift_size, self.shift_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dims": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_474": {
                "variable": {
                    "value": "self.absolute_pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_145": {
                "*size": {
                    "value": "(2 * window_size[0] - 1) * (2 * window_size[1] - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_heads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "meshgrid_150": {
                "*tensors": {
                    "value": "[coords_h, coords_w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Identity_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_505": {
                "in_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs.pop('num_classes', default_num_classes)",
                            "Call"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_505": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_474": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.patch_embed.num_patches",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "96",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linspace_482": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "sum(depths)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/tnt.py": {
        "torch": {
            "Linear_53": {
                "variable": {
                    "value": "self.qk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_55": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_57": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_92": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim * num_pixel",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_128": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chans",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Unfold_129": {
                "variable": {
                    "value": "self.unfold",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "new_patch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math.ceil(patch_size / stride)",
                            "Call"
                        ],
                        [
                            "self.pixel_embed.new_patch_size",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "new_patch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math.ceil(patch_size / stride)",
                            "Call"
                        ],
                        [
                            "self.pixel_embed.new_patch_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_161": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_pixel * in_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_164": {
                "variable": {
                    "value": "self.cls_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_165": {
                "variable": {
                    "value": "self.patch_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches + 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_166": {
                "variable": {
                    "value": "self.pixel_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, in_dim, new_patch_size, new_patch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_167": {
                "variable": {
                    "value": "self.pos_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_176": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "blocks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_211": {
                "variable": {
                    "value": "patch_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.cls_token.expand(B, -1, -1), patch_embed)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Identity_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_164": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_165": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_166": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "in_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "48",
                            "MethodArgument"
                        ],
                        [
                            "48",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "new_patch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math.ceil(patch_size / stride)",
                            "Call"
                        ],
                        [
                            "self.pixel_embed.new_patch_size",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "new_patch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "math.ceil(patch_size / stride)",
                            "Call"
                        ],
                        [
                            "self.pixel_embed.new_patch_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_179": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_204": {
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linspace_169": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "depth",
                    "type": "Name",
                    "possible_values": [
                        [
                            "12",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch-image-models/timm/models/tresnet.py": {
        "torch": {
            "Sequential_61": {
                "*args": {
                    "value": "nn.Conv2d(ni, nf, kernel_size=kernel_size, stride=stride, padding=kernel_size // 2, groups=groups, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_84": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_133": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_177": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('SpaceToDepth', SpaceToDepthModule()), ('conv1', conv1), ('layer1', layer1), ('layer2', layer2), ('layer3', layer3), ('layer4', layer4)])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "ni",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_223": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_232": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv2d_iabn(inplanes, planes, stride=1, act_param=0.001)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_123": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv2d_iabn(planes, planes, kernel_size=3, stride=1, act_layer=act_layer, act_param=0.001)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_208": {
                "variable": {
                    "value": "m.conv2[1].weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros_like(m.conv2[1].weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_210": {
                "variable": {
                    "value": "m.conv3[1].weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros_like(m.conv3[1].weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_208": {
                "input": {
                    "value": "m.conv2[1].weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_210": {
                "input": {
                    "value": "m.conv3[1].weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AvgPool2d_220": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/vgg.py": {
        "torch": {
            "Dropout_64": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_120": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_72": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.adaptive_avg_pool2d(x, output_size)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.pre_logits(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "output_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(max(self.input_kernel_size, x.shape[-2]), max(self.input_kernel_size, x.shape[-1]))",
                            "Tuple"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch-image-models/timm/models/vision_transformer.py": {
        "torch": {
            "interpolate_369": {
                "variable": {
                    "value": "posemb_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "posemb_grid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "posemb_grid.reshape(1, gs_old, gs_old, -1).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "F.interpolate(posemb_grid, size=(gs_new, gs_new), mode='bilinear')",
                            "Call"
                        ],
                        [
                            "posemb_grid.permute(0, 2, 3, 1).reshape(1, gs_new * gs_new, -1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(gs_new, gs_new)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_371": {
                "variable": {
                    "value": "posemb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[posemb_tok, posemb_grid]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_142": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_143": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_144": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_145": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_228": {
                "variable": {
                    "value": "self.cls_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_230": {
                "variable": {
                    "value": "self.pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches + self.num_tokens, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_231": {
                "variable": {
                    "value": "self.pos_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_234": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[Block(dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[i], norm_layer=norm_layer, act_layer=act_layer) for i in range(depth)]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_244": {
                "variable": {
                    "value": "self.pre_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('fc', nn.Linear(embed_dim, representation_size)), ('act', nn.Tanh())])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_249": {
                "variable": {
                    "value": "self.pre_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_295": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_token, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_297": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_token, self.dist_token.expand(x.shape[0], -1, -1), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Identity_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_228": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_229": {
                "data": {
                    "value": "torch.zeros(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_230": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches + self.num_tokens",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_252": {
                "in_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs.pop('num_classes', default_num_classes)",
                            "Call"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_287": {
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs.pop('num_classes', default_num_classes)",
                            "Call"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_287": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_229": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linspace_233": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "depth",
                    "type": "Name",
                    "possible_values": [
                        [
                            "12",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_255": {
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Identity_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_289": {
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Identity_289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_245": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "representation_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tanh_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/vision_transformer_hybrid.py": {
        "torch": {
            "Conv2d_99": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feature_dim",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.backbone.feature_info.channels()[-1]",
                            "Subscript"
                        ],
                        [
                            "self.backbone.num_features",
                            "Attribute"
                        ],
                        [
                            "o.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "patch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "to_2tuple(patch_size)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "patch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "to_2tuple(patch_size)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_85": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "in_chans",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "img_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "img_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/vovnet.py": {
        "torch": {
            "cat_175": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "concat_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_256": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*blocks",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_287": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[ConvBnAct(in_chans, stem_chs[0], 3, stride=2, **conv_kwargs), conv_type(stem_chs[0], stem_chs[1], 3, stride=1, **conv_kwargs), conv_type(stem_chs[1], stem_chs[2], 3, stride=last_stem_stride, **conv_kwargs)]",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_297": {
                "variable": {
                    "value": "stage_dpr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.linspace(0, drop_path_rate, sum(block_per_stage))",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "block_per_stage",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg['block_per_stage']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Sequential_311": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*stages",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_240": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_297": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "sum(block_per_stage)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/xception.py": {
        "torch": {
            "Conv2d_55": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.pointwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "variable": {
                    "value": "self.rep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*rep",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chans",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_127": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_128": {
                "variable": {
                    "value": "self.act1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_130": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_131": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_132": {
                "variable": {
                    "value": "self.act2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_151": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1536",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_152": {
                "variable": {
                    "value": "self.act3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_155": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_156": {
                "variable": {
                    "value": "self.act4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.skip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "strides",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_71": {
                "variable": {
                    "value": "self.skipbn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_90": {
                "variable": {
                    "value": "rep[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_217": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pointwise(x)",
                            "Call"
                        ],
                        [
                            "self.rep(inp)",
                            "Call"
                        ],
                        [
                            "x + skip",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.act1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.act2(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.block7(x)",
                            "Call"
                        ],
                        [
                            "self.block8(x)",
                            "Call"
                        ],
                        [
                            "self.block9(x)",
                            "Call"
                        ],
                        [
                            "self.block10(x)",
                            "Call"
                        ],
                        [
                            "self.block11(x)",
                            "Call"
                        ],
                        [
                            "self.block12(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "self.act3(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "self.bn4(x)",
                            "Call"
                        ],
                        [
                            "self.act4(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_85": {
                "num_features": {
                    "value": "outc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "in_channels if i < reps - 1 else out_channels",
                            "IfExp"
                        ]
                    ]
                }
            },
            "MaxPool2d_93": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "strides",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/models/xception_aligned.py": {
        "torch": {
            "Sequential_97": {
                "variable": {
                    "value": "self.stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[ConvBnAct(in_chans, 32, kernel_size=3, stride=2, **layer_args), ConvBnAct(32, 64, kernel_size=3, stride=1, **layer_args)]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_136": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_100": {
                "inplace": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/optim/adabelief.py": {
        "torch": {
            "zeros_like_84": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_87": {
                "variable": {
                    "value": "state[exp_avg_var]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_90": {
                "variable": {
                    "value": "state[max_exp_avg_var]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_128": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_130": {
                "variable": {
                    "value": "state[exp_avg_var]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_133": {
                "variable": {
                    "value": "state[max_exp_avg_var]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_160": {
                "input": {
                    "value": "max_exp_avg_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state['max_exp_avg_var']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state['max_exp_avg_var']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch-image-models/timm/optim/adafactor.py": {
        "torch": {
            "mul_79": {
                "input": {
                    "value": "r_factor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(exp_avg_sq_row / exp_avg_sq_row.mean(dim=-1, keepdim=True)).rsqrt_().unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "c_factor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "exp_avg_sq_col.unsqueeze(-2).rsqrt()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_110": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "grad.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_112": {
                "variable": {
                    "value": "state[exp_avg_sq_row]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "grad_shape[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_113": {
                "variable": {
                    "value": "state[exp_avg_sq_col]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "grad_shape[:-2] + grad_shape[-1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_115": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "grad.float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch-image-models/timm/optim/adahessian.py": {
        "torch": {
            "Generator_45": {
                "variable": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_45": {
                "variable": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Generator_90": {
                "variable": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "params[0].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_90": {
                "variable": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_97": {
                "variable": {
                    "value": "h_zs",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "grads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[p.grad for p in params]",
                            "ListComp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "zs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[torch.randint(0, 2, p.size(), generator=self.generator, device=p.device) * 2.0 - 1.0 for p in params]",
                            "ListComp"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "i < self.n_samples - 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "abs_123": {
                "variable": {
                    "value": "p.hess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "p.hess",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_123": {
                "variable": {
                    "value": "p.hess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clone_123": {
                "variable": {
                    "value": "p.hess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_134": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.get_params()",
                            "Call"
                        ],
                        [
                            "self.get_params()",
                            "Call"
                        ],
                        [
                            "filter(lambda p: p.grad is not None, self.get_params())",
                            "Call"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_136": {
                "variable": {
                    "value": "state[exp_hessian_diag_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.get_params()",
                            "Call"
                        ],
                        [
                            "self.get_params()",
                            "Call"
                        ],
                        [
                            "filter(lambda p: p.grad is not None, self.get_params())",
                            "Call"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randint_96": {
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "p.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "p.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/optim/adamp.py": {
        "torch": {
            "zeros_like_74": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_75": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/optim/adamw.py": {
        "torch": {
            "zeros_like_86": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_88": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_91": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_107": {
                "input": {
                    "value": "max_exp_avg_sq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch-image-models/timm/optim/lookahead.py": {
        "torch": {
            "empty_like_35": {
                "variable": {
                    "value": "param_state[slow_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "fast_p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/optim/nadam.py": {
        "torch": {}
    },
    "pytorch-image-models/timm/optim/novograd.py": {
        "torch": {
            "norm_59": {
                "input": {
                    "value": "grad",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "grad * (1.0 - self._beta1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_67": {
                "input": {
                    "value": "grad",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "grad * (1.0 - self._beta1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_40": {
                "input": {
                    "value": "grad",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "grad * (1.0 - self._beta1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_62": {
                "input": {
                    "value": "grad_ema",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state['grad_ema']",
                            "Subscript"
                        ],
                        [
                            "g2 if grad_ema is None else grad_ema * self._beta2 + g2 * (1.0 - self._beta2)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "sqrt_41": {
                "input": {
                    "value": "v",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.norm(grad) ** 2",
                            "BinOp"
                        ],
                        [
                            "self._beta2 * v + (1.0 - self._beta2) * g2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_69": {
                "input": {
                    "value": "v",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.norm(grad) ** 2",
                            "BinOp"
                        ],
                        [
                            "self._beta2 * v + (1.0 - self._beta2) * g2",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch-image-models/timm/optim/nvnovograd.py": {
        "torch": {
            "sum_94": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(grad, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_80": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_85": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_94": {
                "input": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_103": {
                "input": {
                    "value": "max_exp_avg_sq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch-image-models/timm/optim/optim_factory.py": {
        "torch": {
            "SGD_117": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "add_weight_decay(model, weight_decay, skip)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Variable",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_120": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "add_weight_decay(model, weight_decay, skip)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Variable",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_122": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "add_weight_decay(model, weight_decay, skip)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamW_126": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "add_weight_decay(model, weight_decay, skip)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adadelta_136": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "add_weight_decay(model, weight_decay, skip)",
                            "Call"
                        ]
                    ]
                }
            },
            "RMSprop_144": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "add_weight_decay(model, weight_decay, skip)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/optim/radam.py": {
        "torch": {
            "zeros_like_41": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Call",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_42": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Call",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_119": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Call",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_120": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Call",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch-image-models/timm/optim/rmsprop_tf.py": {
        "torch": {
            "no_grad_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_88": {
                "variable": {
                    "value": "state[square_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_90": {
                "variable": {
                    "value": "state[momentum_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_92": {
                "variable": {
                    "value": "state[grad_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch-image-models/timm/optim/sgdp.py": {
        "torch": {
            "zeros_like_74": {
                "variable": {
                    "value": "state[momentum]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/scheduler/cosine_lr.py": {
        "torch": {}
    },
    "pytorch-image-models/timm/scheduler/plateau_lr.py": {
        "torch": {
            "ReduceLROnPlateau_35": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "patience": {
                    "value": "patience_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "factor": {
                    "value": "decay_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "verbose": {
                    "value": "verbose",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "threshold": {
                    "value": "threshold",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ]
                    ]
                },
                "cooldown": {
                    "value": "cooldown_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'max'",
                            "MethodArgument"
                        ]
                    ]
                },
                "min_lr": {
                    "value": "lr_min",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Generator_94": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_99": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_103": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch-image-models/timm/scheduler/scheduler.py": {
        "torch": {
            "Generator_94": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_99": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_103": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch-image-models/timm/scheduler/step_lr.py": {
        "torch": {}
    },
    "pytorch-image-models/timm/scheduler/tanh_lr.py": {
        "torch": {}
    },
    "pytorch-image-models/timm/utils/agc.py": {
        "torch": {
            "where_41": {
                "variable": {
                    "value": "new_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "grad_norm < max_norm",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "g_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "p.grad.detach()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "clipped_grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "g_data * (max_norm / grad_norm.clamp(min=1e-06))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch-image-models/timm/utils/checkpoint_saver.py": {
        "torch": {
            "save_119": {
                "obj": {
                    "value": "save_state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'arch': type(self.model).__name__.lower(), 'state_dict': get_state_dict(self.model, self.unwrap_fn), 'optimizer': self.optimizer.state_dict(), 'version': 2}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(self.checkpoint_dir, filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.recovery_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch-image-models/timm/utils/clip_grad.py": {
        "torch": {
            "clip_grad_norm__16": {
                "parameters": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "norm_type",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clip_grad_value__18": {
                "parameters": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/utils/cuda.py": {
        "torch": {
            "GradScaler_40": {
                "variable": {
                    "value": "self._scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/utils/distributed.py": {
        "torch": {
            "broadcast_28": {
                "tensor": {
                    "value": "bn_buf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bn_buf / float(world_size)",
                            "BinOp"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/utils/jit.py": {
        "torch": {}
    },
    "pytorch-image-models/timm/utils/model.py": {
        "torch": {
            "normal_88": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "std": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "generator": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[8",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_22": {
                "input": {
                    "value": "output.mean(axis=[0, 2, 3]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_27": {
                "input": {
                    "value": "output.var(axis=[0, 2, 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_32": {
                "input": {
                    "value": "output.var(axis=[0, 2, 3])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/utils/model_ema.py": {
        "torch": {
            "load_52": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/utils/model_info.py": {
        "torch": {
            "rand_22": {
                "variable": {
                    "value": "cache_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "empty_cache_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/timm/utils/random.py": {
        "torch": {
            "manual_seed_7": {
                "seed": {
                    "value": "seed + rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/train.py": {
        "torch": {
            "CrossEntropyLoss_621": {
                "variable": {
                    "value": "validate_loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "script_458": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_model(args.model, pretrained=args.pretrained, num_classes=args.num_classes, drop_rate=args.drop, drop_connect_rate=args.drop_connect, drop_path_rate=args.drop_path, drop_block_rate=args.drop_block, global_pool=args.gp, bn_tf=args.bn_tf, bn_momentum=args.bn_momentum, bn_eps=args.bn_eps, scriptable=args.torchscript, checkpoint_path=args.initial_checkpoint)",
                            "Call"
                        ],
                        [
                            "convert_splitbn_model(model, max(num_aug_splits, 2))",
                            "Call"
                        ],
                        [
                            "model.to(memory_format=torch.channels_last)",
                            "Call"
                        ],
                        [
                            "convert_syncbn_model(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.SyncBatchNorm.convert_sync_batchnorm(model)",
                            "Call"
                        ],
                        [
                            "torch.jit.script(model)",
                            "Call"
                        ],
                        [
                            "ApexDDP(model, delay_allreduce=True)",
                            "Call"
                        ],
                        [
                            "NativeDDP(model, device_ids=[args.local_rank])",
                            "Call"
                        ]
                    ]
                }
            },
            "SummaryWriter_640": {
                "variable": {
                    "value": "writter",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "output_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "get_outdir(args.output if args.output else './output/train', exp_name)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "set_device_333": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "script_460": {
                "variable": {
                    "value": "teacher",
                    "type": "Variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "teacher",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_model(args.teacher, pretrained=args.pretrained, num_classes=args.num_classes, drop_rate=args.drop, drop_connect_rate=args.drop_connect, drop_path_rate=args.drop_path, drop_block_rate=args.drop_block, global_pool=args.gp, bn_tf=args.bn_tf, bn_momentum=args.bn_momentum, bn_eps=args.bn_eps, scriptable=args.torchscript, checkpoint_path=args.initial_checkpoint)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "convert_splitbn_model(teacher, max(num_aug_splits, 2))",
                            "Call"
                        ],
                        [
                            "teacher.to(memory_format=torch.channels_last)",
                            "Call"
                        ],
                        [
                            "convert_syncbn_model(teacher)",
                            "Call"
                        ],
                        [
                            "torch.nn.SyncBatchNorm.convert_sync_batchnorm(teacher)",
                            "Call"
                        ],
                        [
                            "amp.initialize(teacher, opt_level='O1')",
                            "Call"
                        ],
                        [
                            "torch.jit.script(teacher)",
                            "Call"
                        ],
                        [
                            "ApexDDP(teacher, delay_allreduce=True)",
                            "Call"
                        ],
                        [
                            "NativeDDP(teacher, device_ids=[args.local_rank])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "synchronize_768": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_855": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_616": {
                "variable": {
                    "value": "train_loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_885": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_733": {
                "variable": {
                    "value": "soft_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "teacher(input).detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_731": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch-image-models/validate.py": {
        "torch": {
            "CrossEntropyLoss_174": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "script_162": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_model(args.model, pretrained=args.pretrained, num_classes=args.num_classes, in_chans=3, global_pool=args.gp, scriptable=args.torchscript)",
                            "Call"
                        ],
                        [
                            "torch.jit.script(model)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, opt_level='O1')",
                            "Call"
                        ],
                        [
                            "model.to(memory_format=torch.channels_last)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=list(range(args.num_gpu)))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_172": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_model(args.model, pretrained=args.pretrained, num_classes=args.num_classes, in_chans=3, global_pool=args.gp, scriptable=args.torchscript)",
                            "Call"
                        ],
                        [
                            "torch.jit.script(model)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, opt_level='O1')",
                            "Call"
                        ],
                        [
                            "model.to(memory_format=torch.channels_last)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=list(range(args.num_gpu)))",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "list(range(args.num_gpu))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_214": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(args.batch_size,) + tuple(data_config['input_size'])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_312": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}