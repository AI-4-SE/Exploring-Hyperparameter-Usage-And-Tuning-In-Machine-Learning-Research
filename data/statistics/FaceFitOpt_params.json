{
    "metrics/linear_separability.py": {
        "sklearn": {},
        "tensorflow": {
            "device_119": {
                "device_name": {
                    "value": "'/gpu:%d' % gpu_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_130": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Gs_clone.components.synthesis.get_output_for(dlatents, is_validation=True, randomize_noise=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [-1, images.shape[1], images.shape[2] // factor, factor, images.shape[3] // factor, factor])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(images, axis=[3, 5])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, images.shape[1], images.shape[2] // factor, factor, images.shape[3] // factor, factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_131": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Gs_clone.components.synthesis.get_output_for(dlatents, is_validation=True, randomize_noise=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [-1, images.shape[1], images.shape[2] // factor, factor, images.shape[3] // factor, factor])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(images, axis=[3, 5])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[3, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_138": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.concat([logits, -logits], axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_138": {
                "values": {
                    "value": "[logits, -logits]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "align_images.py": {
        "tensorflow": {
            "get_file_25": {
                "fname": {
                    "value": "shape_predictor_68_face_landmarks.dat.bz2",
                    "type": "str",
                    "possible_values": []
                },
                "origin": {
                    "value": "LANDMARKS_MODEL_URL",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'http://dlib.net/files/shape_predictor_68_face_landmarks.dat.bz2'",
                            "str"
                        ]
                    ]
                },
                "cache_subdir": {
                    "value": "temp",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "dataset_tool.py": {
        "tensorflow": {
            "TFRecordOptions_75": {
                "variable": {
                    "value": "tfr_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "tf.python_io.TFRecordCompressionType.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Example_85": {
                "variable": {
                    "value": "ex",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'shape': tf.train.Feature(int64_list=tf.train.Int64List(value=quant.shape)), 'data': tf.train.Feature(bytes_list=tf.train.BytesList(value=[quant.tostring()]))})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordWriter_78": {
                "path": {
                    "value": "tfr_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tfr_prefix + '-r%02d.tfrecords' % (self.resolution_log2 - lod)",
                            "BinOp"
                        ]
                    ]
                },
                "options": {
                    "value": "tfr_opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.python_io.TFRecordOptions(tf.python_io.TFRecordCompressionType.NONE)",
                            "Call"
                        ]
                    ]
                }
            },
            "Features_85": {
                "feature": {
                    "value": "{'shape': tf.train.Feature(int64_list=tf.train.Int64List(value=quant.shape)), 'data': tf.train.Feature(bytes_list=tf.train.BytesList(value=[quant.tostring()]))}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Feature_86": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=quant.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_87": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[quant.tostring()])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_86": {
                "value": {
                    "value": "quant.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BytesList_87": {
                "value": {
                    "value": "[quant.tostring()]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "dnnlib/tflib/autosummary.py": {
        "tensorflow": {}
    },
    "dnnlib/tflib/network.py": {
        "tensorflow": {}
    },
    "dnnlib/tflib/optimizer.py": {
        "tensorflow": {
            "convert_to_tensor_52": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_default_graph_54": {
                "variable": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_90": {
                "name": {
                    "value": "self.id + '_grad'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_90": {
                "device_name": {
                    "value": "dev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss.device",
                            "Attribute"
                        ],
                        [
                            "dev in enumerate(devices)",
                            "Call"
                        ],
                        [
                            "zip(devices, g)",
                            "Call"
                        ]
                    ]
                }
            },
            "group_180": {
                "*inputs": {
                    "value": "*ops",
                    "type": "Starred",
                    "possible_values": []
                },
                "name": {
                    "value": "TrainingOp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_194": {
                "variable": {
                    "value": "self._dev_ls_var[device]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.float32(self.loss_scaling_init)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "loss_scaling_var",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_97": {
                "x": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.apply_loss_scaling(tf.cast(loss, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_193": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "name_scope_117": {
                "name": {
                    "value": "'ProcessGrads%d' % dev_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_117": {
                "device_name": {
                    "value": "dev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss.device",
                            "Attribute"
                        ],
                        [
                            "dev in enumerate(devices)",
                            "Call"
                        ],
                        [
                            "zip(devices, g)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_130": {
                "name": {
                    "value": "SumAcrossGPUs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_130": {
                "device_name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "name_scope_142": {
                "name": {
                    "value": "'ApplyGrads%d' % dev_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_142": {
                "device_name": {
                    "value": "dev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss.device",
                            "Attribute"
                        ],
                        [
                            "dev in enumerate(devices)",
                            "Call"
                        ],
                        [
                            "zip(devices, g)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_all_152": {
                "input_tensor": {
                    "value": "tf.is_finite(g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_99": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_146": {
                "variable": {
                    "value": "coef",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.float32(1.0 / total_grads)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "coef",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_151": {
                "name": {
                    "value": "CheckOverflow",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_155": {
                "name": {
                    "value": "UpdateWeights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_122": {
                "x": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[dev_grads[dev][var_idx][0] for dev in devices]",
                            "ListComp"
                        ],
                        [
                            "[tf.cast(g, tf.float32) for (g, v) in gv]",
                            "ListComp"
                        ],
                        [
                            "g[0] if len(g) == 1 else tf.add_n(g)",
                            "IfExp"
                        ],
                        [
                            "nccl_ops.all_sum(g)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_123": {
                "inputs": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[dev_grads[dev][var_idx][0] for dev in devices]",
                            "ListComp"
                        ],
                        [
                            "[tf.cast(g, tf.float32) for (g, v) in gv]",
                            "ListComp"
                        ],
                        [
                            "g[0] if len(g) == 1 else tf.add_n(g)",
                            "IfExp"
                        ],
                        [
                            "nccl_ops.all_sum(g)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_145": {
                "name": {
                    "value": "Scale",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_152": {
                "values": {
                    "value": "[tf.reduce_all(tf.is_finite(g)) for (g, v) in grads]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "name_scope_169": {
                "name": {
                    "value": "Statistics",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cond_161": {
                "pred": {
                    "value": "grad_ok",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_all(tf.stack([tf.reduce_all(tf.is_finite(g)) for (g, v) in grads]))",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : opt.apply_gradients(grads)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "tf.no_op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_163": {
                "pred": {
                    "value": "grad_ok",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_all(tf.stack([tf.reduce_all(tf.is_finite(g)) for (g, v) in grads]))",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.group(tf.assign_add(ls_var, self.loss_scaling_inc), opt.apply_gradients(grads))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.group(tf.assign_sub(ls_var, self.loss_scaling_dec))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "where_171": {
                "condition": {
                    "value": "grad_ok",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_all(tf.stack([tf.reduce_all(tf.is_finite(g)) for (g, v) in grads]))",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_finite_152": {
                "x": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[dev_grads[dev][var_idx][0] for dev in devices]",
                            "ListComp"
                        ],
                        [
                            "[tf.cast(g, tf.float32) for (g, v) in gv]",
                            "ListComp"
                        ],
                        [
                            "g[0] if len(g) == 1 else tf.add_n(g)",
                            "IfExp"
                        ],
                        [
                            "nccl_ops.all_sum(g)",
                            "Call"
                        ]
                    ]
                }
            },
            "group_164": {
                "*inputs": {
                    "value": "tf.assign_add(ls_var, self.loss_scaling_inc)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "opt.apply_gradients(grads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_165": {
                "*inputs": {
                    "value": "tf.assign_sub(ls_var, self.loss_scaling_dec)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_add_164": {
                "ref": {
                    "value": "ls_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_loss_scaling_var(dev)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "self.loss_scaling_inc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_sub_165": {
                "ref": {
                    "value": "ls_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_loss_scaling_var(dev)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "self.loss_scaling_dec",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dnnlib/tflib/tfutil.py": {
        "tensorflow": {}
    },
    "encoder/generator_model.py": {
        "tensorflow": {
            "constant_8": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_variable_12": {
                "name": {
                    "value": "learnable_dlatents",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, 18, 512)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.random_normal()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_default_session_29": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_30": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "saturate_cast_37": {
                "variable": {
                    "value": "self.generated_image_uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.generated_image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_44": {
                "ref": {
                    "value": "self.dlatent_variable",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "dlatents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dlatents",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "global_variables_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "encoder/perceptual_model.py": {
        "tensorflow": {
            "preprocess_input_16": {
                "variable": {
                    "value": "preprocessed_images",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "loaded_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "np.vstack(loaded_images)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_img_12": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "img_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images_list",
                            "variable"
                        ]
                    ]
                },
                "target_size": {
                    "value": "(img_size, img_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "VGG16_34": {
                "variable": {
                    "value": "vgg16",
                    "type": "variable",
                    "possible_values": []
                },
                "include_top": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(self.img_size, self.img_size, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Model_35": {
                "variable": {
                    "value": "self.perceptual_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "vgg16.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "vgg16.layers[self.layer].output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "preprocess_input_36": {
                "variable": {
                    "value": "generated_image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.image.resize_images(generated_image_tensor, (self.img_size, self.img_size), method=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_40": {
                "variable": {
                    "value": "self.ref_img_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ref_img_features",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "generated_img_features.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.zeros()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_42": {
                "variable": {
                    "value": "self.features_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "features_weight",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "generated_img_features.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.zeros()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_73": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_session_23": {
                "session": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_session_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_squared_error_46": {
                "y_true": {
                    "value": "self.features_weight * self.ref_img_features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "self.features_weight * generated_img_features",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_68": {
                "ref": {
                    "value": "self.features_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones(self.features_weight.shape)",
                            "Call"
                        ],
                        [
                            "np.vstack([existing_examples, empty_examples])",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_69": {
                "ref": {
                    "value": "self.ref_img_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "image_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.perceptual_model.predict_on_batch(loaded_image)",
                            "Call"
                        ],
                        [
                            "np.vstack([image_features, np.zeros(empty_features_shape)])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "facefit.py": {
        "tensorflow": {}
    },
    "metrics/frechet_inception_distance.py": {
        "tensorflow": {
            "device_51": {
                "device_name": {
                    "value": "'/gpu:%d' % gpu_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "metrics/metric_base.py": {
        "tensorflow": {
            "Graph_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "metrics/perceptual_path_length.py": {
        "tensorflow": {
            "reduce_sum_27": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "a * b",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_21": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(v), axis=-1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "acos_28": {
                "x": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(a * b, axis=-1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "a * tf.math.cos(p) + c * tf.math.sin(p)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_21": {
                "input_tensor": {
                    "value": "tf.square(v)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cos_30": {
                "x": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t * tf.math.acos(d)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_30": {
                "x": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t * tf.math.acos(d)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_21": {
                "x": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_52": {
                "device_name": {
                    "value": "'/gpu:%d' % gpu_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_66": {
                "variable": {
                    "value": "dlat_e01",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack([dlat_e0, dlat_e1], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "dlat_t01.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_71": {
                "variable": {
                    "value": "lat_e01",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack([lat_e0, lat_e1], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "lat_t01.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_85": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Gs_clone.components.synthesis.get_output_for(dlat_e01, is_validation=True, randomize_noise=False)",
                            "Call"
                        ],
                        [
                            "images[:, :, c * 3:c * 7, c * 2:c * 6]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(images, [-1, images.shape[1], images.shape[2] // factor, factor, images.shape[3] // factor, factor])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(images, axis=[3, 5])",
                            "Call"
                        ],
                        [
                            "(images + 1) * (255 / 2)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, images.shape[1], images.shape[2] // factor, factor, images.shape[3] // factor, factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_86": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Gs_clone.components.synthesis.get_output_for(dlat_e01, is_validation=True, randomize_noise=False)",
                            "Call"
                        ],
                        [
                            "images[:, :, c * 3:c * 7, c * 2:c * 6]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(images, [-1, images.shape[1], images.shape[2] // factor, factor, images.shape[3] // factor, factor])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(images, axis=[3, 5])",
                            "Call"
                        ],
                        [
                            "(images + 1) * (255 / 2)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[3, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_75": {
                "control_inputs": {
                    "value": "[var.initializer for var in noise_vars]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_66": {
                "values": {
                    "value": "[dlat_e0, dlat_e1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_71": {
                "values": {
                    "value": "[lat_e0, lat_e1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "training/dataset.py": {
        "tensorflow": {
            "parse_single_example_21": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "record",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.python_io.tf_record_iterator(tfr_file, tfr_opt)",
                            "Call"
                        ],
                        [
                            "record",
                            "Method Argument"
                        ],
                        [
                            "record",
                            "Method Argument"
                        ]
                    ]
                },
                "features": {
                    "value": "{'shape': tf.FixedLenFeature([3], tf.int64), 'data': tf.FixedLenFeature([], tf.string)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "decode_raw_24": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['data']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Example_28": {
                "variable": {
                    "value": "ex",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_25": {
                "tensor": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['data'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "ex.features.feature['data'].bytes_list.value[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "features['shape']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "TFRecordOptions_75": {
                "variable": {
                    "value": "tfr_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "tf.python_io.TFRecordCompressionType.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_114": {
                "variable": {
                    "value": "self._tf_minibatch_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "minibatch_in",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_160": {
                "shape": {
                    "value": "[minibatch_size, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.label_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_187": {
                "variable": {
                    "value": "self._tf_minibatch_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.int32(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "minibatch_var",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_188": {
                "variable": {
                    "value": "self._tf_lod_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.int32(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "lod_var",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_197": {
                "x": {
                    "value": "self._tf_lod_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_220": {
                "shape": {
                    "value": "[minibatch] + shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_223": {
                "shape": {
                    "value": "[minibatch, self.label_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.label_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tf_record_iterator_76": {
                "path": {
                    "value": "tfr_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfr_files",
                            "variable"
                        ],
                        [
                            "zip(tfr_files, tfr_shapes, tfr_lods)",
                            "Call"
                        ]
                    ]
                },
                "options": {
                    "value": "tfr_opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.python_io.TFRecordOptions(tf.python_io.TFRecordCompressionType.NONE)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_113": {
                "name": {
                    "value": "Dataset",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_113": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TFRecordDataset_120": {
                "variable": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "tfr_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfr_files",
                            "variable"
                        ],
                        [
                            "zip(tfr_files, tfr_shapes, tfr_lods)",
                            "Call"
                        ]
                    ]
                },
                "compression_type": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "buffer_size": {
                    "value": "buffer_mb << 20",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_186": {
                "name": {
                    "value": "Dataset",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_196": {
                "name": {
                    "value": "SyntheticDataset",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_210": {
                "name": {
                    "value": "SyntheticDataset",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_22": {
                "shape": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_23": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_158": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_159": {
                "params": {
                    "value": "self._tf_labels_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.random_uniform([minibatch_size], 0, self._np_labels.shape[0], dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "training/loss.py": {
        "tensorflow": {
            "softplus_136": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "-fake_scores_out",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_146": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "fake_scores_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fp32(D.get_output_for(fake_images_out, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(fake_images_out, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(fake_images_out, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(fake_images_out, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(fake_images_out, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(fake_images_out, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(fake_images_out, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(fake_images_out, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(fake_images_out, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_157": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "fake_scores_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fp32(D.get_output_for(fake_images_out, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(fake_images_out, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(fake_images_out, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(fake_images_out, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(fake_images_out, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(fake_images_out, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(fake_images_out, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(fake_images_out, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(fake_images_out, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_70": {
                "variable": {
                    "value": "mixed_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(mixed_grads), axis=[1, 2, 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_72": {
                "variable": {
                    "value": "gradient_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mixed_norms - wgan_target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_112": {
                "variable": {
                    "value": "mixed_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(mixed_grads), axis=[1, 2, 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_114": {
                "variable": {
                    "value": "gradient_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mixed_norms - wgan_target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_147": {
                "features": {
                    "value": "-real_scores_out",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_158": {
                "features": {
                    "value": "-real_scores_out",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "name_scope_45": {
                "name": {
                    "value": "EpsilonPenalty",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_63": {
                "name": {
                    "value": "GradientPenalty",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_75": {
                "name": {
                    "value": "EpsilonPenalty",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_90": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0 - real_scores_out",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_103": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0 - real_scores_out",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_105": {
                "name": {
                    "value": "GradientPenalty",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softplus_128": {
                "features": {
                    "value": "fake_scores_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fp32(D.get_output_for(fake_images_out, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(fake_images_out, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(fake_images_out, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(fake_images_out, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(fake_images_out, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(fake_images_out, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(fake_images_out, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(fake_images_out, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(fake_images_out, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_164": {
                "variable": {
                    "value": "r1_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(real_grads)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_172": {
                "variable": {
                    "value": "r2_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(fake_grads)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_20": {
                "x": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_46": {
                "x": {
                    "value": "real_scores_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fp32(D.get_output_for(reals, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/real', real_scores_out)",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(reals, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/real', real_scores_out)",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(reals, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/real', real_scores_out)",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(reals, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/real', real_scores_out)",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(reals, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/real', real_scores_out)",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(reals, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/real', real_scores_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_65": {
                "x": {
                    "value": "reals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reals",
                            "Method Argument"
                        ],
                        [
                            "reals",
                            "Method Argument"
                        ],
                        [
                            "reals",
                            "Method Argument"
                        ],
                        [
                            "reals",
                            "Method Argument"
                        ],
                        [
                            "reals",
                            "Method Argument"
                        ],
                        [
                            "reals",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "fake_images_out.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_68": {
                "input_tensor": {
                    "value": "mixed_scores_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fp32(D.get_output_for(mixed_images_out, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/mixed', mixed_scores_out)",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(mixed_images_out, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/mixed', mixed_scores_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_70": {
                "input_tensor": {
                    "value": "tf.square(mixed_grads)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_76": {
                "x": {
                    "value": "real_scores_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fp32(D.get_output_for(reals, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/real', real_scores_out)",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(reals, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/real', real_scores_out)",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(reals, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/real', real_scores_out)",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(reals, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/real', real_scores_out)",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(reals, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/real', real_scores_out)",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(reals, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/real', real_scores_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_107": {
                "x": {
                    "value": "reals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reals",
                            "Method Argument"
                        ],
                        [
                            "reals",
                            "Method Argument"
                        ],
                        [
                            "reals",
                            "Method Argument"
                        ],
                        [
                            "reals",
                            "Method Argument"
                        ],
                        [
                            "reals",
                            "Method Argument"
                        ],
                        [
                            "reals",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "fake_images_out.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_110": {
                "input_tensor": {
                    "value": "mixed_scores_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fp32(D.get_output_for(mixed_images_out, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/mixed', mixed_scores_out)",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(mixed_images_out, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/mixed', mixed_scores_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_112": {
                "input_tensor": {
                    "value": "tf.square(mixed_grads)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_161": {
                "name": {
                    "value": "R1Penalty",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_169": {
                "name": {
                    "value": "R2Penalty",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_70": {
                "x": {
                    "value": "mixed_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.undo_loss_scaling(fp32(tf.gradients(mixed_loss, [mixed_images_out])[0]))",
                            "Call"
                        ],
                        [
                            "opt.undo_loss_scaling(fp32(tf.gradients(mixed_loss, [mixed_images_out])[0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "square_112": {
                "x": {
                    "value": "mixed_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.undo_loss_scaling(fp32(tf.gradients(mixed_loss, [mixed_images_out])[0]))",
                            "Call"
                        ],
                        [
                            "opt.undo_loss_scaling(fp32(tf.gradients(mixed_loss, [mixed_images_out])[0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_162": {
                "input_tensor": {
                    "value": "real_scores_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fp32(D.get_output_for(reals, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/real', real_scores_out)",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(reals, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/real', real_scores_out)",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(reals, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/real', real_scores_out)",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(reals, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/real', real_scores_out)",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(reals, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/real', real_scores_out)",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(reals, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/real', real_scores_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_164": {
                "x": {
                    "value": "real_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.undo_loss_scaling(fp32(tf.gradients(real_loss, [reals])[0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_170": {
                "input_tensor": {
                    "value": "fake_scores_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fp32(D.get_output_for(fake_images_out, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(fake_images_out, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(fake_images_out, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(fake_images_out, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(fake_images_out, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(fake_images_out, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(fake_images_out, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(fake_images_out, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "fp32(D.get_output_for(fake_images_out, labels, is_training=True))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_172": {
                "x": {
                    "value": "fake_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.undo_loss_scaling(fp32(tf.gradients(fake_loss, [fake_images_out])[0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_69": {
                "ys": {
                    "value": "mixed_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.apply_loss_scaling(tf.reduce_sum(mixed_scores_out))",
                            "Call"
                        ],
                        [
                            "opt.apply_loss_scaling(tf.reduce_sum(mixed_scores_out))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[mixed_images_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_111": {
                "ys": {
                    "value": "mixed_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.apply_loss_scaling(tf.reduce_sum(mixed_scores_out))",
                            "Call"
                        ],
                        [
                            "opt.apply_loss_scaling(tf.reduce_sum(mixed_scores_out))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[mixed_images_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_163": {
                "ys": {
                    "value": "real_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.apply_loss_scaling(tf.reduce_sum(real_scores_out))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[reals]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_171": {
                "ys": {
                    "value": "fake_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.apply_loss_scaling(tf.reduce_sum(fake_scores_out))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[fake_images_out]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "training/networks_progan.py": {
        "tensorflow": {
            "cast_42": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weight', shape=shape, initializer=tf.initializers.random_normal()) * wscale",
                            "BinOp"
                        ],
                        [
                            "tf.get_variable('weight', shape=shape, initializer=tf.initializers.random_normal(0, std))",
                            "Call"
                        ],
                        [
                            "get_weight([x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_51": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weight', shape=shape, initializer=tf.initializers.random_normal()) * wscale",
                            "BinOp"
                        ],
                        [
                            "tf.get_variable('weight', shape=shape, initializer=tf.initializers.random_normal(0, std))",
                            "Call"
                        ],
                        [
                            "get_weight([x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_58": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.shape[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.zeros()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_59": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('bias', shape=[x.shape[1]], initializer=tf.initializers.zeros())",
                            "Call"
                        ],
                        [
                            "tf.cast(b, x.dtype)",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_92": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weight', shape=shape, initializer=tf.initializers.random_normal()) * wscale",
                            "BinOp"
                        ],
                        [
                            "tf.get_variable('weight', shape=shape, initializer=tf.initializers.random_normal(0, std))",
                            "Call"
                        ],
                        [
                            "get_weight([x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_93": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weight', shape=shape, initializer=tf.initializers.random_normal()) * wscale",
                            "BinOp"
                        ],
                        [
                            "tf.get_variable('weight', shape=shape, initializer=tf.initializers.random_normal(0, std))",
                            "Call"
                        ],
                        [
                            "get_weight([x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[1, 1], [1, 1], [0, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_94": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_95": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weight', shape=shape, initializer=tf.initializers.random_normal()) * wscale",
                            "BinOp"
                        ],
                        [
                            "tf.get_variable('weight', shape=shape, initializer=tf.initializers.random_normal(0, std))",
                            "Call"
                        ],
                        [
                            "get_weight([x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_116": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weight', shape=shape, initializer=tf.initializers.random_normal()) * wscale",
                            "BinOp"
                        ],
                        [
                            "tf.get_variable('weight', shape=shape, initializer=tf.initializers.random_normal(0, std))",
                            "Call"
                        ],
                        [
                            "get_weight([x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[1, 1], [1, 1], [0, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_118": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weight', shape=shape, initializer=tf.initializers.random_normal()) * wscale",
                            "BinOp"
                        ],
                        [
                            "tf.get_variable('weight', shape=shape, initializer=tf.initializers.random_normal(0, std))",
                            "Call"
                        ],
                        [
                            "get_weight([x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_180": {
                "variable": {
                    "value": "combo_in",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.concat([latents_in, labels_in], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_181": {
                "variable": {
                    "value": "lod_in",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.get_variable('lod', initializer=np.float32(0.0), trainable=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_234": {
                "variable": {
                    "value": "images_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torgb(x, 2)",
                            "Call"
                        ],
                        [
                            "grow(combo_in, 2, resolution_log2 - 2)",
                            "Call"
                        ],
                        [
                            "upscale2d(images_out)",
                            "Call"
                        ],
                        [
                            "tf.identity(images_out, name='images_out')",
                            "Call"
                        ],
                        [
                            "lerp_clip(img, images_out, lod_in - lod)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "images_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_263": {
                "variable": {
                    "value": "images_in",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(images_in, dtype)",
                            "Call"
                        ],
                        [
                            "images_in",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_264": {
                "variable": {
                    "value": "labels_in",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels_in, dtype)",
                            "Call"
                        ],
                        [
                            "labels_in",
                            "Method Argument"
                        ],
                        [
                            "labels_in",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_265": {
                "variable": {
                    "value": "lod_in",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.get_variable('lod', initializer=np.float32(0.0), trainable=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_319": {
                "variable": {
                    "value": "scores_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "grow(2, resolution_log2 - 2)",
                            "Call"
                        ],
                        [
                            "block(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.identity(scores_out, name='scores_out')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scores_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_29": {
                "variable": {
                    "value": "wscale",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.float32(std)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "wscale",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_32": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.initializers.random_normal(0, std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_40": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "block(combo_in, 2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x, epsilon=pixelnorm_epsilon)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=nf(res - 1) * 16, gain=np.sqrt(2) / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, nf(res - 1), 4, 4])",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(x)))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(x, fmaps=nf(res - 2), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 2), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=1, gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, np.prod([d.value for d in x.shape[1:]])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_43": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "block(combo_in, 2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x, epsilon=pixelnorm_epsilon)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=nf(res - 1) * 16, gain=np.sqrt(2) / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, nf(res - 1), 4, 4])",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(x)))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(x, fmaps=nf(res - 2), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 2), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=1, gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weight', shape=shape, initializer=tf.initializers.random_normal()) * wscale",
                            "BinOp"
                        ],
                        [
                            "tf.get_variable('weight', shape=shape, initializer=tf.initializers.random_normal(0, std))",
                            "Call"
                        ],
                        [
                            "get_weight([x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_52": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "block(combo_in, 2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x, epsilon=pixelnorm_epsilon)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=nf(res - 1) * 16, gain=np.sqrt(2) / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, nf(res - 1), 4, 4])",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(x)))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(x, fmaps=nf(res - 2), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 2), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=1, gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weight', shape=shape, initializer=tf.initializers.random_normal()) * wscale",
                            "BinOp"
                        ],
                        [
                            "tf.get_variable('weight', shape=shape, initializer=tf.initializers.random_normal(0, std))",
                            "Call"
                        ],
                        [
                            "get_weight([x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NCHW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_69": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(alpha, dtype=x.dtype, name='alpha')",
                            "Call"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_80": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "block(combo_in, 2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x, epsilon=pixelnorm_epsilon)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=nf(res - 1) * 16, gain=np.sqrt(2) / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, nf(res - 1), 4, 4])",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(x)))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(x, fmaps=nf(res - 2), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 2), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=1, gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, s[1], s[2], 1, s[3], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_81": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "block(combo_in, 2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x, epsilon=pixelnorm_epsilon)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=nf(res - 1) * 16, gain=np.sqrt(2) / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, nf(res - 1), 4, 4])",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(x)))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(x, fmaps=nf(res - 2), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 2), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=1, gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 1, factor, 1, factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_82": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "block(combo_in, 2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x, epsilon=pixelnorm_epsilon)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=nf(res - 1) * 16, gain=np.sqrt(2) / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, nf(res - 1), 4, 4])",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(x)))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(x, fmaps=nf(res - 2), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 2), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=1, gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, s[1], s[2] * factor, s[3] * factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_transpose_97": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "block(combo_in, 2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x, epsilon=pixelnorm_epsilon)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=nf(res - 1) * 16, gain=np.sqrt(2) / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, nf(res - 1), 4, 4])",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(x)))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(x, fmaps=nf(res - 2), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 2), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=1, gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weight', shape=shape, initializer=tf.initializers.random_normal()) * wscale",
                            "BinOp"
                        ],
                        [
                            "tf.get_variable('weight', shape=shape, initializer=tf.initializers.random_normal(0, std))",
                            "Call"
                        ],
                        [
                            "get_weight([x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "os",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.shape(x)[0], fmaps, x.shape[2] * 2, x.shape[3] * 2]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NCHW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_119": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "block(combo_in, 2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x, epsilon=pixelnorm_epsilon)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=nf(res - 1) * 16, gain=np.sqrt(2) / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, nf(res - 1), 4, 4])",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(x)))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(x, fmaps=nf(res - 2), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 2), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=1, gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weight', shape=shape, initializer=tf.initializers.random_normal()) * wscale",
                            "BinOp"
                        ],
                        [
                            "tf.get_variable('weight', shape=shape, initializer=tf.initializers.random_normal(0, std))",
                            "Call"
                        ],
                        [
                            "get_weight([x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], gain=gain, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NCHW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "minimum_133": {
                "variable": {
                    "value": "group_size",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "group_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(group_size, tf.shape(x)[0])",
                            "Call"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.shape(x)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_135": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "block(combo_in, 2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x, epsilon=pixelnorm_epsilon)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=nf(res - 1) * 16, gain=np.sqrt(2) / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, nf(res - 1), 4, 4])",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(x)))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(x, fmaps=nf(res - 2), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 2), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=1, gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[group_size, -1, num_new_features, s[1] // num_new_features, s[2], s[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_136": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [group_size, -1, num_new_features, s[1] // num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "y - tf.reduce_mean(y, axis=0, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, res - 1)",
                            "Call"
                        ],
                        [
                            "lambda : x",
                            "Lambda"
                        ],
                        [
                            "cset(y, lod_in > lod, lambda : lerp(x, fromrgb(downscale2d(images_in, 2 ** (lod + 1)), res - 1), lod_in - lod))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_138": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_139": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_140": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [group_size, -1, num_new_features, s[1] // num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "y - tf.reduce_mean(y, axis=0, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, res - 1)",
                            "Call"
                        ],
                        [
                            "lambda : x",
                            "Lambda"
                        ],
                        [
                            "cset(y, lod_in > lod, lambda : lerp(x, fromrgb(downscale2d(images_in, 2 ** (lod + 1)), res - 1), lod_in - lod))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_141": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [group_size, -1, num_new_features, s[1] // num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "y - tf.reduce_mean(y, axis=0, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, res - 1)",
                            "Call"
                        ],
                        [
                            "lambda : x",
                            "Lambda"
                        ],
                        [
                            "cset(y, lod_in > lod, lambda : lerp(x, fromrgb(downscale2d(images_in, 2 ** (lod + 1)), res - 1), lod_in - lod))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_142": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [group_size, -1, num_new_features, s[1] // num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "y - tf.reduce_mean(y, axis=0, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, res - 1)",
                            "Call"
                        ],
                        [
                            "lambda : x",
                            "Lambda"
                        ],
                        [
                            "cset(y, lod_in > lod, lambda : lerp(x, fromrgb(downscale2d(images_in, 2 ** (lod + 1)), res - 1), lod_in - lod))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_143": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [group_size, -1, num_new_features, s[1] // num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "y - tf.reduce_mean(y, axis=0, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, res - 1)",
                            "Call"
                        ],
                        [
                            "lambda : x",
                            "Lambda"
                        ],
                        [
                            "cset(y, lod_in > lod, lambda : lerp(x, fromrgb(downscale2d(images_in, 2 ** (lod + 1)), res - 1), lod_in - lod))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[group_size, 1, s[2], s[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_20": {
                "pred": {
                    "value": "new_cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_cond",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "new_lambda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_lambda",
                            "Method Argument"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "cur_lambda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cur_lambda",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_62": {
                "tensor": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('bias', shape=[x.shape[1]], initializer=tf.initializers.zeros())",
                            "Call"
                        ],
                        [
                            "tf.cast(b, x.dtype)",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, -1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_68": {
                "name": {
                    "value": "LeakyRelu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_70": {
                "x": {
                    "value": "x * alpha",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "block(combo_in, 2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x, epsilon=pixelnorm_epsilon)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=nf(res - 1) * 16, gain=np.sqrt(2) / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, nf(res - 1), 4, 4])",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(x)))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(x, fmaps=nf(res - 2), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 2), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=1, gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_78": {
                "name_or_scope": {
                    "value": "Upscale2D",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_105": {
                "name_or_scope": {
                    "value": "Downscale2D",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool_107": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "block(combo_in, 2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x, epsilon=pixelnorm_epsilon)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=nf(res - 1) * 16, gain=np.sqrt(2) / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, nf(res - 1), 4, 4])",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(x)))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(x, fmaps=nf(res - 2), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 2), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=1, gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "ksize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 1, factor, factor]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "ksize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 1, factor, factor]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NCHW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_117": {
                "inputs": {
                    "value": "[w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_125": {
                "name_or_scope": {
                    "value": "PixelNorm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_132": {
                "name_or_scope": {
                    "value": "MinibatchStddev",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_137": {
                "input_tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [group_size, -1, num_new_features, s[1] // num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "y - tf.reduce_mean(y, axis=0, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, res - 1)",
                            "Call"
                        ],
                        [
                            "lambda : x",
                            "Lambda"
                        ],
                        [
                            "cset(y, lod_in > lod, lambda : lerp(x, fromrgb(downscale2d(images_in, 2 ** (lod + 1)), res - 1), lod_in - lod))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_144": {
                "values": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_180": {
                "values": {
                    "value": "[latents_in, labels_in]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_181": {
                "name": {
                    "value": "lod",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np.float32(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "as_dtype_233": {
                "type_value": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_265": {
                "name": {
                    "value": "lod",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np.float32(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "as_dtype_318": {
                "type_value": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_19": {
                "t": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_30": {
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.initializers.random_normal()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_96": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "block(combo_in, 2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x, epsilon=pixelnorm_epsilon)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=nf(res - 1) * 16, gain=np.sqrt(2) / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, nf(res - 1), 4, 4])",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(x)))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(x, fmaps=nf(res - 2), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 2), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=1, gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rsqrt_126": {
                "x": {
                    "value": "tf.reduce_mean(tf.square(x), axis=1, keepdims=True) + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_138": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [group_size, -1, num_new_features, s[1] // num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "y - tf.reduce_mean(y, axis=0, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, res - 1)",
                            "Call"
                        ],
                        [
                            "lambda : x",
                            "Lambda"
                        ],
                        [
                            "cset(y, lod_in > lod, lambda : lerp(x, fromrgb(downscale2d(images_in, 2 ** (lod + 1)), res - 1), lod_in - lod))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_186": {
                "name_or_scope": {
                    "value": "'%dx%d' % (2 ** res, 2 ** res)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_208": {
                "name_or_scope": {
                    "value": "'ToRGB_lod%d' % lod",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_270": {
                "name_or_scope": {
                    "value": "'FromRGB_lod%d' % (resolution_log2 - res)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_273": {
                "name_or_scope": {
                    "value": "'%dx%d' % (2 ** res, 2 ** res)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_133": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "block(combo_in, 2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x, epsilon=pixelnorm_epsilon)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=nf(res - 1) * 16, gain=np.sqrt(2) / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, nf(res - 1), 4, 4])",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(x)))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(x, fmaps=nf(res - 2), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 2), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=1, gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_191": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "block(combo_in, 2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x, epsilon=pixelnorm_epsilon)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=nf(res - 1) * 16, gain=np.sqrt(2) / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, nf(res - 1), 4, 4])",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(x)))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(x, fmaps=nf(res - 2), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 2), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=1, gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, nf(res - 1), 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_220": {
                "name_or_scope": {
                    "value": "'Grow_lod%d' % lod",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_304": {
                "name_or_scope": {
                    "value": "'Grow_lod%d' % lod",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_126": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_189": {
                "name_or_scope": {
                    "value": "Dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_193": {
                "name_or_scope": {
                    "value": "Conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_203": {
                "name_or_scope": {
                    "value": "Conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_275": {
                "name_or_scope": {
                    "value": "Conv0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_287": {
                "name_or_scope": {
                    "value": "Conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_289": {
                "name_or_scope": {
                    "value": "Dense0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_291": {
                "name_or_scope": {
                    "value": "Dense1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_126": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "block(combo_in, 2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x, epsilon=pixelnorm_epsilon)",
                            "Call"
                        ],
                        [
                            "upscale2d(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=nf(res - 1) * 16, gain=np.sqrt(2) / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, nf(res - 1), 4, 4])",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(x)))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "PN(act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale))))",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(x, fmaps=nf(res - 2), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 2), kernel=3, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "downscale2d(x)",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=1, gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_197": {
                "name_or_scope": {
                    "value": "Conv0_up",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_201": {
                "name_or_scope": {
                    "value": "Conv0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_278": {
                "name_or_scope": {
                    "value": "Conv1_down",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_281": {
                "name_or_scope": {
                    "value": "Conv1",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "training/networks_stylegan.py": {
        "tensorflow": {}
    },
    "training/training_loop.py": {
        "tensorflow": {
            "FileWriter_202": {
                "variable": {
                    "value": "summary_log",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "submit_config.run_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_163": {
                "variable": {
                    "value": "lod_in",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "lod_in",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_164": {
                "variable": {
                    "value": "lrate_in",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "lrate_in",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_165": {
                "variable": {
                    "value": "minibatch_in",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "minibatch_in",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_27": {
                "name": {
                    "value": "ProcessReals",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_29": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "misc.adjust_dynamic_range(x, drange_data, drange_net)",
                            "Call"
                        ],
                        [
                            "tf.where(mask < 0.5, x, tf.reverse(x, axis=[3]))",
                            "Call"
                        ],
                        [
                            "tflib.lerp(x, y, lod - tf.floor(lod))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_38": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "misc.adjust_dynamic_range(x, drange_data, drange_net)",
                            "Call"
                        ],
                        [
                            "tf.where(mask < 0.5, x, tf.reverse(x, axis=[3]))",
                            "Call"
                        ],
                        [
                            "tflib.lerp(x, y, lod - tf.floor(lod))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_39": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "misc.adjust_dynamic_range(x, drange_data, drange_net)",
                            "Call"
                        ],
                        [
                            "tf.where(mask < 0.5, x, tf.reverse(x, axis=[3]))",
                            "Call"
                        ],
                        [
                            "tflib.lerp(x, y, lod - tf.floor(lod))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, s[1], s[2] // 2, 2, s[3] // 2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_40": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, s[1], s[2] // 2, 2, s[3] // 2, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[3, 5], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [1, 1, 1, 2, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, s[1], s[2], s[3]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[3, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tile_41": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, s[1], s[2] // 2, 2, s[3] // 2, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[3, 5], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [1, 1, 1, 2, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, s[1], s[2], s[3]])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 1, 2, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_42": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, s[1], s[2] // 2, 2, s[3] // 2, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[3, 5], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [1, 1, 1, 2, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, s[1], s[2], s[3]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, s[1], s[2], s[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_45": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "misc.adjust_dynamic_range(x, drange_data, drange_net)",
                            "Call"
                        ],
                        [
                            "tf.where(mask < 0.5, x, tf.reverse(x, axis=[3]))",
                            "Call"
                        ],
                        [
                            "tflib.lerp(x, y, lod - tf.floor(lod))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_46": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "2 ** tf.floor(lod)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_47": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "misc.adjust_dynamic_range(x, drange_data, drange_net)",
                            "Call"
                        ],
                        [
                            "tf.where(mask < 0.5, x, tf.reverse(x, axis=[3]))",
                            "Call"
                        ],
                        [
                            "tflib.lerp(x, y, lod - tf.floor(lod))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, s[1], s[2], 1, s[3], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_48": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "misc.adjust_dynamic_range(x, drange_data, drange_net)",
                            "Call"
                        ],
                        [
                            "tf.where(mask < 0.5, x, tf.reverse(x, axis=[3]))",
                            "Call"
                        ],
                        [
                            "tflib.lerp(x, y, lod - tf.floor(lod))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 1, factor, 1, factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_49": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "misc.adjust_dynamic_range(x, drange_data, drange_net)",
                            "Call"
                        ],
                        [
                            "tf.where(mask < 0.5, x, tf.reverse(x, axis=[3]))",
                            "Call"
                        ],
                        [
                            "tflib.lerp(x, y, lod - tf.floor(lod))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, s[1], s[2] * factor, s[3] * factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_149": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_162": {
                "name": {
                    "value": "Inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_162": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_188": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_28": {
                "name": {
                    "value": "DynamicRange",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_33": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "misc.adjust_dynamic_range(x, drange_data, drange_net)",
                            "Call"
                        ],
                        [
                            "tf.where(mask < 0.5, x, tf.reverse(x, axis=[3]))",
                            "Call"
                        ],
                        [
                            "tflib.lerp(x, y, lod - tf.floor(lod))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tile_35": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([s[0], 1, 1, 1], 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.tile(mask, [1, s[1], s[2], s[3]])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, s[1], s[2], s[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_36": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask < 0.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "misc.adjust_dynamic_range(x, drange_data, drange_net)",
                            "Call"
                        ],
                        [
                            "tf.where(mask < 0.5, x, tf.reverse(x, axis=[3]))",
                            "Call"
                        ],
                        [
                            "tflib.lerp(x, y, lod - tf.floor(lod))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reverse(x, axis=[3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_37": {
                "name": {
                    "value": "FadeLOD",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_44": {
                "name": {
                    "value": "UpscaleLOD",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_172": {
                "name": {
                    "value": "'GPU%d' % gpu",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_172": {
                "device_name": {
                    "value": "'/gpu:%d' % gpu",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_192": {
                "variable": {
                    "value": "peak_gpu_mem_op",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_default_graph_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_32": {
                "name": {
                    "value": "MirrorAugment",
                    "type": "str",
                    "possible_values": []
                }
            },
            "div_167": {
                "x": {
                    "value": "tf.cast(minibatch_in, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "G_smoothing_kimg * 1000.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_175": {
                "ref": {
                    "value": "D_gpu.find_var('lod')",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "lod_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, name='lod_in', shape=[])",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_178": {
                "name": {
                    "value": "G_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_178": {
                "control_inputs": {
                    "value": "lod_assign_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.assign(G_gpu.find_var('lod'), lod_in), tf.assign(D_gpu.find_var('lod'), lod_in)]",
                            "List"
                        ]
                    ]
                }
            },
            "name_scope_180": {
                "name": {
                    "value": "D_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_180": {
                "control_inputs": {
                    "value": "lod_assign_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.assign(G_gpu.find_var('lod'), lod_in), tf.assign(D_gpu.find_var('lod'), lod_in)]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_182": {
                "input_tensor": {
                    "value": "G_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dnnlib.util.call_func_by_name(G=G_gpu, D=D_gpu, opt=G_opt, training_set=training_set, minibatch_size=minibatch_split, **G_loss_args)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_183": {
                "input_tensor": {
                    "value": "D_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dnnlib.util.call_func_by_name(G=G_gpu, D=D_gpu, opt=D_opt, training_set=training_set, minibatch_size=minibatch_split, reals=reals, labels=labels, **D_loss_args)",
                            "Call"
                        ]
                    ]
                }
            },
            "reverse_36": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "misc.adjust_dynamic_range(x, drange_data, drange_net)",
                            "Call"
                        ],
                        [
                            "tf.where(mask < 0.5, x, tf.reverse(x, axis=[3]))",
                            "Call"
                        ],
                        [
                            "tflib.lerp(x, y, lod - tf.floor(lod))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "floor_43": {
                "x": {
                    "value": "lod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lod",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "floor_46": {
                "x": {
                    "value": "lod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lod",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_167": {
                "x": {
                    "value": "minibatch_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, name='minibatch_in', shape=[])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}