{
    "evaluate.py": {
        "sklearn": {
            "KMeans_113": {
                "variable": {
                    "value": "estimator",
                    "type": "Name",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "normalized_mutual_info_score_119": {
                "variable": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "estimator.predict(x)",
                            "Call"
                        ]
                    ]
                },
                "average_method": {
                    "value": "arithmetic",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "f1_score_53": {
                "variable": {
                    "value": "val_f1_macro",
                    "type": "Name",
                    "possible_values": []
                },
                "y_true": {
                    "value": "val_lbls.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "f1_score_54": {
                "variable": {
                    "value": "val_f1_micro",
                    "type": "Name",
                    "possible_values": []
                },
                "y_true": {
                    "value": "val_lbls.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "f1_score_65": {
                "variable": {
                    "value": "test_f1_macro",
                    "type": "Name",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_lbls.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "f1_score_66": {
                "variable": {
                    "value": "test_f1_micro",
                    "type": "Name",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_lbls.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cosine_similarity_99": {
                "X": {
                    "value": "test_embs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "embeds[idx_test]",
                            "Subscript"
                        ],
                        [
                            "np.array(test_embs.cpu())",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "CrossEntropyLoss_15": {
                "variable": {
                    "value": "xent",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_19": {
                "variable": {
                    "value": "train_lbls",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[idx_train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_20": {
                "variable": {
                    "value": "val_lbls",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[idx_val]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_21": {
                "variable": {
                    "value": "test_lbls",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[idx_test]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_30": {
                "variable": {
                    "value": "opt",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "log.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_50": {
                "variable": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "log(train_embs)",
                            "Call"
                        ],
                        [
                            "log(val_embs)",
                            "Call"
                        ],
                        [
                            "log(test_embs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_62": {
                "variable": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "log(train_embs)",
                            "Call"
                        ],
                        [
                            "log(val_embs)",
                            "Call"
                        ],
                        [
                            "log(test_embs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_52": {
                "input": {
                    "value": "preds == val_lbls",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_64": {
                "input": {
                    "value": "preds == test_lbls",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "embedder.py": {
        "torch": {
            "device_11": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(args.gpu_num_) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "layers/discriminator.py": {
        "torch": {
            "Bilinear_8": {
                "variable": {
                    "value": "self.f_k_bilinear_e",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in1_features": {
                    "value": "n_h",
                    "type": "Name",
                    "possible_values": []
                },
                "in2_features": {
                    "value": "n_h",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Bilinear_9": {
                "variable": {
                    "value": "self.f_k_bilinear_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in1_features": {
                    "value": "ft_size",
                    "type": "Name",
                    "possible_values": []
                },
                "in2_features": {
                    "value": "n_h",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Bilinear_10": {
                "variable": {
                    "value": "self.f_k_bilinear_j",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in1_features": {
                    "value": "n_h",
                    "type": "Name",
                    "possible_values": []
                },
                "in2_features": {
                    "value": "n_h",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.linear_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_h",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_h",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.linear_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ft_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_h",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.linear_cf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_h * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_h",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Sigmoid_16": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_38": {
                "variable": {
                    "value": "c_x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_43": {
                "variable": {
                    "value": "logits_1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.f_k_bilinear_e(c_x_0, h_pl)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_44": {
                "variable": {
                    "value": "logits_2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.f_k_bilinear_e(c_x_0, h_mi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_45": {
                "variable": {
                    "value": "logits_nodes",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[logits_1, logits_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_48": {
                "variable": {
                    "value": "logits_1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.f_k_bilinear_i(f_pl, h_pl)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_49": {
                "variable": {
                    "value": "logits_2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.f_k_bilinear_i(f_pl, h_mi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_50": {
                "variable": {
                    "value": "logits_locs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[logits_1, logits_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "cs_pl",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c_x, f_pl]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "cs_mi",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c_x, f_mi]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_69": {
                "variable": {
                    "value": "logits_1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.f_k_bilinear_j(cs_pl, h_pl)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_70": {
                "variable": {
                    "value": "logits_2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.f_k_bilinear_j(cs_mi, h_pl)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_71": {
                "variable": {
                    "value": "logits_cs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[logits_1, logits_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "layers/gcn.py": {
        "torch": {
            "Linear_9": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_ft",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_ft",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_10": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_13": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_ft)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_32": {
                "variable": {
                    "value": "seq",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.spmm(adj, torch.squeeze(seq, 0))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_34": {
                "variable": {
                    "value": "seq",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "Name",
                    "possible_values": []
                },
                "mat2": {
                    "value": "seq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc(seq)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(torch.spmm(adj, torch.squeeze(seq, 0)), 0)",
                            "Call"
                        ],
                        [
                            "torch.bmm(adj, seq)",
                            "Call"
                        ],
                        [
                            "seq + self.bias",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_32": {
                "input": {
                    "value": "seq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc(seq)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(torch.spmm(adj, torch.squeeze(seq, 0)), 0)",
                            "Call"
                        ],
                        [
                            "torch.bmm(adj, seq)",
                            "Call"
                        ],
                        [
                            "seq + self.bias",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/hdi.py": {
        "torch": {
            "BCEWithLogitsLoss_16": {
                "variable": {
                    "value": "self.criteria",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_69": {
                "variable": {
                    "value": "final_embs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(final_embs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_78": {
                "variable": {
                    "value": "lbl_1",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_79": {
                "variable": {
                    "value": "lbl_2",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_80": {
                "variable": {
                    "value": "lbl",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(lbl_1, lbl_2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "squeeze_95": {
                "variable": {
                    "value": "h_1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gcn(seq1, adj, sparse)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_96": {
                "variable": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean(h_1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_99": {
                "variable": {
                    "value": "h_2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gcn(seq2, adj, sparse)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_107": {
                "variable": {
                    "value": "h_1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gcn(seq, adj, sparse)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_28": {
                "variable": {
                    "value": "optimiser",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_69": {
                "tensors": {
                    "value": "final_embs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.mean(torch.stack(final_embs), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_96": {
                "input": {
                    "value": "h_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.squeeze(self.gcn(seq1, adj, sparse))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(self.gcn(seq, adj, sparse))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_51": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'saved_model/best_{}_{}_{}.pkl'.format(self.args.dataset, self.args.embedder, n_adj)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/hdmi.py": {
        "torch": {
            "BCEWithLogitsLoss_18": {
                "variable": {
                    "value": "self.criteria",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_30": {
                "variable": {
                    "value": "optimiser",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_92": {
                "variable": {
                    "value": "lbl_1",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_93": {
                "variable": {
                    "value": "lbl_2",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_94": {
                "variable": {
                    "value": "lbl",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(lbl_1, lbl_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_104": {
                "variable": {
                    "value": "self.gcn_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GCN(ft_size, hid_units) for _ in range(n_networks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_105": {
                "variable": {
                    "value": "self.w_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(hid_units, hid_units, bias=False) for _ in range(n_networks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_106": {
                "variable": {
                    "value": "self.y_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(hid_units, 1) for _ in range(n_networks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Tanh_114": {
                "variable": {
                    "value": "self.att_act1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_115": {
                "variable": {
                    "value": "self.att_act2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "score",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_combine_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_135": {
                "variable": {
                    "value": "score",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(h_combine_list, -1)",
                            "Call"
                        ],
                        [
                            "self.att_act1(score)",
                            "Call"
                        ],
                        [
                            "self.att_act2(score)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(score, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_136": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_list",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_138": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.w_list[i](h)",
                            "Call"
                        ],
                        [
                            "self.y_list[i](h)",
                            "Call"
                        ],
                        [
                            "torch.stack(h_list, dim=1)",
                            "Call"
                        ],
                        [
                            "score * h",
                            "BinOp"
                        ],
                        [
                            "torch.sum(h, dim=1)",
                            "Call"
                        ],
                        [
                            "self.combine_att(h_1_list)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_169": {
                "variable": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "h1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.combine_att(h_1_list)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_151": {
                "variable": {
                    "value": "h_1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gcn_list[i](seq1, adj, sparse)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_153": {
                "variable": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean(h_1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_157": {
                "variable": {
                    "value": "h_2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gcn_list[i](seq2, adj, sparse)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_178": {
                "variable": {
                    "value": "h_1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gcn_list[i](seq, adj, sparse)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_78": {
                "f": {
                    "value": "'saved_model/best_{}_{}.pkl'.format(self.args.dataset, self.args.embedder)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_64": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'saved_model/best_{}_{}.pkl'.format(self.args.dataset, self.args.embedder)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "in_features": {
                    "value": "hid_units",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_units",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "in_features": {
                    "value": "hid_units",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_153": {
                "input": {
                    "value": "h_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.squeeze(self.gcn_list[i](seq1, adj, sparse))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(self.gcn_list[i](seq, adj, sparse))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/logreg.py": {
        "torch": {
            "Linear_8": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ft_in",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nb_classes",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "utils/process.py": {
        "torch": {
            "from_numpy_123": {
                "variable": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((sparse_mx.row, sparse_mx.col)).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_125": {
                "variable": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sparse_mx.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}