{
    "apps/drug_drug_synergy/DTSyn/main.py": {
        "sklearn": {
            "accuracy_score_85": {
                "variable": {
                    "value": "ACC",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eva(model, data_loader, lincs, criterion)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1 if x > 0.5 else 0 for x in test_prob]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "balanced_accuracy_score_86": {
                "variable": {
                    "value": "BACC",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eva(model, data_loader, lincs, criterion)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1 if x > 0.5 else 0 for x in test_prob]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "precision_score_87": {
                "variable": {
                    "value": "PREC",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eva(model, data_loader, lincs, criterion)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1 if x > 0.5 else 0 for x in test_prob]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "recall_score_88": {
                "variable": {
                    "value": "TPR",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eva(model, data_loader, lincs, criterion)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1 if x > 0.5 else 0 for x in test_prob]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "cohen_kappa_score_89": {
                "variable": {
                    "value": "KAPPA",
                    "type": "variable",
                    "possible_values": []
                },
                "y1": {
                    "value": "test_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eva(model, data_loader, lincs, criterion)",
                            "Call"
                        ]
                    ]
                },
                "y2": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1 if x > 0.5 else 0 for x in test_prob]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "precision_recall_curve_91": {
                "variable": {
                    "value": "(precision, recall, threshold2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eva(model, data_loader, lincs, criterion)",
                            "Call"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "test_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "paddle.nn.functional.softmax(paddle.to_tensor(test_pred)).numpy()[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "roc_auc_score_92": {
                "y_true": {
                    "value": "test_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eva(model, data_loader, lincs, criterion)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "test_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "paddle.nn.functional.softmax(paddle.to_tensor(test_pred)).numpy()[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "auc_92": {
                "x": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": [
                        [
                            "precision_recall_curve(test_label, test_prob)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": [
                        [
                            "precision_recall_curve(test_label, test_prob)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "apps/drug_drug_synergy/DTSyn/tsnet.py": {
        "sklearn": {}
    },
    "apps/drug_drug_synergy/DTSyn/utils_no_de.py": {
        "sklearn": {}
    },
    "apps/drug_drug_synergy/RGCN/train.py": {
        "sklearn": {
            "roc_curve_87": {
                "variable": {
                    "value": "(fpr, tpr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "ground_truth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t[np.where(mask.numpy() == 1)]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "pred_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(sg, paddle.to_tensor(sg.node_feat['features']))",
                            "Call"
                        ],
                        [
                            "paddle.multiply(pred_prob, mask)",
                            "Call"
                        ],
                        [
                            "p[np.where(mask.numpy() == 1)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "auc_88": {
                "variable": {
                    "value": "auc_v",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roc_curve(y_true=ground_truth, y_score=pred_prob)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roc_curve(y_true=ground_truth, y_score=pred_prob)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "apps/drug_target_interaction/batchdta/pairwise/GraphDTA/processing.py": {
        "sklearn": {},
        "torch": {}
    },
    "apps/drug_target_interaction/batchdta/pairwise/GraphDTA/run_pairwise_GraphDTA_CV.py": {
        "sklearn": {},
        "torch": {
            "cat_175": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tensor.clone() for _ in range(torch.distributed.get_world_size())]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_304": {
                "variable": {
                    "value": "model_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.to(rank)",
                            "Call"
                        ],
                        [
                            "eval(args.model_name)()",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[rank]",
                    "type": "List",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_308": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model_dist.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_149": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_fn(output, ture_labels)",
                            "Call"
                        ],
                        [
                            "self.threshold - score_diff",
                            "BinOp"
                        ],
                        [
                            "torch.clip(loss, min=0)",
                            "Call"
                        ],
                        [
                            "torch.square(loss)",
                            "Call"
                        ],
                        [
                            "loss * self.weight",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_150": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_fn(output, ture_labels)",
                            "Call"
                        ],
                        [
                            "self.threshold - score_diff",
                            "BinOp"
                        ],
                        [
                            "torch.clip(loss, min=0)",
                            "Call"
                        ],
                        [
                            "torch.square(loss)",
                            "Call"
                        ],
                        [
                            "loss * self.weight",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DistributedSampler_345": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TrainDataset(train_x1_index=train_x1_index, train_x2_index=train_x2_index, train_d=train_d_data, train_t=train_t_data, y=Y_train_data, onehot_train_mixed=onehot_train_mixed, smile_graph=train_smiles_graph_data)",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "world_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.device_count()",
                            "Call"
                        ],
                        [
                            "world_size",
                            "Method Argument"
                        ]
                    ]
                },
                "rank": {
                    "value": "rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rank",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_count_478": {
                "variable": {
                    "value": "world_size",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_375": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_405": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_direct + CV + '_' + 'train_model_best'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_418": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_direct + CV + '_' + 'train_model_best'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "apps/drug_target_interaction/batchdta/pairwise/Moltrans/preprocess.py": {
        "sklearn": {}
    },
    "apps/drug_target_interaction/batchdta/pointwise/GraphDTA/preprocess.py": {
        "sklearn": {},
        "torch": {}
    },
    "apps/drug_target_interaction/batchdta/pointwise/GraphDTA/processing.py": {
        "sklearn": {},
        "torch": {}
    },
    "apps/drug_target_interaction/batchdta/pointwise/GraphDTA/train_bindingDB.py": {
        "sklearn": {},
        "torch": {
            "MSELoss_33": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_27": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "manual_seed_all_28": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "Tensor_85": {
                "variable": {
                    "value": "total_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_86": {
                "variable": {
                    "value": "total_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_87": {
                "variable": {
                    "value": "total_groups",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_109": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda_name if torch.cuda.is_available() else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_118": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "res_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_preds, output.cpu())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "res_label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_labels, data.y.view(-1, 1).cpu())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "res_group",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_groups, data.g.view(-1, 1).cpu())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_206": {
                "f": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'bestModel/GraphDTA_' + model_st + '_BindingDB_ki_' + str(rounds) + '.model'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_202": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'bestModel/GraphDTA_' + model_st + '_BindingDB_ki_' + str(rounds) + '.model'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "apps/drug_target_interaction/batchdta/pointwise/GraphDTA/train_davis.py": {
        "sklearn": {},
        "torch": {
            "MSELoss_33": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_27": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "manual_seed_all_28": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "Tensor_84": {
                "variable": {
                    "value": "total_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_85": {
                "variable": {
                    "value": "total_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_106": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda_name if torch.cuda.is_available() else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_115": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "res_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_preds, output.cpu())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_92": {
                "variable": {
                    "value": "res_label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_labels, data.y.view(-1, 1).cpu())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_172": {
                "f": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'bestModel/GraphDTA_' + model_st + '_davis_' + str(rounds) + '.model'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_168": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'bestModel/GraphDTA_' + model_st + '_davis_' + str(rounds) + '.model'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "apps/drug_target_interaction/batchdta/pointwise/GraphDTA/train_kiba.py": {
        "sklearn": {},
        "torch": {
            "MSELoss_36": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_30": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "manual_seed_all_31": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "Tensor_87": {
                "variable": {
                    "value": "total_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_88": {
                "variable": {
                    "value": "total_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_119": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda_name if torch.cuda.is_available() else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_128": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "res_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_preds, output.cpu())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "res_label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_labels, data.y.view(-1, 1).cpu())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_199": {
                "f": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'bestModel/GraphDTA_' + model_st + '_kiba_' + str(rounds) + '.model'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_195": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'bestModel/GraphDTA_' + model_st + '_kiba_' + str(rounds) + '.model'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "apps/drug_target_interaction/batchdta/pointwise/Moltrans/preprocess.py": {
        "sklearn": {}
    },
    "apps/drug_target_interaction/moltrans_dti/train_cls.py": {
        "sklearn": {
            "roc_curve_95": {
                "variable": {
                    "value": "(fpr, tpr, threshold)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "y_label + label_id.flatten().tolist()",
                            "BinOp"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "y_pred + predicts.flatten().tolist()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "auc_102": {
                "variable": {
                    "value": "auroc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roc_curve(y_label, y_pred)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roc_curve(y_label, y_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "confusion_matrix_106": {
                "variable": {
                    "value": "cf_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "y_label + label_id.flatten().tolist()",
                            "BinOp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1 if i else 0 for i in y_pred >= optimal_threshold]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "roc_auc_score_119": {
                "y_true": {
                    "value": "y_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "y_label + label_id.flatten().tolist()",
                            "BinOp"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "y_pred + predicts.flatten().tolist()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "f1_score_120": {
                "y_true": {
                    "value": "y_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "y_label + label_id.flatten().tolist()",
                            "BinOp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray([1 if i else 0 for i in np.asarray(y_pred) >= 0.5])",
                            "Call"
                        ]
                    ]
                }
            },
            "average_precision_score_104": {
                "y_true": {
                    "value": "y_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "y_label + label_id.flatten().tolist()",
                            "BinOp"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "y_pred + predicts.flatten().tolist()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "precision_score_108": {
                "y_true": {
                    "value": "y_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "y_label + label_id.flatten().tolist()",
                            "BinOp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1 if i else 0 for i in y_pred >= optimal_threshold]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "recall_score_109": {
                "y_true": {
                    "value": "y_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "y_label + label_id.flatten().tolist()",
                            "BinOp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1 if i else 0 for i in y_pred >= optimal_threshold]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "apps/drug_target_interaction/sign/utils.py": {
        "sklearn": {
            "LinearRegression_26": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "apps/drug_target_interaction/sman/metrics.py": {
        "sklearn": {
            "LinearRegression_33": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "apps/pretrained_compound/ChemRL/GEM-2/pahelix/utils/splitters.py": {
        "sklearn": {}
    },
    "apps/pretrained_compound/ChemRL/GEM-2/src/utils.py": {
        "sklearn": {
            "roc_auc_score_47": {
                "y_true": {
                    "value": "c_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[c_valid, i]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "c_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds[c_valid, i]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "apps/pretrained_compound/ChemRL/GEM/src/utils.py": {
        "sklearn": {
            "roc_auc_score_170": {
                "y_true": {
                    "value": "c_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[c_valid, i]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "c_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds[c_valid, i]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "apps/pretrained_compound/info_graph/classifier.py": {
        "sklearn": {
            "StratifiedKFold_18": {
                "variable": {
                    "value": "kf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "StratifiedKFold_35": {
                "variable": {
                    "value": "kf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "StratifiedKFold_52": {
                "variable": {
                    "value": "kf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "StratifiedKFold_70": {
                "variable": {
                    "value": "kf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "LabelEncoder_87": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GridSearchCV_26": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "LogisticRegression()",
                    "type": "Call",
                    "possible_values": []
                },
                "param_grid": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000]}",
                            "Dict"
                        ],
                        [
                            "{'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000]}",
                            "Dict"
                        ],
                        [
                            "{'n_estimators': [100, 200, 500, 1000]}",
                            "Dict"
                        ],
                        [
                            "{'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000]}",
                            "Dict"
                        ]
                    ]
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "scoring": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "verbose": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogisticRegression_28": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GridSearchCV_43": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "SVC()",
                    "type": "Call",
                    "possible_values": []
                },
                "param_grid": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000]}",
                            "Dict"
                        ],
                        [
                            "{'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000]}",
                            "Dict"
                        ],
                        [
                            "{'n_estimators': [100, 200, 500, 1000]}",
                            "Dict"
                        ],
                        [
                            "{'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000]}",
                            "Dict"
                        ]
                    ]
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "scoring": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "verbose": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SVC_45": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GridSearchCV_60": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "RandomForestClassifier()",
                    "type": "Call",
                    "possible_values": []
                },
                "param_grid": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000]}",
                            "Dict"
                        ],
                        [
                            "{'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000]}",
                            "Dict"
                        ],
                        [
                            "{'n_estimators': [100, 200, 500, 1000]}",
                            "Dict"
                        ],
                        [
                            "{'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000]}",
                            "Dict"
                        ]
                    ]
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "scoring": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "verbose": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RandomForestClassifier_62": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GridSearchCV_78": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "LinearSVC()",
                    "type": "Call",
                    "possible_values": []
                },
                "param_grid": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000]}",
                            "Dict"
                        ],
                        [
                            "{'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000]}",
                            "Dict"
                        ],
                        [
                            "{'n_estimators': [100, 200, 500, 1000]}",
                            "Dict"
                        ],
                        [
                            "{'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000]}",
                            "Dict"
                        ]
                    ]
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "scoring": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "verbose": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LinearSVC_80": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "accuracy_score_30": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[test_index]",
                            "Subscript"
                        ],
                        [
                            "y[test_index]",
                            "Subscript"
                        ],
                        [
                            "y[test_index]",
                            "Subscript"
                        ],
                        [
                            "y[test_index]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "classifier.predict(x_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "accuracy_score_47": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[test_index]",
                            "Subscript"
                        ],
                        [
                            "y[test_index]",
                            "Subscript"
                        ],
                        [
                            "y[test_index]",
                            "Subscript"
                        ],
                        [
                            "y[test_index]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "classifier.predict(x_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "accuracy_score_64": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[test_index]",
                            "Subscript"
                        ],
                        [
                            "y[test_index]",
                            "Subscript"
                        ],
                        [
                            "y[test_index]",
                            "Subscript"
                        ],
                        [
                            "y[test_index]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "classifier.predict(x_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "accuracy_score_82": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[test_index]",
                            "Subscript"
                        ],
                        [
                            "y[test_index]",
                            "Subscript"
                        ],
                        [
                            "y[test_index]",
                            "Subscript"
                        ],
                        [
                            "y[test_index]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "classifier.predict(x_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LogisticRegression_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SVC_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomForestClassifier_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearSVC_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "apps/pretrained_compound/info_graph/src/utils.py": {
        "sklearn": {
            "roc_auc_score_106": {
                "y_true": {
                    "value": "c_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[c_valid, i]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "c_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds[c_valid, i]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "apps/pretrained_compound/pretrain_gnns/src/utils.py": {
        "sklearn": {
            "roc_auc_score_121": {
                "y_true": {
                    "value": "c_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[c_valid, i]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "c_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds[c_valid, i]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "apps/protein_function_prediction/DeepFRI/custom_metrics.py": {
        "sklearn": {
            "average_precision_score_42": {
                "variable": {
                    "value": "aupr",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "true_labels[:, available_index]",
                            "Subscript"
                        ],
                        [
                            "true_labels[:, available_index]",
                            "Subscript"
                        ],
                        [
                            "true_labels",
                            "Method Argument"
                        ],
                        [
                            "true_labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "pred_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_scores[:, available_index]",
                            "Subscript"
                        ],
                        [
                            "pred_scores[:, available_index]",
                            "Subscript"
                        ],
                        [
                            "pred_scores",
                            "Method Argument"
                        ],
                        [
                            "pred_scores",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_recall_curve_64": {
                "variable": {
                    "value": "(precision[i], recall[i], thresholds[i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "prot_true_labels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "probas_pred": {
                    "value": "prot_pred_scores[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "average_precision_score_68": {
                "variable": {
                    "value": "ap[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "prot_true_labels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "prot_pred_scores[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "apps/protein_function_prediction/ProteinSIGN/custom_metrics.py": {
        "sklearn": {
            "average_precision_score_42": {
                "variable": {
                    "value": "aupr",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "true_labels[:, available_index]",
                            "Subscript"
                        ],
                        [
                            "true_labels[:, available_index]",
                            "Subscript"
                        ],
                        [
                            "true_labels",
                            "Method Argument"
                        ],
                        [
                            "true_labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "pred_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_scores[:, available_index]",
                            "Subscript"
                        ],
                        [
                            "pred_scores[:, available_index]",
                            "Subscript"
                        ],
                        [
                            "pred_scores",
                            "Method Argument"
                        ],
                        [
                            "pred_scores",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_recall_curve_64": {
                "variable": {
                    "value": "(precision[i], recall[i], thresholds[i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "prot_true_labels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "probas_pred": {
                    "value": "prot_pred_scores[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "average_precision_score_68": {
                "variable": {
                    "value": "ap[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "prot_true_labels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "prot_pred_scores[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "competition/kddcup2021-PCQM4M-LSC/ensemble/ensemble.py": {
        "sklearn": {
            "HuberRegressor_76": {
                "variable": {
                    "value": "cross1_model",
                    "type": "variable",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "HuberRegressor_81": {
                "variable": {
                    "value": "cross2_model",
                    "type": "variable",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "HuberRegressor_54": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_19": {
                "variable": {
                    "value": "split_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "../dataset/pcqm4m_kddcup2021/split_dict.pt",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "competition/ogbg_molhiv/propeller/paddle/train/metrics.py": {
        "sklearn": {}
    },
    "competition/ogbg_molhiv/random_forest.py": {
        "sklearn": {
            "RandomForestClassifier_97": {
                "variable": {
                    "value": "rf",
                    "type": "variable",
                    "possible_values": []
                },
                "min_samples_leaf": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "n_estimators",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "int"
                        ]
                    ]
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "criterion": {
                    "value": "entropy",
                    "type": "str",
                    "possible_values": []
                },
                "class_weight": {
                    "value": "{0: 1, 1: 10}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "average_precision_score_110": {
                "variable": {
                    "value": "all_ap[val_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y.loc[X_val.index]",
                            "Subscript"
                        ],
                        [
                            "y_val.dropna()",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "all_probs[val_key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "roc_auc_score_111": {
                "variable": {
                    "value": "all_rocs[val_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y.loc[X_val.index]",
                            "Subscript"
                        ],
                        [
                            "y_val.dropna()",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "all_probs[val_key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "average_precision_score_114": {
                "variable": {
                    "value": "all_ap[test_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y.loc[X_test.index]",
                            "Subscript"
                        ],
                        [
                            "y_test.dropna()",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "all_probs[test_key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "roc_auc_score_115": {
                "variable": {
                    "value": "all_rocs[test_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y.loc[X_test.index]",
                            "Subscript"
                        ],
                        [
                            "y_test.dropna()",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "all_probs[test_key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "pahelix/featurizers/gem_featurizer.py": {
        "sklearn": {
            "pairwise_distances_192": {
                "variable": {
                    "value": "dist_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "data['atom_pos']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "pahelix/featurizers/het_gnn_featurizer.py": {
        "sklearn": {
            "StandardScaler_41": {
                "variable": {
                    "value": "nm",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pahelix/utils/splitters.py": {
        "sklearn": {}
    },
    "research/geomgcl/train_finetune.py": {
        "sklearn": {
            "roc_auc_score_52": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loader.next_batch()",
                            "Call"
                        ],
                        [
                            "np.array(y_list)",
                            "Call"
                        ],
                        [
                            "trn_loader.next_batch()",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(graph_2d, graph_3d)",
                            "Call"
                        ],
                        [
                            "np.array(y_hat_list)",
                            "Call"
                        ],
                        [
                            "model(graph_2d, graph_3d)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_49": {
                "y_true": {
                    "value": "true[np.where(true >= 0)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "pred[np.where(true >= 0)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "apps/protein_folding/helixfold-single/alphafold_paddle/data/tf_input/data_transforms.py": {
        "tensorflow": {
            "ones_49": {
                "variable": {
                    "value": "protein[seq_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape_helpers.shape_list(protein['aatype'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_55": {
                "variable": {
                    "value": "protein[template_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape_helpers.shape_list(protein['template_domain_names'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_72": {
                "variable": {
                    "value": "protein[is_distillation]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "float(distillation)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_86": {
                "variable": {
                    "value": "protein[template_aatype]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "protein['template_aatype']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_90": {
                "variable": {
                    "value": "new_order",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "new_order_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "residue_constants.MAP_HHBLITS_AATYPE_TO_OUR_AATYPE",
                            "Attribute"
                        ],
                        [
                            "residue_constants.MAP_HHBLITS_AATYPE_TO_OUR_AATYPE",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_91": {
                "variable": {
                    "value": "protein[template_aatype]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "new_order",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(new_order_list, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant(new_order_list, dtype=protein['msa'].dtype)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "protein['template_aatype']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_99": {
                "variable": {
                    "value": "new_order",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "new_order_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "residue_constants.MAP_HHBLITS_AATYPE_TO_OUR_AATYPE",
                            "Attribute"
                        ],
                        [
                            "residue_constants.MAP_HHBLITS_AATYPE_TO_OUR_AATYPE",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "protein['msa'].dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_100": {
                "variable": {
                    "value": "protein[msa]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "new_order",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(new_order_list, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant(new_order_list, dtype=protein['msa'].dtype)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "protein['msa']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_116": {
                "variable": {
                    "value": "protein[aatype]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "protein['aatype']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_and_146": {
                "variable": {
                    "value": "msa_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "msa_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(shape_helpers.shape_list(protein['msa'])) < replace_proportion",
                            "Compare"
                        ],
                        [
                            "tf.logical_and(msa_mask, protein['msa'] != gap_idx)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "protein['msa'] != gap_idx",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_147": {
                "variable": {
                    "value": "protein[msa]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "condition": {
                    "value": "msa_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(shape_helpers.shape_list(protein['msa'])) < replace_proportion",
                            "Compare"
                        ],
                        [
                            "tf.logical_and(msa_mask, protein['msa'] != gap_idx)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.ones_like(protein['msa']) * x_idx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "protein['msa']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_154": {
                "variable": {
                    "value": "protein[aatype]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "condition": {
                    "value": "aatype_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(shape_helpers.shape_list(protein['aatype'])) < replace_proportion",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.ones_like(protein['aatype']) * x_idx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "protein['aatype']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_175": {
                "variable": {
                    "value": "index_order",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[0], shuffled]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_176": {
                "variable": {
                    "value": "num_sel",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "max_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_seq",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "num_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(protein['msa'])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(protein['extra_msa'])[0]",
                            "Subscript"
                        ],
                        [
                            "shape_helpers.shape_list(protein['msa'])[0]",
                            "Subscript"
                        ],
                        [
                            "shape_helpers.shape_list(sample_one_hot)",
                            "Call"
                        ],
                        [
                            "shape_helpers.shape_list(protein['msa'])[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "split_178": {
                "variable": {
                    "value": "(sel_seq, not_sel_seq)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "index_order",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([[0], shuffled], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[num_sel, num_seq - num_sel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "minimum_193": {
                "variable": {
                    "value": "num_sel",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "max_extra_msa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_extra_msa",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "num_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(protein['msa'])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(protein['extra_msa'])[0]",
                            "Subscript"
                        ],
                        [
                            "shape_helpers.shape_list(protein['msa'])[0]",
                            "Subscript"
                        ],
                        [
                            "shape_helpers.shape_list(sample_one_hot)",
                            "Call"
                        ],
                        [
                            "shape_helpers.shape_list(protein['msa'])[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_223": {
                "variable": {
                    "value": "block_num_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(tf.cast(num_seq, tf.float32) * config.msa_fraction_per_block)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_232": {
                "variable": {
                    "value": "del_block_starts",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nb]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "num_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(protein['msa'])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(protein['extra_msa'])[0]",
                            "Subscript"
                        ],
                        [
                            "shape_helpers.shape_list(protein['msa'])[0]",
                            "Subscript"
                        ],
                        [
                            "shape_helpers.shape_list(sample_one_hot)",
                            "Call"
                        ],
                        [
                            "shape_helpers.shape_list(protein['msa'])[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_234": {
                "variable": {
                    "value": "del_blocks",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "del_blocks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "del_block_starts[:, None] + tf.range(block_num_seq)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(del_blocks, 0, num_seq - 1)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "num_seq - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "difference_238": {
                "variable": {
                    "value": "sparse_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.range(1, num_seq)[None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "del_indices[None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_240": {
                "variable": {
                    "value": "keep_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.sparse.to_dense(sparse_diff)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_241": {
                "variable": {
                    "value": "keep_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[0], keep_indices]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_258": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.ones(21), gap_agreement_weight * tf.ones(1), np.zeros(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_274": {
                "variable": {
                    "value": "agreement",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(extra_one_hot, [extra_num_seq, num_res * 23])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.reshape(sample_one_hot * weights, [num_seq, num_res * 23])",
                    "type": "Call",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_280": {
                "variable": {
                    "value": "protein[extra_cluster_assignment]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "agreement",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(extra_one_hot, [extra_num_seq, num_res * 23]), tf.reshape(sample_one_hot * weights, [num_seq, num_res * 23]), transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_313": {
                "variable": {
                    "value": "protein[msa_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape_helpers.shape_list(protein['msa'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_315": {
                "variable": {
                    "value": "protein[msa_row_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape_helpers.shape_list(protein['msa'])[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_322": {
                "variable": {
                    "value": "is_gly",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "aatype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aatype",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "residue_constants.restype_order['G']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_325": {
                "variable": {
                    "value": "pseudo_beta",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.tile(is_gly[..., None], [1] * len(is_gly.shape) + [3])",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "all_atom_positions[..., ca_idx, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "all_atom_positions[..., cb_idx, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_353": {
                "variable": {
                    "value": "protein[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "categorical_360": {
                "variable": {
                    "value": "counts",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.reshape(tf.log(probs + epsilon), [-1, num_classes])",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_373": {
                "variable": {
                    "value": "protein[hhblits_profile]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.one_hot(protein['msa'], 22)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_382": {
                "variable": {
                    "value": "random_aa",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.05] * 20 + [0.0, 0.0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_394": {
                "variable": {
                    "value": "categorical_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "categorical_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.uniform_prob * random_aa + config.profile_prob * protein['hhblits_profile'] + config.same_prob * tf.one_hot(protein['msa'], 22)",
                            "BinOp"
                        ],
                        [
                            "tf.pad(categorical_probs, pad_shapes, constant_values=mask_prob)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "pad_shapes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, 0] for _ in range(len(categorical_probs.shape))]",
                            "ListComp"
                        ]
                    ]
                },
                "constant_values": {
                    "value": "mask_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - config.profile_prob - config.same_prob - config.uniform_prob",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_401": {
                "variable": {
                    "value": "bert_msa",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask_position",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(sh) < replace_fraction",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "bert_msa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shaped_categorical(categorical_probs)",
                            "Call"
                        ],
                        [
                            "tf.where(mask_position, bert_msa, protein['msa'])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "protein['msa']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_404": {
                "variable": {
                    "value": "protein[bert_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "mask_position",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(sh) < replace_fraction",
                            "Compare"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_449": {
                "variable": {
                    "value": "has_break",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.cast(protein['between_segment_residues'], tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_452": {
                "variable": {
                    "value": "aatype_1hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "protein['aatype']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_459": {
                "variable": {
                    "value": "msa_1hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "protein['msa']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_by_value_460": {
                "variable": {
                    "value": "has_deletion",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "protein['deletion_matrix']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "concat_483": {
                "variable": {
                    "value": "protein[msa_feat]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "msa_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[msa_1hot, tf.expand_dims(has_deletion, axis=-1), tf.expand_dims(deletion_value, axis=-1)]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_484": {
                "variable": {
                    "value": "protein[target_feat]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "target_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.expand_dims(has_break, axis=-1), aatype_1hot]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "minimum_511": {
                "variable": {
                    "value": "num_res_crop_size",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "protein['seq_length']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "crop_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_templates_crop_size",
                            "variable"
                        ],
                        [
                            "num_res_crop_size if is_num_res else -1 if dim is None else dim",
                            "IfExp"
                        ],
                        [
                            "crop_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "minimum_525": {
                "variable": {
                    "value": "num_templates_crop_size",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "num_templates - templates_crop_start",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "max_templates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_templates",
                            "Method Argument"
                        ],
                        [
                            "max_templates",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stateless_uniform_528": {
                "variable": {
                    "value": "num_res_crop_start",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "seq_length - num_res_crop_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed_maker()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argsort_532": {
                "variable": {
                    "value": "templates_select_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.random.stateless_uniform([num_templates], seed=seed_maker())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_598": {
                "variable": {
                    "value": "residx_atom14_to_atom37",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "restype_atom14_to_atom37",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(restype_atom14_to_atom37, dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "protein['aatype']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_600": {
                "variable": {
                    "value": "residx_atom14_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "restype_atom14_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(restype_atom14_mask, dtype=np.float32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "protein['aatype']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_607": {
                "variable": {
                    "value": "residx_atom37_to_atom14",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "restype_atom37_to_atom14",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(restype_atom37_to_atom14, dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "protein['aatype']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_620": {
                "variable": {
                    "value": "residx_atom37_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "restype_atom37_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([21, 37], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "protein['aatype']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "uniform_228": {
                "variable": {
                    "value": "nb",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "config.num_blocks + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_298": {
                "indices": {
                    "value": "protein['msa']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_331": {
                "variable": {
                    "value": "pseudo_beta_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "is_gly",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(aatype, residue_constants.restype_order['G'])",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "all_atom_masks[..., ca_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "all_atom_masks[..., cb_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_333": {
                "variable": {
                    "value": "pseudo_beta_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pseudo_beta_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(is_gly, all_atom_masks[..., ca_idx], all_atom_masks[..., cb_idx])",
                            "Call"
                        ],
                        [
                            "tf.cast(pseudo_beta_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_364": {
                "tensor": {
                    "value": "counts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.categorical(tf.reshape(tf.log(probs + epsilon), [-1, num_classes]), 1, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "ds[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_by_value_478": {
                "variable": {
                    "value": "protein[extra_has_deletion]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "t": {
                    "value": "protein['extra_deletion_matrix']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_507": {
                "variable": {
                    "value": "num_templates",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "shape_helpers.shape_list(protein['template_mask'])[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_510": {
                "variable": {
                    "value": "num_templates",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stateless_uniform_519": {
                "variable": {
                    "value": "templates_crop_start",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "num_templates + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed_maker()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_558": {
                "variable": {
                    "value": "protein[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "protein.items()",
                            "Call"
                        ],
                        [
                            "protein.items()",
                            "Call"
                        ],
                        [
                            "protein.items()",
                            "Call"
                        ],
                        [
                            "protein.items()",
                            "Call"
                        ],
                        [
                            "tf.gather(v, templates_select_indices)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "crop_starts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "size": {
                    "value": "crop_sizes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cast_38": {
                "variable": {
                    "value": "protein[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "protein.items()",
                            "Call"
                        ],
                        [
                            "protein.items()",
                            "Call"
                        ],
                        [
                            "protein.items()",
                            "Call"
                        ],
                        [
                            "protein.items()",
                            "Call"
                        ],
                        [
                            "tf.gather(v, templates_select_indices)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensordot_110": {
                "variable": {
                    "value": "protein[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "a": {
                    "value": "protein[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "perm_matrix[:num_dim, :num_dim]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axes": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "uniform_142": {
                "shape": {
                    "value": "shape_helpers.shape_list(protein['msa'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "uniform_151": {
                "shape": {
                    "value": "shape_helpers.shape_list(protein['aatype'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_173": {
                "input": {
                    "value": "protein['msa']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_184": {
                "variable": {
                    "value": "protein[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "protein[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "sel_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(index_order, [num_sel, num_seq - num_sel])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_192": {
                "input": {
                    "value": "protein['extra_msa']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_197": {
                "variable": {
                    "value": "protein[extra_ + k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "protein['extra_' + k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "select_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_shuffle(tf.range(0, num_seq))[:num_sel]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "floor_224": {
                "x": {
                    "value": "tf.cast(num_seq, tf.float32) * config.msa_fraction_per_block",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unique_235": {
                "x": {
                    "value": "tf.sort(tf.reshape(del_blocks, [-1]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_dense_240": {
                "sp_input": {
                    "value": "sparse_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sets.difference(tf.range(1, num_seq)[None], del_indices[None])",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_245": {
                "variable": {
                    "value": "protein[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "protein[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "keep_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.sparse.to_dense(sparse_diff), 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([[0], keep_indices], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_265": {
                "indices": {
                    "value": "protein['msa']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_267": {
                "indices": {
                    "value": "protein['extra_msa']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_275": {
                "tensor": {
                    "value": "extra_one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "protein['extra_msa_mask'][:, :, None] * tf.one_hot(protein['extra_msa'], 23)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[extra_num_seq, num_res * 23]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_276": {
                "tensor": {
                    "value": "sample_one_hot * weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_seq, num_res * 23]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsorted_segment_sum_291": {
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "segment_ids": {
                    "value": "protein['extra_cluster_assignment']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_segments": {
                    "value": "num_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(protein['msa'])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(protein['extra_msa'])[0]",
                            "Subscript"
                        ],
                        [
                            "shape_helpers.shape_list(protein['msa'])[0]",
                            "Subscript"
                        ],
                        [
                            "shape_helpers.shape_list(sample_one_hot)",
                            "Call"
                        ],
                        [
                            "shape_helpers.shape_list(protein['msa'])[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tile_326": {
                "input": {
                    "value": "is_gly[..., None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1] * len(is_gly.shape) + [3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_361": {
                "tensor": {
                    "value": "tf.log(probs + epsilon)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_374": {
                "indices": {
                    "value": "protein['msa']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "22",
                    "type": "int",
                    "possible_values": []
                }
            },
            "uniform_398": {
                "shape": {
                    "value": "sh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_helpers.shape_list(protein['msa'])",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_437": {
                "variable": {
                    "value": "protein[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "protein.items()",
                            "Call"
                        ],
                        [
                            "protein.items()",
                            "Call"
                        ],
                        [
                            "protein.items()",
                            "Call"
                        ],
                        [
                            "protein.items()",
                            "Call"
                        ],
                        [
                            "tf.gather(v, templates_select_indices)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[(0, p - tf.shape(v)[i]) for (i, p) in enumerate(pad_size)]",
                            "ListComp"
                        ]
                    ]
                },
                "name": {
                    "value": "f'pad_to_fixed_{k}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "cast_450": {
                "x": {
                    "value": "protein['between_segment_residues']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_455": {
                "input": {
                    "value": "has_break",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(tf.cast(protein['between_segment_residues'], tf.float32), 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "atan_461": {
                "x": {
                    "value": "protein['deletion_matrix'] / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_465": {
                "input": {
                    "value": "has_deletion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(protein['deletion_matrix'], 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_466": {
                "input": {
                    "value": "deletion_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.atan(protein['deletion_matrix'] / 3.0) * (2.0 / np.pi)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stateless_uniform_532": {
                "shape": {
                    "value": "[num_templates]",
                    "type": "List",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed_maker()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_542": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "protein.items()",
                            "Call"
                        ],
                        [
                            "protein.items()",
                            "Call"
                        ],
                        [
                            "protein.items()",
                            "Call"
                        ],
                        [
                            "protein.items()",
                            "Call"
                        ],
                        [
                            "tf.gather(v, templates_select_indices)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "templates_select_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argsort(tf.random.stateless_uniform([num_templates], seed=seed_maker()))",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_125": {
                "variable": {
                    "value": "protein[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "protein[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_148": {
                "input": {
                    "value": "protein['msa']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_155": {
                "input": {
                    "value": "protein['aatype']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_183": {
                "variable": {
                    "value": "protein[extra_ + k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "protein[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "not_sel_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(index_order, [num_sel, num_seq - num_sel])",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_235": {
                "values": {
                    "value": "tf.reshape(del_blocks, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_259": {
                "shape": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_297": {
                "indices": {
                    "value": "protein['extra_msa']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_361": {
                "x": {
                    "value": "probs + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "one_hot_387": {
                "indices": {
                    "value": "protein['msa']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "22",
                    "type": "int",
                    "possible_values": []
                }
            },
            "atan_471": {
                "x": {
                    "value": "protein['cluster_deletion_mean'] / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_480": {
                "x": {
                    "value": "protein['extra_deletion_matrix'] / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_224": {
                "x": {
                    "value": "num_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(protein['msa'])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(protein['extra_msa'])[0]",
                            "Subscript"
                        ],
                        [
                            "shape_helpers.shape_list(protein['msa'])[0]",
                            "Subscript"
                        ],
                        [
                            "shape_helpers.shape_list(sample_one_hot)",
                            "Call"
                        ],
                        [
                            "shape_helpers.shape_list(protein['msa'])[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_235": {
                "tensor": {
                    "value": "del_blocks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "del_block_starts[:, None] + tf.range(block_num_seq)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(del_blocks, 0, num_seq - 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_260": {
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_474": {
                "input": {
                    "value": "deletion_mean_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.atan(protein['cluster_deletion_mean'] / 3.0) * (2.0 / np.pi)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_435": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "protein.items()",
                            "Call"
                        ],
                        [
                            "protein.items()",
                            "Call"
                        ],
                        [
                            "protein.items()",
                            "Call"
                        ],
                        [
                            "protein.items()",
                            "Call"
                        ],
                        [
                            "tf.gather(v, templates_select_indices)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "apps/protein_folding/helixfold-single/alphafold_paddle/data/tf_input/input_pipeline.py": {
        "tensorflow": {
            "map_fn_153": {
                "variable": {
                    "value": "tensors",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda x: wrap_ensemble_fn(tensors, x)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "tf.range(num_ensemble)",
                    "type": "Call",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "fn_output_signature": {
                    "value": "fn_output_signature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tree.map_structure(tf.TensorSpec.from_tensor, tensors_0)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_144": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "apps/protein_folding/helixfold-single/alphafold_paddle/data/tf_input/protein_features.py": {
        "tensorflow": {}
    },
    "apps/protein_folding/helixfold-single/alphafold_paddle/data/tf_input/protein_features_test.py": {
        "tensorflow": {
            "disable_v2_behavior_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "apps/protein_folding/helixfold-single/alphafold_paddle/data/tf_input/proteins_dataset.py": {
        "tensorflow": {
            "parse_single_example_46": {
                "variable": {
                    "value": "parsed_features",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "raw_data",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "feature_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{k: tf.io.FixedLenSequenceFeature(shape=(), dtype=v[0], allow_missing=True) for (k, v) in features.items()}",
                            "DictComp"
                        ]
                    ]
                }
            },
            "cast_63": {
                "variable": {
                    "value": "num_residues",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "_first(parsed_features['seq_length'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_66": {
                "variable": {
                    "value": "num_msa",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "_first(parsed_features['num_alignments'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_71": {
                "variable": {
                    "value": "num_templates",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(parsed_features['template_domain_names'])[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_87": {
                "variable": {
                    "value": "new_shape_size",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assert_equal_91": {
                "variable": {
                    "value": "assert_equal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.size(v)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "new_shape_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(1, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "new_shape_size * tf.cast(dim, tf.int32)",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "'assert_%s_shape_correct' % k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "message": {
                    "value": "'The size of feature %s (%s) could not be reshaped into %s' % (k, tf.size(v), new_shape)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "FixedLenSequenceFeature_43": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "v[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "parsed_features.items()",
                            "Call"
                        ]
                    ]
                },
                "allow_missing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_54": {
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "assert_greater_98": {
                "variable": {
                    "value": "assert_non_empty",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.size(v)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "'assert_%s_non_empty' % k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "message": {
                    "value": "'The feature %s is not set in the tf.Example. Either do not request the feature or use a tf.Example that has the feature set.' % k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_160": {
                "value": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parsed_features.items()",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_89": {
                "x": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_shape",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "size_92": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parsed_features.items()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_104": {
                "variable": {
                    "value": "parsed_features[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parsed_features.items()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "protein_features.shape(feature_name=k, num_residues=num_residues, msa_length=num_msa, num_templates=num_templates, features=features)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "'reshape_%s' % k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_107": {
                "variable": {
                    "value": "parsed_features[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parsed_features.items()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "protein_features.shape(feature_name=k, num_residues=num_residues, msa_length=num_msa, num_templates=num_templates, features=features)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "'reshape_%s' % k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_72": {
                "input": {
                    "value": "parsed_features['template_domain_names']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "size_99": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parsed_features.items()",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_103": {
                "control_inputs": {
                    "value": "[assert_non_empty, assert_equal]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_106": {
                "control_inputs": {
                    "value": "[assert_equal]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "size_95": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parsed_features.items()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "apps/protein_folding/helixfold-single/alphafold_paddle/data/tf_input/shape_helpers.py": {
        "tensorflow": {
            "convert_to_tensor_31": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_38": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_35": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "apps/protein_folding/helixfold-single/alphafold_paddle/data/tf_input/shape_helpers_test.py": {
        "tensorflow": {
            "zeros_26": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[10, 4, 4, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_27": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, 1, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_30": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([10, 4, 4, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape_dyn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_helpers.shape_list(p)[:2] + [4, 4]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "disable_v2_behavior_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "apps/protein_folding/helixfold-single/alphafold_paddle/data/tf_input/utils.py": {
        "tensorflow": {
            "uniform_42": {
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "tf.int32.min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "maxval": {
                    "value": "tf.int32.max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed_maker()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "apps/protein_folding/helixfold-single/alphafold_paddle/model/features.py": {
        "tensorflow": {
            "Graph_66": {
                "variable": {
                    "value": "tf_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_67": {
                "device_name": {
                    "value": "/device:CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_random_seed_68": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Session_77": {
                "graph": {
                    "value": "tf_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "apps/protein_folding/helixfold-single/alphafold_paddle/model/model.py": {
        "tensorflow": {
            "Graph_155": {
                "variable": {
                    "value": "tf_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_156": {
                "device_name": {
                    "value": "/device:CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_random_seed_157": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Session_166": {
                "graph": {
                    "value": "tf_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "apps/protein_folding/helixfold/alphafold_paddle/data/tf_input/data_transforms.py": {
        "tensorflow": {
            "ones_49": {
                "variable": {
                    "value": "protein[seq_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape_helpers.shape_list(protein['aatype'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_55": {
                "variable": {
                    "value": "protein[template_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape_helpers.shape_list(protein['template_domain_names'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_72": {
                "variable": {
                    "value": "protein[is_distillation]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "float(distillation)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_86": {
                "variable": {
                    "value": "protein[template_aatype]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "protein['template_aatype']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_90": {
                "variable": {
                    "value": "new_order",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "new_order_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "residue_constants.MAP_HHBLITS_AATYPE_TO_OUR_AATYPE",
                            "Attribute"
                        ],
                        [
                            "residue_constants.MAP_HHBLITS_AATYPE_TO_OUR_AATYPE",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_91": {
                "variable": {
                    "value": "protein[template_aatype]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "new_order",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(new_order_list, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant(new_order_list, dtype=protein['msa'].dtype)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "protein['template_aatype']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ],
                        [
                            "protein",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_99": {
                "variable": {
                    "value": "new_order",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "new_order_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "residue_constants.MAP_HHBLITS_AATYPE_TO_OUR_AATYPE",
                            "Attribute"
                        ],
                        [
                            "residue_constants.MAP_HHBLITS_AATYPE_TO_OUR_AATYPE",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "protein['msa'].dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_100": {
                "variable": {
                    "value": "protein[msa]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "new_order",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(new_order_list, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.constant(new_order_list, dtype=protein['msa'].dtype)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "protein['msa']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_116": {
                "variable": {
                    "value": "protein[aatype]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "protein['aatype']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_and_146": {
                "variable": {
                    "value": "msa_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "msa_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(shape_helpers.shape_list(protein['msa'])) < replace_proportion",
                            "Compare"
                        ],
                        [
                            "tf.logical_and(msa_mask, protein['msa'] != gap_idx)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "protein['msa'] != gap_idx",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_147": {
                "variable": {
                    "value": "protein[msa]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "condition": {
                    "value": "msa_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(shape_helpers.shape_list(protein['msa'])) < replace_proportion",
                            "Compare"
                        ],
                        [
                            "tf.logical_and(msa_mask, protein['msa'] != gap_idx)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.ones_like(protein['msa']) * x_idx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "protein['msa']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_154": {
                "variable": {
                    "value": "protein[aatype]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "condition": {
                    "value": "aatype_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(shape_helpers.shape_list(protein['aatype'])) < replace_proportion",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.ones_like(protein['aatype']) * x_idx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "protein['aatype']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_175": {
                "variable": {
                    "value": "index_order",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[0], shuffled]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_176": {
                "variable": {
                    "value": "num_sel",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "max_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_seq",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "num_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(protein['msa'])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(protein['extra_msa'])[0]",
                            "Subscript"
                        ],
                        [
                            "shape_helpers.shape_list(protein['msa'])[0]",
                            "Subscript"
                        ],
                        [
                            "shape_helpers.shape_list(sample_one_hot)",
                            "Call"
                        ],
                        [
                            "shape_helpers.shape_list(protein['msa'])[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "split_178": {
                "variable": {
                    "value": "(sel_seq, not_sel_seq)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "index_order",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([[0], shuffled], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[num_sel, num_seq - num_sel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "minimum_193": {
                "variable": {
                    "value": "num_sel",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "max_extra_msa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_extra_msa",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "num_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(protein['msa'])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(protein['extra_msa'])[0]",
                            "Subscript"
                        ],
                        [
                            "shape_helpers.shape_list(protein['msa'])[0]",
                            "Subscript"
                        ],
                        [
                            "shape_helpers.shape_list(sample_one_hot)",
                            "Call"
                        ],
                        [
                            "shape_helpers.shape_list(protein['msa'])[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_223": {
                "variable": {
                    "value": "block_num_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(tf.cast(num_seq, tf.float32) * config.msa_fraction_per_block)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_232": {
                "variable": {
                    "value": "del_block_starts",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nb]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "num_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(protein['msa'])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(protein['extra_msa'])[0]",
                            "Subscript"
                        ],
                        [
                            "shape_helpers.shape_list(protein['msa'])[0]",
                            "Subscript"
                        ],
                        [
                            "shape_helpers.shape_list(sample_one_hot)",
                            "Call"
                        ],
                        [
                            "shape_helpers.shape_list(protein['msa'])[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_234": {
                "variable": {
                    "value": "del_blocks",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "del_blocks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "del_block_starts[:, None] + tf.range(block_num_seq)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(del_blocks, 0, num_seq - 1)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "num_seq - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "difference_238": {
                "variable": {
                    "value": "sparse_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.range(1, num_seq)[None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "del_indices[None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_240": {
                "variable": {
                    "value": "keep_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.sparse.to_dense(sparse_diff)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_241": {
                "variable": {
                    "value": "keep_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[0], keep_indices]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_258": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.ones(21), gap_agreement_weight * tf.ones(1), np.zeros(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_274": {
                "variable": {
                    "value": "agreement",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(extra_one_hot, [extra_num_seq, num_res * 23])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.reshape(sample_one_hot * weights, [num_seq, num_res * 23])",
                    "type": "Call",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_280": {
                "variable": {
                    "value": "protein[extra_cluster_assignment]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "agreement",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(extra_one_hot, [extra_num_seq, num_res * 23]), tf.reshape(sample_one_hot * weights, [num_seq, num_res * 23]), transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_313": {
                "variable": {
                    "value": "protein[msa_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape_helpers.shape_list(protein['msa'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_315": {
                "variable": {
                    "value": "protein[msa_row_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape_helpers.shape_list(protein['msa'])[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_322": {
                "variable": {
                    "value": "is_gly",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "aatype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aatype",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "residue_constants.restype_order['G']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_325": {
                "variable": {
                    "value": "pseudo_beta",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.tile(is_gly[..., None], [1] * len(is_gly.shape) + [3])",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "all_atom_positions[..., ca_idx, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "all_atom_positions[..., cb_idx, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_353": {
                "variable": {
                    "value": "protein[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "categorical_360": {
                "variable": {
                    "value": "counts",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.reshape(tf.log(probs + epsilon), [-1, num_classes])",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_373": {
                "variable": {
                    "value": "protein[hhblits_profile]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.one_hot(protein['msa'], 22)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_382": {
                "variable": {
                    "value": "random_aa",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.05] * 20 + [0.0, 0.0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_394": {
                "variable": {
                    "value": "categorical_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "categorical_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.uniform_prob * random_aa + config.profile_prob * protein['hhblits_profile'] + config.same_prob * tf.one_hot(protein['msa'], 22)",
                            "BinOp"
                        ],
                        [
                            "tf.pad(categorical_probs, pad_shapes, constant_values=mask_prob)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "pad_shapes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, 0] for _ in range(len(categorical_probs.shape))]",
                            "ListComp"
                        ]
                    ]
                },
                "constant_values": {
                    "value": "mask_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - config.profile_prob - config.same_prob - config.uniform_prob",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_401": {
                "variable": {
                    "value": "bert_msa",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask_position",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(sh) < replace_fraction",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "bert_msa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shaped_categorical(categorical_probs)",
                            "Call"
                        ],
                        [
                            "tf.where(mask_position, bert_msa, protein['msa'])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "protein['msa']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_404": {
                "variable": {
                    "value": "protein[bert_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "mask_position",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(sh) < replace_fraction",
                            "Compare"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_449": {
                "variable": {
                    "value": "has_break",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.cast(protein['between_segment_residues'], tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_452": {
                "variable": {
                    "value": "aatype_1hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "protein['aatype']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_459": {
                "variable": {
                    "value": "msa_1hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "protein['msa']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_by_value_460": {
                "variable": {
                    "value": "has_deletion",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "protein['deletion_matrix']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "concat_483": {
                "variable": {
                    "value": "protein[msa_feat]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "msa_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[msa_1hot, tf.expand_dims(has_deletion, axis=-1), tf.expand_dims(deletion_value, axis=-1)]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_484": {
                "variable": {
                    "value": "protein[target_feat]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "target_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.expand_dims(has_break, axis=-1), aatype_1hot]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "minimum_511": {
                "variable": {
                    "value": "num_res_crop_size",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "protein['seq_length']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "crop_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_templates_crop_size",
                            "variable"
                        ],
                        [
                            "num_res_crop_size if is_num_res else -1 if dim is None else dim",
                            "IfExp"
                        ],
                        [
                            "crop_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "minimum_525": {
                "variable": {
                    "value": "num_templates_crop_size",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "num_templates - templates_crop_start",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "max_templates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_templates",
                            "Method Argument"
                        ],
                        [
                            "max_templates",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stateless_uniform_528": {
                "variable": {
                    "value": "num_res_crop_start",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "seq_length - num_res_crop_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed_maker()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argsort_532": {
                "variable": {
                    "value": "templates_select_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.random.stateless_uniform([num_templates], seed=seed_maker())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_598": {
                "variable": {
                    "value": "residx_atom14_to_atom37",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "restype_atom14_to_atom37",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(restype_atom14_to_atom37, dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "protein['aatype']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_600": {
                "variable": {
                    "value": "residx_atom14_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "restype_atom14_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(restype_atom14_mask, dtype=np.float32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "protein['aatype']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_607": {
                "variable": {
                    "value": "residx_atom37_to_atom14",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "restype_atom37_to_atom14",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(restype_atom37_to_atom14, dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "protein['aatype']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_620": {
                "variable": {
                    "value": "residx_atom37_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "restype_atom37_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([21, 37], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "protein['aatype']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "uniform_228": {
                "variable": {
                    "value": "nb",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "config.num_blocks + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_298": {
                "indices": {
                    "value": "protein['msa']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_331": {
                "variable": {
                    "value": "pseudo_beta_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "is_gly",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(aatype, residue_constants.restype_order['G'])",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "all_atom_masks[..., ca_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "all_atom_masks[..., cb_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_333": {
                "variable": {
                    "value": "pseudo_beta_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pseudo_beta_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(is_gly, all_atom_masks[..., ca_idx], all_atom_masks[..., cb_idx])",
                            "Call"
                        ],
                        [
                            "tf.cast(pseudo_beta_mask, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_364": {
                "tensor": {
                    "value": "counts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.categorical(tf.reshape(tf.log(probs + epsilon), [-1, num_classes]), 1, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "ds[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_by_value_478": {
                "variable": {
                    "value": "protein[extra_has_deletion]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "t": {
                    "value": "protein['extra_deletion_matrix']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_507": {
                "variable": {
                    "value": "num_templates",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "shape_helpers.shape_list(protein['template_mask'])[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_510": {
                "variable": {
                    "value": "num_templates",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stateless_uniform_519": {
                "variable": {
                    "value": "templates_crop_start",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "num_templates + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed_maker()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_558": {
                "variable": {
                    "value": "protein[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "protein.items()",
                            "Call"
                        ],
                        [
                            "protein.items()",
                            "Call"
                        ],
                        [
                            "protein.items()",
                            "Call"
                        ],
                        [
                            "protein.items()",
                            "Call"
                        ],
                        [
                            "tf.gather(v, templates_select_indices)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "crop_starts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "size": {
                    "value": "crop_sizes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cast_38": {
                "variable": {
                    "value": "protein[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "protein.items()",
                            "Call"
                        ],
                        [
                            "protein.items()",
                            "Call"
                        ],
                        [
                            "protein.items()",
                            "Call"
                        ],
                        [
                            "protein.items()",
                            "Call"
                        ],
                        [
                            "tf.gather(v, templates_select_indices)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensordot_110": {
                "variable": {
                    "value": "protein[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "a": {
                    "value": "protein[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "perm_matrix[:num_dim, :num_dim]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axes": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "uniform_142": {
                "shape": {
                    "value": "shape_helpers.shape_list(protein['msa'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "uniform_151": {
                "shape": {
                    "value": "shape_helpers.shape_list(protein['aatype'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_173": {
                "input": {
                    "value": "protein['msa']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_184": {
                "variable": {
                    "value": "protein[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "protein[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "sel_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(index_order, [num_sel, num_seq - num_sel])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_192": {
                "input": {
                    "value": "protein['extra_msa']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_197": {
                "variable": {
                    "value": "protein[extra_ + k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "protein['extra_' + k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "select_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_shuffle(tf.range(0, num_seq))[:num_sel]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "floor_224": {
                "x": {
                    "value": "tf.cast(num_seq, tf.float32) * config.msa_fraction_per_block",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unique_235": {
                "x": {
                    "value": "tf.sort(tf.reshape(del_blocks, [-1]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_dense_240": {
                "sp_input": {
                    "value": "sparse_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sets.difference(tf.range(1, num_seq)[None], del_indices[None])",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_245": {
                "variable": {
                    "value": "protein[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "protein[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "keep_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.sparse.to_dense(sparse_diff), 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([[0], keep_indices], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_265": {
                "indices": {
                    "value": "protein['msa']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_267": {
                "indices": {
                    "value": "protein['extra_msa']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_275": {
                "tensor": {
                    "value": "extra_one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "protein['extra_msa_mask'][:, :, None] * tf.one_hot(protein['extra_msa'], 23)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[extra_num_seq, num_res * 23]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_276": {
                "tensor": {
                    "value": "sample_one_hot * weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_seq, num_res * 23]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsorted_segment_sum_291": {
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "segment_ids": {
                    "value": "protein['extra_cluster_assignment']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_segments": {
                    "value": "num_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(protein['msa'])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(protein['extra_msa'])[0]",
                            "Subscript"
                        ],
                        [
                            "shape_helpers.shape_list(protein['msa'])[0]",
                            "Subscript"
                        ],
                        [
                            "shape_helpers.shape_list(sample_one_hot)",
                            "Call"
                        ],
                        [
                            "shape_helpers.shape_list(protein['msa'])[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tile_326": {
                "input": {
                    "value": "is_gly[..., None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1] * len(is_gly.shape) + [3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_361": {
                "tensor": {
                    "value": "tf.log(probs + epsilon)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_374": {
                "indices": {
                    "value": "protein['msa']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "22",
                    "type": "int",
                    "possible_values": []
                }
            },
            "uniform_398": {
                "shape": {
                    "value": "sh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_helpers.shape_list(protein['msa'])",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_437": {
                "variable": {
                    "value": "protein[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "protein.items()",
                            "Call"
                        ],
                        [
                            "protein.items()",
                            "Call"
                        ],
                        [
                            "protein.items()",
                            "Call"
                        ],
                        [
                            "protein.items()",
                            "Call"
                        ],
                        [
                            "tf.gather(v, templates_select_indices)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[(0, p - tf.shape(v)[i]) for (i, p) in enumerate(pad_size)]",
                            "ListComp"
                        ]
                    ]
                },
                "name": {
                    "value": "f'pad_to_fixed_{k}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "cast_450": {
                "x": {
                    "value": "protein['between_segment_residues']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_455": {
                "input": {
                    "value": "has_break",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(tf.cast(protein['between_segment_residues'], tf.float32), 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "atan_461": {
                "x": {
                    "value": "protein['deletion_matrix'] / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_465": {
                "input": {
                    "value": "has_deletion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(protein['deletion_matrix'], 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_466": {
                "input": {
                    "value": "deletion_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.atan(protein['deletion_matrix'] / 3.0) * (2.0 / np.pi)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stateless_uniform_532": {
                "shape": {
                    "value": "[num_templates]",
                    "type": "List",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed_maker()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_542": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "protein.items()",
                            "Call"
                        ],
                        [
                            "protein.items()",
                            "Call"
                        ],
                        [
                            "protein.items()",
                            "Call"
                        ],
                        [
                            "protein.items()",
                            "Call"
                        ],
                        [
                            "tf.gather(v, templates_select_indices)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "templates_select_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argsort(tf.random.stateless_uniform([num_templates], seed=seed_maker()))",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_125": {
                "variable": {
                    "value": "protein[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "protein[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_148": {
                "input": {
                    "value": "protein['msa']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_155": {
                "input": {
                    "value": "protein['aatype']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_183": {
                "variable": {
                    "value": "protein[extra_ + k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "protein[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "not_sel_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(index_order, [num_sel, num_seq - num_sel])",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_235": {
                "values": {
                    "value": "tf.reshape(del_blocks, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_259": {
                "shape": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_297": {
                "indices": {
                    "value": "protein['extra_msa']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_361": {
                "x": {
                    "value": "probs + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "one_hot_387": {
                "indices": {
                    "value": "protein['msa']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "22",
                    "type": "int",
                    "possible_values": []
                }
            },
            "atan_471": {
                "x": {
                    "value": "protein['cluster_deletion_mean'] / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_480": {
                "x": {
                    "value": "protein['extra_deletion_matrix'] / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_224": {
                "x": {
                    "value": "num_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(protein['msa'])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(protein['extra_msa'])[0]",
                            "Subscript"
                        ],
                        [
                            "shape_helpers.shape_list(protein['msa'])[0]",
                            "Subscript"
                        ],
                        [
                            "shape_helpers.shape_list(sample_one_hot)",
                            "Call"
                        ],
                        [
                            "shape_helpers.shape_list(protein['msa'])[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_235": {
                "tensor": {
                    "value": "del_blocks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "del_block_starts[:, None] + tf.range(block_num_seq)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(del_blocks, 0, num_seq - 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_260": {
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_474": {
                "input": {
                    "value": "deletion_mean_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.atan(protein['cluster_deletion_mean'] / 3.0) * (2.0 / np.pi)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_435": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "protein.items()",
                            "Call"
                        ],
                        [
                            "protein.items()",
                            "Call"
                        ],
                        [
                            "protein.items()",
                            "Call"
                        ],
                        [
                            "protein.items()",
                            "Call"
                        ],
                        [
                            "tf.gather(v, templates_select_indices)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "apps/protein_folding/helixfold/alphafold_paddle/data/tf_input/input_pipeline.py": {
        "tensorflow": {
            "map_fn_153": {
                "variable": {
                    "value": "tensors",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda x: wrap_ensemble_fn(tensors, x)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "tf.range(num_ensemble)",
                    "type": "Call",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "fn_output_signature": {
                    "value": "fn_output_signature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tree.map_structure(tf.TensorSpec.from_tensor, tensors_0)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_144": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "apps/protein_folding/helixfold/alphafold_paddle/data/tf_input/protein_features.py": {
        "tensorflow": {}
    },
    "apps/protein_folding/helixfold/alphafold_paddle/data/tf_input/protein_features_test.py": {
        "tensorflow": {
            "disable_v2_behavior_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "apps/protein_folding/helixfold/alphafold_paddle/data/tf_input/proteins_dataset.py": {
        "tensorflow": {
            "parse_single_example_46": {
                "variable": {
                    "value": "parsed_features",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "raw_data",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "feature_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{k: tf.io.FixedLenSequenceFeature(shape=(), dtype=v[0], allow_missing=True) for (k, v) in features.items()}",
                            "DictComp"
                        ]
                    ]
                }
            },
            "cast_63": {
                "variable": {
                    "value": "num_residues",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "_first(parsed_features['seq_length'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_66": {
                "variable": {
                    "value": "num_msa",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "_first(parsed_features['num_alignments'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_71": {
                "variable": {
                    "value": "num_templates",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(parsed_features['template_domain_names'])[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_87": {
                "variable": {
                    "value": "new_shape_size",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assert_equal_91": {
                "variable": {
                    "value": "assert_equal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.size(v)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "new_shape_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(1, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "new_shape_size * tf.cast(dim, tf.int32)",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "'assert_%s_shape_correct' % k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "message": {
                    "value": "'The size of feature %s (%s) could not be reshaped into %s' % (k, tf.size(v), new_shape)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "FixedLenSequenceFeature_43": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "v[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "parsed_features.items()",
                            "Call"
                        ]
                    ]
                },
                "allow_missing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_54": {
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "assert_greater_98": {
                "variable": {
                    "value": "assert_non_empty",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.size(v)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "'assert_%s_non_empty' % k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "message": {
                    "value": "'The feature %s is not set in the tf.Example. Either do not request the feature or use a tf.Example that has the feature set.' % k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_160": {
                "value": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parsed_features.items()",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_89": {
                "x": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_shape",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "size_92": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parsed_features.items()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_104": {
                "variable": {
                    "value": "parsed_features[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parsed_features.items()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "protein_features.shape(feature_name=k, num_residues=num_residues, msa_length=num_msa, num_templates=num_templates, features=features)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "'reshape_%s' % k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_107": {
                "variable": {
                    "value": "parsed_features[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parsed_features.items()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "protein_features.shape(feature_name=k, num_residues=num_residues, msa_length=num_msa, num_templates=num_templates, features=features)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "'reshape_%s' % k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_72": {
                "input": {
                    "value": "parsed_features['template_domain_names']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "size_99": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parsed_features.items()",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_103": {
                "control_inputs": {
                    "value": "[assert_non_empty, assert_equal]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_106": {
                "control_inputs": {
                    "value": "[assert_equal]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "size_95": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parsed_features.items()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "apps/protein_folding/helixfold/alphafold_paddle/data/tf_input/shape_helpers.py": {
        "tensorflow": {
            "convert_to_tensor_31": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_38": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_35": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "apps/protein_folding/helixfold/alphafold_paddle/data/tf_input/shape_helpers_test.py": {
        "tensorflow": {
            "zeros_26": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[10, 4, 4, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_27": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, 1, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_30": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([10, 4, 4, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape_dyn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_helpers.shape_list(p)[:2] + [4, 4]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "disable_v2_behavior_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "apps/protein_folding/helixfold/alphafold_paddle/data/tf_input/utils.py": {
        "tensorflow": {
            "uniform_42": {
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "tf.int32.min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "maxval": {
                    "value": "tf.int32.max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed_maker()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "apps/protein_folding/helixfold/alphafold_paddle/model/features.py": {
        "tensorflow": {
            "Graph_66": {
                "variable": {
                    "value": "tf_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_67": {
                "device_name": {
                    "value": "/device:CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_random_seed_68": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Session_77": {
                "graph": {
                    "value": "tf_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "apps/protein_folding/helixfold/alphafold_paddle/model/model.py": {
        "tensorflow": {
            "Graph_187": {
                "variable": {
                    "value": "tf_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_188": {
                "device_name": {
                    "value": "/device:CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_random_seed_189": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Session_198": {
                "graph": {
                    "value": "tf_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "apps/drug_target_interaction/batchdta/pairwise/GraphDTA/models/gat.py": {
        "torch": {
            "Linear_17": {
                "variable": {
                    "value": "self.fc_g1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_20": {
                "variable": {
                    "value": "self.embedding_xt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_features_xt + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_21": {
                "variable": {
                    "value": "self.conv_xt1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.fc_xt1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32 * 121",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_30": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_31": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.gcn1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.gcn2(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "gmp(x, batch)",
                            "Call"
                        ],
                        [
                            "self.fc_g1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "elu_38": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gcn1(x, edge_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_39": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.gcn1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.gcn2(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "gmp(x, batch)",
                            "Call"
                        ],
                        [
                            "self.fc_g1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "xc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, xt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "apps/drug_target_interaction/batchdta/pairwise/GraphDTA/models/gat_gcn.py": {
        "torch": {
            "Linear_19": {
                "variable": {
                    "value": "self.fc_g1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_features_xd * 10 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.fc_g2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1500",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_21": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_22": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_25": {
                "variable": {
                    "value": "self.embedding_xt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_features_xt + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_26": {
                "variable": {
                    "value": "self.conv_xt_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.fc1_xt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32 * 121",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gmp(x, batch), gap(x, batch)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "xc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, xt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "apps/drug_target_interaction/batchdta/pairwise/GraphDTA/models/gcn.py": {
        "torch": {
            "Linear_18": {
                "variable": {
                    "value": "self.fc_g1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_features_xd * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.fc_g2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_20": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_21": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_24": {
                "variable": {
                    "value": "self.embedding_xt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_features_xt + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_25": {
                "variable": {
                    "value": "self.conv_xt_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.fc1_xt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32 * 121",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * output_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "xc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, xt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "apps/drug_target_interaction/batchdta/pairwise/GraphDTA/models/ginconv.py": {
        "torch": {
            "Dropout_16": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_17": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "variable": {
                    "value": "nn1",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(num_features_xd, dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_22": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "nn2",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(dim, dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_26": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "nn3",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(dim, dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_30": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "nn4",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(dim, dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_34": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "nn5",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(dim, dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_38": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.fc1_xd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_43": {
                "variable": {
                    "value": "self.embedding_xt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_features_xt + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_44": {
                "variable": {
                    "value": "self.conv_xt_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_46": {
                "variable": {
                    "value": "self.fc1_xt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.protein_repr_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "output_dim + output_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_62": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x, edge_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_64": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x, edge_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_66": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(x, edge_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_68": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4(x, edge_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_70": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv5(x, edge_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_73": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1_xd(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_74": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.x",
                            "Attribute"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x, edge_index))",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x, edge_index))",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv4(x, edge_index))",
                            "Call"
                        ],
                        [
                            "self.bn4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv5(x, edge_index))",
                            "Call"
                        ],
                        [
                            "self.bn5(x)",
                            "Call"
                        ],
                        [
                            "global_add_pool(x, batch)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1_xd(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "xc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, xt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                }
            },
            "ReLU_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                }
            },
            "ReLU_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_28": {
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                }
            },
            "ReLU_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                }
            },
            "ReLU_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_36": {
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                }
            },
            "ReLU_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "apps/drug_target_interaction/batchdta/pairwise/GraphDTA/run_pairwise_GraphDTA_BindingDB.py": {
        "torch": {
            "cat_184": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tensor.clone() for _ in range(torch.distributed.get_world_size())]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_357": {
                "variable": {
                    "value": "model_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval(args.model_name)()",
                            "Call"
                        ],
                        [
                            "model.to(rank)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[rank]",
                    "type": "List",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_360": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model_dist.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_158": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_fn(output, ture_labels)",
                            "Call"
                        ],
                        [
                            "self.threshold - score_diff",
                            "BinOp"
                        ],
                        [
                            "torch.clip(loss, min=0)",
                            "Call"
                        ],
                        [
                            "torch.square(loss)",
                            "Call"
                        ],
                        [
                            "loss * self.weight",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_159": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_fn(output, ture_labels)",
                            "Call"
                        ],
                        [
                            "self.threshold - score_diff",
                            "BinOp"
                        ],
                        [
                            "torch.clip(loss, min=0)",
                            "Call"
                        ],
                        [
                            "torch.square(loss)",
                            "Call"
                        ],
                        [
                            "loss * self.weight",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DistributedSampler_400": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TrainDataset(train_x1_index=train_x1_index, train_x2_index=train_x2_index, train_d=train_d_data, train_t=train_t_data, y=Y_train_data, onehot_train_mixed=onehot_train_mixed, smile_graph=train_smiles_graph_data)",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "world_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.device_count()",
                            "Call"
                        ],
                        [
                            "world_size",
                            "Method Argument"
                        ]
                    ]
                },
                "rank": {
                    "value": "rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rank",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_count_507": {
                "variable": {
                    "value": "world_size",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_424": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_447": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_direct + 'train_model_best' + str(fold)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_460": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_direct + 'train_model_best' + str(fold)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "apps/drug_target_interaction/batchdta/pairwise/GraphDTA/utils.py": {
        "torch": {
            "transpose_55": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_62": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_131": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_137": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_201": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_258": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "apps/drug_target_interaction/batchdta/pointwise/GraphDTA/models/gat.py": {
        "torch": {
            "ReLU_25": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_26": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.fc_g1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_32": {
                "variable": {
                    "value": "self.embedding_xt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_features_xt + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_33": {
                "variable": {
                    "value": "self.conv_xt1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.fc_xt1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32 * 121",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_47": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.gcn1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.gcn2(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "gmp(x, batch)",
                            "Call"
                        ],
                        [
                            "self.fc_g1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "elu_48": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gcn1(x, edge_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_50": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.gcn1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.gcn2(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "gmp(x, batch)",
                            "Call"
                        ],
                        [
                            "self.fc_g1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_65": {
                "variable": {
                    "value": "xc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, xt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "apps/drug_target_interaction/batchdta/pointwise/GraphDTA/models/gat_gcn.py": {
        "torch": {
            "ReLU_25": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_26": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.fc_g1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_features_xd * 10 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.fc_g2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1500",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_34": {
                "variable": {
                    "value": "self.embedding_xt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_features_xt + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_35": {
                "variable": {
                    "value": "self.conv_xt_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.fc1_xt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32 * 121",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gmp(x, batch), gap(x, batch)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_65": {
                "variable": {
                    "value": "xc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, xt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "apps/drug_target_interaction/batchdta/pointwise/GraphDTA/models/gcn.py": {
        "torch": {
            "ReLU_22": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_23": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.fc_g1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_features_xd * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.fc_g2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_32": {
                "variable": {
                    "value": "self.embedding_xt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_features_xt + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_33": {
                "variable": {
                    "value": "self.conv_xt_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.fc1_xt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32 * 121",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * output_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "xc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, xt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "apps/drug_target_interaction/batchdta/pointwise/GraphDTA/models/ginconv.py": {
        "torch": {
            "Dropout_26": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_27": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "nn1",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(num_features_xd, dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_32": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "nn2",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(dim, dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_35": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "nn3",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(dim, dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_38": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "nn4",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(dim, dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_41": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "nn5",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(dim, dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_44": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.fc1_xd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_47": {
                "variable": {
                    "value": "self.embedding_xt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_features_xt + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_48": {
                "variable": {
                    "value": "self.conv_xt_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.fc1_xt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32 * 121",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_62": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x, edge_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_64": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x, edge_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_66": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(x, edge_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_68": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4(x, edge_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_70": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv5(x, edge_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_73": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1_xd(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_74": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.x",
                            "Attribute"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x, edge_index))",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x, edge_index))",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv4(x, edge_index))",
                            "Call"
                        ],
                        [
                            "self.bn4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv5(x, edge_index))",
                            "Call"
                        ],
                        [
                            "self.bn5(x)",
                            "Call"
                        ],
                        [
                            "global_add_pool(x, batch)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1_xd(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "xc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, xt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                }
            },
            "ReLU_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                }
            },
            "ReLU_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_36": {
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                }
            },
            "ReLU_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                }
            },
            "ReLU_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                }
            },
            "ReLU_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "apps/drug_target_interaction/batchdta/pointwise/GraphDTA/utils.py": {
        "torch": {
            "load_22": {
                "variable": {
                    "value": "(self.data, self.slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_68": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "apps/drug_target_interaction/batchdta/pointwise/GraphDTA/utils_bindingDB.py": {
        "torch": {
            "load_22": {
                "variable": {
                    "value": "(self.data, self.slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_59": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "apps/pretrained_compound/ChemRL/GEM-2/src/dataset.py": {
        "torch": {
            "load_61": {
                "variable": {
                    "value": "split_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.split_dict_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "competition/ogbg_molhiv/main.py": {
        "torch": {}
    }
}