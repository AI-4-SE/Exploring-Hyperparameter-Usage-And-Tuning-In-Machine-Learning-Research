{
    "network/evaluation.py": {
        "sklearn": {
            "precision_recall_curve_357": {
                "variable": {
                    "value": "(precision[class_name], recall[class_name], thresholds[class_name])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "correct_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "probas_pred": {
                    "value": "predicted_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(predicted_scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "average_precision_score_361": {
                "variable": {
                    "value": "average_precision[class_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "correct_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "predicted_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(predicted_scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_recall_curve_76": {
                "variable": {
                    "value": "(precision[class_name], recall[class_name], thresholds[class_name])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "correct_labels == class_index",
                    "type": "Compare",
                    "possible_values": []
                },
                "probas_pred": {
                    "value": "predicted_scores[:, class_index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "average_precision_score_80": {
                "variable": {
                    "value": "average_precision[class_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "correct_labels == class_index",
                    "type": "Compare",
                    "possible_values": []
                },
                "y_score": {
                    "value": "predicted_scores[:, class_index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "precision_score_107": {
                "variable": {
                    "value": "c_wise_prec",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "correct_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.argmax(predicted_scores, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "recall_score_109": {
                "variable": {
                    "value": "c_wise_rec",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "correct_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.argmax(predicted_scores, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "f1_score_111": {
                "variable": {
                    "value": "c_wise_f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "correct_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.argmax(predicted_scores, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "precision_score_154": {
                "variable": {
                    "value": "self.precision[label_ix]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.correct_labels[:, label_ix]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "self.predicted_labels[:, label_ix]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "recall_score_156": {
                "variable": {
                    "value": "self.recall[label_ix]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.correct_labels[:, label_ix]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "self.predicted_labels[:, label_ix]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "f1_score_158": {
                "variable": {
                    "value": "self.f1[label_ix]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.correct_labels[:, label_ix]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "self.predicted_labels[:, label_ix]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "confusion_matrix_160": {
                "variable": {
                    "value": "self.cmat[label_ix]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.correct_labels[:, label_ix]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "self.predicted_labels[:, label_ix]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "confusion_matrix_509": {
                "variable": {
                    "value": "self.cmat[label_ix]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.correct_labels[:, label_ix]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "self.predicted_labels[:, label_ix]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_569": {
                "variable": {
                    "value": "predicted_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "predicted_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(predicted_scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_575": {
                "variable": {
                    "value": "(_, winning_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "predicted_scores_part",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "predicted_scores[:, start:start + self.labelmap.levels[level_id]]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "network/viz_tsne.py": {
        "sklearn": {
            "TSNE_96": {
                "variable": {
                    "value": "X_embedded",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "data/convert_tblog.py": {
        "tensorflow": {
            "summary_iterator_84": {
                "path": {
                    "value": "tf_log",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.listdir(os.path.join(self.path_to_log, exp, 'tensorboard'))[0]",
                            "Subscript"
                        ],
                        [
                            "os.path.join(self.path_to_log, exp, 'tensorboard', tf_log)",
                            "Call"
                        ],
                        [
                            "os.listdir(os.path.join(self.path_to_log, exp, 'tensorboard'))[0]",
                            "Subscript"
                        ],
                        [
                            "os.path.join(self.path_to_log, exp, 'tensorboard', tf_log)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data/db.py": {
        "torch": {
            "DataLoader_4031": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_3789": {
                "ndarray": {
                    "value": "self.labelmap.get_one_hot(sample['family'], sample['subfamily'], sample['genus'], sample['specific_epithet'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_3792": {
                "ndarray": {
                    "value": "self.labelmap.get_level_labels(sample['family'], sample['subfamily'], sample['genus'], sample['specific_epithet'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_3859": {
                "ndarray": {
                    "value": "self.labelmap.get_one_hot(sample['family'], sample['subfamily'], sample['genus'], sample['specific_epithet'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_3861": {
                "ndarray": {
                    "value": "self.labelmap.get_level_labels(sample['family'], sample['subfamily'], sample['genus'], sample['specific_epithet'])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "network/embed_toy.py": {
        "torch": {
            "device_80": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_114": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_70": {
                "seed": {
                    "value": "random_seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_count_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "network/ethec_experiments.py": {
        "torch": {
            "manual_seed_5": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.original_model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.original_model.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_43": {
                "variable": {
                    "value": "self.final_linears",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(2, level, bias=False) for level in self.labelmap.levels]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_48": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_111": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_149": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.path_to_save_model, '{}.pth'.format(epoch_to_load))",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_240": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_333": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECDB(path_to_json='../database/butterfly200/train.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=train_data_transforms)",
                            "Call"
                        ],
                        [
                            "ETHECDBMerged(path_to_json='../database/butterfly200/train.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=train_data_transforms)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json='../database/butterfly200/train.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=train_data_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "n_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.n_workers",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True if arguments.class_weights else False",
                    "type": "IfExp",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None if arguments.class_weights else WeightedResampler(train_set, weight_strategy=arguments.weight_strategy)",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_340": {
                "variable": {
                    "value": "valloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECDB(path_to_json='../database/butterfly200/val.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=val_test_data_transforms)",
                            "Call"
                        ],
                        [
                            "ETHECDBMerged(path_to_json='../database/butterfly200/val.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=val_test_data_transforms)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json='../database/butterfly200/val.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=val_test_data_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "n_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.n_workers",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_344": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECDB(path_to_json='../database/butterfly200/test.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=val_test_data_transforms)",
                            "Call"
                        ],
                        [
                            "ETHECDBMerged(path_to_json='../database/butterfly200/test.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=val_test_data_transforms)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json='../database/butterfly200/test.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=val_test_data_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "n_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.n_workers",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_351": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECDB(path_to_json='../database/butterfly200/train.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=train_data_transforms)",
                            "Call"
                        ],
                        [
                            "ETHECDBMerged(path_to_json='../database/butterfly200/train.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=train_data_transforms)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json='../database/butterfly200/train.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=train_data_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "n_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.n_workers",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True if arguments.class_weights else False",
                    "type": "IfExp",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None if arguments.class_weights else WeightedResampler(train_set, weight_strategy=arguments.weight_strategy)",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_357": {
                "variable": {
                    "value": "valloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECDB(path_to_json='../database/butterfly200/val.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=val_test_data_transforms)",
                            "Call"
                        ],
                        [
                            "ETHECDBMerged(path_to_json='../database/butterfly200/val.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=val_test_data_transforms)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json='../database/butterfly200/val.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=val_test_data_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "n_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.n_workers",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_360": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECDB(path_to_json='../database/butterfly200/test.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=val_test_data_transforms)",
                            "Call"
                        ],
                        [
                            "ETHECDBMerged(path_to_json='../database/butterfly200/test.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=val_test_data_transforms)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json='../database/butterfly200/test.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=val_test_data_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "n_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.n_workers",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_368": {
                "variable": {
                    "value": "n_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "labelmap.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_102": {
                "*size": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "*size": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_229": {
                "variable": {
                    "value": "self.model.features[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "o_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.features[0].out_channels",
                            "Attribute"
                        ],
                        [
                            "self.model.conv1.out_channels",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.features[0].kernel_size",
                            "Attribute"
                        ],
                        [
                            "self.model.conv1.kernel_size",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.features[0].stride",
                            "Attribute"
                        ],
                        [
                            "self.model.conv1.stride",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.features[0].padding",
                            "Attribute"
                        ],
                        [
                            "self.model.conv1.padding",
                            "Attribute"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dil",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.features[0].dilation",
                            "Attribute"
                        ],
                        [
                            "self.model.conv1.dilation",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sum_370": {
                "input": {
                    "value": "data_item['labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "level",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_237": {
                "variable": {
                    "value": "self.model.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "o_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.features[0].out_channels",
                            "Attribute"
                        ],
                        [
                            "self.model.conv1.out_channels",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.features[0].kernel_size",
                            "Attribute"
                        ],
                        [
                            "self.model.conv1.kernel_size",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.features[0].stride",
                            "Attribute"
                        ],
                        [
                            "self.model.conv1.stride",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.features[0].padding",
                            "Attribute"
                        ],
                        [
                            "self.model.conv1.padding",
                            "Attribute"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dil",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.features[0].dilation",
                            "Attribute"
                        ],
                        [
                            "self.model.conv1.dilation",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sum_107": {
                "input": {
                    "value": "data_item['labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "network/experiment.py": {
        "torch": {
            "device_36": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "MultiStepLR_157": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "milestones": {
                    "value": "self.lr_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_203": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.path_to_save_model, '{}.pth'.format(epoch_to_load))",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_193": {
                "obj": {
                    "value": "{'epoch': self.epoch, 'model_state_dict': self.model.state_dict(), 'optimizer_state_dict': self.optimizer.state_dict(), 'loss': loss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.path_to_save_model, '{}.pth'.format(filename if filename else self.epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_count_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_118": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_128": {
                "input": {
                    "value": "preds == labels.data",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "is_available_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_114": {
                "mode": {
                    "value": "phase == 'train'",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "network/fashion_mnist.py": {
        "torch": {
            "DataParallel_58": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_90": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.utils.data.Subset(trainset, list(range(100)))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "n_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.n_workers",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_93": {
                "variable": {
                    "value": "valloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.utils.data.Subset(trainset, list(range(100, 200)))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "n_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.n_workers",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_97": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.utils.data.Subset(trainset, list(range(200, 300)))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "n_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.n_workers",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_113": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.utils.data.Subset(trainset, train_indices_from_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "n_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.n_workers",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Subset_117": {
                "variable": {
                    "value": "evalset_from_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FMNISTHierarchical(root='../database', labelmap=labelmap, train=False, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "FMNISTHierarchical(root='../database', labelmap=labelmap, train=True, download=True, transform=data_transforms)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "val_indices_from_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "val_indices_from_train + indices['train'][label_ix][-1000:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Subset_118": {
                "variable": {
                    "value": "evalset_from_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FMNISTHierarchical(root='../database', labelmap=labelmap, train=False, download=True, transform=data_transforms)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "val_indices_from_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "DataLoader_119": {
                "variable": {
                    "value": "valloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.utils.data.ConcatDataset([evalset_from_train, evalset_from_test])",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "n_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.n_workers",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_123": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.utils.data.Subset(testset, test_indices_from_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "n_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.n_workers",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_131": {
                "variable": {
                    "value": "n_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "labelmap.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "variable": {
                    "value": "self.model.features[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "o_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.features[0].out_channels",
                            "Attribute"
                        ],
                        [
                            "self.model.conv1.out_channels",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.features[0].kernel_size",
                            "Attribute"
                        ],
                        [
                            "self.model.conv1.kernel_size",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.features[0].stride",
                            "Attribute"
                        ],
                        [
                            "self.model.conv1.stride",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.features[0].padding",
                            "Attribute"
                        ],
                        [
                            "self.model.conv1.padding",
                            "Attribute"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dil",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.features[0].dilation",
                            "Attribute"
                        ],
                        [
                            "self.model.conv1.dilation",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.model.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "o_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.features[0].out_channels",
                            "Attribute"
                        ],
                        [
                            "self.model.conv1.out_channels",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.features[0].kernel_size",
                            "Attribute"
                        ],
                        [
                            "self.model.conv1.kernel_size",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.features[0].stride",
                            "Attribute"
                        ],
                        [
                            "self.model.conv1.stride",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.features[0].padding",
                            "Attribute"
                        ],
                        [
                            "self.model.conv1.padding",
                            "Attribute"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dil",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.features[0].dilation",
                            "Attribute"
                        ],
                        [
                            "self.model.conv1.dilation",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Subset_90": {
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FMNISTHierarchical(root='../database', labelmap=labelmap, train=False, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "FMNISTHierarchical(root='../database', labelmap=labelmap, train=True, download=True, transform=data_transforms)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "list(range(100))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_93": {
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FMNISTHierarchical(root='../database', labelmap=labelmap, train=False, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "FMNISTHierarchical(root='../database', labelmap=labelmap, train=True, download=True, transform=data_transforms)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "list(range(100, 200))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_97": {
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FMNISTHierarchical(root='../database', labelmap=labelmap, train=False, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "FMNISTHierarchical(root='../database', labelmap=labelmap, train=True, download=True, transform=data_transforms)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "list(range(200, 300))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_113": {
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FMNISTHierarchical(root='../database', labelmap=labelmap, train=False, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "FMNISTHierarchical(root='../database', labelmap=labelmap, train=True, download=True, transform=data_transforms)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "train_indices_from_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "train_indices_from_train + indices['train'][label_ix][:5000]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ConcatDataset_119": {
                "datasets": {
                    "value": "[evalset_from_train, evalset_from_test]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Subset_123": {
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FMNISTHierarchical(root='../database', labelmap=labelmap, train=False, download=True, transform=data_transforms)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "test_indices_from_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "test_indices_from_test + indices['val'][label_ix]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_133": {
                "input": {
                    "value": "data_item['labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_232": {
                "ndarray": {
                    "value": "multi_class_target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.labelmap.labels_one_hot(target)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_233": {
                "ndarray": {
                    "value": "self.labelmap.get_level_labels(target)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "network/finetuner.py": {
        "torch": {
            "DataLoader_808": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.utils.data.Subset(trainset, train_indices_from_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.batch_size",
                            "Attribute"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Subset_812": {
                "variable": {
                    "value": "evalset_from_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Cifar100Hierarchical(root='../database', labelmap=labelmap, train=False, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar10Hierarchical(root='../database', labelmap=labelmap, train=False, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar100Hierarchical(root='../database', labelmap=labelmap, train=True, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar10Hierarchical(root='../database', labelmap=labelmap, train=True, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar10Hierarchical(root='../database', labelmap=lmap, train=True, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='../database', train=False, download=True, transform=data_transforms)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "val_indices_from_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "val_indices_from_train + indices['train'][label_ix][-200:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Subset_813": {
                "variable": {
                    "value": "evalset_from_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Cifar100Hierarchical(root='../database', labelmap=labelmap, train=False, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar10Hierarchical(root='../database', labelmap=labelmap, train=False, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar10Hierarchical(root='../database', labelmap=lmap, train=False, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='../database', train=False, download=True, transform=data_transforms)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "val_indices_from_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "val_indices_from_test + indices['val'][label_ix][:400]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_814": {
                "variable": {
                    "value": "evalloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.utils.data.ConcatDataset([evalset_from_train, evalset_from_test])",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.batch_size",
                            "Attribute"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_818": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.utils.data.Subset(testset, test_indices_from_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.batch_size",
                            "Attribute"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_837": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.utils.data.Subset(trainset, list(range(1000)))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.batch_size",
                            "Attribute"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_842": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.utils.data.Subset(testset, list(range(1000, 2000)))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.batch_size",
                            "Attribute"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.model.classifier[6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "self.model.module.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "self.model.module.module.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "self.model.module.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.model.module.module.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_669": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.utils.data.Subset(trainset, list(range(100)))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.batch_size",
                            "Attribute"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "n_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.n_workers",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_673": {
                "variable": {
                    "value": "valloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.utils.data.Subset(trainset, list(range(100, 200)))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.batch_size",
                            "Attribute"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "n_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.n_workers",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_677": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.utils.data.Subset(trainset, list(range(200, 300)))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.batch_size",
                            "Attribute"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "n_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.n_workers",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_698": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.utils.data.Subset(trainset, train_indices_from_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.batch_size",
                            "Attribute"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "n_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.n_workers",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Subset_702": {
                "variable": {
                    "value": "evalset_from_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Cifar100Hierarchical(root='../database', labelmap=labelmap, train=False, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar10Hierarchical(root='../database', labelmap=labelmap, train=False, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar100Hierarchical(root='../database', labelmap=labelmap, train=True, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar10Hierarchical(root='../database', labelmap=labelmap, train=True, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar10Hierarchical(root='../database', labelmap=lmap, train=True, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='../database', train=False, download=True, transform=data_transforms)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "val_indices_from_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "val_indices_from_train + indices['train'][label_ix][-200:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Subset_703": {
                "variable": {
                    "value": "evalset_from_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Cifar100Hierarchical(root='../database', labelmap=labelmap, train=False, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar10Hierarchical(root='../database', labelmap=labelmap, train=False, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar10Hierarchical(root='../database', labelmap=lmap, train=False, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='../database', train=False, download=True, transform=data_transforms)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "val_indices_from_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "val_indices_from_test + indices['val'][label_ix][:400]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_704": {
                "variable": {
                    "value": "valloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.utils.data.ConcatDataset([evalset_from_train, evalset_from_test])",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.batch_size",
                            "Attribute"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "n_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.n_workers",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_708": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.utils.data.Subset(testset, test_indices_from_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.batch_size",
                            "Attribute"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "n_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.n_workers",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_716": {
                "variable": {
                    "value": "n_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "labelmap.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConcatDataset_806": {
                "datasets": {
                    "value": "datasets",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_37": {
                "dataset": {
                    "value": "image_datasets[x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.batch_size",
                            "Attribute"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_340": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params_to_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "max_371": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model(inputs)",
                            "Call"
                        ],
                        [
                            "self.model(inputs)",
                            "Call"
                        ],
                        [
                            "self.model(inputs)",
                            "Call"
                        ],
                        [
                            "self.model(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "Subset_808": {
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Cifar100Hierarchical(root='../database', labelmap=labelmap, train=False, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar10Hierarchical(root='../database', labelmap=labelmap, train=False, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar100Hierarchical(root='../database', labelmap=labelmap, train=True, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar10Hierarchical(root='../database', labelmap=labelmap, train=True, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar10Hierarchical(root='../database', labelmap=lmap, train=True, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='../database', train=False, download=True, transform=data_transforms)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "train_indices_from_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "train_indices_from_train + indices['train'][label_ix][:4800]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ConcatDataset_814": {
                "datasets": {
                    "value": "[evalset_from_train, evalset_from_test]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Subset_818": {
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Cifar100Hierarchical(root='../database', labelmap=labelmap, train=False, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar10Hierarchical(root='../database', labelmap=labelmap, train=False, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar10Hierarchical(root='../database', labelmap=lmap, train=False, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='../database', train=False, download=True, transform=data_transforms)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "test_indices_from_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "test_indices_from_test + indices['val'][label_ix][-600:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Subset_837": {
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Cifar100Hierarchical(root='../database', labelmap=labelmap, train=False, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar10Hierarchical(root='../database', labelmap=labelmap, train=False, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar100Hierarchical(root='../database', labelmap=labelmap, train=True, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar10Hierarchical(root='../database', labelmap=labelmap, train=True, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar10Hierarchical(root='../database', labelmap=lmap, train=True, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='../database', train=False, download=True, transform=data_transforms)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "list(range(1000))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_842": {
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Cifar100Hierarchical(root='../database', labelmap=labelmap, train=False, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar10Hierarchical(root='../database', labelmap=labelmap, train=False, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar10Hierarchical(root='../database', labelmap=lmap, train=False, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='../database', train=False, download=True, transform=data_transforms)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "list(range(1000, 2000))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_86": {
                "params": {
                    "value": "self.params_to_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_176": {
                "*size": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_177": {
                "*size": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_240": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model(inputs)",
                            "Call"
                        ],
                        [
                            "self.model(inputs)",
                            "Call"
                        ],
                        [
                            "self.model(inputs)",
                            "Call"
                        ],
                        [
                            "self.model(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_342": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params_to_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_355": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_609": {
                "ndarray": {
                    "value": "multi_class_target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.labelmap.labels_one_hot(target)",
                            "Call"
                        ],
                        [
                            "self.labelmap.labels_one_hot(target)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_610": {
                "ndarray": {
                    "value": "self.labelmap.get_level_labels(target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_629": {
                "ndarray": {
                    "value": "multi_class_target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.labelmap.labels_one_hot(target)",
                            "Call"
                        ],
                        [
                            "self.labelmap.labels_one_hot(target)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_630": {
                "ndarray": {
                    "value": "self.labelmap.get_level_labels(target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_669": {
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Cifar100Hierarchical(root='../database', labelmap=labelmap, train=False, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar10Hierarchical(root='../database', labelmap=labelmap, train=False, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar100Hierarchical(root='../database', labelmap=labelmap, train=True, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar10Hierarchical(root='../database', labelmap=labelmap, train=True, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar10Hierarchical(root='../database', labelmap=lmap, train=True, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='../database', train=False, download=True, transform=data_transforms)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "list(range(100))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_673": {
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Cifar100Hierarchical(root='../database', labelmap=labelmap, train=False, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar10Hierarchical(root='../database', labelmap=labelmap, train=False, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar100Hierarchical(root='../database', labelmap=labelmap, train=True, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar10Hierarchical(root='../database', labelmap=labelmap, train=True, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar10Hierarchical(root='../database', labelmap=lmap, train=True, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='../database', train=False, download=True, transform=data_transforms)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "list(range(100, 200))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_677": {
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Cifar100Hierarchical(root='../database', labelmap=labelmap, train=False, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar10Hierarchical(root='../database', labelmap=labelmap, train=False, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar100Hierarchical(root='../database', labelmap=labelmap, train=True, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar10Hierarchical(root='../database', labelmap=labelmap, train=True, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar10Hierarchical(root='../database', labelmap=lmap, train=True, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='../database', train=False, download=True, transform=data_transforms)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "list(range(200, 300))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_698": {
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Cifar100Hierarchical(root='../database', labelmap=labelmap, train=False, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar10Hierarchical(root='../database', labelmap=labelmap, train=False, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar100Hierarchical(root='../database', labelmap=labelmap, train=True, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar10Hierarchical(root='../database', labelmap=labelmap, train=True, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar10Hierarchical(root='../database', labelmap=lmap, train=True, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='../database', train=False, download=True, transform=data_transforms)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "train_indices_from_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "train_indices_from_train + indices['train'][label_ix][:4800]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ConcatDataset_704": {
                "datasets": {
                    "value": "[evalset_from_train, evalset_from_test]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Subset_708": {
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Cifar100Hierarchical(root='../database', labelmap=labelmap, train=False, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar10Hierarchical(root='../database', labelmap=labelmap, train=False, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "Cifar10Hierarchical(root='../database', labelmap=lmap, train=False, download=True, transform=data_transforms)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='../database', train=False, download=True, transform=data_transforms)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "test_indices_from_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "test_indices_from_test + indices['val'][label_ix][-600:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_718": {
                "input": {
                    "value": "data_item['labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_849": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_145": {
                "variable": {
                    "value": "self.model.module.classifier[6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "self.model.module.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "self.model.module.module.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "self.model.module.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.model.module.module.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.levels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_162": {
                "variable": {
                    "value": "self.model.module.module.classifier[6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "self.model.module.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "self.model.module.module.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "self.model.module.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.model.module.module.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.levels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "set_grad_enabled_224": {
                "mode": {
                    "value": "phase == 'train'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "SGD_326": {
                "params": {
                    "value": "self.params_to_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_333": {
                "params": {
                    "value": "self.params_to_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_149": {
                "variable": {
                    "value": "self.model.module.classifier[6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "self.model.module.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "self.model.module.module.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "self.model.module.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.model.module.module.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_153": {
                "variable": {
                    "value": "self.model.module.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "self.model.module.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "self.model.module.module.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "self.model.module.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.model.module.module.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.levels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_166": {
                "variable": {
                    "value": "self.model.module.module.classifier[6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "self.model.module.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "self.model.module.module.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "self.model.module.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.model.module.module.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_170": {
                "variable": {
                    "value": "self.model.module.module.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "self.model.module.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "self.model.module.module.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "self.model.module.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.model.module.module.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.levels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Adam_328": {
                "params": {
                    "value": "self.params_to_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_335": {
                "params": {
                    "value": "self.params_to_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_880": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_157": {
                "variable": {
                    "value": "self.model.module.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "self.model.module.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "self.model.module.module.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "self.model.module.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.model.module.module.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_174": {
                "variable": {
                    "value": "self.model.module.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "self.model.module.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "self.model.module.module.classifier[6].in_features",
                            "Attribute"
                        ],
                        [
                            "self.model.module.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.model.module.module.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_181": {
                "input": {
                    "value": "data_item['labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "network/inference.py": {
        "torch": {
            "DataLoader_133": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.utils.data.Subset(test_set, list(range(0, 1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "n_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments['n_workers']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "device_188": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_225": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.utils.data.Subset(chosen_set, sample_ix)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_283": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.utils.data.Subset(self.test_set, [sample_ix])",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.n_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Subset_133": {
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECDB(path_to_json='../database/ETHEC/test.json', path_to_images=arguments['image_dir'], labelmap=labelmap, transform=val_test_data_transforms)",
                            "Call"
                        ],
                        [
                            "ETHECDBMerged(path_to_json='../database/ETHEC/test.json', path_to_images=arguments['image_dir'], labelmap=labelmap, transform=val_test_data_transforms)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json='../database/ETHEC/test.json', path_to_images=arguments['image_dir'], labelmap=labelmap, transform=val_test_data_transforms)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "list(range(0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Subset_225": {
                "dataset": {
                    "value": "chosen_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, '{}_set'.format(set_name))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "sample_ix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(range(len(chosen_set)))",
                            "Call"
                        ],
                        [
                            "self.viz_these_samples_ix",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Subset_283": {
                "dataset": {
                    "value": "self.test_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "[sample_ix]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_325": {
                "variable": {
                    "value": "item[image]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((to_tensor_tform(i) for i in images))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_326": {
                "variable": {
                    "value": "item[level_labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((item['level_labels'][0] for i in range(images.shape[0])))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_327": {
                "variable": {
                    "value": "item[labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((item['labels'][0] for i in range(images.shape[0])))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_329": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "softmax_333": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits[:, self.labelmap.level_start[level_id]:self.labelmap.level_stop[level_id]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_329": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "network/loss.py": {
        "torch": {
            "zeros_260": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, lmap.n_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MultiLabelSoftMarginLoss_271": {
                "variable": {
                    "value": "criterion_multi_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_308": {
                "variable": {
                    "value": "penult_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 2, 1, 2.0], [1, 10, -7, 10], [1, 9, 1, -2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_10": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_46": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Softmax_48": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "variable": {
                    "value": "outputs_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(outputs.shape[0], self.labelmap.n_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "device_106": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_172": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_184": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ModuleDict_207": {
                "variable": {
                    "value": "self.module_dict",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.module_dict",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_217": {
                "variable": {
                    "value": "all_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], self.labelmap.n_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "NLLLoss_247": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_302": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_38": {
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "loss + self.level_weights[level_id] * self.criterion[level_id](outputs[sample_id, self.level_start[level_id]:self.level_stop[level_id]].unsqueeze(0), torch.tensor([level_labels[sample_id, level_id]]).to(self.device))",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_256": {
                "*size": {
                    "value": "(1, lmap.n_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_256": {
                "data": {
                    "value": "[[0, 7 - lmap.levels[0], 90 - (lmap.levels[0] + lmap.levels[1]), 400 - (lmap.levels[0] + lmap.levels[1] + lmap.levels[2])]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_85": {
                "variable": {
                    "value": "outputs_new[:, self.level_start[level_index] + torch.tensor(parent_ix)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_new[:, self.level_start[level_index + 1] + torch.tensor(child_of[parent_ix])]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_98": {
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "loss + self.level_weights[level_id] * self.criterion[level_id](outputs[sample_id, self.level_start[level_id]:self.level_stop[level_id]].unsqueeze(0), torch.tensor([level_labels[sample_id, level_id]]).to(self.device))",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "ones_like_124": {
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_166": {
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "loss + self.level_weights[level_id] * self.criterion[level_id](outputs[sample_id, self.level_start[level_id]:self.level_stop[level_id]].unsqueeze(0), torch.tensor([level_labels[sample_id, level_id]]).to(self.device))",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "Linear_199": {
                "variable": {
                    "value": "self.module_dict[level_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.labelmap.levels[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_softmax_224": {
                "variable": {
                    "value": "all_log_probs[:, self.level_start[0]:self.level_stop[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.module_dict[level_name](x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_261": {
                "data": {
                    "value": "[0, 7, 90, 400]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NLLLoss_63": {
                "weight": {
                    "value": "weight[self.level_start[level_id]:self.level_stop[level_id]].to(self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_119": {
                "weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_147": {
                "variable": {
                    "value": "predicted_class",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[sample_id, possible_children_dict[k]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_153": {
                "variable": {
                    "value": "predicted_class",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[sample_id, children_of_prev_level_pred_absolute]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_205": {
                "variable": {
                    "value": "self.module_dict[{}_{}.format(level_name, parent_id)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(child_of_l_1[parent_id])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_234": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.module_dict['{}_{}'.format(level_name, parent_id)](x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_14": {
                "weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_24": {
                "weight": {
                    "value": "weight[level_start[level_id]:level_stop[level_id]].to(self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "NLLLoss_61": {
                "weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_92": {
                "input": {
                    "value": "outputs_new[:, 0:level]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_96": {
                "input": {
                    "value": "outputs_new[:, start:start + level]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_84": {
                "data": {
                    "value": "parent_ix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "child_of",
                            "Name"
                        ]
                    ]
                }
            },
            "tensor_140": {
                "data": {
                    "value": "[new_level_labels[level_id]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_142": {
                "data": {
                    "value": "[level_labels[sample_id, level_id]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "data": {
                    "value": "child_of[parent_ix]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_236": {
                "data": {
                    "value": "child_of_l_1[parent_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "network/oe.py": {
        "torch": {
            "DataLoader_330": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECDBMerged(path_to_json='../database/ETHEC/train.json', path_to_images=image_dir, labelmap=labelmap, transform=train_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json='../database/ETHEC/train.json', path_to_images=image_dir, labelmap=labelmap, transform=train_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECHierarchyWithImages(self.graph_dict['G_train_tc'], imageless_dataloaders=self.imageless_dataloaders['train'] if self.use_CNN else None, transform=train_data_transforms, labelmap=self.labelmap, half_half=self.half_half)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "DataLoader_335": {
                "variable": {
                    "value": "valloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECDBMerged(path_to_json='../database/ETHEC/val.json', path_to_images=image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json='../database/ETHEC/val.json', path_to_images=image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECHierarchyWithImages(self.graph_dict['G_val'], imageless_dataloaders=self.imageless_dataloaders['val'] if self.use_CNN else None, transform=val_test_data_transforms, labelmap=self.labelmap, half_half=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_338": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECDBMerged(path_to_json='../database/ETHEC/test.json', path_to_images=image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json='../database/ETHEC/test.json', path_to_images=image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECHierarchyWithImages(self.graph_dict['G_test'], imageless_dataloaders=self.imageless_dataloaders['test'] if self.use_CNN else None, transform=val_test_data_transforms, labelmap=self.labelmap, half_half=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_57": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "normalize_78": {
                "variable": {
                    "value": "direction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_79": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_97": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_102": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "normalize_136": {
                "variable": {
                    "value": "direction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_137": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_151": {
                "variable": {
                    "value": "self.u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(input_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_152": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(output_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_153": {
                "variable": {
                    "value": "self.d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(output_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ZeroPad2d_154": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0, 0, input_dim - output_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "device_159": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "matmul_166": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.pad(torch.diag(self.d)) + torch.ger(self.u, self.v)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "normalize_189": {
                "variable": {
                    "value": "direction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_190": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_210": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_213": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_214": {
                "variable": {
                    "value": "self.model.module.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.model.module.fc.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "normalize_238": {
                "variable": {
                    "value": "direction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_239": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_259": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Linear_262": {
                "variable": {
                    "value": "self.model.module.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "normalize_287": {
                "variable": {
                    "value": "direction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_288": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_367": {
                "variable": {
                    "value": "correct_positives",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.e_for_u_v_positive <= threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_368": {
                "variable": {
                    "value": "correct_negatives",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.e_for_u_v_negative > threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "device_657": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "norm_727": {
                "variable": {
                    "value": "x_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_974": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_1273": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_1336": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_1384": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECDBMerged(path_to_json='../database/ETHEC/train.json', path_to_images=image_dir, labelmap=labelmap, transform=train_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json='../database/ETHEC/train.json', path_to_images=image_dir, labelmap=labelmap, transform=train_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECHierarchyWithImages(self.graph_dict['G_train_tc'], imageless_dataloaders=self.imageless_dataloaders['train'] if self.use_CNN else None, transform=train_data_transforms, labelmap=self.labelmap, half_half=self.half_half)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.n_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_1388": {
                "variable": {
                    "value": "valloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECDBMerged(path_to_json='../database/ETHEC/val.json', path_to_images=image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json='../database/ETHEC/val.json', path_to_images=image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECHierarchyWithImages(self.graph_dict['G_val'], imageless_dataloaders=self.imageless_dataloaders['val'] if self.use_CNN else None, transform=val_test_data_transforms, labelmap=self.labelmap, half_half=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.n_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_1392": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECDBMerged(path_to_json='../database/ETHEC/test.json', path_to_images=image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json='../database/ETHEC/test.json', path_to_images=image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECHierarchyWithImages(self.graph_dict['G_test'], imageless_dataloaders=self.imageless_dataloaders['test'] if self.use_CNN else None, transform=val_test_data_transforms, labelmap=self.labelmap, half_half=False)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.n_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MultiStepLR_1412": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "milestones": {
                    "value": "self.lr_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_1657": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path_to_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_1694": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.path_to_save_model, '{}_model.pth'.format(epoch_to_load))",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_1705": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.path_to_save_model, '{}_img_feat_net.pth'.format(epoch_to_load))",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1743": {
                "variable": {
                    "value": "img_rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(images_in_graph), self.embedding_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "median_1752": {
                "variable": {
                    "value": "calculated_metrics[median_img_norm]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.norm(img_rep, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_1756": {
                "variable": {
                    "value": "label_rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(labels_in_graph), self.embedding_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "median_1761": {
                "variable": {
                    "value": "calculated_metrics[median_label_norm]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.norm(label_rep, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_1971": {
                "variable": {
                    "value": "label_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(self.nodes_in_G), self.embedding_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_1978": {
                "variable": {
                    "value": "positive_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self.edges_in_G)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_1981": {
                "variable": {
                    "value": "negative_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.check_graph_embedding_neg_graph.size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_60": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.labelmap.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Embedding_62": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.labelmap.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_118": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_171": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_354": {
                "data": {
                    "value": "status_data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_398": {
                "variable": {
                    "value": "correct_positives",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.e_for_u_v_positive <= self.threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_399": {
                "variable": {
                    "value": "correct_negatives",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.e_for_u_v_negative > self.threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "clamp_739": {
                "input": {
                    "value": "theta_between_x_y - psi_x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_751": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(weights).to(self.device)",
                            "Call"
                        ],
                        [
                            "[1.0] * len(inputs_from)",
                            "BinOp"
                        ],
                        [
                            "sorted([filename.split('_')[0] for filename in os.listdir(self.path_to_save_model)])",
                            "Call"
                        ],
                        [
                            "weights[:-2]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_823": {
                "variable": {
                    "value": "e_for_u_v_positive_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_for_u_v_positive_all, e_for_u_v_positive)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_829": {
                "variable": {
                    "value": "e_for_u_v_negative_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_for_u_v_negative_all, e_for_u_v_negative)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_1037": {
                "input": {
                    "value": "torch.clamp(x - y, min=0.0) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1087": {
                "variable": {
                    "value": "e_for_u_v_positive_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_for_u_v_positive_all, e_for_u_v_positive)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_1093": {
                "variable": {
                    "value": "e_for_u_v_negative_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_for_u_v_negative_all, e_for_u_v_negative)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "manual_seed_1244": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_1341": {
                "variable": {
                    "value": "self.img_feat_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.img_feat_net",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_1629": {
                "obj": {
                    "value": "{'epoch': self.epoch, 'model_state_dict': self.model.state_dict(), 'optimizer_state_dict': self.optimizer.state_dict(), 'loss': loss, 'optimal_threshold': self.optimal_threshold, 'reconstruction_scores': {'f1': self.reconstruction_f1, 'precision': self.reconstruction_prec, 'recall': self.reconstruction_recall, 'accuracy': self.reconstruction_accuracy, 'threshold': self.reconstruction_threshold}}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.path_to_save_model, '{}_model.pth'.format(filename if filename else self.epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_1642": {
                "obj": {
                    "value": "{'epoch': self.epoch, 'model_state_dict': self.img_feat_net.state_dict(), 'optimizer_state_dict': self.optimizer.state_dict(), 'loss': loss, 'optimal_threshold': self.optimal_threshold, 'reconstruction_scores': {'f1': self.reconstruction_f1, 'precision': self.reconstruction_prec, 'recall': self.reconstruction_recall, 'accuracy': self.reconstruction_accuracy, 'threshold': self.reconstruction_threshold}}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.path_to_save_model, '{}_img_feat_net.pth'.format(filename if filename else self.epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_68": {
                "input": {
                    "value": "embeds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embeddings(inputs)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_123": {
                "variable": {
                    "value": "norm_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_124": {
                "variable": {
                    "value": "x[norm_x > 1.0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x[norm_x > 1.0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_151": {
                "*size": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_152": {
                "*size": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_153": {
                "*size": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ger_165": {
                "input": {
                    "value": "self.u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "vec2": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_176": {
                "variable": {
                    "value": "norm_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_177": {
                "variable": {
                    "value": "x[norm_x > 1.0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x[norm_x > 1.0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_704": {
                "variable": {
                    "value": "retval",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(retval, img_feat.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_735": {
                "input": {
                    "value": "F.normalize(x, dim=1) * F.normalize(y - x, dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_737": {
                "input": {
                    "value": "1 - self.K * self.K / x_norm ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_745": {
                "input": {
                    "value": "self.alpha - self.E_operator(x, y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_812": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_831": {
                "input": {
                    "value": "self.get_image_label_loss(e_for_u_v_positive, e_for_u_v_negative)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_871": {
                "input": {
                    "value": "self.get_image_label_loss(torch.squeeze(e_for_u_v_positive_all), torch.squeeze(e_for_u_v_negative_all), weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_892": {
                "variable": {
                    "value": "from_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(from_elem), image_emb.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_895": {
                "variable": {
                    "value": "from_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(from_elem), non_image_emb.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_916": {
                "variable": {
                    "value": "to_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(to_elem), image_emb.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_919": {
                "variable": {
                    "value": "to_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(to_elem), non_image_emb.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_936": {
                "variable": {
                    "value": "from_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(from_elem), image_emb.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_939": {
                "variable": {
                    "value": "from_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(from_elem), non_image_emb.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_954": {
                "variable": {
                    "value": "to_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(to_elem), image_emb.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_957": {
                "variable": {
                    "value": "to_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(to_elem), non_image_emb.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_1013": {
                "variable": {
                    "value": "retval",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(retval, img_feat.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_1043": {
                "input": {
                    "value": "self.alpha - self.E_operator(x, y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_1046": {
                "input": {
                    "value": "torch.clamp(self.alpha - e_for_u_v_negative, min=0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_1076": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_1095": {
                "input": {
                    "value": "self.get_image_label_loss(e_for_u_v_positive, e_for_u_v_negative)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_1129": {
                "input": {
                    "value": "self.get_image_label_loss(torch.squeeze(e_for_u_v_positive_all), torch.squeeze(e_for_u_v_negative_all))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_1149": {
                "variable": {
                    "value": "from_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(from_elem), image_emb.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_1152": {
                "variable": {
                    "value": "from_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(from_elem), non_image_emb.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_1173": {
                "variable": {
                    "value": "to_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(to_elem), image_emb.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_1176": {
                "variable": {
                    "value": "to_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(to_elem), non_image_emb.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_1193": {
                "variable": {
                    "value": "from_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(from_elem), image_emb.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_1196": {
                "variable": {
                    "value": "from_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(from_elem), non_image_emb.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_1211": {
                "variable": {
                    "value": "to_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(to_elem), image_emb.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_1214": {
                "variable": {
                    "value": "to_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(to_elem), non_image_emb.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "device_count_1275": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_1433": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.train_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.n_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_1452": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.train_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.n_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_1687": {
                "ndarray": {
                    "value": "label_embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((len(embeddings_x.keys()), self.embedding_dim))",
                            "Call"
                        ],
                        [
                            "torch.zeros((len(self.nodes_in_G), self.embedding_dim)).to(self.device)",
                            "Call"
                        ],
                        [
                            "label_embeddings.detach().cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_1752": {
                "input": {
                    "value": "img_rep",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((len(images_in_graph), self.embedding_dim))",
                            "Call"
                        ],
                        [
                            "img_rep.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_1761": {
                "input": {
                    "value": "label_rep",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((len(labels_in_graph), self.embedding_dim)).to(self.device)",
                            "Call"
                        ],
                        [
                            "label_rep.cpu().detach().unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_1777": {
                "variable": {
                    "value": "(values, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "e[0, self.labelmap.level_start[level_id]:self.labelmap.level_stop[level_id]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "k": {
                    "value": "max(k)",
                    "type": "Call",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "diag_165": {
                "input": {
                    "value": "self.d",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_259": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_657": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_687": {
                "variable": {
                    "value": "img_emb_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.feature_dict[sublist]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_687": {
                "variable": {
                    "value": "img_emb_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_688": {
                "variable": {
                    "value": "retval",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(x), img_emb_feat.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_691": {
                "variable": {
                    "value": "retval[sublist_id, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.feature_dict[sublist]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_691": {
                "variable": {
                    "value": "retval[sublist_id, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_703": {
                "variable": {
                    "value": "retval",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_749": {
                "input": {
                    "value": "torch.clamp(self.alpha - e_for_u_v_negative, min=0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_752": {
                "input": {
                    "value": "torch.clamp(self.alpha - e_for_u_v_negative, min=0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_974": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_996": {
                "variable": {
                    "value": "img_emb_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.feature_dict[sublist]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_996": {
                "variable": {
                    "value": "img_emb_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_997": {
                "variable": {
                    "value": "retval",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(x), img_emb_feat.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_1000": {
                "variable": {
                    "value": "retval[sublist_id, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.feature_dict[sublist]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_1000": {
                "variable": {
                    "value": "retval[sublist_id, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_1012": {
                "variable": {
                    "value": "retval",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clamp_1046": {
                "input": {
                    "value": "self.alpha - e_for_u_v_negative",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_1273": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_1276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_1348": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_1497": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_1519": {
                "variable": {
                    "value": "e_positive",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_positive, e_for_u_v_positive.detach().cpu().data)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_1520": {
                "variable": {
                    "value": "e_negative",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_negative, e_for_u_v_negative.detach().cpu().data)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "SGD_1712": {
                "params": {
                    "value": "self.params_to_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_1759": {
                "data": {
                    "value": "labels_in_graph[ix:min(ix + bs, len(labels_in_graph) - 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1974": {
                "data": {
                    "value": "self.nodes_in_G[ix:min(ix + 100, len(self.nodes_in_G) - 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_696": {
                "variable": {
                    "value": "img_emb_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.feature_dict[filename]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_696": {
                "variable": {
                    "value": "img_emb_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_697": {
                "variable": {
                    "value": "img_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(sublist), img_emb_feat.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_700": {
                "variable": {
                    "value": "img_feat[file_id, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.feature_dict[filename]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_700": {
                "variable": {
                    "value": "img_feat[file_id, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_735": {
                "input": {
                    "value": "y - x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_749": {
                "input": {
                    "value": "self.alpha - e_for_u_v_negative",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "squeeze_871": {
                "input": {
                    "value": "e_for_u_v_negative_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((e_for_u_v_negative_all, e_for_u_v_negative))",
                            "Call"
                        ],
                        [
                            "e_for_u_v_negative_all.view(len(inputs_from), 2 * self.neg_to_pos_ratio, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((e_for_u_v_negative_all, e_for_u_v_negative))",
                            "Call"
                        ],
                        [
                            "e_for_u_v_negative_all.view(len(inputs_from), 2 * self.neg_to_pos_ratio, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_894": {
                "data": {
                    "value": "non_image_elem",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_918": {
                "data": {
                    "value": "non_image_elem",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_938": {
                "data": {
                    "value": "non_image_elem",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_956": {
                "data": {
                    "value": "non_image_elem",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1005": {
                "variable": {
                    "value": "img_emb_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.feature_dict[filename]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_1005": {
                "variable": {
                    "value": "img_emb_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1006": {
                "variable": {
                    "value": "img_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(sublist), img_emb_feat.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_1009": {
                "variable": {
                    "value": "img_feat[file_id, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.feature_dict[filename]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_1009": {
                "variable": {
                    "value": "img_feat[file_id, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_1129": {
                "input": {
                    "value": "e_for_u_v_negative_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((e_for_u_v_negative_all, e_for_u_v_negative))",
                            "Call"
                        ],
                        [
                            "e_for_u_v_negative_all.view(len(inputs_from), 2 * self.neg_to_pos_ratio, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((e_for_u_v_negative_all, e_for_u_v_negative))",
                            "Call"
                        ],
                        [
                            "e_for_u_v_negative_all.view(len(inputs_from), 2 * self.neg_to_pos_ratio, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_1151": {
                "data": {
                    "value": "non_image_elem",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1175": {
                "data": {
                    "value": "non_image_elem",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1195": {
                "data": {
                    "value": "non_image_elem",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1213": {
                "data": {
                    "value": "non_image_elem",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_1511": {
                "mode": {
                    "value": "phase == 'train'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Adam_1714": {
                "params": {
                    "value": "self.params_to_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_889": {
                "tensors": {
                    "value": "image_stack",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_891": {
                "tensors": {
                    "value": "image_elem",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == str]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == str]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "stack_913": {
                "tensors": {
                    "value": "image_stack",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_915": {
                "tensors": {
                    "value": "image_elem",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == str]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == str]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "clamp_1037": {
                "input": {
                    "value": "x - y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stack_1146": {
                "tensors": {
                    "value": "image_stack",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_1148": {
                "tensors": {
                    "value": "image_elem",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == str]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == str]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "stack_1170": {
                "tensors": {
                    "value": "image_stack",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_1172": {
                "tensors": {
                    "value": "image_elem",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == str]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == str]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "clamp_752": {
                "input": {
                    "value": "self.alpha - e_for_u_v_negative",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stack_1749": {
                "tensors": {
                    "value": "image_stack",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "network/oe_h.py": {
        "torch": {
            "DataLoader_419": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECDBMerged(path_to_json='../database/ETHEC/train.json', path_to_images=image_dir, labelmap=labelmap, transform=train_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json='../database/ETHEC/train.json', path_to_images=image_dir, labelmap=labelmap, transform=train_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECHierarchyWithImages(self.graph_dict['G_train_tc'], imageless_dataloaders=self.imageless_dataloaders['train'] if self.use_CNN else None, transform=train_data_transforms, labelmap=self.labelmap, half_half=self.half_half)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "DataLoader_424": {
                "variable": {
                    "value": "valloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECDBMerged(path_to_json='../database/ETHEC/val.json', path_to_images=image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json='../database/ETHEC/val.json', path_to_images=image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECHierarchyWithImages(self.graph_dict['G_val'], imageless_dataloaders=self.imageless_dataloaders['val'] if self.use_CNN else None, transform=val_test_data_transforms, labelmap=self.labelmap, half_half=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_427": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECDBMerged(path_to_json='../database/ETHEC/test.json', path_to_images=image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json='../database/ETHEC/test.json', path_to_images=image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECHierarchyWithImages(self.graph_dict['G_test'], imageless_dataloaders=self.imageless_dataloaders['test'] if self.use_CNN else None, transform=val_test_data_transforms, labelmap=self.labelmap, half_half=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_57": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "norm_81": {
                "variable": {
                    "value": "x_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embeddings(inputs)",
                            "Call"
                        ],
                        [
                            "embeds + 1e-15",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(torch.clamp(self.inner_radius_h + x_norm, min=-15.0, max=15.0)) * F.normalize(embeds)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_132": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_135": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "sum_149": {
                "variable": {
                    "value": "tf_norm_u_sq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u * u",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_150": {
                "variable": {
                    "value": "tf_norm_v_sq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v * v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_164": {
                "variable": {
                    "value": "norm_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "v + 1e-15",
                            "BinOp"
                        ],
                        [
                            "v + 1e-15",
                            "BinOp"
                        ],
                        [
                            "cv2.imread(path_to_image)",
                            "Call"
                        ],
                        [
                            "np.array(v)",
                            "Call"
                        ],
                        [
                            "self.transform(v)",
                            "Call"
                        ],
                        [
                            "v + 1e-06",
                            "BinOp"
                        ],
                        [
                            "v + 1e-15",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_184": {
                "variable": {
                    "value": "x_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x + 1e-15",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.tanh(torch.clamp(self.inner_radius_h + x_norm, min=-15.0, max=15.0)) * F.normalize(x)",
                            "BinOp"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_237": {
                "variable": {
                    "value": "self.u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(input_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_238": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(output_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_239": {
                "variable": {
                    "value": "self.d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(output_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ZeroPad2d_240": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0, 0, input_dim - output_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "device_246": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "matmul_253": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x + 1e-15",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.tanh(torch.clamp(self.inner_radius_h + x_norm, min=-15.0, max=15.0)) * F.normalize(x)",
                            "BinOp"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.pad(torch.diag(self.d)) + torch.ger(self.u, self.v)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "normalize_276": {
                "variable": {
                    "value": "direction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x + 1e-15",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.tanh(torch.clamp(self.inner_radius_h + x_norm, min=-15.0, max=15.0)) * F.normalize(x)",
                            "BinOp"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_277": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x + 1e-15",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.tanh(torch.clamp(self.inner_radius_h + x_norm, min=-15.0, max=15.0)) * F.normalize(x)",
                            "BinOp"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_298": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_301": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_302": {
                "variable": {
                    "value": "self.model.module.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.model.module.fc.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "normalize_326": {
                "variable": {
                    "value": "direction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x + 1e-15",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.tanh(torch.clamp(self.inner_radius_h + x_norm, min=-15.0, max=15.0)) * F.normalize(x)",
                            "BinOp"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_327": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x + 1e-15",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.tanh(torch.clamp(self.inner_radius_h + x_norm, min=-15.0, max=15.0)) * F.normalize(x)",
                            "BinOp"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_348": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Linear_351": {
                "variable": {
                    "value": "self.model.module.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "normalize_376": {
                "variable": {
                    "value": "direction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x + 1e-15",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.tanh(torch.clamp(self.inner_radius_h + x_norm, min=-15.0, max=15.0)) * F.normalize(x)",
                            "BinOp"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_377": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x + 1e-15",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.tanh(torch.clamp(self.inner_radius_h + x_norm, min=-15.0, max=15.0)) * F.normalize(x)",
                            "BinOp"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_456": {
                "variable": {
                    "value": "correct_positives",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.e_for_u_v_positive <= threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_457": {
                "variable": {
                    "value": "correct_negatives",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.e_for_u_v_negative > threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "device_746": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "norm_817": {
                "variable": {
                    "value": "x_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x + 1e-15",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.tanh(torch.clamp(self.inner_radius_h + x_norm, min=-15.0, max=15.0)) * F.normalize(x)",
                            "BinOp"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_818": {
                "variable": {
                    "value": "y_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "y.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_819": {
                "variable": {
                    "value": "x_y_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x - y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_821": {
                "variable": {
                    "value": "x_dot_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x * y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "acos_826": {
                "variable": {
                    "value": "theta_between_x_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(acos_arg, min=-1 + 1e-05, max=1 - 1e-05)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "asin_827": {
                "variable": {
                    "value": "psi_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(self.K * (1 - x_norm ** 2) / x_norm, min=-1 + 1e-05, max=1 - 1e-05)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_1068": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_1371": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_1434": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_1486": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECDBMerged(path_to_json='../database/ETHEC/train.json', path_to_images=image_dir, labelmap=labelmap, transform=train_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json='../database/ETHEC/train.json', path_to_images=image_dir, labelmap=labelmap, transform=train_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECHierarchyWithImages(self.graph_dict['G_train_tc'], imageless_dataloaders=self.imageless_dataloaders['train'] if self.use_CNN else None, transform=train_data_transforms, labelmap=self.labelmap, half_half=self.half_half)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.n_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_1490": {
                "variable": {
                    "value": "valloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECDBMerged(path_to_json='../database/ETHEC/val.json', path_to_images=image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json='../database/ETHEC/val.json', path_to_images=image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECHierarchyWithImages(self.graph_dict['G_val'], imageless_dataloaders=self.imageless_dataloaders['val'] if self.use_CNN else None, transform=val_test_data_transforms, labelmap=self.labelmap, half_half=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.n_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_1494": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECDBMerged(path_to_json='../database/ETHEC/test.json', path_to_images=image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json='../database/ETHEC/test.json', path_to_images=image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECHierarchyWithImages(self.graph_dict['G_test'], imageless_dataloaders=self.imageless_dataloaders['test'] if self.use_CNN else None, transform=val_test_data_transforms, labelmap=self.labelmap, half_half=False)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.n_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_1622": {
                "variable": {
                    "value": "tf_norm_u_sq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u * u",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_1623": {
                "variable": {
                    "value": "tf_norm_v_sq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v * v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_1640": {
                "variable": {
                    "value": "norm_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "v + 1e-15",
                            "BinOp"
                        ],
                        [
                            "v + 1e-15",
                            "BinOp"
                        ],
                        [
                            "cv2.imread(path_to_image)",
                            "Call"
                        ],
                        [
                            "np.array(v)",
                            "Call"
                        ],
                        [
                            "self.transform(v)",
                            "Call"
                        ],
                        [
                            "v + 1e-06",
                            "BinOp"
                        ],
                        [
                            "v + 1e-15",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_1905": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path_to_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_1942": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.path_to_save_model, '{}_model.pth'.format(epoch_to_load))",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_1953": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.path_to_save_model, '{}_img_feat_net.pth'.format(epoch_to_load))",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1994": {
                "variable": {
                    "value": "img_rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(images_in_graph), self.embedding_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "median_2003": {
                "variable": {
                    "value": "calculated_metrics[median_img_norm]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.norm(img_rep, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_2010": {
                "variable": {
                    "value": "label_rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(labels_in_graph), self.embedding_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "median_2015": {
                "variable": {
                    "value": "calculated_metrics[median_label_norm]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.norm(label_rep, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_2228": {
                "variable": {
                    "value": "label_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(self.nodes_in_G), self.embedding_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_2235": {
                "variable": {
                    "value": "positive_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self.edges_in_G)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_2238": {
                "variable": {
                    "value": "negative_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.check_graph_embedding_neg_graph.size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_62": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.labelmap.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Embedding_64": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.labelmap.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_69": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embeddings.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_72": {
                "variable": {
                    "value": "new_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.inner_radius + torch.rand(self.embeddings.weight.data.shape[0]) * 0.05",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(new_norm, 1).repeat(1, self.embedding_dim)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_101": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x + 1e-15",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.tanh(torch.clamp(self.inner_radius_h + x_norm, min=-15.0, max=15.0)) * F.normalize(x)",
                            "BinOp"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "normalize_198": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x + 1e-15",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.tanh(torch.clamp(self.inner_radius_h + x_norm, min=-15.0, max=15.0)) * F.normalize(x)",
                            "BinOp"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_221": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x + 1e-15",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.tanh(torch.clamp(self.inner_radius_h + x_norm, min=-15.0, max=15.0)) * F.normalize(x)",
                            "BinOp"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "normalize_258": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x + 1e-15",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.tanh(torch.clamp(self.inner_radius_h + x_norm, min=-15.0, max=15.0)) * F.normalize(x)",
                            "BinOp"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_443": {
                "data": {
                    "value": "status_data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_487": {
                "variable": {
                    "value": "correct_positives",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.e_for_u_v_positive <= self.threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_488": {
                "variable": {
                    "value": "correct_negatives",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.e_for_u_v_negative > self.threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "clamp_833": {
                "input": {
                    "value": "theta_between_x_y - psi_x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_845": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(weights).to(self.device)",
                            "Call"
                        ],
                        [
                            "[1.0] * len(inputs_from)",
                            "BinOp"
                        ],
                        [
                            "sorted([filename.split('_')[0] for filename in os.listdir(self.path_to_save_model)])",
                            "Call"
                        ],
                        [
                            "weights[:-2]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_917": {
                "variable": {
                    "value": "e_for_u_v_positive_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_for_u_v_positive_all, e_for_u_v_positive)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_923": {
                "variable": {
                    "value": "e_for_u_v_negative_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_for_u_v_negative_all, e_for_u_v_negative)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_1131": {
                "input": {
                    "value": "torch.clamp(x - y, min=0.0) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1181": {
                "variable": {
                    "value": "e_for_u_v_positive_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_for_u_v_positive_all, e_for_u_v_positive)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_1187": {
                "variable": {
                    "value": "e_for_u_v_negative_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_for_u_v_negative_all, e_for_u_v_negative)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "manual_seed_1338": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_1439": {
                "variable": {
                    "value": "self.img_feat_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.img_feat_net",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_1514": {
                "variable": {
                    "value": "self.optimizer_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': self.model.parameters(), 'lr': 0.0}]",
                    "type": "List",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_1515": {
                "variable": {
                    "value": "self.optimizer_images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': self.img_feat_net.parameters()}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr_images",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_1520": {
                "variable": {
                    "value": "self.optimizer_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': self.model.parameters()}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_1521": {
                "variable": {
                    "value": "self.optimizer_images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': self.img_feat_net.parameters()}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr_images",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_1523": {
                "variable": {
                    "value": "self.optimizer_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': list(self.model.parameters()) + list(self.img_feat_net.parameters())}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_1525": {
                "variable": {
                    "value": "self.scheduler_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "milestones": {
                    "value": "self.lr_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_1526": {
                "variable": {
                    "value": "self.scheduler_images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer_images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "milestones": {
                    "value": "self.lr_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "norm_1612": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x + 1e-15",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.tanh(torch.clamp(self.inner_radius_h + x_norm, min=-15.0, max=15.0)) * F.normalize(x)",
                            "BinOp"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_1877": {
                "obj": {
                    "value": "{'epoch': self.epoch, 'model_state_dict': self.model.state_dict(), 'optimizer_state_dict': self.optimizer_labels.state_dict(), 'loss': loss, 'optimal_threshold': self.optimal_threshold, 'reconstruction_scores': {'f1': self.reconstruction_f1, 'precision': self.reconstruction_prec, 'recall': self.reconstruction_recall, 'accuracy': self.reconstruction_accuracy, 'threshold': self.reconstruction_threshold}}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.path_to_save_model, '{}_model.pth'.format(filename if filename else self.epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_1890": {
                "obj": {
                    "value": "{'epoch': self.epoch, 'model_state_dict': self.img_feat_net.state_dict(), 'optimizer_state_dict': self.optimizer_images.state_dict(), 'loss': loss, 'optimal_threshold': self.optimal_threshold, 'reconstruction_scores': {'f1': self.reconstruction_f1, 'precision': self.reconstruction_prec, 'recall': self.reconstruction_recall, 'accuracy': self.reconstruction_accuracy, 'threshold': self.reconstruction_threshold}}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.path_to_save_model, '{}_img_feat_net.pth'.format(filename if filename else self.epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_75": {
                "data": {
                    "value": "self.inner_radius",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_83": {
                "input": {
                    "value": "torch.clamp(self.inner_radius_h + x_norm, min=-15.0, max=15.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_83": {
                "input": {
                    "value": "embeds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embeddings(inputs)",
                            "Call"
                        ],
                        [
                            "embeds + 1e-15",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(torch.clamp(self.inner_radius_h + x_norm, min=-15.0, max=15.0)) * F.normalize(embeds)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "normalize_86": {
                "input": {
                    "value": "embeds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embeddings(inputs)",
                            "Call"
                        ],
                        [
                            "embeds + 1e-15",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(torch.clamp(self.inner_radius_h + x_norm, min=-15.0, max=15.0)) * F.normalize(embeds)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_138": {
                "data": {
                    "value": "self.inner_radius",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_148": {
                "input": {
                    "value": "u * v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_191": {
                "input": {
                    "value": "torch.clamp(self.inner_radius_h + x_norm, min=-15.0, max=15.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_191": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x + 1e-15",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.tanh(torch.clamp(self.inner_radius_h + x_norm, min=-15.0, max=15.0)) * F.normalize(x)",
                            "BinOp"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_203": {
                "variable": {
                    "value": "norm_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x + 1e-15",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.tanh(torch.clamp(self.inner_radius_h + x_norm, min=-15.0, max=15.0)) * F.normalize(x)",
                            "BinOp"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_204": {
                "variable": {
                    "value": "x[norm_x > 1.0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x[norm_x > 1.0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_220": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_237": {
                "*size": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_238": {
                "*size": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_239": {
                "*size": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ger_252": {
                "input": {
                    "value": "self.u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "vec2": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_263": {
                "variable": {
                    "value": "norm_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x + 1e-15",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.tanh(torch.clamp(self.inner_radius_h + x_norm, min=-15.0, max=15.0)) * F.normalize(x)",
                            "BinOp"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_264": {
                "variable": {
                    "value": "x[norm_x > 1.0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x[norm_x > 1.0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_794": {
                "variable": {
                    "value": "retval",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(retval, img_feat.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_826": {
                "input": {
                    "value": "acos_arg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(x_dot_y * (1 + x_norm ** 2) - x_norm ** 2 * (1 + y_norm ** 2)) / (x_norm * x_y_dist * torch.sqrt(1 + (x_norm * y_norm) ** 2 - 2 * x_dot_y))",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "-1 + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_827": {
                "input": {
                    "value": "self.K * (1 - x_norm ** 2) / x_norm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-1 + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_839": {
                "input": {
                    "value": "self.alpha - self.E_operator(x, y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_906": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_925": {
                "input": {
                    "value": "self.get_image_label_loss(e_for_u_v_positive, e_for_u_v_negative)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_965": {
                "input": {
                    "value": "self.get_image_label_loss(torch.squeeze(e_for_u_v_positive_all), torch.squeeze(e_for_u_v_negative_all), weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_986": {
                "variable": {
                    "value": "from_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(from_elem), image_emb.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_989": {
                "variable": {
                    "value": "from_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(from_elem), non_image_emb.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_1010": {
                "variable": {
                    "value": "to_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(to_elem), image_emb.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_1013": {
                "variable": {
                    "value": "to_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(to_elem), non_image_emb.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_1030": {
                "variable": {
                    "value": "from_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(from_elem), image_emb.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_1033": {
                "variable": {
                    "value": "from_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(from_elem), non_image_emb.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_1048": {
                "variable": {
                    "value": "to_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(to_elem), image_emb.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_1051": {
                "variable": {
                    "value": "to_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(to_elem), non_image_emb.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_1107": {
                "variable": {
                    "value": "retval",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(retval, img_feat.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_1137": {
                "input": {
                    "value": "self.alpha - self.E_operator(x, y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_1140": {
                "input": {
                    "value": "torch.clamp(self.alpha - e_for_u_v_negative, min=0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_1170": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_1189": {
                "input": {
                    "value": "self.get_image_label_loss(e_for_u_v_positive, e_for_u_v_negative)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_1223": {
                "input": {
                    "value": "self.get_image_label_loss(torch.squeeze(e_for_u_v_positive_all), torch.squeeze(e_for_u_v_negative_all))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_1243": {
                "variable": {
                    "value": "from_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(from_elem), image_emb.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_1246": {
                "variable": {
                    "value": "from_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(from_elem), non_image_emb.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_1267": {
                "variable": {
                    "value": "to_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(to_elem), image_emb.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_1270": {
                "variable": {
                    "value": "to_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(to_elem), non_image_emb.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_1287": {
                "variable": {
                    "value": "from_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(from_elem), image_emb.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_1290": {
                "variable": {
                    "value": "from_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(from_elem), non_image_emb.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_1305": {
                "variable": {
                    "value": "to_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(to_elem), image_emb.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_1308": {
                "variable": {
                    "value": "to_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(to_elem), non_image_emb.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "device_count_1373": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_1547": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.train_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.n_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_1566": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.train_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.n_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_1611": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_1621": {
                "input": {
                    "value": "u * v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_1935": {
                "ndarray": {
                    "value": "label_embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((len(embeddings_x.keys()), self.embedding_dim))",
                            "Call"
                        ],
                        [
                            "torch.zeros((len(self.nodes_in_G), self.embedding_dim)).to(self.device)",
                            "Call"
                        ],
                        [
                            "label_embeddings.detach().cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_2003": {
                "input": {
                    "value": "img_rep",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((len(images_in_graph), self.embedding_dim))",
                            "Call"
                        ],
                        [
                            "img_rep.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_2015": {
                "input": {
                    "value": "label_rep",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((len(labels_in_graph), self.embedding_dim)).to(self.device)",
                            "Call"
                        ],
                        [
                            "label_rep.cpu().detach().unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_2034": {
                "variable": {
                    "value": "(values, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "e[0, self.labelmap.level_start[level_id]:self.labelmap.level_stop[level_id]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "k": {
                    "value": "max(k)",
                    "type": "Call",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_83": {
                "input": {
                    "value": "self.inner_radius_h + x_norm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-15.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "15.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_160": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x + 1e-15",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.tanh(torch.clamp(self.inner_radius_h + x_norm, min=-15.0, max=15.0)) * F.normalize(x)",
                            "BinOp"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_165": {
                "input": {
                    "value": "self.lambda_x(x) * norm_v / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_191": {
                "input": {
                    "value": "self.inner_radius_h + x_norm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-15.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "15.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "diag_252": {
                "input": {
                    "value": "self.d",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_298": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_348": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_746": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_777": {
                "variable": {
                    "value": "img_emb_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.feature_dict[sublist]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_777": {
                "variable": {
                    "value": "img_emb_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_778": {
                "variable": {
                    "value": "retval",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(x), img_emb_feat.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_781": {
                "variable": {
                    "value": "retval[sublist_id, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.feature_dict[sublist]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_781": {
                "variable": {
                    "value": "retval[sublist_id, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_793": {
                "variable": {
                    "value": "retval",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_823": {
                "input": {
                    "value": "1 + (x_norm * y_norm) ** 2 - 2 * x_dot_y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_843": {
                "input": {
                    "value": "torch.clamp(self.alpha - e_for_u_v_negative, min=0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_846": {
                "input": {
                    "value": "torch.clamp(self.alpha - e_for_u_v_negative, min=0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_1068": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_1090": {
                "variable": {
                    "value": "img_emb_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.feature_dict[sublist]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_1090": {
                "variable": {
                    "value": "img_emb_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1091": {
                "variable": {
                    "value": "retval",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(x), img_emb_feat.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_1094": {
                "variable": {
                    "value": "retval[sublist_id, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.feature_dict[sublist]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_1094": {
                "variable": {
                    "value": "retval[sublist_id, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_1106": {
                "variable": {
                    "value": "retval",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clamp_1140": {
                "input": {
                    "value": "self.alpha - e_for_u_v_negative",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_1371": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_1374": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_1446": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_1636": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x + 1e-15",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.tanh(torch.clamp(self.inner_radius_h + x_norm, min=-15.0, max=15.0)) * F.normalize(x)",
                            "BinOp"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_1641": {
                "input": {
                    "value": "torch.clamp(self.lambda_x(x) * norm_v / 2, min=-15.0, max=15.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_1729": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_1752": {
                "variable": {
                    "value": "e_positive",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_positive, e_for_u_v_positive.detach().cpu().data)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_1753": {
                "variable": {
                    "value": "e_negative",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_negative, e_for_u_v_negative.detach().cpu().data)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "SGD_1961": {
                "params": {
                    "value": "self.params_to_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_2013": {
                "data": {
                    "value": "labels_in_graph[ix:min(ix + bs, len(labels_in_graph) - 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_2231": {
                "data": {
                    "value": "self.nodes_in_G[ix:min(ix + 100, len(self.nodes_in_G) - 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_71": {
                "*size": {
                    "value": "self.embeddings.weight.data.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_786": {
                "variable": {
                    "value": "img_emb_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.feature_dict[filename]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_786": {
                "variable": {
                    "value": "img_emb_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_787": {
                "variable": {
                    "value": "img_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(sublist), img_emb_feat.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_790": {
                "variable": {
                    "value": "img_feat[file_id, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.feature_dict[filename]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_790": {
                "variable": {
                    "value": "img_feat[file_id, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_843": {
                "input": {
                    "value": "self.alpha - e_for_u_v_negative",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "squeeze_965": {
                "input": {
                    "value": "e_for_u_v_negative_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((e_for_u_v_negative_all, e_for_u_v_negative))",
                            "Call"
                        ],
                        [
                            "e_for_u_v_negative_all.view(len(inputs_from), 2 * self.neg_to_pos_ratio, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((e_for_u_v_negative_all, e_for_u_v_negative))",
                            "Call"
                        ],
                        [
                            "e_for_u_v_negative_all.view(len(inputs_from), 2 * self.neg_to_pos_ratio, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_988": {
                "data": {
                    "value": "non_image_elem",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1012": {
                "data": {
                    "value": "non_image_elem",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1032": {
                "data": {
                    "value": "non_image_elem",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1050": {
                "data": {
                    "value": "non_image_elem",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1099": {
                "variable": {
                    "value": "img_emb_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.feature_dict[filename]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_1099": {
                "variable": {
                    "value": "img_emb_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1100": {
                "variable": {
                    "value": "img_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(sublist), img_emb_feat.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_1103": {
                "variable": {
                    "value": "img_feat[file_id, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.feature_dict[filename]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_1103": {
                "variable": {
                    "value": "img_feat[file_id, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_1223": {
                "input": {
                    "value": "e_for_u_v_negative_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((e_for_u_v_negative_all, e_for_u_v_negative))",
                            "Call"
                        ],
                        [
                            "e_for_u_v_negative_all.view(len(inputs_from), 2 * self.neg_to_pos_ratio, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((e_for_u_v_negative_all, e_for_u_v_negative))",
                            "Call"
                        ],
                        [
                            "e_for_u_v_negative_all.view(len(inputs_from), 2 * self.neg_to_pos_ratio, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_1245": {
                "data": {
                    "value": "non_image_elem",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1269": {
                "data": {
                    "value": "non_image_elem",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1289": {
                "data": {
                    "value": "non_image_elem",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1307": {
                "data": {
                    "value": "non_image_elem",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == int]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_1641": {
                "input": {
                    "value": "self.lambda_x(x) * norm_v / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-15.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "15.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "set_grad_enabled_1744": {
                "mode": {
                    "value": "phase == 'train'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Adam_1963": {
                "params": {
                    "value": "self.params_to_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_983": {
                "tensors": {
                    "value": "image_stack",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_985": {
                "tensors": {
                    "value": "image_elem",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == str]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == str]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "stack_1007": {
                "tensors": {
                    "value": "image_stack",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_1009": {
                "tensors": {
                    "value": "image_elem",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == str]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == str]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "clamp_1131": {
                "input": {
                    "value": "x - y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stack_1240": {
                "tensors": {
                    "value": "image_stack",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_1242": {
                "tensors": {
                    "value": "image_elem",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == str]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == str]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "stack_1264": {
                "tensors": {
                    "value": "image_stack",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_1266": {
                "tensors": {
                    "value": "image_elem",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == str]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(from_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) != int]",
                            "ListComp"
                        ],
                        [
                            "[elem for (ix, elem) in enumerate(to_elem) if type(elem) == str]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "clamp_846": {
                "input": {
                    "value": "self.alpha - e_for_u_v_negative",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stack_2000": {
                "tensors": {
                    "value": "image_stack",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "network/order_embeddings.py": {
        "torch": {
            "DataLoader_1287": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECDB(path_to_json='../database/ETHEC/train.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=train_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMerged(path_to_json='../database/ETHEC/train.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=train_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json='../database/ETHEC/train.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=train_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECHierarchy(self.G_train, self.G_tc, labelmap=self.labelmap, has_negative=False, pick_per_level=self.pick_per_level)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "n_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.n_workers",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True if arguments.class_weights else False",
                    "type": "IfExp",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None if arguments.class_weights else WeightedResampler(train_set, weight_strategy=arguments.weight_strategy)",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_1293": {
                "variable": {
                    "value": "valloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECDB(path_to_json='../database/ETHEC/val.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMerged(path_to_json='../database/ETHEC/val.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json='../database/ETHEC/val.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECHierarchy(self.G_val, self.G_tc, labelmap=self.labelmap, has_negative=True, neg_to_pos_ratio=self.neg_to_pos_ratio, pick_per_level=self.pick_per_level)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "n_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.n_workers",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_1296": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECDB(path_to_json='../database/ETHEC/test.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMerged(path_to_json='../database/ETHEC/test.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json='../database/ETHEC/test.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECHierarchy(self.G_test, self.G_tc, labelmap=self.labelmap, has_negative=True, neg_to_pos_ratio=self.neg_to_pos_ratio, pick_per_level=self.pick_per_level)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "n_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.n_workers",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Embedding_185": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.labelmap.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_198": {
                "variable": {
                    "value": "direction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_199": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_259": {
                "variable": {
                    "value": "correct_positives",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.e_for_u_v_positive <= threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_260": {
                "variable": {
                    "value": "correct_negatives",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.e_for_u_v_negative > threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "device_323": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_360": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_483": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECDB(path_to_json='../database/ETHEC/train.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=train_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMerged(path_to_json='../database/ETHEC/train.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=train_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json='../database/ETHEC/train.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=train_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECHierarchy(self.G_train, self.G_tc, labelmap=self.labelmap, has_negative=False, pick_per_level=self.pick_per_level)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_487": {
                "variable": {
                    "value": "valloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECDB(path_to_json='../database/ETHEC/val.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMerged(path_to_json='../database/ETHEC/val.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json='../database/ETHEC/val.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECHierarchy(self.G_val, self.G_tc, labelmap=self.labelmap, has_negative=True, neg_to_pos_ratio=self.neg_to_pos_ratio, pick_per_level=self.pick_per_level)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_491": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECDB(path_to_json='../database/ETHEC/test.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMerged(path_to_json='../database/ETHEC/test.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json='../database/ETHEC/test.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECHierarchy(self.G_test, self.G_tc, labelmap=self.labelmap, has_negative=True, neg_to_pos_ratio=self.neg_to_pos_ratio, pick_per_level=self.pick_per_level)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_500": {
                "variable": {
                    "value": "correct_positives",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.positive_e <= threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_501": {
                "variable": {
                    "value": "correct_negatives",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.negative_e > threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "zeros_543": {
                "variable": {
                    "value": "label_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(self.nodes_in_G), self.embedding_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MultiStepLR_570": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "milestones": {
                    "value": "self.lr_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_710": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.path_to_save_model, '{}.pth'.format(epoch_to_load))",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_767": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ones_833": {
                "variable": {
                    "value": "retval",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(to)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_843": {
                "variable": {
                    "value": "predicted_from_embeddings_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_844": {
                "variable": {
                    "value": "predicted_to_embeddings_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_848": {
                "variable": {
                    "value": "predicted_from_embeddings_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(predicted_from_embeddings_all, predicted_from_embeddings)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_849": {
                "variable": {
                    "value": "predicted_to_embeddings_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(predicted_to_embeddings_all, predicted_to_embeddings)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "device_933": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "norm_959": {
                "variable": {
                    "value": "x_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_960": {
                "variable": {
                    "value": "y_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y.contiguous().view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "y.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_961": {
                "variable": {
                    "value": "x_y_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x - y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_1011": {
                "variable": {
                    "value": "retval",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(to)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_1021": {
                "variable": {
                    "value": "predicted_from_embeddings_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1022": {
                "variable": {
                    "value": "predicted_to_embeddings_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_1026": {
                "variable": {
                    "value": "predicted_from_embeddings_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(predicted_from_embeddings_all, predicted_from_embeddings)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_1027": {
                "variable": {
                    "value": "predicted_to_embeddings_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(predicted_to_embeddings_all, predicted_to_embeddings)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "device_1113": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_1134": {
                "variable": {
                    "value": "predicted_from_embeddings_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1135": {
                "variable": {
                    "value": "predicted_to_embeddings_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_1304": {
                "variable": {
                    "value": "n_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "labelmap.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "data": {
                    "value": "status_data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_232": {
                "variable": {
                    "value": "correct_positives",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.e_for_u_v_positive <= self.threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_233": {
                "variable": {
                    "value": "correct_negatives",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.e_for_u_v_negative > self.threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_290": {
                "variable": {
                    "value": "correct_positives",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.e_for_u_v_positive <= self.threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_291": {
                "variable": {
                    "value": "correct_negatives",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.e_for_u_v_negative > self.threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "manual_seed_313": {
                "seed": {
                    "value": "random_seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_642": {
                "variable": {
                    "value": "predicted_from_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(predicted_from_embeddings, outputs_from.data)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_643": {
                "variable": {
                    "value": "predicted_to_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(predicted_to_embeddings, outputs_to.data)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_644": {
                "variable": {
                    "value": "e_positive",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_positive, e_for_u_v_positive.cpu().detach().data)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_645": {
                "variable": {
                    "value": "e_negative",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_negative, e_for_u_v_negative.cpu().detach().data)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "save_696": {
                "obj": {
                    "value": "{'epoch': self.epoch, 'model_state_dict': self.model.state_dict(), 'optimizer_state_dict': self.optimizer.state_dict(), 'loss': loss, 'optimal_threshold': self.optimal_threshold, 'reconstruction_scores': {'f1': self.reconstruction_f1, 'precision': self.reconstruction_prec, 'recall': self.reconstruction_recall, 'accuracy': self.reconstruction_accuracy, 'threshold': self.reconstruction_threshold}}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.path_to_save_model, '{}.pth'.format(filename if filename else self.epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_774": {
                "variable": {
                    "value": "self.level_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self.labelmap.levels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_824": {
                "input": {
                    "value": "torch.clamp(x - y, min=0.0) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_857": {
                "variable": {
                    "value": "e_for_u_v_positive_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_for_u_v_positive_all, e_for_u_v_positive)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_864": {
                "variable": {
                    "value": "e_for_u_v_negative_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_for_u_v_negative_all, e_for_u_v_negative)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_876": {
                "variable": {
                    "value": "e_for_u_v_positive_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_for_u_v_positive_all, e_for_u_v_positive)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_920": {
                "variable": {
                    "value": "e_for_u_v_negative_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_for_u_v_negative_all, e_for_u_v_negative)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_940": {
                "variable": {
                    "value": "self.level_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self.labelmap.levels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_969": {
                "input": {
                    "value": "theta_between_x_y - psi_x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_1035": {
                "variable": {
                    "value": "e_for_u_v_positive_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_for_u_v_positive_all, e_for_u_v_positive)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_1042": {
                "variable": {
                    "value": "e_for_u_v_negative_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_for_u_v_negative_all, e_for_u_v_negative)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_1048": {
                "variable": {
                    "value": "pos_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(inputs_to)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_1049": {
                "variable": {
                    "value": "negative_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * self.neg_to_pos_ratio * len(inputs_to)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_1060": {
                "variable": {
                    "value": "e_for_u_v_positive_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_for_u_v_positive_all, e_for_u_v_positive)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_1103": {
                "variable": {
                    "value": "e_for_u_v_negative_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_for_u_v_negative_all, e_for_u_v_negative)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_1129": {
                "input": {
                    "value": "(y - x) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1148": {
                "variable": {
                    "value": "d_for_u_v_positive_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(d_for_u_v_positive_all, d_for_u_v_positive)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_1155": {
                "variable": {
                    "value": "d_for_u_v_negative_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(d_for_u_v_negative_all, d_for_u_v_negative)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_215": {
                "variable": {
                    "value": "correct_positives",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.e_for_u_v_positive <= possible_thresholds[t_id]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_216": {
                "variable": {
                    "value": "correct_negatives",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.e_for_u_v_negative > possible_thresholds[t_id]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "device_count_325": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_615": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_616": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_738": {
                "ndarray": {
                    "value": "label_embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((len(self.nodes_in_G), self.embedding_dim)).to(self.device)",
                            "Call"
                        ],
                        [
                            "label_embeddings.detach().cpu()",
                            "Call"
                        ],
                        [
                            "np.zeros((len(embeddings_x.keys()), self.embedding_dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_830": {
                "input": {
                    "value": "self.alpha - self.E_operator(x, y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_842": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_846": {
                "data": {
                    "value": "inputs_from",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_847": {
                "data": {
                    "value": "inputs_to",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_856": {
                "input": {
                    "value": "e_for_u_v_positive",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.positive_pair(predicted_from_embeddings[positive_indices], predicted_to_embeddings[positive_indices])",
                            "Call"
                        ],
                        [
                            "self.positive_pair(predicted_from_embeddings[positive_indices], predicted_to_embeddings[positive_indices])",
                            "Call"
                        ],
                        [
                            "self.positive_pair(predicted_from_embeddings[positive_indices], predicted_to_embeddings[positive_indices])",
                            "Call"
                        ],
                        [
                            "self.positive_pair(predicted_from_embeddings[positive_indices], predicted_to_embeddings[positive_indices])",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_863": {
                "input": {
                    "value": "neg_term",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_875": {
                "input": {
                    "value": "level_weights_per_edge * e_for_u_v_positive",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_884": {
                "variable": {
                    "value": "negative_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * self.neg_to_pos_ratio * len(inputs_to)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_919": {
                "input": {
                    "value": "negative_weights.to(self.device) * neg_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_965": {
                "input": {
                    "value": "F.normalize(x, dim=1) * F.normalize(y - x, dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_967": {
                "input": {
                    "value": "1 - self.K * self.K / x_norm ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_975": {
                "input": {
                    "value": "self.alpha - self.E_operator(x, y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_1020": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1024": {
                "data": {
                    "value": "inputs_from",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_1025": {
                "data": {
                    "value": "inputs_to",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_1034": {
                "input": {
                    "value": "e_for_u_v_positive",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.positive_pair(predicted_from_embeddings[positive_indices], predicted_to_embeddings[positive_indices])",
                            "Call"
                        ],
                        [
                            "self.positive_pair(predicted_from_embeddings[positive_indices], predicted_to_embeddings[positive_indices])",
                            "Call"
                        ],
                        [
                            "self.positive_pair(predicted_from_embeddings[positive_indices], predicted_to_embeddings[positive_indices])",
                            "Call"
                        ],
                        [
                            "self.positive_pair(predicted_from_embeddings[positive_indices], predicted_to_embeddings[positive_indices])",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_1041": {
                "input": {
                    "value": "neg_term",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_1059": {
                "input": {
                    "value": "pos_weights * e_for_u_v_positive",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_1102": {
                "input": {
                    "value": "negative_weights.to(self.device) * neg_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_1133": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_1163": {
                "variable": {
                    "value": "predicted_from_embeddings_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(predicted_from_embeddings_all, predicted_from_embeddings)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_1164": {
                "variable": {
                    "value": "predicted_to_embeddings_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(predicted_to_embeddings_all, predicted_to_embeddings)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_1173": {
                "variable": {
                    "value": "d_for_u_v_positive_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(d_for_u_v_positive_all, d_for_u_v_positive)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_1306": {
                "input": {
                    "value": "data_item['labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_323": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_326": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_383": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_546": {
                "data": {
                    "value": "self.nodes_in_G[ix:min(ix + 100, len(self.nodes_in_G) - 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_563": {
                "params": {
                    "value": "self.params_to_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "set_grad_enabled_627": {
                "mode": {
                    "value": "phase == 'train'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "is_available_767": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_933": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_1113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_1138": {
                "data": {
                    "value": "status",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_1156": {
                "input": {
                    "value": "torch.sum(torch.exp(-d_for_u_v_negative), dim=0) + torch.exp(-d_u_u)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_1177": {
                "variable": {
                    "value": "negative_from",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * self.neg_to_pos_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1178": {
                "variable": {
                    "value": "negative_to",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * self.neg_to_pos_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1197": {
                "variable": {
                    "value": "d_for_u_v_negative_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(d_for_u_v_negative_all, d_for_u_v_negative)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_565": {
                "params": {
                    "value": "self.params_to_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_917": {
                "data": {
                    "value": "negative_to",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[None] * (2 * self.neg_to_pos_ratio * self.num_edges)",
                            "BinOp"
                        ],
                        [
                            "[None] * (2 * self.neg_to_pos_ratio * len(inputs_to))",
                            "BinOp"
                        ],
                        [
                            "[None] * (2 * self.neg_to_pos_ratio * len(inputs_to))",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(2 * self.neg_to_pos_ratio, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_965": {
                "input": {
                    "value": "y - x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_1100": {
                "data": {
                    "value": "negative_to",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[None] * (2 * self.neg_to_pos_ratio * self.num_edges)",
                            "BinOp"
                        ],
                        [
                            "[None] * (2 * self.neg_to_pos_ratio * len(inputs_to))",
                            "BinOp"
                        ],
                        [
                            "[None] * (2 * self.neg_to_pos_ratio * len(inputs_to))",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(2 * self.neg_to_pos_ratio, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_824": {
                "input": {
                    "value": "x - y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_882": {
                "*size": {
                    "value": "2 * self.neg_to_pos_ratio * len(inputs_to)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_1156": {
                "input": {
                    "value": "torch.exp(-d_for_u_v_negative)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_1156": {
                "input": {
                    "value": "-d_for_u_v_negative",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_1200": {
                "input": {
                    "value": "torch.sum(torch.exp(-torch.cat((d_for_u_v_negative, d_u_u[sample_id].unsqueeze(dim=0)))), dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_1200": {
                "input": {
                    "value": "torch.exp(-torch.cat((d_for_u_v_negative, d_u_u[sample_id].unsqueeze(dim=0))))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_1200": {
                "input": {
                    "value": "-torch.cat((d_for_u_v_negative, d_u_u[sample_id].unsqueeze(dim=0)))",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1200": {
                "tensors": {
                    "value": "(d_for_u_v_negative, d_u_u[sample_id].unsqueeze(dim=0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "network/order_embeddings_h.py": {
        "torch": {
            "DataLoader_1425": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECDB(path_to_json='../database/butterfly200/train.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=train_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMerged(path_to_json='../database/butterfly200/train.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=train_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json='../database/butterfly200/train.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=train_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECHierarchy(self.G_train, self.G_tc, labelmap=self.labelmap, has_negative=False, pick_per_level=self.pick_per_level)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "n_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.n_workers",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True if arguments.class_weights else False",
                    "type": "IfExp",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None if arguments.class_weights else WeightedResampler(train_set, weight_strategy=arguments.weight_strategy)",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_1431": {
                "variable": {
                    "value": "valloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECDB(path_to_json='../database/butterfly200/val.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMerged(path_to_json='../database/butterfly200/val.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json='../database/butterfly200/val.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECHierarchy(self.G_val, self.G_tc, labelmap=self.labelmap, has_negative=True, neg_to_pos_ratio=self.neg_to_pos_ratio, pick_per_level=self.pick_per_level)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "n_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.n_workers",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_1434": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECDB(path_to_json='../database/butterfly200/test.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMerged(path_to_json='../database/butterfly200/test.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json='../database/butterfly200/test.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECHierarchy(self.G_test, self.G_tc, labelmap=self.labelmap, has_negative=True, neg_to_pos_ratio=self.neg_to_pos_ratio, pick_per_level=self.pick_per_level)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "n_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arguments.n_workers",
                            "Attribute"
                        ]
                    ]
                }
            },
            "device_187": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "sum_287": {
                "variable": {
                    "value": "correct_positives",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.e_for_u_v_positive <= threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_288": {
                "variable": {
                    "value": "correct_negatives",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.e_for_u_v_negative > threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "device_351": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_388": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_511": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECDB(path_to_json='../database/butterfly200/train.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=train_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMerged(path_to_json='../database/butterfly200/train.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=train_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json='../database/butterfly200/train.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=train_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECHierarchy(self.G_train, self.G_tc, labelmap=self.labelmap, has_negative=False, pick_per_level=self.pick_per_level)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_515": {
                "variable": {
                    "value": "valloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECDB(path_to_json='../database/butterfly200/val.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMerged(path_to_json='../database/butterfly200/val.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json='../database/butterfly200/val.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECHierarchy(self.G_val, self.G_tc, labelmap=self.labelmap, has_negative=True, neg_to_pos_ratio=self.neg_to_pos_ratio, pick_per_level=self.pick_per_level)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_519": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECDB(path_to_json='../database/butterfly200/test.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMerged(path_to_json='../database/butterfly200/test.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json='../database/butterfly200/test.json', path_to_images=arguments.image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECHierarchy(self.G_test, self.G_tc, labelmap=self.labelmap, has_negative=True, neg_to_pos_ratio=self.neg_to_pos_ratio, pick_per_level=self.pick_per_level)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_528": {
                "variable": {
                    "value": "correct_positives",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.positive_e <= threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_529": {
                "variable": {
                    "value": "correct_negatives",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.negative_e > threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "zeros_571": {
                "variable": {
                    "value": "label_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(self.nodes_in_G), self.embedding_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MultiStepLR_598": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "milestones": {
                    "value": "self.lr_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_652": {
                "variable": {
                    "value": "tf_norm_u_sq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u * u",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_653": {
                "variable": {
                    "value": "tf_norm_v_sq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v * v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_670": {
                "variable": {
                    "value": "norm_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "v + 1e-06",
                            "BinOp"
                        ],
                        [
                            "v + 1e-15",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_856": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.path_to_save_model, '{}.pth'.format(epoch_to_load))",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_913": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ones_979": {
                "variable": {
                    "value": "retval",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(to)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_989": {
                "variable": {
                    "value": "predicted_from_embeddings_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_990": {
                "variable": {
                    "value": "predicted_to_embeddings_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_994": {
                "variable": {
                    "value": "predicted_from_embeddings_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(predicted_from_embeddings_all, predicted_from_embeddings)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_995": {
                "variable": {
                    "value": "predicted_to_embeddings_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(predicted_to_embeddings_all, predicted_to_embeddings)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "device_1079": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ones_1082": {
                "variable": {
                    "value": "self.level_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self.labelmap.levels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_1103": {
                "variable": {
                    "value": "x_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_1104": {
                "variable": {
                    "value": "y_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y.contiguous().view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "y.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_1105": {
                "variable": {
                    "value": "x_y_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x - y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_1107": {
                "variable": {
                    "value": "x_dot_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x * y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "acos_1113": {
                "variable": {
                    "value": "theta_between_x_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(acos_arg, min=-1 + 1e-05, max=1 - 1e-05)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "asin_1114": {
                "variable": {
                    "value": "psi_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(self.K * (1 - x_norm ** 2) / x_norm, min=-1 + 1e-05, max=1 - 1e-05)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_1162": {
                "variable": {
                    "value": "retval",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(to)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_1172": {
                "variable": {
                    "value": "predicted_from_embeddings_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1173": {
                "variable": {
                    "value": "predicted_to_embeddings_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_1177": {
                "variable": {
                    "value": "predicted_from_embeddings_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(predicted_from_embeddings_all, predicted_from_embeddings)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_1178": {
                "variable": {
                    "value": "predicted_to_embeddings_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(predicted_to_embeddings_all, predicted_to_embeddings)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "device_1251": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_1272": {
                "variable": {
                    "value": "predicted_from_embeddings_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1273": {
                "variable": {
                    "value": "predicted_to_embeddings_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_1442": {
                "variable": {
                    "value": "n_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "labelmap.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "data": {
                    "value": "status_data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Embedding_192": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.labelmap.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Embedding_194": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.labelmap.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_199": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embeddings.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_202": {
                "variable": {
                    "value": "new_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.inner_radius + torch.rand(self.embeddings.weight.data.shape[0]) * 0.05",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(new_norm, 1).repeat(1, self.embedding_dim)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_225": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_260": {
                "variable": {
                    "value": "correct_positives",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.e_for_u_v_positive <= self.threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_261": {
                "variable": {
                    "value": "correct_negatives",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.e_for_u_v_negative > self.threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_318": {
                "variable": {
                    "value": "correct_positives",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.e_for_u_v_positive <= self.threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_319": {
                "variable": {
                    "value": "correct_negatives",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.e_for_u_v_negative > self.threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "manual_seed_341": {
                "seed": {
                    "value": "random_seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "norm_642": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_785": {
                "variable": {
                    "value": "predicted_from_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(predicted_from_embeddings, outputs_from.data)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_786": {
                "variable": {
                    "value": "predicted_to_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(predicted_to_embeddings, outputs_to.data)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_787": {
                "variable": {
                    "value": "e_positive",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_positive, e_for_u_v_positive.cpu().detach().data)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_788": {
                "variable": {
                    "value": "e_negative",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_negative, e_for_u_v_negative.cpu().detach().data)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "save_842": {
                "obj": {
                    "value": "{'epoch': self.epoch, 'model_state_dict': self.model.state_dict(), 'optimizer_state_dict': self.optimizer.state_dict(), 'loss': loss, 'optimal_threshold': self.optimal_threshold, 'reconstruction_scores': {'f1': self.reconstruction_f1, 'precision': self.reconstruction_prec, 'recall': self.reconstruction_recall, 'accuracy': self.reconstruction_accuracy, 'threshold': self.reconstruction_threshold}}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.path_to_save_model, '{}.pth'.format(filename if filename else self.epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_920": {
                "variable": {
                    "value": "self.level_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self.labelmap.levels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_970": {
                "input": {
                    "value": "torch.clamp(x - y, min=0.0) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1003": {
                "variable": {
                    "value": "e_for_u_v_positive_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_for_u_v_positive_all, e_for_u_v_positive)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_1010": {
                "variable": {
                    "value": "e_for_u_v_negative_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_for_u_v_negative_all, e_for_u_v_negative)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_1022": {
                "variable": {
                    "value": "e_for_u_v_positive_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_for_u_v_positive_all, e_for_u_v_positive)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_1066": {
                "variable": {
                    "value": "e_for_u_v_negative_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_for_u_v_negative_all, e_for_u_v_negative)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "clamp_1120": {
                "input": {
                    "value": "theta_between_x_y - psi_x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_1186": {
                "variable": {
                    "value": "e_for_u_v_positive_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_for_u_v_positive_all, e_for_u_v_positive)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_1193": {
                "variable": {
                    "value": "e_for_u_v_negative_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_for_u_v_negative_all, e_for_u_v_negative)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_1199": {
                "variable": {
                    "value": "pos_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(inputs_to)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_1200": {
                "variable": {
                    "value": "negative_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * self.neg_to_pos_ratio * len(inputs_to)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_1211": {
                "variable": {
                    "value": "e_for_u_v_positive_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_for_u_v_positive_all, e_for_u_v_positive)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_1241": {
                "variable": {
                    "value": "e_for_u_v_negative_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_for_u_v_negative_all, e_for_u_v_negative)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_1267": {
                "input": {
                    "value": "(y - x) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1286": {
                "variable": {
                    "value": "d_for_u_v_positive_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(d_for_u_v_positive_all, d_for_u_v_positive)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_1293": {
                "variable": {
                    "value": "d_for_u_v_negative_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(d_for_u_v_negative_all, d_for_u_v_negative)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_210": {
                "input": {
                    "value": "embeds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embeddings(inputs)",
                            "Call"
                        ],
                        [
                            "embeds + 1e-15",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_243": {
                "variable": {
                    "value": "correct_positives",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.e_for_u_v_positive <= possible_thresholds[t_id]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_244": {
                "variable": {
                    "value": "correct_negatives",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.e_for_u_v_negative > possible_thresholds[t_id]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "device_count_353": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_641": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_651": {
                "input": {
                    "value": "u * v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_746": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_747": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_884": {
                "ndarray": {
                    "value": "label_embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((len(self.nodes_in_G), self.embedding_dim)).to(self.device)",
                            "Call"
                        ],
                        [
                            "label_embeddings.detach().cpu()",
                            "Call"
                        ],
                        [
                            "np.zeros((len(embeddings_x.keys()), self.embedding_dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_976": {
                "input": {
                    "value": "self.alpha - self.E_operator(x, y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_988": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_992": {
                "data": {
                    "value": "inputs_from",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_993": {
                "data": {
                    "value": "inputs_to",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_1002": {
                "input": {
                    "value": "e_for_u_v_positive",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.positive_pair(predicted_from_embeddings[positive_indices], predicted_to_embeddings[positive_indices])",
                            "Call"
                        ],
                        [
                            "self.positive_pair(predicted_from_embeddings[positive_indices], predicted_to_embeddings[positive_indices])",
                            "Call"
                        ],
                        [
                            "self.positive_pair(predicted_from_embeddings[positive_indices], predicted_to_embeddings[positive_indices])",
                            "Call"
                        ],
                        [
                            "self.positive_pair(predicted_from_embeddings[positive_indices], predicted_to_embeddings[positive_indices])",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_1009": {
                "input": {
                    "value": "neg_term",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_1021": {
                "input": {
                    "value": "level_weights_per_edge * e_for_u_v_positive",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_1030": {
                "variable": {
                    "value": "negative_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * self.neg_to_pos_ratio * len(inputs_to)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_1065": {
                "input": {
                    "value": "negative_weights.to(self.device) * neg_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_1113": {
                "input": {
                    "value": "acos_arg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(x_dot_y * (1 + x_norm ** 2) - x_norm ** 2 * (1 + y_norm ** 2)) / (x_norm * x_y_dist * torch.sqrt(1 + (x_norm * y_norm) ** 2 - 2 * x_dot_y))",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "-1 + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_1114": {
                "input": {
                    "value": "self.K * (1 - x_norm ** 2) / x_norm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-1 + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_1126": {
                "input": {
                    "value": "self.alpha - self.E_operator(x, y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_1171": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1175": {
                "data": {
                    "value": "inputs_from",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_1176": {
                "data": {
                    "value": "inputs_to",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_1185": {
                "input": {
                    "value": "e_for_u_v_positive",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.positive_pair(predicted_from_embeddings[positive_indices], predicted_to_embeddings[positive_indices])",
                            "Call"
                        ],
                        [
                            "self.positive_pair(predicted_from_embeddings[positive_indices], predicted_to_embeddings[positive_indices])",
                            "Call"
                        ],
                        [
                            "self.positive_pair(predicted_from_embeddings[positive_indices], predicted_to_embeddings[positive_indices])",
                            "Call"
                        ],
                        [
                            "self.positive_pair(predicted_from_embeddings[positive_indices], predicted_to_embeddings[positive_indices])",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_1192": {
                "input": {
                    "value": "neg_term",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_1210": {
                "input": {
                    "value": "pos_weights * e_for_u_v_positive",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_1240": {
                "input": {
                    "value": "negative_weights.to(self.device) * neg_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_1271": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_1301": {
                "variable": {
                    "value": "predicted_from_embeddings_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(predicted_from_embeddings_all, predicted_from_embeddings)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_1302": {
                "variable": {
                    "value": "predicted_to_embeddings_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(predicted_to_embeddings_all, predicted_to_embeddings)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_1311": {
                "variable": {
                    "value": "d_for_u_v_positive_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(d_for_u_v_positive_all, d_for_u_v_positive)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_1444": {
                "input": {
                    "value": "data_item['labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_351": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_354": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_411": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_574": {
                "data": {
                    "value": "self.nodes_in_G[ix:min(ix + 100, len(self.nodes_in_G) - 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_591": {
                "params": {
                    "value": "self.params_to_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "norm_666": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_671": {
                "input": {
                    "value": "torch.clamp(self.lambda_x(x) * norm_v / 2, min=-15.0, max=15.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_grad_enabled_758": {
                "mode": {
                    "value": "phase == 'train'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "is_available_913": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_1079": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_1110": {
                "input": {
                    "value": "1 + (x_norm * y_norm) ** 2 - 2 * x_dot_y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_1251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_1276": {
                "data": {
                    "value": "status",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_1294": {
                "input": {
                    "value": "torch.sum(torch.exp(-d_for_u_v_negative), dim=0) + torch.exp(-d_u_u)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_1315": {
                "variable": {
                    "value": "negative_from",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * self.neg_to_pos_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1316": {
                "variable": {
                    "value": "negative_to",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * self.neg_to_pos_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1335": {
                "variable": {
                    "value": "d_for_u_v_negative_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(d_for_u_v_negative_all, d_for_u_v_negative)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_201": {
                "*size": {
                    "value": "self.embeddings.weight.data.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clamp_671": {
                "input": {
                    "value": "self.lambda_x(x) * norm_v / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-15.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "15.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_1063": {
                "data": {
                    "value": "negative_to",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[None] * (2 * self.neg_to_pos_ratio * self.num_edges)",
                            "BinOp"
                        ],
                        [
                            "[None] * (2 * self.neg_to_pos_ratio * len(inputs_to))",
                            "BinOp"
                        ],
                        [
                            "[None] * (2 * self.neg_to_pos_ratio * len(inputs_to))",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(2 * self.neg_to_pos_ratio, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_1238": {
                "data": {
                    "value": "negative_to",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[None] * (2 * self.neg_to_pos_ratio * self.num_edges)",
                            "BinOp"
                        ],
                        [
                            "[None] * (2 * self.neg_to_pos_ratio * len(inputs_to))",
                            "BinOp"
                        ],
                        [
                            "[None] * (2 * self.neg_to_pos_ratio * len(inputs_to))",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(2 * self.neg_to_pos_ratio, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_970": {
                "input": {
                    "value": "x - y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_1028": {
                "*size": {
                    "value": "2 * self.neg_to_pos_ratio * len(inputs_to)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_1294": {
                "input": {
                    "value": "torch.exp(-d_for_u_v_negative)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_1294": {
                "input": {
                    "value": "-d_for_u_v_negative",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_1338": {
                "input": {
                    "value": "torch.sum(torch.exp(-torch.cat((d_for_u_v_negative, d_u_u[sample_id].unsqueeze(dim=0)))), dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_1338": {
                "input": {
                    "value": "torch.exp(-torch.cat((d_for_u_v_negative, d_u_u[sample_id].unsqueeze(dim=0))))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_1338": {
                "input": {
                    "value": "-torch.cat((d_for_u_v_negative, d_u_u[sample_id].unsqueeze(dim=0)))",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1338": {
                "tensors": {
                    "value": "(d_for_u_v_negative, d_u_u[sample_id].unsqueeze(dim=0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "network/order_embeddings_images.py": {
        "torch": {
            "DataLoader_355": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECDBMerged(path_to_json='../database/ETHEC/train.json', path_to_images=image_dir, labelmap=labelmap, transform=train_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json='../database/ETHEC/train.json', path_to_images=image_dir, labelmap=labelmap, transform=train_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json=os.path.join(self.path_to_db, 'train.json'), path_to_images=self.image_dir, labelmap=labelmap, transform=val_test_data_transforms)",
                            "Call"
                        ],
                        [
                            "ETHECDBMerged(path_to_json=os.path.join(self.path_to_db, 'train.json'), path_to_images=self.image_dir, labelmap=labelmap, transform=val_test_data_transforms)",
                            "Call"
                        ],
                        [
                            "ETHECHierarchyWithImages(self.graph_dict['G_train'], self.graph_dict['G_train_tc'], has_negative=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "DataLoader_360": {
                "variable": {
                    "value": "valloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECDBMerged(path_to_json='../database/ETHEC/val.json', path_to_images=image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json='../database/ETHEC/val.json', path_to_images=image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json=os.path.join(self.path_to_db, 'val.json'), path_to_images=self.image_dir, labelmap=labelmap, transform=val_test_data_transforms)",
                            "Call"
                        ],
                        [
                            "ETHECDBMerged(path_to_json=os.path.join(self.path_to_db, 'val.json'), path_to_images=self.image_dir, labelmap=labelmap, transform=val_test_data_transforms)",
                            "Call"
                        ],
                        [
                            "ETHECHierarchyWithImages(self.graph_dict['G_val'], self.graph_dict['G_val_tc'], has_negative=True, neg_to_pos_ratio=self.neg_to_pos_ratio)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_363": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECDBMerged(path_to_json='../database/ETHEC/test.json', path_to_images=image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json='../database/ETHEC/test.json', path_to_images=image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json=os.path.join(self.path_to_db, 'test.json'), path_to_images=self.image_dir, labelmap=labelmap, transform=val_test_data_transforms)",
                            "Call"
                        ],
                        [
                            "ETHECDBMerged(path_to_json=os.path.join(self.path_to_db, 'test.json'), path_to_images=self.image_dir, labelmap=labelmap, transform=val_test_data_transforms)",
                            "Call"
                        ],
                        [
                            "ETHECHierarchyWithImages(self.graph_dict['G_test'], self.graph_dict['G_test_tc'], has_negative=True, neg_to_pos_ratio=self.neg_to_pos_ratio)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_65": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_114": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECDBMerged(path_to_json='../database/ETHEC/train.json', path_to_images=image_dir, labelmap=labelmap, transform=train_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json='../database/ETHEC/train.json', path_to_images=image_dir, labelmap=labelmap, transform=train_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json=os.path.join(self.path_to_db, 'train.json'), path_to_images=self.image_dir, labelmap=labelmap, transform=val_test_data_transforms)",
                            "Call"
                        ],
                        [
                            "ETHECDBMerged(path_to_json=os.path.join(self.path_to_db, 'train.json'), path_to_images=self.image_dir, labelmap=labelmap, transform=val_test_data_transforms)",
                            "Call"
                        ],
                        [
                            "ETHECHierarchyWithImages(self.graph_dict['G_train'], self.graph_dict['G_train_tc'], has_negative=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_117": {
                "variable": {
                    "value": "valloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECDBMerged(path_to_json='../database/ETHEC/val.json', path_to_images=image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json='../database/ETHEC/val.json', path_to_images=image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json=os.path.join(self.path_to_db, 'val.json'), path_to_images=self.image_dir, labelmap=labelmap, transform=val_test_data_transforms)",
                            "Call"
                        ],
                        [
                            "ETHECDBMerged(path_to_json=os.path.join(self.path_to_db, 'val.json'), path_to_images=self.image_dir, labelmap=labelmap, transform=val_test_data_transforms)",
                            "Call"
                        ],
                        [
                            "ETHECHierarchyWithImages(self.graph_dict['G_val'], self.graph_dict['G_val_tc'], has_negative=True, neg_to_pos_ratio=self.neg_to_pos_ratio)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_120": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECDBMerged(path_to_json='../database/ETHEC/test.json', path_to_images=image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json='../database/ETHEC/test.json', path_to_images=image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json=os.path.join(self.path_to_db, 'test.json'), path_to_images=self.image_dir, labelmap=labelmap, transform=val_test_data_transforms)",
                            "Call"
                        ],
                        [
                            "ETHECDBMerged(path_to_json=os.path.join(self.path_to_db, 'test.json'), path_to_images=self.image_dir, labelmap=labelmap, transform=val_test_data_transforms)",
                            "Call"
                        ],
                        [
                            "ETHECHierarchyWithImages(self.graph_dict['G_test'], self.graph_dict['G_test_tc'], has_negative=True, neg_to_pos_ratio=self.neg_to_pos_ratio)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_152": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_153": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_157": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "relu_163": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_247": {
                "variable": {
                    "value": "negative_from",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * self.neg_to_pos_ratio * self.num_edges",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_395": {
                "variable": {
                    "value": "predicted_from_embeddings_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_396": {
                "variable": {
                    "value": "predicted_to_embeddings_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_541": {
                "variable": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(S, min=0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_614": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_635": {
                "variable": {
                    "value": "self.dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECHierarchy(self.G, self.G_tc, has_negative=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_651": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_to_load",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'/home/ankit/learning_embeddings/exp/ethec_debug/oelwi_debug/full_1e-4_from_cluster/best_model_model.pth'",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_755": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_804": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_805": {
                "variable": {
                    "value": "self.img_feat_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.img_feat_net",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_834": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECDBMerged(path_to_json='../database/ETHEC/train.json', path_to_images=image_dir, labelmap=labelmap, transform=train_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json='../database/ETHEC/train.json', path_to_images=image_dir, labelmap=labelmap, transform=train_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json=os.path.join(self.path_to_db, 'train.json'), path_to_images=self.image_dir, labelmap=labelmap, transform=val_test_data_transforms)",
                            "Call"
                        ],
                        [
                            "ETHECDBMerged(path_to_json=os.path.join(self.path_to_db, 'train.json'), path_to_images=self.image_dir, labelmap=labelmap, transform=val_test_data_transforms)",
                            "Call"
                        ],
                        [
                            "ETHECHierarchyWithImages(self.graph_dict['G_train'], self.graph_dict['G_train_tc'], has_negative=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_838": {
                "variable": {
                    "value": "valloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECDBMerged(path_to_json='../database/ETHEC/val.json', path_to_images=image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json='../database/ETHEC/val.json', path_to_images=image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json=os.path.join(self.path_to_db, 'val.json'), path_to_images=self.image_dir, labelmap=labelmap, transform=val_test_data_transforms)",
                            "Call"
                        ],
                        [
                            "ETHECDBMerged(path_to_json=os.path.join(self.path_to_db, 'val.json'), path_to_images=self.image_dir, labelmap=labelmap, transform=val_test_data_transforms)",
                            "Call"
                        ],
                        [
                            "ETHECHierarchyWithImages(self.graph_dict['G_val'], self.graph_dict['G_val_tc'], has_negative=True, neg_to_pos_ratio=self.neg_to_pos_ratio)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_842": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECDBMerged(path_to_json='../database/ETHEC/test.json', path_to_images=image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json='../database/ETHEC/test.json', path_to_images=image_dir, labelmap=labelmap, transform=val_test_data_transforms, with_images=False)",
                            "Call"
                        ],
                        [
                            "ETHECDBMergedSmall(path_to_json=os.path.join(self.path_to_db, 'test.json'), path_to_images=self.image_dir, labelmap=labelmap, transform=val_test_data_transforms)",
                            "Call"
                        ],
                        [
                            "ETHECDBMerged(path_to_json=os.path.join(self.path_to_db, 'test.json'), path_to_images=self.image_dir, labelmap=labelmap, transform=val_test_data_transforms)",
                            "Call"
                        ],
                        [
                            "ETHECHierarchyWithImages(self.graph_dict['G_test'], self.graph_dict['G_test_tc'], has_negative=True, neg_to_pos_ratio=self.neg_to_pos_ratio)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MultiStepLR_852": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "milestones": {
                    "value": "self.lr_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_1030": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.path_to_save_model, '{}_model.pth'.format(epoch_to_load))",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_1037": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.path_to_save_model, '{}_img_feat_net.pth'.format(epoch_to_load))",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_165": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_168": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "torch.abs(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "torch.abs(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "torch.abs(self.fc2(x))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_188": {
                "data": {
                    "value": "status_data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_401": {
                "variable": {
                    "value": "predicted_from_embeddings_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(predicted_from_embeddings_all, predicted_from_embeddings)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_402": {
                "variable": {
                    "value": "predicted_to_embeddings_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(predicted_to_embeddings_all, predicted_to_embeddings)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_409": {
                "variable": {
                    "value": "e_for_u_v_positive_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_for_u_v_positive_all, e_for_u_v_positive)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_416": {
                "variable": {
                    "value": "e_for_u_v_negative_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_for_u_v_negative_all, e_for_u_v_negative)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_556": {
                "variable": {
                    "value": "e_for_u_v_positive_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_for_u_v_positive_all, e_for_u_v_positive)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_562": {
                "variable": {
                    "value": "e_for_u_v_negative_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_for_u_v_negative_all, e_for_u_v_negative)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_572": {
                "variable": {
                    "value": "negative_from",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * self.neg_to_pos_ratio * inputs_from.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_612": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_691": {
                "variable": {
                    "value": "predicted_from_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(predicted_from_embeddings, outputs_from.data)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_692": {
                "variable": {
                    "value": "predicted_to_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(predicted_to_embeddings, outputs_to.data)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_693": {
                "variable": {
                    "value": "e_positive",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_positive, e_for_u_v_positive.data)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_694": {
                "variable": {
                    "value": "e_negative",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_negative, e_for_u_v_negative.data)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "manual_seed_732": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_937": {
                "variable": {
                    "value": "e_positive",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_positive, e_for_u_v_positive.cpu().data)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_938": {
                "variable": {
                    "value": "e_negative",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_negative, e_for_u_v_negative.cpu().data)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "save_1008": {
                "obj": {
                    "value": "{'epoch': self.epoch, 'model_state_dict': self.model.state_dict(), 'optimizer_state_dict': self.optimizer.state_dict(), 'loss': loss, 'optimal_threshold': self.optimal_threshold}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.path_to_save_model, '{}_model.pth'.format(filename if filename else self.epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_1018": {
                "obj": {
                    "value": "{'epoch': self.epoch, 'model_state_dict': self.img_feat_net.state_dict(), 'optimizer_state_dict': self.optimizer.state_dict(), 'loss': loss, 'optimal_threshold': self.optimal_threshold}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.path_to_save_model, '{}_img_feat_net.pth'.format(filename if filename else self.epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_171": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_174": {
                "variable": {
                    "value": "norm_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "torch.abs(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "torch.abs(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, original_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.view(original_shape)",
                            "Call"
                        ],
                        [
                            "torch.abs(self.fc2(x))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_175": {
                "variable": {
                    "value": "x[norm_x > 1.0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x[norm_x > 1.0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_178": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_394": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_415": {
                "input": {
                    "value": "neg_term",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_425": {
                "variable": {
                    "value": "predicted_from_embeddings_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(predicted_from_embeddings_all, predicted_from_embeddings)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_426": {
                "variable": {
                    "value": "predicted_to_embeddings_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(predicted_to_embeddings_all, predicted_to_embeddings)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_435": {
                "variable": {
                    "value": "e_for_u_v_positive_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_for_u_v_positive_all, e_for_u_v_positive)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_443": {
                "variable": {
                    "value": "negative_from",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * self.neg_to_pos_ratio * inputs_from[batch_id].shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_464": {
                "variable": {
                    "value": "e_for_u_v_negative_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_for_u_v_negative_all, e_for_u_v_negative)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_508": {
                "variable": {
                    "value": "retval",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(retval, img_feat.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_531": {
                "input": {
                    "value": "self.alpha - self.E_operator(x, y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_541": {
                "input": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.alpha - s_for_u_v_positive + s_for_u_v_negative",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.clamp(S, min=0.0), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_546": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_564": {
                "input": {
                    "value": "self.get_image_label_loss(e_for_u_v_positive, e_for_u_v_negative)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_603": {
                "input": {
                    "value": "self.get_image_label_loss(torch.squeeze(e_for_u_v_positive_all), torch.squeeze(e_for_u_v_negative_all))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_670": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_671": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_count_757": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_901": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1079": {
                "data": {
                    "value": "labels_in_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[node for node in nodes_in_graph if type(node) == int]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "topk_1094": {
                "variable": {
                    "value": "(values, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "e[0, self.labelmap.level_start[level_id]:self.labelmap.level_stop[level_id]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "k": {
                    "value": "max(k)",
                    "type": "Call",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_399": {
                "data": {
                    "value": "inputs_from",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_433": {
                "input": {
                    "value": "e_for_u_v_positive",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.positive_pair(predicted_from_embeddings[positive_indices], predicted_to_embeddings[positive_indices])",
                            "Call"
                        ],
                        [
                            "self.positive_pair(predicted_from_embeddings[positive_indices], predicted_to_embeddings[positive_indices])",
                            "Call"
                        ],
                        [
                            "self.positive_pair(predicted_from_embeddings[:, 0, :], predicted_to_embeddings[:, 0, :])",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_463": {
                "input": {
                    "value": "neg_term",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_491": {
                "variable": {
                    "value": "img_emb_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.feature_dict[sublist]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_491": {
                "variable": {
                    "value": "img_emb_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_492": {
                "variable": {
                    "value": "retval",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(x), img_emb_feat.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_495": {
                "variable": {
                    "value": "retval[sublist_id, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.feature_dict[sublist]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_495": {
                "variable": {
                    "value": "retval[sublist_id, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_507": {
                "variable": {
                    "value": "retval",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_available_614": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_680": {
                "mode": {
                    "value": "phase == 'train'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "is_available_755": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_758": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_918": {
                "mode": {
                    "value": "phase == 'train'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "SGD_1044": {
                "params": {
                    "value": "self.params_to_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_219": {
                "data": {
                    "value": "self.edge_list[item][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_500": {
                "variable": {
                    "value": "img_emb_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.feature_dict[filename]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_500": {
                "variable": {
                    "value": "img_emb_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_501": {
                "variable": {
                    "value": "img_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(sublist), img_emb_feat.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_504": {
                "variable": {
                    "value": "img_feat[file_id, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.feature_dict[filename]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_504": {
                "variable": {
                    "value": "img_feat[file_id, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_603": {
                "input": {
                    "value": "e_for_u_v_negative_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((e_for_u_v_negative_all, e_for_u_v_negative))",
                            "Call"
                        ],
                        [
                            "torch.cat((e_for_u_v_negative_all, e_for_u_v_negative))",
                            "Call"
                        ],
                        [
                            "torch.cat((e_for_u_v_negative_all, e_for_u_v_negative))",
                            "Call"
                        ],
                        [
                            "e_for_u_v_negative_all.view(inputs_from.shape[0], 2 * self.neg_to_pos_ratio, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_1046": {
                "params": {
                    "value": "self.params_to_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_405": {
                "data": {
                    "value": "status",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_412": {
                "data": {
                    "value": "status",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "network/plot_contours.py": {
        "torch": {
            "device_115": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "sum_119": {
                "variable": {
                    "value": "correct_positives",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.e_for_u_v_positive <= threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_120": {
                "variable": {
                    "value": "correct_negatives",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.e_for_u_v_negative > threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_150": {
                "variable": {
                    "value": "correct_positives",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.e_for_u_v_positive <= self.threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_151": {
                "variable": {
                    "value": "correct_negatives",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.e_for_u_v_negative > self.threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "tensor_178": {
                "data": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.sum(np.multiply(x, y), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "network/viz_hypernymy.py": {
        "torch": {
            "device_40": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_60": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_76": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.weights_to_load",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_174": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_218": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_219": {
                "variable": {
                    "value": "self.img_feat_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.img_feat_net",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_234": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_to_load",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'/cluster/scratch/adhall/exp/ethec/final_ec_full/load_emb_5k/50-50_hide_levels/ec_2d_2xlr_init_5k/weights/best_model.pth'",
                            "MethodArgument"
                        ],
                        [
                            "'/cluster/scratch/adhall/exp/ethec/final_ec_full/load_emb_5k/50-50_hide_levels/ec_2d_2xlr_init_5k/weights/250_model.pth'",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_239": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "img_weights_to_load",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'/cluster/scratch/adhall/exp/ethec/final_ec_full/load_emb_5k/50-50_hide_levels/ec_2d_2xlr_init_5k/weights/250_img_feat_net.pth'",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_253": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ETHECHierarchyWithImages(self.graph_dict['G_{}'.format(self.load_split)], imageless_dataloaders=None, transform=val_test_data_transforms, labelmap=self.labelmap)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_38": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_170": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_274": {
                "variable": {
                    "value": "to_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(to_elem), image_emb.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_118": {
                "data": {
                    "value": "[emb_id]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_300": {
                "data": {
                    "value": "[emb_id]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "network/viz_toy.py": {
        "torch": {
            "device_57": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_70": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_87": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_to_load",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'/home/ankit/Desktop/hypernym_viz/toy/t3/ec_ppl_0.01_0.01_best_model.pth'",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_55": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_121": {
                "data": {
                    "value": "[emb_id]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    }
}