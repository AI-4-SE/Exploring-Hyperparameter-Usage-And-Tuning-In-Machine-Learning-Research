{
    "examples/cnn_utils/cifar_resnet.py": {
        "torch": {
            "Conv2d_100": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_108": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_109": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_117": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_147": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_150": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "relu(out)",
                            "Call"
                        ],
                        [
                            "relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_167": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_175": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_179": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_201": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_205": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "relu(out)",
                            "Call"
                        ],
                        [
                            "relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size()[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_197": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_134": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_126": {
                "input": {
                    "value": "x[:, :, ::2, ::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 0, 0, planes // 4, planes // 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_135": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_142": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "examples/cnn_utils/datasets.py": {
        "torch": {
            "set_num_threads_123": {
                "int": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DistributedSampler_128": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(root=args.data_dir, train=True, download=download, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(args.train_dir, transform=transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])]))",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "dist.get_world_size()",
                    "type": "Call",
                    "possible_values": []
                },
                "rank": {
                    "value": "dist.get_rank()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_133": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(root=args.data_dir, train=True, download=download, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(args.train_dir, transform=transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedSampler(train_dataset, num_replicas=dist.get_world_size(), rank=dist.get_rank())",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_139": {
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(args.val_dir, transform=transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])]))",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "dist.get_world_size()",
                    "type": "Call",
                    "possible_values": []
                },
                "rank": {
                    "value": "dist.get_rank()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_144": {
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(args.val_dir, transform=transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.val_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "val_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedSampler(val_dataset, num_replicas=dist.get_world_size(), rank=dist.get_rank())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/cnn_utils/engine.py": {
        "torch": {
            "tensor_34": {
                "variable": {
                    "value": "step_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "variable": {
                    "value": "step_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/cnn_utils/optimizers.py": {
        "torch": {
            "SGD_29": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.base_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LambdaLR_40": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), lr=args.base_lr, momentum=args.momentum, weight_decay=args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_lr_schedule(dist.get_world_size(), args.warmup_epochs, args.lr_decay)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/torch_cifar10_resnet.py": {
        "torch": {
            "DistributedDataParallel_303": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.get_model(args.model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_339": {
                "variable": {
                    "value": "loss_func",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradScaler_326": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_344": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.checkpoint_format.format(epoch=args.resume_from_epoch)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'cuda:0': f'cuda:{args.local_rank}'}",
                            "Dict"
                        ]
                    ]
                }
            },
            "is_available_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_270": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_271": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_310": {
                "log_dir": {
                    "value": "args.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/torch_imagenet_resnet.py": {
        "torch": {
            "DistributedDataParallel_314": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.resnet50()",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank])",
                            "Call"
                        ],
                        [
                            "models.resnet101()",
                            "Call"
                        ],
                        [
                            "models.resnet152()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GradScaler_338": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_357": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.checkpoint_format.format(epoch=args.resume_from_epoch)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'cuda:0': f'cuda:{args.local_rank}'}",
                            "Dict"
                        ]
                    ]
                }
            },
            "is_available_263": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_279": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_280": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_321": {
                "log_dir": {
                    "value": "args.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/utils.py": {
        "torch": {
            "save_37": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model.state_dict(), 'optimizer': optimizer.state_dict(), 'preconditioner': preconditioner.state_dict() if preconditioner is not None else None, 'lr_scheduler': lr_scheduler.state_dict() if lr_scheduler is not None else None}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_54": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "variable": {
                    "value": "self.total",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_72": {
                "variable": {
                    "value": "self.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "kfac/assignment.py": {
        "torch": {}
    },
    "kfac/base_preconditioner.py": {
        "torch": {
            "no_grad_308": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_435": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_457": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "kfac/distributed.py": {
        "torch": {
            "triu_indices_422": {
                "variable": {
                    "value": "idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "row": {
                    "value": "tensor.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "col": {
                    "value": "tensor.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "triu_indices_455": {
                "variable": {
                    "value": "idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "row": {
                    "value": "rows",
                    "type": "variable",
                    "possible_values": []
                },
                "col": {
                    "value": "cols",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "triu_tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "triu_indices_457": {
                "variable": {
                    "value": "idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "row": {
                    "value": "rows",
                    "type": "variable",
                    "possible_values": []
                },
                "col": {
                    "value": "rows",
                    "type": "variable",
                    "possible_values": []
                },
                "offset": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "dst_tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_283": {
                "variable": {
                    "value": "future",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flatten(self._tensors)",
                            "Call"
                        ],
                        [
                            "tensor.contiguous()",
                            "Call"
                        ],
                        [
                            "get_triu(tensor)",
                            "Call"
                        ],
                        [
                            "tensor.contiguous()",
                            "Call"
                        ],
                        [
                            "get_triu(tensor)",
                            "Call"
                        ],
                        [
                            "get_triu(tensor)",
                            "Call"
                        ]
                    ]
                },
                "src": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "group": {
                    "value": "group",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._allreduce_buckets.items()",
                            "Call"
                        ]
                    ]
                },
                "async_op": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_initialized_393": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_410": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Future_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "kfac/gpt_neox/assignment.py": {
        "torch": {}
    },
    "kfac/gpt_neox/layer.py": {
        "torch": {
            "cat_313": {
                "variable": {
                    "value": "self.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grad_partition, bias_grad.view(-1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_231": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grad, bias_grad.view(-1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_276": {
                "input": {
                    "value": "grad_partition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.module.get_weight_grad()",
                            "Call"
                        ],
                        [
                            "weight_grads[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_281": {
                "input": {
                    "value": "bias_grad_partition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.module.get_bias_grad()",
                            "Call"
                        ]
                    ]
                }
            },
            "broadcast_307": {
                "tensor": {
                    "value": "bias_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "gather_from_model_parallel_region(bias_grad_partition, dst=self.primary_rank, model_parallel_group=self.model_parallel_group, dim=0)",
                            "Call"
                        ],
                        [
                            "bias_grad_partition",
                            "variable"
                        ],
                        [
                            "bias_grad_partition",
                            "variable"
                        ],
                        [
                            "grad[:, -1:].view(bias_grad_shape).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "src": {
                    "value": "self.primary_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "group": {
                    "value": "self.model_parallel_group",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "outer_246": {
                "input": {
                    "value": "self.dg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "vec2": {
                    "value": "self.da",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "kfac/gpt_neox/modules.py": {
        "torch": {}
    },
    "kfac/gpt_neox/mpu.py": {
        "torch": {
            "split_124": {
                "variable": {
                    "value": "tensor_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.float()",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "dim_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.size()[dim]",
                            "Subscript"
                        ],
                        [
                            "dim_size // num_partitions",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tensor_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.empty_like(tensor) for _ in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "torch.split(tensor, dim_size, dim=dim)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_like_52": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "kfac/gpt_neox/preconditioner.py": {
        "torch": {
            "load_418": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.factor_checkpoint_dir, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.factor_checkpoint_dir, name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_444": {
                "obj": {
                    "value": "layer_state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.items()",
                            "Call"
                        ],
                        [
                            "layer.state_dict()",
                            "Call"
                        ],
                        [
                            "partition",
                            "variable"
                        ],
                        [
                            "layer.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.factor_checkpoint_dir, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.factor_checkpoint_dir, name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "kfac/layers/base.py": {
        "torch": {
            "empty_like_245": {
                "variable": {
                    "value": "self.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.module.get_grad()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_387": {
                "variable": {
                    "value": "self.a_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "a_new.new(a_new.shape[0]).fill_(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_403": {
                "variable": {
                    "value": "self.g_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "g_new.new(g_new.shape[0]).fill_(1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "kfac/layers/eigen.py": {
        "torch": {
            "clamp_320": {
                "variable": {
                    "value": "self.da",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.da",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_343": {
                "variable": {
                    "value": "self.dg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "empty_203": {
                "variable": {
                    "value": "self.qa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.a_factor.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.a_factor.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.inv_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_208": {
                "variable": {
                    "value": "self.da",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.a_factor.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.a_factor.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.inv_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_255": {
                "variable": {
                    "value": "self.qg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.g_factor.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.g_factor.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.inv_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eigh_309": {
                "variable": {
                    "value": "(self.da, self.qa)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "A": {
                    "value": "self.a_factor.to(torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eig_313": {
                "variable": {
                    "value": "(da, qa)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.a_factor.to(torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eigh_330": {
                "variable": {
                    "value": "(self.dg, self.qg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "A": {
                    "value": "self.g_factor.to(torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eig_334": {
                "variable": {
                    "value": "(dg, qg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.g_factor.to(torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_261": {
                "variable": {
                    "value": "self.dg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.g_factor.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.g_factor.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.inv_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_268": {
                "variable": {
                    "value": "self.dgda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.g_factor.shape[0], self.a_factor.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.g_factor.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.inv_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "outer_345": {
                "input": {
                    "value": "self.dg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "vec2": {
                    "value": "self.da",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "outer_378": {
                "input": {
                    "value": "cast(torch.Tensor, self.dg)",
                    "type": "Call",
                    "possible_values": []
                },
                "vec2": {
                    "value": "cast(torch.Tensor, self.da)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "kfac/layers/inverse.py": {
        "torch": {
            "diag_197": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.a_factor.new(self.a_factor.shape[0]).fill_(damping)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inv_201": {
                "variable": {
                    "value": "self.a_inv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "A": {
                    "value": "a.to(torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_208": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.g_factor.new(self.g_factor.shape[0]).fill_(damping)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inv_212": {
                "variable": {
                    "value": "self.g_inv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "A": {
                    "value": "g.to(torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_135": {
                "variable": {
                    "value": "self.a_inv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.a_factor.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.a_factor.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.inv_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_172": {
                "variable": {
                    "value": "self.g_inv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.g_factor.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.g_factor.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.inv_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "kfac/layers/modules.py": {
        "torch": {
            "cat_65": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[g, self.module.bias.grad.view(-1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_204": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grad, self.module.bias.grad.view(-1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_224": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.module.weight.size(1) + int(self.has_bias())",
                            "BinOp"
                        ],
                        [
                            "in_ch * ksize0 * ksize1 + int(self.has_bias())",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.pad(x, (padding[1], padding[1], padding[0], padding[0])).data",
                            "Attribute"
                        ],
                        [
                            "x.unfold(2, kernel_size[0], stride[0])",
                            "Call"
                        ],
                        [
                            "x.unfold(3, kernel_size[1], stride[1])",
                            "Call"
                        ],
                        [
                            "x.transpose_(1, 2).transpose_(2, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1), x.size(2), x.size(3) * x.size(4) * x.size(5))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(padding[1], padding[1], padding[0], padding[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "kfac/layers/register.py": {
        "torch": {}
    },
    "kfac/layers/utils.py": {
        "torch": {
            "cat_79": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "int(not batch_first)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_14": {
                "tensors": {
                    "value": "[tensor, tensor.new_ones(shape)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "kfac/preconditioner.py": {
        "torch": {
            "is_initialized_293": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "kfac/tracing.py": {
        "torch": {}
    },
    "testing/assignment.py": {
        "torch": {}
    },
    "testing/distributed.py": {
        "torch": {}
    },
    "testing/gpt_neox.py": {
        "torch": {
            "Sequential_51": {
                "*args": {
                    "value": "*ls",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "testing/models.py": {
        "torch": {
            "Linear_19": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_22": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16 * 6 * 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_51": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "functional.relu(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_pool2d_53": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "functional.relu(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_55": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_56": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_51": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_53": {
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/base_preconditioner_test.py": {
        "torch": {
            "MSELoss_288": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_289": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "rand_312": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_313": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_363": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_364": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_374": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_375": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_350": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_351": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_322": {
                "input": {
                    "value": "grad_weight_linear2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.linear2.weight.grad",
                            "Attribute"
                        ]
                    ]
                },
                "other": {
                    "value": "model.linear2.weight.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_326": {
                "input": {
                    "value": "grad_bias_linear2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.linear2.bias.grad",
                            "Attribute"
                        ]
                    ]
                },
                "other": {
                    "value": "model.linear2.bias.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributed_test.py": {
        "torch": {
            "rand_29": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_45": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_150": {
                "variable": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_155": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[2, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_34": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_triu(x)",
                            "Call"
                        ],
                        [
                            "torch.rand(shape)",
                            "Call"
                        ],
                        [
                            "t + t.T",
                            "BinOp"
                        ],
                        [
                            "torch.ones(shape)",
                            "Call"
                        ],
                        [
                            "rank * torch.ones(shape)",
                            "BinOp"
                        ],
                        [
                            "torch.ones(shape, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.ones(shape, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "t_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fill_triu(t.size(), t_tri)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_77": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_174": {
                "input": {
                    "value": "s * t1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "f1.value()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_178": {
                "input": {
                    "value": "s * t2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "f2.value()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_290": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_41": {
                "*size": {
                    "value": "[4, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_43": {
                "*size": {
                    "value": "[2, 2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_222": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_82": {
                "input": {
                    "value": "t_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "comm.allreduce(t, symmetric=symmetric)",
                            "Call"
                        ],
                        [
                            "t_res.wait()",
                            "Call"
                        ],
                        [
                            "comm.broadcast(t, src=0, symmetric=symmetric)",
                            "Call"
                        ],
                        [
                            "t_res.wait()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_117": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_123": {
                "input": {
                    "value": "t_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "comm.allreduce(t, symmetric=symmetric)",
                            "Call"
                        ],
                        [
                            "t_res.wait()",
                            "Call"
                        ],
                        [
                            "comm.broadcast(t, src=0, symmetric=symmetric)",
                            "Call"
                        ],
                        [
                            "t_res.wait()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_308": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensors",
                            "variable"
                        ],
                        [
                            "tensor.wait()",
                            "Call"
                        ],
                        [
                            "tensors",
                            "variable"
                        ],
                        [
                            "tensor.wait()",
                            "Call"
                        ]
                    ]
                }
            },
            "numel_82": {
                "input": {
                    "value": "t_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "comm.allreduce(t, symmetric=symmetric)",
                            "Call"
                        ],
                        [
                            "t_res.wait()",
                            "Call"
                        ],
                        [
                            "comm.broadcast(t, src=0, symmetric=symmetric)",
                            "Call"
                        ],
                        [
                            "t_res.wait()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_235": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensors",
                            "variable"
                        ],
                        [
                            "tensor.wait()",
                            "Call"
                        ],
                        [
                            "tensors",
                            "variable"
                        ],
                        [
                            "tensor.wait()",
                            "Call"
                        ]
                    ]
                }
            },
            "numel_308": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensors",
                            "variable"
                        ],
                        [
                            "tensor.wait()",
                            "Call"
                        ],
                        [
                            "tensors",
                            "variable"
                        ],
                        [
                            "tensor.wait()",
                            "Call"
                        ]
                    ]
                }
            },
            "numel_235": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensors",
                            "variable"
                        ],
                        [
                            "tensor.wait()",
                            "Call"
                        ],
                        [
                            "tensors",
                            "variable"
                        ],
                        [
                            "tensor.wait()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/gpt_neox/gpt_modules_test.py": {
        "torch": {}
    },
    "tests/gpt_neox/gpt_mpu_test.py": {
        "torch": {
            "zeros_81": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_85": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[2, 11]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[6, 18]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_99": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[6, 18]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_36": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/gpt_neox/gpt_preconditioner_test.py": {
        "torch": {
            "Linear_42": {
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_123": {
                "variable": {
                    "value": "layer.a_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_124": {
                "variable": {
                    "value": "layer.g_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_219": {
                "variable": {
                    "value": "layer.a_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_220": {
                "variable": {
                    "value": "layer.g_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/integration/mnist_integration_test.py": {
        "torch": {
            "Adadelta_124": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_125": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adadelta(model.parameters(), lr=0.1)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.7",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_47": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_48": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "576",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_55": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_57": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool2d_58": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_60": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_62": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "nll_loss_80": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_loader",
                            "variable"
                        ],
                        [
                            "test_loader",
                            "variable"
                        ]
                    ]
                }
            },
            "manual_seed_105": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_110": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FastMNIST('/tmp/MNIST-data', train=True, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_116": {
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FastMNIST('/tmp/MNIST-data', train=False, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_65": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/layers/layers_test.py": {
        "torch": {
            "Linear_220": {
                "variable": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ]
                    ]
                }
            },
            "rand_221": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, in_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_222": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, out_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_326": {
                "variable": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ]
                    ]
                }
            },
            "rand_327": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, in_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_328": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, out_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ]
                    ]
                }
            },
            "rand_115": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, in_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_116": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, out_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_312": {
                "input": {
                    "value": "layer.a_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "state_dict['A']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_313": {
                "input": {
                    "value": "layer.g_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "state_dict['G']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_320": {
                "input": {
                    "value": "10 * grad",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "module_helper.get_grad()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_210": {
                "input": {
                    "value": "weight_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module.weight.grad",
                            "Attribute"
                        ]
                    ]
                },
                "other": {
                    "value": "module.weight.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_211": {
                "input": {
                    "value": "bias_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module.bias.grad",
                            "Attribute"
                        ]
                    ]
                },
                "other": {
                    "value": "module.bias.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradScaler_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradScaler_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/layers/modules_test.py": {
        "torch": {
            "Conv2d_30": {
                "variable": {
                    "value": "conv2d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_42": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, in_ch, hin, win)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_43": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, out_ch, hout, wout)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "linear",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_88": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "in_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ]
                    ]
                }
            },
            "rand_89": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "equal_59": {
                "input": {
                    "value": "old_weight_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "helper.get_weight_grad()",
                            "Call"
                        ],
                        [
                            "helper.get_weight_grad()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "helper.get_weight_grad()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_105": {
                "input": {
                    "value": "old_weight_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "helper.get_weight_grad()",
                            "Call"
                        ],
                        [
                            "helper.get_weight_grad()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "helper.get_weight_grad()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_61": {
                "input": {
                    "value": "old_bias_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "helper.get_bias_grad()",
                            "Call"
                        ],
                        [
                            "helper.get_bias_grad()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "helper.get_bias_grad()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_107": {
                "input": {
                    "value": "old_bias_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "helper.get_bias_grad()",
                            "Call"
                        ],
                        [
                            "helper.get_bias_grad()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "helper.get_bias_grad()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_109": {
                "*size": {
                    "value": "[batch_size, in_shape]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_110": {
                "*size": {
                    "value": "[batch_size, out_shape]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/layers/register_test.py": {
        "torch": {
            "Linear_90": {
                "variable": {
                    "value": "linear",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_99": {
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_101": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_121": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/layers/utils_test.py": {
        "torch": {
            "rand_18": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_69": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_cov(a, b, scale)",
                            "Call"
                        ],
                        [
                            "reshape_data(tensors, batch_first=True, collapse_dims=collapse_dims)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_93": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_71": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_cov(a, b, scale)",
                            "Call"
                        ],
                        [
                            "reshape_data(tensors, batch_first=True, collapse_dims=collapse_dims)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "out.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_27": {
                "*size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_28": {
                "*size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_29": {
                "*size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "*size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_31": {
                "*size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "data": {
                    "value": "[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_40": {
                "data": {
                    "value": "[[22.0, 26.0, 30.0], [26.0, 31.0, 36.0], [30.0, 36.0, 42.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "data": {
                    "value": "[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_46": {
                "data": {
                    "value": "[[9.0, 8.0, 7.0], [6.0, 5.0, 4.0], [3.0, 2.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "data": {
                    "value": "[[27.0, 21.0, 15.0], [36.0, 28.5, 21.0], [45.0, 36.0, 27.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_53": {
                "*size": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_54": {
                "*size": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_32": {
                "*size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_34": {
                "*size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/testing/distributed_wrapper_test.py": {
        "torch": {
            "is_initialized_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "all_44": {
                "input": {
                    "value": "x == result",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ones_40": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_42": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/training_test.py": {
        "torch": {
            "rand_21": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            },
            "rand_22": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            },
            "SGD_30": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MSELoss_39": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_initialized_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DistributedDataParallel_29": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TinyModel()",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}