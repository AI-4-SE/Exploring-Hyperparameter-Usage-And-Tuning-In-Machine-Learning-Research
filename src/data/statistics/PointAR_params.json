{
    "trainer/utils.py": {
        "sklearn": {
            "MinMaxScaler_28": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_40": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_loader_class(**train_loader_init_params)",
                            "Call"
                        ],
                        [
                            "DataLoader(train_loader, shuffle=True, pin_memory=True, num_workers=num_workers, batch_size=batch_size)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_47": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_loader_class(**train_loader_init_params)",
                            "Call"
                        ],
                        [
                            "DataLoader(valid_loader, shuffle=False, pin_memory=True, num_workers=num_workers, batch_size=batch_size)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_54": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_loader_class(**test_loader_init_params)",
                            "Call"
                        ],
                        [
                            "DataLoader(test_loader, shuffle=False, pin_memory=True, num_workers=num_workers, batch_size=batch_size)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "datasets/pointar/loader/fs.py": {
        "torch": {
            "from_numpy_38": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target_shc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.__load_target__(idx)",
                            "Call"
                        ],
                        [
                            "target_shc.reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_40": {
                "variable": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cloud[:3, :]",
                            "Subscript"
                        ],
                        [
                            "from_numpy(xyz)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_41": {
                "variable": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cloud[3:6, :]",
                            "Subscript"
                        ],
                        [
                            "from_numpy(rgb)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "datasets/pointar/loader/hdf5.py": {
        "torch": {
            "from_numpy_41": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target_shc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.__load_target__(idx)",
                            "Call"
                        ],
                        [
                            "target_shc.reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_43": {
                "variable": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cloud[:3, :]",
                            "Subscript"
                        ],
                        [
                            "from_numpy(xyz)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_44": {
                "variable": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cloud[3:6, :]",
                            "Subscript"
                        ],
                        [
                            "from_numpy(rgb)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "etc/pointconv_util.py": {
        "torch": {
            "arange_60": {
                "variable": {
                    "value": "batch_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ],
                        [
                            "xyz.shape[0]",
                            "Subscript"
                        ],
                        [
                            "xyz.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_77": {
                "variable": {
                    "value": "centroids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ],
                        [
                            "xyz.shape[0]",
                            "Subscript"
                        ],
                        [
                            "xyz.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "npoint",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "variable": {
                    "value": "farthest",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ],
                        [
                            "xyz.shape[0]",
                            "Subscript"
                        ],
                        [
                            "xyz.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_81": {
                "variable": {
                    "value": "batch_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ],
                        [
                            "xyz.shape[0]",
                            "Subscript"
                        ],
                        [
                            "xyz.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "variable": {
                    "value": "centroids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ],
                        [
                            "xyz.shape[0]",
                            "Subscript"
                        ],
                        [
                            "xyz.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "npoint",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_131": {
                "variable": {
                    "value": "group_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "topk_152": {
                "variable": {
                    "value": "(_, group_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sqrdists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "square_distance(new_xyz, xyz)",
                            "Call"
                        ],
                        [
                            "square_distance(new_xyz, xyz)",
                            "Call"
                        ],
                        [
                            "square_distance(xyz, xyz)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "nsample",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_40": {
                "input": {
                    "value": "src ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_41": {
                "input": {
                    "value": "dst ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_85": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(xyz - centroid) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_178": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz_norm, grouped_points]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_204": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, points.view(B, 1, N, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_234": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz_norm, grouped_points]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_258": {
                "variable": {
                    "value": "self.mlp_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_259": {
                "variable": {
                    "value": "self.mlp_bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_287": {
                "variable": {
                    "value": "self.mlp_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_288": {
                "variable": {
                    "value": "self.mlp_bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_318": {
                "variable": {
                    "value": "self.mlp_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_319": {
                "variable": {
                    "value": "self.mlp_bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_327": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16 * mlp[-1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mlp[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_328": {
                "variable": {
                    "value": "self.bn_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mlp[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_360": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_points.permute(0, 3, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "weights.permute(0, 3, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_364": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[batch_indices, idx, :]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([grouped_xyz_norm, grouped_points], dim=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz_norm",
                            "variable"
                        ],
                        [
                            "torch.cat([grouped_xyz, points.view(B, 1, N, -1)], dim=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "torch.cat([grouped_xyz_norm, grouped_points], dim=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz_norm",
                            "variable"
                        ],
                        [
                            "new_points.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(bn(conv(new_points)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(input=new_points.permute(0, 3, 1, 2), other=weights.permute(0, 3, 2, 1)).view(B, self.npoint, -1)",
                            "Call"
                        ],
                        [
                            "self.linear(new_points)",
                            "Call"
                        ],
                        [
                            "self.bn_linear(new_points.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "F.relu(new_points)",
                            "Call"
                        ],
                        [
                            "new_points.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(bn(conv(new_points)))",
                            "Call"
                        ],
                        [
                            "new_points * density_scale",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(input=new_points.permute(0, 3, 1, 2), other=weights.permute(0, 3, 2, 1)).view(B, self.npoint, -1)",
                            "Call"
                        ],
                        [
                            "self.linear(new_points)",
                            "Call"
                        ],
                        [
                            "self.bn_linear(new_points.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "F.relu(new_points)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_375": {
                "variable": {
                    "value": "self.mlp_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_376": {
                "variable": {
                    "value": "self.mlp_bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_384": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16 * mlp[-1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mlp[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_385": {
                "variable": {
                    "value": "self.bn_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mlp[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_428": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_points.permute(0, 3, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "weights.permute(0, 3, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_432": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[batch_indices, idx, :]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([grouped_xyz_norm, grouped_points], dim=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz_norm",
                            "variable"
                        ],
                        [
                            "torch.cat([grouped_xyz, points.view(B, 1, N, -1)], dim=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "torch.cat([grouped_xyz_norm, grouped_points], dim=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz_norm",
                            "variable"
                        ],
                        [
                            "new_points.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(bn(conv(new_points)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(input=new_points.permute(0, 3, 1, 2), other=weights.permute(0, 3, 2, 1)).view(B, self.npoint, -1)",
                            "Call"
                        ],
                        [
                            "self.linear(new_points)",
                            "Call"
                        ],
                        [
                            "self.bn_linear(new_points.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "F.relu(new_points)",
                            "Call"
                        ],
                        [
                            "new_points.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(bn(conv(new_points)))",
                            "Call"
                        ],
                        [
                            "new_points * density_scale",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(input=new_points.permute(0, 3, 1, 2), other=weights.permute(0, 3, 2, 1)).view(B, self.npoint, -1)",
                            "Call"
                        ],
                        [
                            "self.linear(new_points)",
                            "Call"
                        ],
                        [
                            "self.bn_linear(new_points.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "F.relu(new_points)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_39": {
                "input": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "dst.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_78": {
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ],
                        [
                            "xyz.shape[0]",
                            "Subscript"
                        ],
                        [
                            "xyz.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_248": {
                "input": {
                    "value": "-sqrdists / (2.0 * bandwidth * bandwidth)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_308": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn(conv(weights))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_356": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn(conv(new_points))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_419": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn(conv(new_points))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_88": {
                "input": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(B, N).to(device) * 10000000000.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_261": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_unit[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_262": {
                "num_features": {
                    "value": "hidden_unit[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_267": {
                "in_channels": {
                    "value": "hidden_unit[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_268": {
                "num_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_275": {
                "variable": {
                    "value": "density_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "density_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn(conv(density_scale))",
                            "Call"
                        ],
                        [
                            "F.sigmoid(density_scale)",
                            "Call"
                        ],
                        [
                            "F.relu(density_scale)",
                            "Call"
                        ],
                        [
                            "grouped_density / inverse_max_density",
                            "BinOp"
                        ],
                        [
                            "self.densitynet(density_scale.permute(0, 3, 2, 1))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_277": {
                "variable": {
                    "value": "density_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "density_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn(conv(density_scale))",
                            "Call"
                        ],
                        [
                            "F.sigmoid(density_scale)",
                            "Call"
                        ],
                        [
                            "F.relu(density_scale)",
                            "Call"
                        ],
                        [
                            "grouped_density / inverse_max_density",
                            "BinOp"
                        ],
                        [
                            "self.densitynet(density_scale.permute(0, 3, 2, 1))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_265": {
                "in_channels": {
                    "value": "hidden_unit[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_unit[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_266": {
                "num_features": {
                    "value": "hidden_unit[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_290": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "mlp",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_291": {
                "num_features": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "mlp",
                            "variable"
                        ]
                    ]
                }
            },
            "Conv2d_293": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_unit[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_294": {
                "num_features": {
                    "value": "hidden_unit[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_299": {
                "in_channels": {
                    "value": "hidden_unit[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "mlp",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_300": {
                "num_features": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "mlp",
                            "variable"
                        ]
                    ]
                }
            },
            "Conv2d_322": {
                "in_channels": {
                    "value": "last_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "variable"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ],
                        [
                            "in_channel",
                            "variable"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "mlp",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_323": {
                "num_features": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "mlp",
                            "variable"
                        ]
                    ]
                }
            },
            "Conv2d_379": {
                "in_channels": {
                    "value": "last_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "variable"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ],
                        [
                            "in_channel",
                            "variable"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "mlp",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_380": {
                "num_features": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp",
                            "variable"
                        ],
                        [
                            "mlp",
                            "variable"
                        ]
                    ]
                }
            },
            "Conv2d_297": {
                "in_channels": {
                    "value": "hidden_unit[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_unit[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_298": {
                "num_features": {
                    "value": "hidden_unit[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "model/pointconv/__init__.py": {
        "torch": {
            "Tensor_19": {
                "variable": {
                    "value": "n_scale",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_20": {
                "variable": {
                    "value": "n_min",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mse_loss_28": {
                "variable": {
                    "value": "shc_mse_raw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(x_xyz, x_rgb)",
                            "Call"
                        ],
                        [
                            "self.forward(x_xyz, x_rgb)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "variable"
                        ],
                        [
                            "y",
                            "variable"
                        ]
                    ]
                }
            },
            "mse_loss_29": {
                "variable": {
                    "value": "shc_mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(source - n_min) / n_scale",
                            "BinOp"
                        ],
                        [
                            "(source - n_min) / n_scale",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "target_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(target - n_min) / n_scale",
                            "BinOp"
                        ],
                        [
                            "(target - n_min) / n_scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Tensor_38": {
                "variable": {
                    "value": "n_scale",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_39": {
                "variable": {
                    "value": "n_min",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mse_loss_47": {
                "variable": {
                    "value": "shc_mse_raw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(x_xyz, x_rgb)",
                            "Call"
                        ],
                        [
                            "self.forward(x_xyz, x_rgb)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "variable"
                        ],
                        [
                            "y",
                            "variable"
                        ]
                    ]
                }
            },
            "mse_loss_48": {
                "variable": {
                    "value": "shc_mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(source - n_min) / n_scale",
                            "BinOp"
                        ],
                        [
                            "(source - n_min) / n_scale",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "target_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(target - n_min) / n_scale",
                            "BinOp"
                        ],
                        [
                            "(target - n_min) / n_scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adam_14": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "model/pointconv/network.py": {
        "torch": {
            "Linear_30": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_31": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_32": {
                "variable": {
                    "value": "self.drop3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_35": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_36": {
                "variable": {
                    "value": "self.drop4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.fc5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hparams['n_shc']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_49": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l2_points.view(B, 256)",
                            "Call"
                        ],
                        [
                            "self.drop3(F.relu(self.bn3(self.fc3(x))))",
                            "Call"
                        ],
                        [
                            "self.drop4(F.relu(self.bn4(self.fc4(x))))",
                            "Call"
                        ],
                        [
                            "self.fc5(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_46": {
                "input": {
                    "value": "self.bn3(self.fc3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_47": {
                "input": {
                    "value": "self.bn4(self.fc4(x))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "zeros_77": {
                "*size": {
                    "value": "(1, 3, n_points)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "*size": {
                    "value": "(1, 3, n_points)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_71": {
                "ndarray": {
                    "value": "scaler.min_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "*size": {
                    "value": "27",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_72": {
                "ndarray": {
                    "value": "scaler.scale_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_72": {
                "*size": {
                    "value": "27",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}