{
    "adapt.py": {
        "torch": {
            "cdist_37": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x / torch.norm(x, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "zip(t_input, t_output)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "x2": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x / torch.norm(x, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "zip(t_input, t_output)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_50": {
                "variable": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenizer.convert_tokens_to_ids(characters)",
                            "Call"
                        ],
                        [
                            "torch.tensor(input_).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(tokenizer.convert_tokens_to_ids(samples)).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_57": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "emb.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_98": {
                "variable": {
                    "value": "dev",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_44": {
                "condition": {
                    "value": "label == 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(dist - margin).clamp(min=0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(margin - dist).clamp(min=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_65": {
                "variable": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tokenizer.convert_tokens_to_ids(samples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_96": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_34": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x / torch.norm(x, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "zip(t_input, t_output)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_131": {
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_83": {
                "obj": {
                    "value": "emb.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.out",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "csc_base.py": {
        "torch": {
            "device_95": {
                "variable": {
                    "value": "dev",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_109": {
                "variable": {
                    "value": "batches",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "list(zip(util.to_tensors(vocab, dev, t_input), util.to_tensors(vocab, dev, t_output)))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collate",
                            "Call"
                        ]
                    ]
                }
            },
            "LambdaLR_24": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_lambda",
                            "Call"
                        ]
                    ]
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_94": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_131": {
                "variable": {
                    "value": "batches",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.utils.rnn.pad_sequence(in_, batch_first=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(in_, batch_first=True)",
                            "Call"
                        ],
                        [
                            "util.to_tensors(vocab, dev, util.read(config['test']['input']))",
                            "Call"
                        ],
                        [
                            "util.to_tensors(vocab, dev, util.read(d['input']))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "pad_sequence_55": {
                "variable": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "in_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batches",
                            "variable"
                        ],
                        [
                            "batches",
                            "variable"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_sequence_57": {
                "variable": {
                    "value": "ref_cor",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "ref_cor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batches",
                            "variable"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(ref_cor, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_61": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob[in_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "ref_cor[in_mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_sequence_80": {
                "variable": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "in_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batches",
                            "variable"
                        ],
                        [
                            "batches",
                            "variable"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_83": {
                "variable": {
                    "value": "pred_cor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(input_, attention_mask=in_mask)[0]",
                            "Subscript"
                        ],
                        [
                            "net(input_, attention_mask=in_mask)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_123": {
                "dataset": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.utils.rnn.pad_sequence(in_, batch_first=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(in_, batch_first=True)",
                            "Call"
                        ],
                        [
                            "util.to_tensors(vocab, dev, util.read(config['test']['input']))",
                            "Call"
                        ],
                        [
                            "util.to_tensors(vocab, dev, util.read(d['input']))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "csc_fixedfilt.py": {
        "torch": {
            "device_55": {
                "variable": {
                    "value": "dev",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_80": {
                "variable": {
                    "value": "batches",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.utils.rnn.pad_sequence(in_, batch_first=True)",
                            "Call"
                        ],
                        [
                            "util.to_tensors(vocab, dev, util.read(config['test']['input']))",
                            "Call"
                        ],
                        [
                            "util.to_tensors(vocab, dev, util.read(d['input']))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "no_grad_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_sequence_40": {
                "variable": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "in_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batches",
                            "variable"
                        ],
                        [
                            "in_",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_44": {
                "variable": {
                    "value": "pred_cor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(input_, attention_mask=in_mask)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "dev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_29": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_prob[i, j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_73": {
                "dataset": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.utils.rnn.pad_sequence(in_, batch_first=True)",
                            "Call"
                        ],
                        [
                            "util.to_tensors(vocab, dev, util.read(config['test']['input']))",
                            "Call"
                        ],
                        [
                            "util.to_tensors(vocab, dev, util.read(d['input']))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "csc_headfilt.py": {
        "torch": {
            "device_54": {
                "variable": {
                    "value": "dev",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_81": {
                "variable": {
                    "value": "batches",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.utils.rnn.pad_sequence(in_, batch_first=True)",
                            "Call"
                        ],
                        [
                            "util.to_tensors(vocab, dev, util.read(config['test']['input']))",
                            "Call"
                        ],
                        [
                            "util.to_tensors(vocab, dev, util.read(d['input']))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "no_grad_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_sequence_39": {
                "variable": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "in_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batches",
                            "variable"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_43": {
                "variable": {
                    "value": "pred_cor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(input_, attention_mask=in_mask)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_67": {
                "f": {
                    "value": "args.emb_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "data": {
                    "value": "range(len(vocab))",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "dev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(net.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_74": {
                "dataset": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.utils.rnn.pad_sequence(in_, batch_first=True)",
                            "Call"
                        ],
                        [
                            "util.to_tensors(vocab, dev, util.read(config['test']['input']))",
                            "Call"
                        ],
                        [
                            "util.to_tensors(vocab, dev, util.read(d['input']))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "estimateNegDist.py": {
        "torch": {
            "cdist_25": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x / torch.norm(x, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "x2": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x / torch.norm(x, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenizer.convert_tokens_to_ids(characters)",
                            "Call"
                        ],
                        [
                            "torch.tensor(input_).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_22": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x / torch.norm(x, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_55": {
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "imitation.py": {
        "torch": {
            "cdist_33": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x / torch.norm(x, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "x2": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x / torch.norm(x, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_46": {
                "variable": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenizer.convert_tokens_to_ids(characters)",
                            "Call"
                        ],
                        [
                            "torch.tensor(input_).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(tokenizer.convert_tokens_to_ids(samples)).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_53": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "emb.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_40": {
                "condition": {
                    "value": "label == 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(dist - margin).clamp(min=0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(margin - dist).clamp(min=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_60": {
                "variable": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tokenizer.convert_tokens_to_ids(samples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_92": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_30": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x / torch.norm(x, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_78": {
                "obj": {
                    "value": "emb.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.out",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nnblk/hier_emb.py": {
        "torch": {
            "Embedding_36": {
                "variable": {
                    "value": "self.sub_char",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "new_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(conv)",
                            "Call"
                        ],
                        [
                            "new_size + 1",
                            "BinOp"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "5 * self.embedding_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.Wlh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5 * self.embedding_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.Wrh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5 * self.embedding_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_48": {
                "variable": {
                    "value": "sum_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[n[3].view(1, -1) for n in nodes]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "chunk_49": {
                "variable": {
                    "value": "(ig, lfg, rfg, og, ug)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sum_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([n[3].view(1, -1) for n in nodes])",
                            "Call"
                        ],
                        [
                            "torch.cat([n[3].view(1, -1) for n in nodes]) + self.Wlh(torch.cat([n[4].view(1, -1) for n in ln])) + self.Wrh(torch.cat([n[4].view(1, -1) for n in rn]))",
                            "BinOp"
                        ]
                    ]
                },
                "chunks": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_64": {
                "variable": {
                    "value": "(ig, lfg, rfg, og, ug)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sum_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([n[3].view(1, -1) for n in nodes])",
                            "Call"
                        ],
                        [
                            "torch.cat([n[3].view(1, -1) for n in nodes]) + self.Wlh(torch.cat([n[4].view(1, -1) for n in ln])) + self.Wrh(torch.cat([n[4].view(1, -1) for n in rn]))",
                            "BinOp"
                        ]
                    ]
                },
                "chunks": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "to_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.lut[k] for k in input.view(input.numel()).cpu().numpy()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "unique_76": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_51": {
                "input": {
                    "value": "ig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(sum_, 5, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.chunk(sum_, 5, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_51": {
                "input": {
                    "value": "ug",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(sum_, 5, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.chunk(sum_, 5, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_52": {
                "input": {
                    "value": "og",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(sum_, 5, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.chunk(sum_, 5, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_52": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(ig) * torch.tanh(ug)",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(lfg) * torch.cat([n[5].view(1, -1) for n in ln]) + torch.sigmoid(rfg) * torch.cat([n[5].view(1, -1) for n in rn]) + torch.sigmoid(ig) * torch.tanh(ug)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_69": {
                "input": {
                    "value": "og",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(sum_, 5, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.chunk(sum_, 5, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_69": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(ig) * torch.tanh(ug)",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(lfg) * torch.cat([n[5].view(1, -1) for n in ln]) + torch.sigmoid(rfg) * torch.cat([n[5].view(1, -1) for n in rn]) + torch.sigmoid(ig) * torch.tanh(ug)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_60": {
                "tensors": {
                    "value": "[n[3].view(1, -1) for n in nodes]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_62": {
                "tensors": {
                    "value": "[n[4].view(1, -1) for n in rn]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sigmoid_68": {
                "input": {
                    "value": "ig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(sum_, 5, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.chunk(sum_, 5, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_68": {
                "input": {
                    "value": "ug",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(sum_, 5, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.chunk(sum_, 5, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_61": {
                "tensors": {
                    "value": "[n[4].view(1, -1) for n in ln]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sigmoid_66": {
                "input": {
                    "value": "lfg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(sum_, 5, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.chunk(sum_, 5, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_66": {
                "tensors": {
                    "value": "[n[5].view(1, -1) for n in ln]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sigmoid_67": {
                "input": {
                    "value": "rfg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(sum_, 5, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.chunk(sum_, 5, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_67": {
                "tensors": {
                    "value": "[n[5].view(1, -1) for n in rn]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "util.py": {
        "torch": {
            "Linear_41": {
                "variable": {
                    "value": "new_decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "new_num_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_num_tokens",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tensor_44": {
                "variable": {
                    "value": "new_bias",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_53": {
                "variable": {
                    "value": "model.cls.predictions.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "new_bias.to(old_bias.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cdist_61": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "x.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x2": {
                    "value": "y.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_sequence_24": {
                "sequences": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.ones(len(s)) for s in sequences]",
                            "ListComp"
                        ],
                        [
                            "torch.zeros((N, N)) if tensor else np.zeros((N, N))",
                            "IfExp"
                        ],
                        [
                            "{c: float(l[l.index('=') + 1]) for (c, l) in zip(cols, lines)}",
                            "DictComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "batch_first",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_23": {
                "*size": {
                    "value": "len(s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_58": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x / torch.norm(x, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_59": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y / torch.norm(y, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log1p_71": {
                "input": {
                    "value": "(delta * factor).exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_109": {
                "*size": {
                    "value": "(N, N)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    }
}