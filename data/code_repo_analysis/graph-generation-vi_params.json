{
    "args.py": {
        "torch": {
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "datasets/preprocess.py": {
        "torch": {
            "randperm_96": {
                "variable": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(graph.nodes())",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_157": {
                "variable": {
                    "value": "choice",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_163": {
                "variable": {
                    "value": "chosen_node_id",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "len(neigh)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "DataLoader_77": {
                "variable": {
                    "value": "dataloader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Graph_from_file(args, graphs_train, feature_map)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset_train.collate_batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_80": {
                "variable": {
                    "value": "dataloader_validate",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_validate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Graph_from_file(args, graphs_validate, feature_map)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset_validate.collate_batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_105": {
                "variable": {
                    "value": "gcn_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.gcn_pretrain_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/data.py": {
        "torch": {
            "zeros_31": {
                "variable": {
                    "value": "node_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/dgmg/data.py": {
        "torch": {
            "randperm_32": {
                "variable": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(graph.nodes())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_68": {
                "variable": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(in_graph.nodes())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/dgmg/model.py": {
        "torch": {
            "sum_86": {
                "variable": {
                    "value": "graph_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(node_embedding_graph, node_embedding_graph_gate)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_93": {
                "variable": {
                    "value": "init_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(node_embedding_init, node_embedding_init_gate)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.m_uv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GRUCell_16": {
                "variable": {
                    "value": "self.f_n_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "h_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "h_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.m_uv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GRUCell_19": {
                "variable": {
                    "value": "self.f_n_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "h_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "h_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.f_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "h_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "self.f_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(h_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.f_m_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "h_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.f_gate_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(h_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.f_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.f_an",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(h_size * 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.f_ae",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(h_size * 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.f_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "node_self_neighbor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[node_embedding[j] for j in node_neighbor[i]]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_61": {
                "variable": {
                    "value": "message",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.m_uv_1(torch.cat((node_self, node_self_neighbor), dim=1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "node_self_neighbor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[node_embedding[j] for j in node_neighbor[i]]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_73": {
                "variable": {
                    "value": "message",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.m_uv_1(torch.cat((node_self, node_self_neighbor), dim=1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mul_86": {
                "input": {
                    "value": "node_embedding_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.f_m(node_embedding_cat)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "node_embedding_graph_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.f_gate(node_embedding_cat)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_93": {
                "input": {
                    "value": "node_embedding_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.f_m_init(node_embedding_cat)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "node_embedding_init_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.f_gate_init(node_embedding_cat)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "h_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "h_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "h_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_44": {
                "in_features": {
                    "value": "h_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_61": {
                "tensors": {
                    "value": "(node_self, node_self_neighbor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_73": {
                "tensors": {
                    "value": "(node_self, node_self_neighbor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "*size": {
                    "value": "(node_embedding[i].size(0), node_embedding[i].size(1) * 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "*size": {
                    "value": "(node_embedding[i].size(0), node_embedding[i].size(1) * 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "models/dgmg/train.py": {
        "torch": {
            "rand_129": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "logits.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_135": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(logits + noise) / temperature",
                            "BinOp"
                        ],
                        [
                            "F.softmax(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_43": {
                "variable": {
                    "value": "node_embedding_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[Variable(torch.ones(1, model.h_size)).cuda()]",
                            "List"
                        ],
                        [
                            "message_passing(node_neighbor, node_embedding, model)",
                            "Call"
                        ],
                        [
                            "message_passing(node_neighbor, node_embedding, model)",
                            "Call"
                        ],
                        [
                            "[Variable(torch.ones(1, args.feat_size)).cuda()]",
                            "List"
                        ],
                        [
                            "message_passing(node_neighbor, node_embedding, model)",
                            "Call"
                        ],
                        [
                            "message_passing(node_neighbor, node_embedding, model)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gt_143": {
                "variable": {
                    "value": "y_result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "y_thresh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.rand(y.size())).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.ones(y.size()) * thresh).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "gt_147": {
                "variable": {
                    "value": "y_result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "y_thresh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.rand(y.size())).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.ones(y.size()) * thresh).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_56": {
                "variable": {
                    "value": "loss_addnode_step",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_addnode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.f_an(graph_embedding)",
                            "Call"
                        ],
                        [
                            "model.f_an(graph_embedding)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "Variable(torch.ones((1, 1))).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_62": {
                "variable": {
                    "value": "loss_addnode_step",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_addnode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.f_an(graph_embedding)",
                            "Call"
                        ],
                        [
                            "model.f_an(graph_embedding)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "Variable(torch.zeros((1, 1))).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_172": {
                "variable": {
                    "value": "node_embedding_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[Variable(torch.ones(1, model.h_size)).cuda()]",
                            "List"
                        ],
                        [
                            "message_passing(node_neighbor, node_embedding, model)",
                            "Call"
                        ],
                        [
                            "message_passing(node_neighbor, node_embedding, model)",
                            "Call"
                        ],
                        [
                            "[Variable(torch.ones(1, args.feat_size)).cuda()]",
                            "List"
                        ],
                        [
                            "message_passing(node_neighbor, node_embedding, model)",
                            "Call"
                        ],
                        [
                            "message_passing(node_neighbor, node_embedding, model)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "node_embedding_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[Variable(torch.ones(1, model.h_size)).cuda()]",
                            "List"
                        ],
                        [
                            "message_passing(node_neighbor, node_embedding, model)",
                            "Call"
                        ],
                        [
                            "message_passing(node_neighbor, node_embedding, model)",
                            "Call"
                        ],
                        [
                            "[Variable(torch.ones(1, args.feat_size)).cuda()]",
                            "List"
                        ],
                        [
                            "message_passing(node_neighbor, node_embedding, model)",
                            "Call"
                        ],
                        [
                            "message_passing(node_neighbor, node_embedding, model)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "node_embedding_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[Variable(torch.ones(1, model.h_size)).cuda()]",
                            "List"
                        ],
                        [
                            "message_passing(node_neighbor, node_embedding, model)",
                            "Call"
                        ],
                        [
                            "message_passing(node_neighbor, node_embedding, model)",
                            "Call"
                        ],
                        [
                            "[Variable(torch.ones(1, args.feat_size)).cuda()]",
                            "List"
                        ],
                        [
                            "message_passing(node_neighbor, node_embedding, model)",
                            "Call"
                        ],
                        [
                            "message_passing(node_neighbor, node_embedding, model)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_83": {
                "variable": {
                    "value": "loss_addedge_step",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_addedge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.f_ae(graph_embedding)",
                            "Call"
                        ],
                        [
                            "model.f_ae(graph_embedding)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "Variable(torch.ones((1, 1))).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_93": {
                "variable": {
                    "value": "p_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_node.permute(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_95": {
                "variable": {
                    "value": "a_node",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, p_node.size(1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_103": {
                "variable": {
                    "value": "loss_node_step",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(s_node.permute(1, 0))",
                            "Call"
                        ],
                        [
                            "F.softmax(s_node.permute(1, 0))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "a_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((1, p_node.size(1)))",
                            "Call"
                        ],
                        [
                            "Variable(a_node).cuda()",
                            "Call"
                        ],
                        [
                            "gumbel_softmax(p_node, temperature=0.01)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_110": {
                "variable": {
                    "value": "loss_addedge_step",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_addedge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.f_ae(graph_embedding)",
                            "Call"
                        ],
                        [
                            "model.f_ae(graph_embedding)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "Variable(torch.zeros((1, 1))).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_186": {
                "variable": {
                    "value": "node_embedding_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[Variable(torch.ones(1, model.h_size)).cuda()]",
                            "List"
                        ],
                        [
                            "message_passing(node_neighbor, node_embedding, model)",
                            "Call"
                        ],
                        [
                            "message_passing(node_neighbor, node_embedding, model)",
                            "Call"
                        ],
                        [
                            "[Variable(torch.ones(1, args.feat_size)).cuda()]",
                            "List"
                        ],
                        [
                            "message_passing(node_neighbor, node_embedding, model)",
                            "Call"
                        ],
                        [
                            "message_passing(node_neighbor, node_embedding, model)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "node_embedding_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[Variable(torch.ones(1, model.h_size)).cuda()]",
                            "List"
                        ],
                        [
                            "message_passing(node_neighbor, node_embedding, model)",
                            "Call"
                        ],
                        [
                            "message_passing(node_neighbor, node_embedding, model)",
                            "Call"
                        ],
                        [
                            "[Variable(torch.ones(1, args.feat_size)).cuda()]",
                            "List"
                        ],
                        [
                            "message_passing(node_neighbor, node_embedding, model)",
                            "Call"
                        ],
                        [
                            "message_passing(node_neighbor, node_embedding, model)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_208": {
                "variable": {
                    "value": "p_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_node.permute(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_30": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "model.h_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_92": {
                "tensors": {
                    "value": "(node_embedding_cat[0:-1, :], node_new_embedding_cat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_142": {
                "*size": {
                    "value": "y.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_146": {
                "*size": {
                    "value": "y.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_163": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "args.feat_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_207": {
                "tensors": {
                    "value": "(node_embedding_cat[0:-1, :], node_new_embedding_cat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_56": {
                "*size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "*size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_83": {
                "*size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_110": {
                "*size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "models/gcn/SqNet.py": {
        "torch": {
            "split_37": {
                "variable": {
                    "value": "parameterizations",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "parameterizations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.node_readout(node_embedds).squeeze()",
                            "Call"
                        ],
                        [
                            "torch.split(parameterizations, batch_num_nodes.tolist())",
                            "Call"
                        ],
                        [
                            "self.node_readout(node_embedds_t).squeeze()",
                            "Call"
                        ],
                        [
                            "torch.split(parameterizations, batch_num_nodes[remaining_graphs].tolist())",
                            "Call"
                        ],
                        [
                            "self.node_readout(node_embedds_t).squeeze()",
                            "Call"
                        ],
                        [
                            "torch.split(parameterizations, batch_num_nodes[remaining_graphs].tolist())",
                            "Call"
                        ],
                        [
                            "self.node_readout(node_embedds_t).squeeze()",
                            "Call"
                        ],
                        [
                            "torch.split(parameterizations, batch_num_nodes[remaining_graphs].tolist())",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "batch_num_nodes.tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_39": {
                "variable": {
                    "value": "log_reps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(g), m)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_40": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(g), m)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.args.batch_size * m",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "self.args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_125": {
                "variable": {
                    "value": "log_reps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.args.batch_size * m",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "self.args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_143": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(candidates)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_185": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.args.batch_size * m",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "self.args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_233": {
                "variable": {
                    "value": "log_reps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.args.batch_size * m",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "self.args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_251": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(candidates)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_304": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.args.batch_size * m",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "self.args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_390": {
                "variable": {
                    "value": "log_reps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.args.batch_size * m",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "self.args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_412": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(candidates)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_100": {
                "variable": {
                    "value": "parameterizations",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "parameterizations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.node_readout(node_embedds).squeeze()",
                            "Call"
                        ],
                        [
                            "torch.split(parameterizations, batch_num_nodes.tolist())",
                            "Call"
                        ],
                        [
                            "self.node_readout(node_embedds_t).squeeze()",
                            "Call"
                        ],
                        [
                            "torch.split(parameterizations, batch_num_nodes[remaining_graphs].tolist())",
                            "Call"
                        ],
                        [
                            "self.node_readout(node_embedds_t).squeeze()",
                            "Call"
                        ],
                        [
                            "torch.split(parameterizations, batch_num_nodes[remaining_graphs].tolist())",
                            "Call"
                        ],
                        [
                            "self.node_readout(node_embedds_t).squeeze()",
                            "Call"
                        ],
                        [
                            "torch.split(parameterizations, batch_num_nodes[remaining_graphs].tolist())",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "batch_num_nodes[remaining_graphs].tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_145": {
                "variable": {
                    "value": "categorical_params",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param[candidate]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_146": {
                "variable": {
                    "value": "fake_node_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "categorical_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(param[candidate], dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(param[candidate], dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(param[candidate], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_150": {
                "variable": {
                    "value": "log_probs[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "categorical_params[fake_node_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "split_199": {
                "variable": {
                    "value": "parameterizations",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "parameterizations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.node_readout(node_embedds).squeeze()",
                            "Call"
                        ],
                        [
                            "torch.split(parameterizations, batch_num_nodes.tolist())",
                            "Call"
                        ],
                        [
                            "self.node_readout(node_embedds_t).squeeze()",
                            "Call"
                        ],
                        [
                            "torch.split(parameterizations, batch_num_nodes[remaining_graphs].tolist())",
                            "Call"
                        ],
                        [
                            "self.node_readout(node_embedds_t).squeeze()",
                            "Call"
                        ],
                        [
                            "torch.split(parameterizations, batch_num_nodes[remaining_graphs].tolist())",
                            "Call"
                        ],
                        [
                            "self.node_readout(node_embedds_t).squeeze()",
                            "Call"
                        ],
                        [
                            "torch.split(parameterizations, batch_num_nodes[remaining_graphs].tolist())",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "batch_num_nodes[remaining_graphs].tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_253": {
                "variable": {
                    "value": "categorical_params",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param[candidate]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_254": {
                "variable": {
                    "value": "fake_node_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "categorical_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(param[candidate], dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(param[candidate], dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(param[candidate], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_258": {
                "variable": {
                    "value": "log_probs[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "categorical_params[fake_node_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "split_323": {
                "variable": {
                    "value": "parameterizations",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "parameterizations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.node_readout(node_embedds).squeeze()",
                            "Call"
                        ],
                        [
                            "torch.split(parameterizations, batch_num_nodes.tolist())",
                            "Call"
                        ],
                        [
                            "self.node_readout(node_embedds_t).squeeze()",
                            "Call"
                        ],
                        [
                            "torch.split(parameterizations, batch_num_nodes[remaining_graphs].tolist())",
                            "Call"
                        ],
                        [
                            "self.node_readout(node_embedds_t).squeeze()",
                            "Call"
                        ],
                        [
                            "torch.split(parameterizations, batch_num_nodes[remaining_graphs].tolist())",
                            "Call"
                        ],
                        [
                            "self.node_readout(node_embedds_t).squeeze()",
                            "Call"
                        ],
                        [
                            "torch.split(parameterizations, batch_num_nodes[remaining_graphs].tolist())",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "batch_num_nodes[remaining_graphs].tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_414": {
                "variable": {
                    "value": "categorical_params",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param[candidate]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_415": {
                "variable": {
                    "value": "fake_node_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "categorical_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(param[candidate], dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(param[candidate], dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(param[candidate], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_420": {
                "variable": {
                    "value": "log_probs[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "categorical_params[fake_node_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/gcn/helper.py": {
        "torch": {
            "cat_24": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(out, dim=-1)",
                            "Call"
                        ],
                        [
                            "out.transpose(-1, dim)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_147": {
                "variable": {
                    "value": "log_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(torch.tensor(reps, dtype=torch.float32, requires_grad=False, device=device))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_155": {
                "variable": {
                    "value": "log_q_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_156": {
                "variable": {
                    "value": "categorical_params",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_158": {
                "variable": {
                    "value": "start_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "categorical_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(params, dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(params[l_candidates], dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(params, dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(params[l_candidates], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_184": {
                "variable": {
                    "value": "log_q_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_185": {
                "variable": {
                    "value": "categorical_params",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_187": {
                "variable": {
                    "value": "start_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "categorical_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(params, dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(params[l_candidates], dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(params, dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(params[l_candidates], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_218": {
                "variable": {
                    "value": "log_reps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_219": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flip_53": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(dim, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "(dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_162": {
                "input": {
                    "value": "categorical_params[start_node]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_166": {
                "variable": {
                    "value": "categorical_params",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "params[l_candidates]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_191": {
                "input": {
                    "value": "categorical_params[start_node]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_195": {
                "variable": {
                    "value": "categorical_params",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "params[l_candidates]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_328": {
                "input": {
                    "value": "torch.tensor(n_autogrp, dtype=torch.float32, requires_grad=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Event_337": {
                "variable": {
                    "value": "self._workers_done_event",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_369": {
                "variable": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(results, dtype=torch.float32, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_370": {
                "variable": {
                    "value": "log_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(results)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_380": {
                "variable": {
                    "value": "log_reps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_147": {
                "input": {
                    "value": "torch.tensor(reps, dtype=torch.float32, requires_grad=False, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_172": {
                "input": {
                    "value": "categorical_params[l_candidates.index(cur_node)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_201": {
                "input": {
                    "value": "categorical_params[l_candidates.index(cur_node)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_328": {
                "data": {
                    "value": "n_autogrp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pnt.autgrp(na_graph)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "logsumexp_23": {
                "input": {
                    "value": "x[..., :i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_147": {
                "data": {
                    "value": "reps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multinomial_167": {
                "input": {
                    "value": "categorical_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(params, dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(params[l_candidates], dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(params, dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(params[l_candidates], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_196": {
                "input": {
                    "value": "categorical_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(params, dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(params[l_candidates], dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(params, dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(params[l_candidates], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_370": {
                "input": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(results, dtype=torch.float32, requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_71": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logits.unsqueeze(0).expand(num_samples, *self.size)",
                            "Call"
                        ],
                        [
                            "smart_perm(self.logits, samples)",
                            "Call"
                        ],
                        [
                            "self.logits.unsqueeze(0).expand(*samples.size())",
                            "Call"
                        ],
                        [
                            "smart_perm(logits, samples)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_72": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.distributions.utils.clamp_probs(torch.rand_like(logits))",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_73": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logits - torch.log(-torch.log(u))",
                            "BinOp"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_37": {
                "start": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_37": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_43": {
                "start": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_43": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_44": {
                "start": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_44": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/gcn/layer/gat_layer.py": {
        "torch": {
            "Linear_21": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.attn_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * out_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_23": {
                "variable": {
                    "value": "self.batchnorm_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_26": {
                "variable": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edges.src['z'], edges.dst['z']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_34": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nodes.mailbox['e']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_35": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(nodes.mailbox['e'], dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(alpha, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_36": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha * nodes.mailbox['z']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "elu_48": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(alpha * nodes.mailbox['z'], dim=1)",
                            "Call"
                        ],
                        [
                            "g.ndata['h']",
                            "Subscript"
                        ],
                        [
                            "self.batchnorm_h(h)",
                            "Call"
                        ],
                        [
                            "F.elu(h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv(g, h).flatten(1)",
                            "Call"
                        ],
                        [
                            "torch.cat(head_outs, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.stack(head_outs))",
                            "Call"
                        ],
                        [
                            "self.batchnorm_h(h)",
                            "Call"
                        ],
                        [
                            "h_in + h",
                            "BinOp"
                        ],
                        [
                            "h_in + h",
                            "BinOp"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_49": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(alpha * nodes.mailbox['z'], dim=1)",
                            "Call"
                        ],
                        [
                            "g.ndata['h']",
                            "Subscript"
                        ],
                        [
                            "self.batchnorm_h(h)",
                            "Call"
                        ],
                        [
                            "F.elu(h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv(g, h).flatten(1)",
                            "Call"
                        ],
                        [
                            "torch.cat(head_outs, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.stack(head_outs))",
                            "Call"
                        ],
                        [
                            "self.batchnorm_h(h)",
                            "Call"
                        ],
                        [
                            "h_in + h",
                            "BinOp"
                        ],
                        [
                            "h_in + h",
                            "BinOp"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_73": {
                "variable": {
                    "value": "self.heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_92": {
                "variable": {
                    "value": "self.batchnorm_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "leaky_relu_28": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attn_fc(z2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_100": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "head_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[attn_head(g, h) for attn_head in self.heads]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_102": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(head_outs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_102": {
                "tensors": {
                    "value": "head_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[attn_head(g, h) for attn_head in self.heads]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "models/gcn/layer/gcn_layer.py": {
        "torch": {
            "mean_14": {
                "variable": {
                    "value": "accum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nodes.mailbox['m']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_45": {
                "variable": {
                    "value": "self.batchnorm_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_47": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/gcn/layer/mlp_readout_layer.py": {
        "torch": {
            "ModuleList_12": {
                "variable": {
                    "value": "self.FC_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "list_FC_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[nn.Linear(input_dim // 2 ** l, input_dim // 2 ** (l + 1), bias=True) for l in range(L)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "relu_19": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.FC_layers[l](y)",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.FC_layers[self.L](y)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_10": {
                "in_features": {
                    "value": "input_dim // 2 ** l",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim // 2 ** (l + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "in_features": {
                    "value": "input_dim // 2 ** L",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/gcn/net/appnp_net_node.py": {
        "torch": {
            "Dropout_25": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.gcn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_26": {
                "variable": {
                    "value": "self.embedding_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "in_dim_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "node_len",
                            "variable"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.gcn_hidden_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Dropout_27": {
                "variable": {
                    "value": "self.in_feat_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "in_feat_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.gcn_in_feat_dropout",
                            "Attribute"
                        ]
                    ]
                }
            },
            "split_35": {
                "variable": {
                    "value": "pes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.zeros((sum(lengths), self.d_model), device=self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_38": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, self.d_model, 2, dtype=torch.float, device=self.device) * -(math.log(10000.0) / self.d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "pes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(torch.zeros((sum(lengths), self.d_model), device=self.device), lengths)",
                            "Call"
                        ],
                        [
                            "torch.cat(pes)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_42": {
                "variable": {
                    "value": "pes[i][permutations[i], 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position.float() * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_43": {
                "variable": {
                    "value": "pes[i][permutations[i], 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position.float() * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_68": {
                "input": {
                    "value": "h_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.MLP_layer(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_35": {
                "*size": {
                    "value": "(sum(lengths), self.d_model)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_37": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "l_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(permutations[0])",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_37": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_52": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding_h(torch.squeeze(h))",
                            "Call"
                        ],
                        [
                            "h + p",
                            "BinOp"
                        ],
                        [
                            "self.dropout(h)",
                            "Call"
                        ],
                        [
                            "self.APPNP(g, h)",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_38": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/gcn/net/gat_net_node.py": {
        "torch": {
            "Embedding_36": {
                "variable": {
                    "value": "self.embedding_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "in_dim_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "node_len",
                            "variable"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "hidden_dim * num_heads",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_38": {
                "variable": {
                    "value": "self.in_feat_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "in_feat_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.gcn_in_feat_dropout",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ModuleList_40": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GATLayer(hidden_dim * num_heads, hidden_dim, num_heads, dropout, self.batch_norm, self.residual) for _ in range(n_layers - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "split_51": {
                "variable": {
                    "value": "pes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.zeros((sum(lengths), self.d_model), device=self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_54": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, self.d_model, 2, dtype=torch.float, device=self.device) * -(math.log(10000.0) / self.d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "pes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(torch.zeros((sum(lengths), self.d_model), device=self.device), lengths)",
                            "Call"
                        ],
                        [
                            "torch.cat(pes)",
                            "Call"
                        ]
                    ]
                }
            },
            "bincount_87": {
                "variable": {
                    "value": "label_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_89": {
                "variable": {
                    "value": "cluster_sizes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_95": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(V - cluster_sizes).float() / V",
                            "BinOp"
                        ],
                        [
                            "weight * (cluster_sizes > 0).float()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_58": {
                "variable": {
                    "value": "pes[i][permutations[i], 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position.float() * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_59": {
                "variable": {
                    "value": "pes[i][permutations[i], 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position.float() * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_82": {
                "input": {
                    "value": "h_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.MLP_layer(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_51": {
                "*size": {
                    "value": "(sum(lengths), self.d_model)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_53": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "l_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(permutations[0])",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_53": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_68": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding_h(torch.squeeze(h))",
                            "Call"
                        ],
                        [
                            "h + p",
                            "BinOp"
                        ],
                        [
                            "self.in_feat_dropout(h)",
                            "Call"
                        ],
                        [
                            "conv(g, h)",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unique_90": {
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_54": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/gcn/net/gcn_net_node.py": {
        "torch": {
            "Embedding_30": {
                "variable": {
                    "value": "self.embedding_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "in_dim_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "node_len",
                            "variable"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.gcn_hidden_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Dropout_31": {
                "variable": {
                    "value": "self.in_feat_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "in_feat_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.gcn_in_feat_dropout",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ModuleList_32": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GCNLayer(hidden_dim, hidden_dim, F.relu, dropout, self.batch_norm, self.residual) for _ in range(n_layers - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "split_41": {
                "variable": {
                    "value": "pes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.zeros((sum(lengths), self.d_model), device=self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_44": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, self.d_model, 2, dtype=torch.float, device=self.device) * -(math.log(10000.0) / self.d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "pes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(torch.zeros((sum(lengths), self.d_model), device=self.device), lengths)",
                            "Call"
                        ],
                        [
                            "torch.cat(pes)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_48": {
                "variable": {
                    "value": "pes[i][permutations[i], 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position.float() * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_49": {
                "variable": {
                    "value": "pes[i][permutations[i], 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position.float() * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_70": {
                "input": {
                    "value": "h_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.MLP_layer(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_41": {
                "*size": {
                    "value": "(sum(lengths), self.d_model)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_43": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "l_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(permutations[0])",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_43": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_58": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding_h(torch.squeeze(h))",
                            "Call"
                        ],
                        [
                            "h + p",
                            "BinOp"
                        ],
                        [
                            "conv(g, h)",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_44": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/graph_rnn/data.py": {
        "torch": {
            "zeros_48": {
                "variable": {
                    "value": "x_item",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.max_nodes, self.feature_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_96": {
                "variable": {
                    "value": "x_item",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.max_nodes, self.feature_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_130": {
                "variable": {
                    "value": "x_item",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.max_nodes, self.feature_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_159": {
                "variable": {
                    "value": "adj_mat_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n, num_nodes_to_consider)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_161": {
                "variable": {
                    "value": "adj_mat_3d",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n, num_nodes_to_consider, len(edge_map))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_163": {
                "variable": {
                    "value": "node_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n, len_node_vec)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_186": {
                "variable": {
                    "value": "adj_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(adj_mat_3d, adj_mat_2d.reshape(adj_mat_2d.size(0), adj_mat_2d.size(1), 1), torch.zeros((n, num_nodes_to_consider, 2)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_190": {
                "tensors": {
                    "value": "(node_mat, adj_mat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_144": {
                "variable": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(in_graph.nodes())",
                            "Call"
                        ],
                        [
                            "len(in_graph.nodes())",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_187": {
                "*size": {
                    "value": "(n, num_nodes_to_consider, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "models/graph_rnn/helper.py": {
        "torch": {
            "ones_54": {
                "variable": {
                    "value": "adj_mat_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n, num_nodes_to_consider)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_56": {
                "variable": {
                    "value": "adj_mat_3d",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n, num_nodes_to_consider, len(edge_map))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "variable": {
                    "value": "node_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n, len_node_vec)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "adj_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(adj_mat_3d, adj_mat_2d.reshape(adj_mat_2d.size(0), adj_mat_2d.size(1), 1), torch.zeros((n, num_nodes_to_consider, 2)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_85": {
                "tensors": {
                    "value": "(node_mat, adj_mat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "*size": {
                    "value": "(n, num_nodes_to_consider, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "models/graph_rnn/train.py": {
        "torch": {
            "sort_28": {
                "variable": {
                    "value": "(x_len, sort_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x_len_unsorted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['len'].to(args.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "index_select_29": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_unsorted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['x'].to(args.device)",
                            "Call"
                        ],
                        [
                            "x_unsorted[:, 0:max(x_len_unsorted), :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sort_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(x_len_unsorted, dim=0, descending=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_37": {
                "variable": {
                    "value": "node_level_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros(batch_size, 1, x.size(2), device=args.device), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_52": {
                "variable": {
                    "value": "edge_mat_packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, len_node_vec:min(x_len_max - 1, num_nodes_to_consider) * len_edge_vec + len_node_vec]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "lengths": {
                    "value": "x_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(x_len_unsorted, dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "x_len.cpu()",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "edge_level_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros(sum(x_len), 1, len_edge_vec, device=args.device), edge_mat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bincount_78": {
                "variable": {
                    "value": "x_edge_len_bin",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(x_len_unsorted, dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "x_len.cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_104": {
                "variable": {
                    "value": "hidden_edge_rem_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.num_layers - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "hidden_edge.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hidden_edge.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "model[edge_level_rnn].hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hidden_edge, hidden_edge_rem_layers)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_113": {
                "variable": {
                    "value": "x_pred_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_pred_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model['output_node'](node_level_output)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_pred_node, x_len + 1, batch_first=True)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(x_pred_node, batch_first=True)",
                            "Call"
                        ],
                        [
                            "np.zeros((eval_args.batch_size, max_num_node), dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "x_len + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_115": {
                "variable": {
                    "value": "(x_pred_node, lens_pred_node)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_pred_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model['output_node'](node_level_output)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_pred_node, x_len + 1, batch_first=True)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(x_pred_node, batch_first=True)",
                            "Call"
                        ],
                        [
                            "np.zeros((eval_args.batch_size, max_num_node), dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_116": {
                "variable": {
                    "value": "x_pred_edge",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_pred_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model['edge_level_rnn'](edge_level_input, input_len=x_edge_len)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_pred_edge, x_edge_len, batch_first=True)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(x_pred_edge, batch_first=True)",
                            "Call"
                        ],
                        [
                            "np.zeros((eval_args.batch_size, max_num_node, num_nodes_to_consider), dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "x_edge_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.LongTensor(x_edge_len).to(args.device)",
                            "Call"
                        ],
                        [
                            "x_edge_len.cpu()",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_118": {
                "variable": {
                    "value": "(x_pred_edge, lens_pred_edge)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x_pred_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model['edge_level_rnn'](edge_level_input, input_len=x_edge_len)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_pred_edge, x_edge_len, batch_first=True)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(x_pred_edge, batch_first=True)",
                            "Call"
                        ],
                        [
                            "np.zeros((eval_args.batch_size, max_num_node, num_nodes_to_consider), dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "x_node",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x[:, :, :len_node_vec], torch.zeros(batch_size, 1, len_node_vec, device=args.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "x_edge",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(edge_mat, torch.zeros(sum(x_len), 1, len_edge_vec, device=args.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_128": {
                "variable": {
                    "value": "loss_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_pred_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model['output_node'](node_level_output)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_pred_node, x_len + 1, batch_first=True)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(x_pred_node, batch_first=True)",
                            "Call"
                        ],
                        [
                            "np.zeros((eval_args.batch_size, max_num_node), dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "x_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x[:, :, :len_node_vec], torch.zeros(batch_size, 1, len_node_vec, device=args.device)), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_129": {
                "variable": {
                    "value": "loss_edge",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_pred_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model['edge_level_rnn'](edge_level_input, input_len=x_edge_len)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_pred_edge, x_edge_len, batch_first=True)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(x_pred_edge, batch_first=True)",
                            "Call"
                        ],
                        [
                            "np.zeros((eval_args.batch_size, max_num_node, num_nodes_to_consider), dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "x_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((edge_mat, torch.zeros(sum(x_len), 1, len_edge_vec, device=args.device)), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_136": {
                "variable": {
                    "value": "loss_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.binary_cross_entropy(x_pred_node, x_node, reduction='none')",
                            "Call"
                        ],
                        [
                            "torch.sum(loss_node, dim=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "edge_batch_size_cum",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor([0]).to(args.device), torch.cumsum(edge_batch_size, dim=0).to(args.device)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "loss_edge",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sum(loss_edge.index_select(0, indices), dim=[0, 1, 2]).view(1) for indices in edge_indices]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "empty_like_145": {
                "variable": {
                    "value": "swapped_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_node + loss_edge",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_81": {
                "variable": {
                    "value": "count_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_edge_len_bin[i:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_186": {
                "variable": {
                    "value": "node_level_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "eval_args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "feature_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len_node_vec + num_nodes_to_consider * len_edge_vec",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "eval_args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_95": {
                "input": {
                    "value": "hidden_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model['embedding_node_to_edge'](node_level_output[:, 0:-1, :])",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(hidden_edge, x_len, batch_first=True).data",
                            "Attribute"
                        ],
                        [
                            "hidden_edge.index_select(0, idx)",
                            "Call"
                        ],
                        [
                            "hidden_edge.view(1, hidden_edge.size(0), hidden_edge.size(1))",
                            "Call"
                        ],
                        [
                            "model['embedding_node_to_edge'](node_level_output)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "x_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(x_len_unsorted, dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "x_len.cpu()",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "multinomial_206": {
                "variable": {
                    "value": "sample_node_level_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "node_level_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model['output_node'](node_level_output)",
                            "Call"
                        ],
                        [
                            "node_level_pred.reshape(eval_args.batch_size, len_node_vec)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_206": {
                "variable": {
                    "value": "sample_node_level_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_208": {
                "variable": {
                    "value": "node_level_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "eval_args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "feature_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len_node_vec + num_nodes_to_consider * len_edge_vec",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "eval_args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_219": {
                "variable": {
                    "value": "hidden_edge_rem_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "train_args.num_layers - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "eval_args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hidden_edge.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "eval_args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_224": {
                "variable": {
                    "value": "model[edge_level_rnn].hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hidden_edge.permute(1, 0, 2), hidden_edge_rem_layers)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_228": {
                "variable": {
                    "value": "edge_level_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "eval_args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "len_edge_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_attributes_len_for_graph_rnn(len(feature_map['node_forward']), len(feature_map['edge_forward']), args.max_prev_node, args.max_head_and_tail)",
                            "Call"
                        ],
                        [
                            "get_attributes_len_for_graph_rnn(len(feature_map['node_forward']), len(feature_map['edge_forward']), train_args.max_prev_node, train_args.max_head_and_tail)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "eval_args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_38": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_unsorted.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_72": {
                "*size": {
                    "value": "sum(x_len)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "len_edge_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_attributes_len_for_graph_rnn(len(feature_map['node_forward']), len(feature_map['edge_forward']), args.max_prev_node, args.max_head_and_tail)",
                            "Call"
                        ],
                        [
                            "get_attributes_len_for_graph_rnn(len(feature_map['node_forward']), len(feature_map['edge_forward']), train_args.max_prev_node, train_args.max_head_and_tail)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_121": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_unsorted.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "len_node_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_attributes_len_for_graph_rnn(len(feature_map['node_forward']), len(feature_map['edge_forward']), args.max_prev_node, args.max_head_and_tail)",
                            "Call"
                        ],
                        [
                            "get_attributes_len_for_graph_rnn(len(feature_map['node_forward']), len(feature_map['edge_forward']), train_args.max_prev_node, train_args.max_head_and_tail)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_122": {
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_unsorted.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_124": {
                "*size": {
                    "value": "sum(x_len)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "len_edge_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_attributes_len_for_graph_rnn(len(feature_map['node_forward']), len(feature_map['edge_forward']), args.max_prev_node, args.max_head_and_tail)",
                            "Call"
                        ],
                        [
                            "get_attributes_len_for_graph_rnn(len(feature_map['node_forward']), len(feature_map['edge_forward']), train_args.max_prev_node, train_args.max_head_and_tail)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_126": {
                "start": {
                    "value": "sum(x_len)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_137": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cumsum_137": {
                "input": {
                    "value": "edge_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "edge_mat_packed.batch_sizes",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_142": {
                "input": {
                    "value": "loss_edge.index_select(0, indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multinomial_244": {
                "variable": {
                    "value": "sample_edge_level_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_level_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model['edge_level_rnn'](edge_level_input)",
                            "Call"
                        ],
                        [
                            "edge_level_output.reshape(eval_args.batch_size, len_edge_vec)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_244": {
                "variable": {
                    "value": "sample_edge_level_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_246": {
                "variable": {
                    "value": "edge_level_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "eval_args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "len_edge_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_attributes_len_for_graph_rnn(len(feature_map['node_forward']), len(feature_map['edge_forward']), args.max_prev_node, args.max_head_and_tail)",
                            "Call"
                        ],
                        [
                            "get_attributes_len_for_graph_rnn(len(feature_map['node_forward']), len(feature_map['edge_forward']), train_args.max_prev_node, train_args.max_head_and_tail)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "eval_args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_210": {
                "start": {
                    "value": "eval_args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/graphgen/data.py": {
        "torch": {}
    },
    "models/graphgen/helper.py": {
        "torch": {
            "ones_14": {
                "*size": {
                    "value": "max_edges + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_15": {
                "*size": {
                    "value": "max_edges + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_16": {
                "*size": {
                    "value": "max_edges + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_17": {
                "*size": {
                    "value": "max_edges + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_18": {
                "*size": {
                    "value": "max_edges + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/graphgen/model.py": {
        "torch": {
            "Sequential_14": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "MLP_Plain(input_size, embedding_size, output_size, dropout)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "MLP_Plain(input_size, embedding_size, output_size, dropout)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_size, embedding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_92": {
                "variable": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_83": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GRU_95": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_layers",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_143": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input(input)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(input, input_len.cpu(), batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "lengths": {
                    "value": "input_len.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_149": {
                "variable": {
                    "value": "(output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rnn(input, self.hidden)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(output, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.output(output)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_16": {
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogSoftmax_32": {
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_49": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_53": {
                "in_features": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_100": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_layers",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_132": {
                "*size": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_135": {
                "*size": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_136": {
                "*size": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/graphgen/train.py": {
        "torch": {
            "sort_18": {
                "variable": {
                    "value": "(x_len, sort_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x_len_unsorted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['len'].to(args.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "index_select_26": {
                "variable": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data['t1'][:, :x_len_max + 1].to(args.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sort_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(x_len_unsorted, dim=0, descending=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_28": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data['t2'][:, :x_len_max + 1].to(args.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sort_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(x_len_unsorted, dim=0, descending=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_30": {
                "variable": {
                    "value": "v1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data['v1'][:, :x_len_max + 1].to(args.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sort_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(x_len_unsorted, dim=0, descending=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_32": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data['e'][:, :x_len_max + 1].to(args.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sort_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(x_len_unsorted, dim=0, descending=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_34": {
                "variable": {
                    "value": "v2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data['v2'][:, :x_len_max + 1].to(args.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sort_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(x_len_unsorted, dim=0, descending=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_43": {
                "variable": {
                    "value": "x_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_t1, x_t2, x_v1, x_e, x_v2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "dfscode_rnn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros(batch_size, 1, feature_len, device=args.device), x_target[:, :-1, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_74": {
                "variable": {
                    "value": "loss_t1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "timestamp1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model['output_timestamp1'](dfscode_rnn_output)",
                            "Call"
                        ],
                        [
                            "timestamp1.transpose(dim0=1, dim1=2)",
                            "Call"
                        ],
                        [
                            "model['output_timestamp1'](rnn_output).reshape(eval_args.batch_size, -1)",
                            "Call"
                        ],
                        [
                            "Categorical(logits=timestamp1).sample()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(data['t1'][:, :x_len_max + 1].to(args.device), 0, sort_indices)",
                            "Call"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "max_nodes + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "nll_loss_76": {
                "variable": {
                    "value": "loss_t2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "timestamp2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model['output_timestamp2'](dfscode_rnn_output)",
                            "Call"
                        ],
                        [
                            "timestamp2.transpose(dim0=1, dim1=2)",
                            "Call"
                        ],
                        [
                            "model['output_timestamp2'](rnn_output).reshape(eval_args.batch_size, -1)",
                            "Call"
                        ],
                        [
                            "Categorical(logits=timestamp2).sample()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(data['t2'][:, :x_len_max + 1].to(args.device), 0, sort_indices)",
                            "Call"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "max_nodes + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "nll_loss_78": {
                "variable": {
                    "value": "loss_v1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vertex1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model['output_vertex1'](dfscode_rnn_output)",
                            "Call"
                        ],
                        [
                            "vertex1.transpose(dim0=1, dim1=2)",
                            "Call"
                        ],
                        [
                            "model['output_vertex1'](rnn_output).reshape(eval_args.batch_size, -1)",
                            "Call"
                        ],
                        [
                            "Categorical(logits=vertex1).sample()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "v1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(data['v1'][:, :x_len_max + 1].to(args.device), 0, sort_indices)",
                            "Call"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "len(feature_map['node_forward']) + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "nll_loss_80": {
                "variable": {
                    "value": "loss_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model['output_edge'](dfscode_rnn_output)",
                            "Call"
                        ],
                        [
                            "edge.transpose(dim0=1, dim1=2)",
                            "Call"
                        ],
                        [
                            "model['output_edge'](rnn_output).reshape(eval_args.batch_size, -1)",
                            "Call"
                        ],
                        [
                            "Categorical(logits=edge).sample()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(data['e'][:, :x_len_max + 1].to(args.device), 0, sort_indices)",
                            "Call"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "len(feature_map['edge_forward']) + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "nll_loss_82": {
                "variable": {
                    "value": "loss_v2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vertex2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model['output_vertex2'](dfscode_rnn_output)",
                            "Call"
                        ],
                        [
                            "vertex2.transpose(dim0=1, dim1=2)",
                            "Call"
                        ],
                        [
                            "model['output_vertex2'](rnn_output).reshape(eval_args.batch_size, -1)",
                            "Call"
                        ],
                        [
                            "Categorical(logits=vertex2).sample()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "v2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(data['v2'][:, :x_len_max + 1].to(args.device), 0, sort_indices)",
                            "Call"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "len(feature_map['node_forward']) + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_like_87": {
                "variable": {
                    "value": "order_nll",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nll",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(loss_t1, dim=1) + torch.sum(loss_t2, dim=1) + torch.sum(loss_v1, dim=1) + torch.sum(loss_e, dim=1) + torch.sum(loss_v2, dim=1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_117": {
                "variable": {
                    "value": "rnn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(eval_args.batch_size, 1, feature_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "eval_args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_119": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(eval_args.batch_size, eval_args.max_num_edges, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "eval_args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_41": {
                "tensor": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(data['e'][:, :x_len_max + 1].to(args.device), 0, sort_indices)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "len_edge_vec + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_85": {
                "input": {
                    "value": "loss_t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.nll_loss(timestamp2, t2, ignore_index=max_nodes + 1, weight=None, reduction='none')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Categorical_140": {
                "variable": {
                    "value": "timestamp1",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "timestamp1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model['output_timestamp1'](dfscode_rnn_output)",
                            "Call"
                        ],
                        [
                            "timestamp1.transpose(dim0=1, dim1=2)",
                            "Call"
                        ],
                        [
                            "model['output_timestamp1'](rnn_output).reshape(eval_args.batch_size, -1)",
                            "Call"
                        ],
                        [
                            "Categorical(logits=timestamp1).sample()",
                            "Call"
                        ]
                    ]
                }
            },
            "Categorical_141": {
                "variable": {
                    "value": "timestamp2",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "timestamp2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model['output_timestamp2'](dfscode_rnn_output)",
                            "Call"
                        ],
                        [
                            "timestamp2.transpose(dim0=1, dim1=2)",
                            "Call"
                        ],
                        [
                            "model['output_timestamp2'](rnn_output).reshape(eval_args.batch_size, -1)",
                            "Call"
                        ],
                        [
                            "Categorical(logits=timestamp2).sample()",
                            "Call"
                        ]
                    ]
                }
            },
            "Categorical_142": {
                "variable": {
                    "value": "vertex1",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "vertex1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model['output_vertex1'](dfscode_rnn_output)",
                            "Call"
                        ],
                        [
                            "vertex1.transpose(dim0=1, dim1=2)",
                            "Call"
                        ],
                        [
                            "model['output_vertex1'](rnn_output).reshape(eval_args.batch_size, -1)",
                            "Call"
                        ],
                        [
                            "Categorical(logits=vertex1).sample()",
                            "Call"
                        ]
                    ]
                }
            },
            "Categorical_143": {
                "variable": {
                    "value": "edge",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model['output_edge'](dfscode_rnn_output)",
                            "Call"
                        ],
                        [
                            "edge.transpose(dim0=1, dim1=2)",
                            "Call"
                        ],
                        [
                            "model['output_edge'](rnn_output).reshape(eval_args.batch_size, -1)",
                            "Call"
                        ],
                        [
                            "Categorical(logits=edge).sample()",
                            "Call"
                        ]
                    ]
                }
            },
            "Categorical_144": {
                "variable": {
                    "value": "vertex2",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "vertex2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model['output_vertex2'](dfscode_rnn_output)",
                            "Call"
                        ],
                        [
                            "vertex2.transpose(dim0=1, dim1=2)",
                            "Call"
                        ],
                        [
                            "model['output_vertex2'](rnn_output).reshape(eval_args.batch_size, -1)",
                            "Call"
                        ],
                        [
                            "Categorical(logits=vertex2).sample()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_146": {
                "variable": {
                    "value": "rnn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(eval_args.batch_size, 1, feature_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "eval_args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_37": {
                "tensor": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(data['t1'][:, :x_len_max + 1].to(args.device), 0, sort_indices)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "max_nodes + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "one_hot_38": {
                "tensor": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(data['t2'][:, :x_len_max + 1].to(args.device), 0, sort_indices)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "max_nodes + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "one_hot_39": {
                "tensor": {
                    "value": "v1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(data['v1'][:, :x_len_max + 1].to(args.device), 0, sort_indices)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "len_node_vec + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "one_hot_40": {
                "tensor": {
                    "value": "v2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(data['v2'][:, :x_len_max + 1].to(args.device), 0, sort_indices)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "len_node_vec + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_len_unsorted.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "feature_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * (max_nodes + 1) + 2 * len_node_vec + len_edge_vec",
                            "BinOp"
                        ],
                        [
                            "2 * (max_nodes + 1) + 2 * len_node_vec + len_edge_vec",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_149": {
                "start": {
                    "value": "eval_args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_150": {
                "start": {
                    "value": "eval_args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_152": {
                "start": {
                    "value": "eval_args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_154": {
                "start": {
                    "value": "eval_args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_156": {
                "start": {
                    "value": "eval_args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/layers.py": {
        "torch": {
            "Sequential_15": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "MLP_Plain(input_size, embedding_size, output_size, dropout)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "MLP_Plain(input_size, embedding_size, output_size, dropout)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_size, embedding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "variable": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_84": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GRU_96": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_layers",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_144": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input(input)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(input, input_len, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "lengths": {
                    "value": "input_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_150": {
                "variable": {
                    "value": "(output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rnn(input, self.hidden)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(output, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.output(output)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_17": {
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogSoftmax_33": {
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_50": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_54": {
                "in_features": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_101": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_layers",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_133": {
                "*size": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_136": {
                "*size": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_137": {
                "*size": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "empty_91": {
                "variable": {
                    "value": "nll_p",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(real_batch_size, args.sample_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_146": {
                "variable": {
                    "value": "elbo",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ll_p_hat.detach() - ll_q.detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_148": {
                "variable": {
                    "value": "ll_q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ll_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty((real_batch_size, args.sample_size), device=args.device)",
                            "Call"
                        ],
                        [
                            "gcn(graphs, args.sample_size)",
                            "Call"
                        ],
                        [
                            "gcn(graphs, args.sample_size)",
                            "Call"
                        ],
                        [
                            "torch.mean(ll_q)",
                            "Call"
                        ],
                        [
                            "evaluate_loss(args, model, gcn, processor, sample_perm, graphs, feature_map, epoch)",
                            "Call"
                        ],
                        [
                            "evaluate_loss(args, model, gcn, processor, sample_perm, graphs, feature_map, epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_54": {
                "variable": {
                    "value": "log_repetitions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(real_batch_size, args.sample_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_55": {
                "variable": {
                    "value": "ll_q",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(real_batch_size, args.sample_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_60": {
                "variable": {
                    "value": "batch_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(batch_num_nodes)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_62": {
                "variable": {
                    "value": "parameterizations",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(n_node)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "batch_num_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[graph.number_of_nodes() for graph in batch_G]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Adam_228": {
                "variable": {
                    "value": "optimizer[optimizer_ + name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, net.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "5e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_232": {
                "variable": {
                    "value": "optimizer[optimizer_gcn]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "gcn.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "5e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_236": {
                "variable": {
                    "value": "scheduler[scheduler_ + name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer['optimizer_' + name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "milestones": {
                    "value": "args.milestones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "args.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_241": {
                "variable": {
                    "value": "scheduler[scheduler_gcn]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer['optimizer_gcn']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "milestones": {
                    "value": "args.milestones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "args.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_263": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "args.tensorboard_path + ' ' + args.time",
                    "type": "BinOp",
                    "possible_values": []
                },
                "flush_secs": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_143": {
                "input": {
                    "value": "ll_p_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-nll_p - log_repetitions",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_141": {
                "input": {
                    "value": "(ll_p_hat.detach() - ll_q.detach()) * ll_q",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "load_107": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_132": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.current_model_save_path + 'epoch' + '_' + str(epoch) + '.dat'",
                            "BinOp"
                        ],
                        [
                            "fname",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_103": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'saved_args': args, 'epoch': epoch}",
                            "Dict"
                        ],
                        [
                            "torch.load(path, map_location=device)",
                            "Call"
                        ],
                        [
                            "torch.load(fname, map_location=device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.current_model_save_path + 'epoch' + '_' + str(epoch) + '.dat'",
                            "BinOp"
                        ],
                        [
                            "fname",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}