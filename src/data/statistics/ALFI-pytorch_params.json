{
    "experiment.py": {
        "torch": {
            "norm_106": {
                "variable": {
                    "value": "rmse_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_real.unsqueeze(1) - list_psi_t[:, :, 0, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_21": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_25": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "set_num_threads_30": {
                "int": {
                    "value": "config['nb_threads']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_145": {
                "input": {
                    "value": "alfi.sigma_theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_153": {
                "variable": {
                    "value": "list_psi_t[:, :, 1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "list_psi_t[:, :, 1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_84": {
                "variable": {
                    "value": "val_rmse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.norm(theta - list_psi_t[:, -1, 0, :], dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_166": {
                "input": {
                    "value": "theta_real.unsqueeze(1) - list_psi_t[:, :, 0, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_84": {
                "input": {
                    "value": "theta - list_psi_t[:, -1, 0, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/ALFINet.py": {
        "torch": {
            "Adam_89": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "data_encoded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(true_data_encoded, gen_data_encoded)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "input_theta_agg",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data_encoded, theta_gen)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "rim_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(theta_encoded, psi_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_134": {
                "variable": {
                    "value": "list_psi_t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "X.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "nb_iter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_config['nb_iter']",
                            "Subscript"
                        ],
                        [
                            "30",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.proposal.psi_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.simulator.theta_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_358": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_359": {
                "variable": {
                    "value": "self.X_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(values_dir, 'X_train.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_360": {
                "variable": {
                    "value": "self.theta_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(values_dir, 'theta_train.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_361": {
                "variable": {
                    "value": "self.mu_X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(values_dir, 'mu_X.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_362": {
                "variable": {
                    "value": "self.sigma_X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(values_dir, 'sigma_X.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_363": {
                "variable": {
                    "value": "self.mu_theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(values_dir, 'mu_theta.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_364": {
                "variable": {
                    "value": "self.sigma_theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(values_dir, 'sigma_theta.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_365": {
                "variable": {
                    "value": "self.sigma_Xtrain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(values_dir, 'sigma_Xtrain.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_366": {
                "variable": {
                    "value": "self.mu_Xtrain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(values_dir, 'mu_Xtrain.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_367": {
                "variable": {
                    "value": "self.sigma_theta_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(values_dir, 'sigma_theta_train.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_368": {
                "variable": {
                    "value": "self.mu_theta_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(values_dir, 'mu_theta_train.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_379": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(values_dir, 'last-state.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_30": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "randperm_212": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.theta_train.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_300": {
                "variable": {
                    "value": "list_psi_t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nb_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_config['nb_theta']",
                            "Subscript"
                        ],
                        [
                            "test_config['nb_theta']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "test_config['nb_iter']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.psi_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.theta_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_340": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_dir, 'last-model.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_355": {
                "obj": {
                    "value": "curr_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': self.epoch, 'list_loss_epoch': self.list_loss_epoch, 'list_rmse_epoch': self.list_rmse_epoch, 'list_val_loss': self.list_val_loss, 'list_val_rmse': self.list_val_rmse, 'list_epochs_val': self.list_epochs_val, 'lr': lr, 'nb_iter': self.nb_iter}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(values_dir, 'last-state.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_371": {
                "variable": {
                    "value": "self.X_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(values_dir, 'X_test.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_372": {
                "variable": {
                    "value": "self.theta_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(values_dir, 'theta_test.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_373": {
                "variable": {
                    "value": "self.sigma_theta_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(values_dir, 'sigma_theta_test.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_374": {
                "variable": {
                    "value": "self.mu_theta_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(values_dir, 'mu_theta_test.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_375": {
                "variable": {
                    "value": "self.mu_Xtest",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(values_dir, 'mu_Xtest.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_376": {
                "variable": {
                    "value": "self.sigma_Xtest",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(values_dir, 'sigma_Xtest.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_156": {
                "variable": {
                    "value": "theta_gen",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(theta_gen, psi_gen)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_298": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_318": {
                "obj": {
                    "value": "self.X_train.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(values_dir, 'X_train.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_319": {
                "obj": {
                    "value": "self.theta_train.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(values_dir, 'theta_train.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_320": {
                "obj": {
                    "value": "self.mu_X.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(values_dir, 'mu_X.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_321": {
                "obj": {
                    "value": "self.sigma_X.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(values_dir, 'sigma_X.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_322": {
                "obj": {
                    "value": "self.mu_theta.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(values_dir, 'mu_theta.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_323": {
                "obj": {
                    "value": "self.sigma_theta.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(values_dir, 'sigma_theta.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_325": {
                "obj": {
                    "value": "self.mu_theta_train.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(values_dir, 'mu_theta_train.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_326": {
                "obj": {
                    "value": "self.sigma_theta_train.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(values_dir, 'sigma_theta_train.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_327": {
                "obj": {
                    "value": "self.mu_Xtrain.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(values_dir, 'mu_Xtrain.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_328": {
                "obj": {
                    "value": "self.sigma_Xtrain.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(values_dir, 'sigma_Xtrain.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_332": {
                "obj": {
                    "value": "self.X_test.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(values_dir, 'X_test.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_333": {
                "obj": {
                    "value": "self.theta_test.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(values_dir, 'theta_test.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_334": {
                "obj": {
                    "value": "self.mu_theta_test.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(values_dir, 'mu_theta_test.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_335": {
                "obj": {
                    "value": "self.sigma_theta_test.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(values_dir, 'sigma_theta_test.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_336": {
                "obj": {
                    "value": "self.mu_Xtest.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(values_dir, 'mu_Xtest.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_337": {
                "obj": {
                    "value": "self.sigma_Xtest.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(values_dir, 'sigma_Xtest.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_378": {
                "f": {
                    "value": "os.path.join(model_dir, 'last-model.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_247": {
                "input": {
                    "value": "mse_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "mse_batch + weights.weight_last(losses.loss_mse(thetas[i], list_psi_t[i])) / meta_batch_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_358": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_num_threads_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/DataAggregator.py": {
        "torch": {
            "Linear_15": {
                "variable": {
                    "value": "self.fc1_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.fc2_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.fc3_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['output_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Adam_24": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_27": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1_layer(xt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2_layer(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_36": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc3_layer(out)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/GRU.py": {
        "torch": {
            "Linear_12": {
                "variable": {
                    "value": "self.reset_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size + st_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "st_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.update_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size + st_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "st_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.out_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size + st_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "st_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_21": {
                "variable": {
                    "value": "stacked_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xt, st]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_23": {
                "variable": {
                    "value": "update",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.update_gate(stacked_inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_24": {
                "variable": {
                    "value": "reset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.reset_gate(stacked_inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_25": {
                "variable": {
                    "value": "out_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out_gate(torch.cat([xt, st * reset], dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_25": {
                "tensors": {
                    "value": "[xt, st * reset]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/RIM.py": {
        "torch": {
            "Linear_21": {
                "variable": {
                    "value": "self.fc0_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.fc1_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.fc3_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "st_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.fc4_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_27": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_32": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc0_layer.forward(xt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1_layer.forward(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_37": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc3_layer.forward(st_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_40": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc4_layer.forward(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-self.bounded",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.bounded",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_56": {
                "*size": {
                    "value": "(batch_dim, self.st_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "models/ThetaAggregator.py": {
        "torch": {
            "Linear_15": {
                "variable": {
                    "value": "self.fc1_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.fc2_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.fc4_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.fc5_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.fc3_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_21": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_24": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1_layer(xt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_26": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2_layer(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_28": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc4_layer(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc5_layer(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_31": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc3_layer(out)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "proposals/ConstantProposal.py": {
        "torch": {
            "device_18": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "proposals/FixedVarianceGaussianProposal.py": {
        "torch": {
            "Normal_14": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "self.psi[:, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_21": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "proposals/GaussianProposal.py": {
        "torch": {
            "exp_14": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.psi[:, 1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Normal_15": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "self.psi[:, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(self.psi[:, 1, :])",
                            "Call"
                        ],
                        [
                            "torch.log(self.config['sigma'] * torch.ones(mu.size())).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.exp(psi[:, 1, :])",
                            "Call"
                        ],
                        [
                            "grad.std(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_24": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.config['sigma'] * torch.ones(mu.size())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_25": {
                "variable": {
                    "value": "self.psi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mu, sigma)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_30": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "psi[:, 1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_33": {
                "variable": {
                    "value": "grad_psi",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grad_mu.unsqueeze(1), (sigma * grad_sigma).unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_24": {
                "*size": {
                    "value": "mu.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "proposals/GaussianProposalEllipsoid.py": {
        "torch": {
            "exp_13": {
                "variable": {
                    "value": "sigmas",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.psi[:, 1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_18": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.psi.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "sample_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.psi.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_35": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.config['sigma'] * torch.ones(mu.size())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_36": {
                "variable": {
                    "value": "self.psi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mu, sigma)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_42": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "psi[:, 1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "grad_psi",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grad_mu.unsqueeze(1), (sigma * grad_sigma).unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_52": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "a.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_22": {
                "variable": {
                    "value": "sphere_contour",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "scale": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_33": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "norm_24": {
                "input": {
                    "value": "sphere_contour",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Normal(loc=0, scale=1).sample(self.psi[:, 1, :].size())",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_27": {
                "input": {
                    "value": "el_axes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.create_diag(sigmas_min + i * step_sigmas)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "unit_sph_cont",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(sphere_contour / torch.norm(sphere_contour, p=2, dim=1).unsqueeze(1)).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_25": {
                "input": {
                    "value": "sphere_contour",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Normal(loc=0, scale=1).sample(self.psi[:, 1, :].size())",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_25": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_35": {
                "*size": {
                    "value": "mu.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_23": {
                "input": {
                    "value": "sphere_contour",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Normal(loc=0, scale=1).sample(self.psi[:, 1, :].size())",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "simulators/GaussianSimulator.py": {
        "torch": {
            "tensor_13": {
                "variable": {
                    "value": "self.min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-10.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_14": {
                "variable": {
                    "value": "self.max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[10.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Uniform_22": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "self.min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "high": {
                    "value": "self.max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_30": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "samples.std(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_31": {
                "variable": {
                    "value": "thetas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mu, sigma)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Normal_26": {
                "loc": {
                    "value": "theta[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.exp(theta[:, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_26": {
                "input": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_26": {
                "input": {
                    "value": "theta[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "simulators/LinearRegressionSimulator.py": {
        "torch": {
            "tensor_16": {
                "variable": {
                    "value": "self.angle_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "angle_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_17": {
                "variable": {
                    "value": "self.angle_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "angle_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pi / 2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_18": {
                "variable": {
                    "value": "self.offset_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "offset_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_19": {
                "variable": {
                    "value": "self.offset_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "offset_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_21": {
                "variable": {
                    "value": "self.x_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "dim_x + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_22": {
                "variable": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Uniform_33": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "self.angle_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "high": {
                    "value": "self.angle_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Uniform_36": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "self.offset_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "high": {
                    "value": "self.offset_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tan_43": {
                "variable": {
                    "value": "thetas[:, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "thetas[:, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Uniform_47": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "self.offset_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "high": {
                    "value": "self.offset_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_48": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(d.sample(torch.Size([n_exp, n_samp, self.p])), torch.ones(n_exp, n_samp, 1).to(self.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "X_real",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(X, Y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "variable": {
                    "value": "thetas",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(X.shape[0], X.shape[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "variable": {
                    "value": "sigmas",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(X.shape[0], X.shape[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_64": {
                "input": {
                    "value": "XT_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_t.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "X_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X[i, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "atan_65": {
                "variable": {
                    "value": "thetas[i, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "thetas[i, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "diag_66": {
                "variable": {
                    "value": "sigmas[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(XT_t, X_t) * self.sigma.cpu() / X.shape[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_49": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((d.sample(torch.Size([n_exp, n_samp, self.p])), torch.ones(n_exp, n_samp, 1).to(self.device)), 2)",
                            "Call"
                        ],
                        [
                            "samples[:, :, :-1]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "thetas.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_49": {
                "loc": {
                    "value": "torch.tensor(0.0).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_49": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_48": {
                "*size": {
                    "value": "n_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "thetas.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "n_samp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "inverse_64": {
                "input": {
                    "value": "torch.matmul(XT_t, X_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_66": {
                "input": {
                    "value": "XT_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_t.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "X_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X[i, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_49": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "simulators/MultiDistriSimulator.py": {
        "torch": {
            "tensor_9": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.31229955, 0.10499961, 0.48310515, -0.3249938, -0.26387927], [0.10499961, 1.15833058, -0.55865473, 0.25275522, -0.39790775], [0.48310515, -0.55865473, 2.25874579, -0.52087938, -0.39271231], [-0.3249938, 0.25275522, -0.52087938, 1.4034925, -0.63521059], [-0.26387927, -0.39790775, -0.39271231, -0.63521059, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_17": {
                "variable": {
                    "value": "self.min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-3.0",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_18": {
                "variable": {
                    "value": "self.max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3.0",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Uniform_23": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "self.min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "high": {
                    "value": "self.max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Uniform_31": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "self.min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "high": {
                    "value": "self.max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_37": {
                "variable": {
                    "value": "unit",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ],
                        [
                            "samples.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "inverse_59": {
                "variable": {
                    "value": "R_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.R.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_62": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(self.R.cpu())",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "samples.view(-1, 5).unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "thetas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z[:, :, [0]].mean(1), torch.log(z[:, :, [1]].std(1)) * 3, z[:, :, [3]].max(1)[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Normal_39": {
                "variable": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "theta[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale": {
                    "value": "unit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(n_exp).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Normal_41": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "3 * unit",
                    "type": "BinOp",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.exp(theta[:, 1] / 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_43": {
                "variable": {
                    "value": "d2_1",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "-2 * unit",
                    "type": "BinOp",
                    "possible_values": []
                },
                "scale": {
                    "value": "unit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(n_exp).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Normal_44": {
                "variable": {
                    "value": "d2_2",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "2 * unit",
                    "type": "BinOp",
                    "possible_values": []
                },
                "scale": {
                    "value": "0.5 * unit",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Bernoulli_45": {
                "variable": {
                    "value": "d2_b",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "0.5 * unit",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Uniform_49": {
                "variable": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "-5 * unit",
                    "type": "BinOp",
                    "possible_values": []
                },
                "high": {
                    "value": "theta[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Exponential_51": {
                "variable": {
                    "value": "d4",
                    "type": "variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "0.5 * unit",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z0, z1, z2, z3, z4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_54": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.R",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "z.view(-1, 5).unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_41": {
                "input": {
                    "value": "theta[:, 1] / 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_63": {
                "input": {
                    "value": "z[:, :, [1]].std(1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "simulators/PoissonSimulator.py": {
        "torch": {
            "tensor_14": {
                "variable": {
                    "value": "self.min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_15": {
                "variable": {
                    "value": "self.max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Uniform_23": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "self.min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "high": {
                    "value": "self.max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Poisson_27": {
                "rate": {
                    "value": "torch.exp(theta.view(theta.shape[0], -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_27": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_31": {
                "input": {
                    "value": "samples.mean(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_27": {
                "input": {
                    "value": "theta.view(theta.shape[0], -1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "simulators/Simulator.py": {
        "torch": {
            "log_52": {
                "input": {
                    "value": "1 + y",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "simulators/WeinbergSimulator.py": {
        "torch": {
            "gather_15": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "index.view(views).expand(expanse)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_31": {
                "variable": {
                    "value": "A_FB_EN",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(sqrts - MZ) / MZ * 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linspace_45": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_46": {
                "variable": {
                    "value": "maxval",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "variable": {
                    "value": "X_real",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_theta, n_samp)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Uniform_90": {
                "variable": {
                    "value": "thetas",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "self.min_theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "high": {
                    "value": "self.max_theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Uniform_60": {
                "variable": {
                    "value": "X_new",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "high": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_62": {
                "variable": {
                    "value": "ycut",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "n_samp_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(100, n_samp * 50)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_46": {
                "input": {
                    "value": "self.diffxsec(x, sqrtshalf, gf)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/losses.py": {
        "torch": {
            "abs_9": {
                "input": {
                    "value": "list_psi_t[:, 0] - theta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_9": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Normal_13": {
                "loc": {
                    "value": "list_psi_t[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.exp(list_psi_t[:, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_13": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_13": {
                "input": {
                    "value": "list_psi_t[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "utils/visualization.py": {
        "torch": {
            "min_253": {
                "variable": {
                    "value": "min_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "min_x_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(X_real) - 3 * torch.std(X_real)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_254": {
                "variable": {
                    "value": "max_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "min_x_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(X_real) - 3 * torch.std(X_real)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_249": {
                "input": {
                    "value": "X_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sim.forward(theta_star.unsqueeze(0), nb_samples_real).view(-1, x_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_250": {
                "input": {
                    "value": "X_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sim.forward(theta_gen.view(nb_samples_gen, -1), 1).view(-1, x_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_251": {
                "input": {
                    "value": "X_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sim.forward(theta_star.unsqueeze(0), nb_samples_real).view(-1, x_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_252": {
                "input": {
                    "value": "X_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sim.forward(theta_gen.view(nb_samples_gen, -1), 1).view(-1, x_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "std_249": {
                "input": {
                    "value": "X_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sim.forward(theta_star.unsqueeze(0), nb_samples_real).view(-1, x_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "std_250": {
                "input": {
                    "value": "X_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sim.forward(theta_gen.view(nb_samples_gen, -1), 1).view(-1, x_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "std_251": {
                "input": {
                    "value": "X_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sim.forward(theta_star.unsqueeze(0), nb_samples_real).view(-1, x_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "std_252": {
                "input": {
                    "value": "X_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sim.forward(theta_gen.view(nb_samples_gen, -1), 1).view(-1, x_dim)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/weights.py": {
        "torch": {
            "tensor_10": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(beta).to(device)",
                            "Call"
                        ],
                        [
                            "3.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_3": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_6": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_9": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_19": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_28": {
                "input": {
                    "value": "loss_t - min_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linspace_14": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_t.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_21": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_t.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_t.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tril_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_21": {
                "n": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_t.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "min_26": {
                "input": {
                    "value": "loss_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_t.repeat(loss_t.shape[0], 1) * ones_tril",
                            "BinOp"
                        ],
                        [
                            "loss_matrix + loss_matrix[1, 0] * torch.ones(n, n).triu().to(device)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_24": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_t.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_t.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "triu_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_12": {
                "input": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(beta).to(device)",
                            "Call"
                        ],
                        [
                            "3.0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}