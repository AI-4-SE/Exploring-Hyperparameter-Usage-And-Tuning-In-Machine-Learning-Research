{
    "datasets/lsunbed.py": {
        "tensorflow": {
            "shuffle_74": {
                "value": {
                    "value": "bufsiz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "batch_74": {
                "tensors": {
                    "value": "bsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "datasets/mnist.py": {
        "tensorflow": {
            "shuffle_67": {
                "value": {
                    "value": "bufsiz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "batch_67": {
                "tensors": {
                    "value": "bsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "lsunbed_style.py": {
        "tensorflow": {
            "set_seed_105": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_48": {
                "t": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "super().generate(z)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mnist_mlp.py": {
        "tensorflow": {
            "clip_by_value_38": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x[:, :784]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_seed_86": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_39": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "super().generate(z)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x[:, :784], 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "mnist_style.py": {
        "tensorflow": {
            "get_logger_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_seed_104": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_51": {
                "t": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "super().generate(z)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/alae.py": {
        "tensorflow": {
            "Sequential_30": {
                "variable": {
                    "value": "self.fakepass",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[self.map, self.gen, self.enc, self.disc]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.realpass",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[self.enc, self.disc]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.latentpass",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[self.gen, self.enc]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adam_39": {
                "variable": {
                    "value": "self.ed_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "beta_1": {
                    "value": "beta1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta1",
                            "Method Argument"
                        ]
                    ]
                },
                "beta_2": {
                    "value": "beta2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_40": {
                "variable": {
                    "value": "self.fg_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "beta_1": {
                    "value": "beta1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta1",
                            "Method Argument"
                        ]
                    ]
                },
                "beta_2": {
                    "value": "beta2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_41": {
                "variable": {
                    "value": "self.eg_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "beta_1": {
                    "value": "beta1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta1",
                            "Method Argument"
                        ]
                    ]
                },
                "beta_2": {
                    "value": "beta2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "normal_126": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(bsize, self.z_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_146": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(x.shape[0], self.z_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Checkpoint_181": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "map": {
                    "value": "self.map",
                    "type": "Attribute",
                    "possible_values": []
                },
                "enc": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gen": {
                    "value": "self.gen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "disc": {
                    "value": "self.disc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Checkpoint_195": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "map": {
                    "value": "self.map",
                    "type": "Attribute",
                    "possible_values": []
                },
                "enc": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gen": {
                    "value": "self.gen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "disc": {
                    "value": "self.disc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_82": {
                "variable": {
                    "value": "fakeloss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.math.softplus(self.fakepass(z))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_83": {
                "variable": {
                    "value": "realloss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.math.softplus(-self.realpass(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_101": {
                "input_tensor": {
                    "value": "tf.math.softplus(-self.fakepass(z))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_114": {
                "input_tensor": {
                    "value": "tf.square(latent - recovered)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientTape_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_87": {
                "input_tensor": {
                    "value": "[tf.reduce_mean(tf.square(g)) for g in grad]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "softplus_101": {
                "features": {
                    "value": "-self.fakepass(z)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "square_114": {
                "x": {
                    "value": "latent - recovered",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GradientTape_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softplus_82": {
                "features": {
                    "value": "self.fakepass(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_83": {
                "features": {
                    "value": "-self.realpass(x)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_by_value_152": {
                "t": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-grad_clip",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "grad_clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_88": {
                "input_tensor": {
                    "value": "tf.square(g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_88": {
                "x": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/experimental/stylealae/encoder.py": {
        "tensorflow": {
            "zeros_31": {
                "variable": {
                    "value": "self.base_style",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self.latent_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_80": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.from_rgb[start](x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ],
                        [
                            "self.normalize(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(self.conv1(x), alpha=0.2)",
                            "Call"
                        ],
                        [
                            "self.normalize(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(self.conv2(x), alpha=0.2)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2D_112": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_131": {
                "variable": {
                    "value": "self.style_proj1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_132": {
                "variable": {
                    "value": "self.style_proj2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_151": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "moments_173": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.from_rgb[start](x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ],
                        [
                            "self.normalize(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(self.conv1(x), alpha=0.2)",
                            "Call"
                        ],
                        [
                            "self.normalize(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(self.conv2(x), alpha=0.2)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_175": {
                "variable": {
                    "value": "log_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(tf.sqrt(var), eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_177": {
                "variable": {
                    "value": "stat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mean, log_sigma]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[Blur(), conv2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "leaky_relu_159": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2D_37": {
                "filters": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(self.max_channels, channels)",
                            "Call"
                        ],
                        [
                            "min(self.max_channels, channels)",
                            "Call"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.Conv2D(self.out_dim, 3, 1, padding='SAME', use_bias=False), tf.keras.layers.AveragePooling2D(2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_175": {
                "x": {
                    "value": "tf.sqrt(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_122": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_175": {
                "x": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.from_rgb[start].trainable_variables",
                            "Attribute"
                        ],
                        [
                            "var + block.trainable_variables",
                            "BinOp"
                        ],
                        [
                            "tf.nn.moments(x, axes=[1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2D_118": {
                "filters": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AveragePooling2D_120": {
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/experimental/stylealae/generator.py": {
        "tensorflow": {
            "ones_31": {
                "variable": {
                    "value": "self.const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, resolution, resolution, out_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_112": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[conv1, Blur()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2D_113": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_119": {
                "variable": {
                    "value": "self.latent_proj1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.out_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_122": {
                "variable": {
                    "value": "self.latent_proj2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.out_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_157": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.const",
                            "Attribute"
                        ],
                        [
                            "block(x, styles, styles)",
                            "Call"
                        ],
                        [
                            "self.apply_noise(self.conv1(x), self.noise_affine1)",
                            "Call"
                        ],
                        [
                            "self.apply_style(x, s1, self.latent_proj1)",
                            "Call"
                        ],
                        [
                            "self.apply_noise(self.conv2(x), self.noise_affine2)",
                            "Call"
                        ],
                        [
                            "self.apply_style(x, s2, self.latent_proj2)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(x + affine(noise), alpha=0.2)",
                            "Call"
                        ],
                        [
                            "self.normalize(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "normal_159": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, shape[1], shape[2], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "leaky_relu_161": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x + affine(noise)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2D_99": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2D_41": {
                "filters": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[Repeat2D(2), tf.keras.layers.Conv2D(self.out_dim, 3, 1, padding='same', use_bias=False)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_107": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_182": {
                "x": {
                    "value": "log_sigma[:, None, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2D_104": {
                "filters": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/experimental/stylealae/maplatent.py": {
        "tensorflow": {
            "LeakyReLU_19": {
                "variable": {
                    "value": "self.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.Dense(self.hidden_dim, activation=self.leaky_relu) for _ in range(self.num_layer - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dense_24": {
                "units": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_21": {
                "units": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/experimental/stylealae/stylealae.py": {
        "tensorflow": {
            "Adam_43": {
                "variable": {
                    "value": "self.rctor_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.settings['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "beta_1": {
                    "value": "self.settings['beta1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "beta_2": {
                    "value": "self.settings['beta2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "resize_73": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize(x, [size, size], antialias=True)",
                            "Call"
                        ],
                        [
                            "self.preproc(x)",
                            "Call"
                        ],
                        [
                            "self.preproc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "[size, size]",
                    "type": "List",
                    "possible_values": []
                },
                "antialias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_94": {
                "input_tensor": {
                    "value": "tf.abs(rctor - x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_94": {
                "x": {
                    "value": "rctor - x",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/experimental/stylealae/utils.py": {
        "tensorflow": {
            "Variable_11": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random.normal(self.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_12": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(self.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "moments_38": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, :, None, :, None, :]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(x, [1, 1, self.factor, 1, self.factor, 1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tile_58": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, :, None, :, None, :]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(x, [1, 1, self.factor, 1, self.factor, 1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, self.factor, 1, self.factor, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_73": {
                "variable": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "kernel[..., None, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tile_85": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, channel, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_59": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, :, None, :, None, :]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(x, [1, 1, self.factor, 1, self.factor, 1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, h * self.factor, w * self.factor, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "depthwise_conv2d_86": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, :, None, :, None, :]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(x, [1, 1, self.factor, 1, self.factor, 1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filter": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([1, 2, 1], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "kernel[:, None] * kernel[None, :]",
                            "BinOp"
                        ],
                        [
                            "kernel / kernel.sum()",
                            "BinOp"
                        ],
                        [
                            "tf.tile(self.kernel, [1, 1, channel, 1])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "normal_11": {
                "shape": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_12": {
                "shape": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_39": {
                "x": {
                    "value": "tf.math.sqrt(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_83": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, :, None, :, None, :]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(x, [1, 1, self.factor, 1, self.factor, 1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_39": {
                "x": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.moments(x, axes=[1, 2], keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/mlpalae.py": {
        "tensorflow": {
            "Sequential_40": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.Dense(dim, activation=activation) for dim in dims[:-1]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dense_44": {
                "units": {
                    "value": "dims[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dense_41": {
                "units": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/trainer.py": {
        "tensorflow": {
            "create_file_writer_46": {
                "variable": {
                    "value": "self.train_summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "train_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(summary_path, 'train')",
                            "Call"
                        ]
                    ]
                }
            },
            "create_file_writer_47": {
                "variable": {
                    "value": "self.test_summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "test_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(summary_path, 'test')",
                            "Call"
                        ]
                    ]
                }
            },
            "image_132": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'image'",
                            "Method Argument"
                        ]
                    ]
                },
                "data": {
                    "value": "flat[idx:idx + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "step + 1",
                            "BinOp"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_117": {
                "name": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "metrics.items()",
                            "Call"
                        ],
                        [
                            "avgs.keys()",
                            "Call"
                        ],
                        [
                            "metric.items()",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "metrics.items()",
                            "Call"
                        ],
                        [
                            "metric.items()",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "step + 1",
                            "BinOp"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ],
                        [
                            "step",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}