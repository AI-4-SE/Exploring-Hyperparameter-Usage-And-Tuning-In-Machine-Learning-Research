{
    "dabnet.py": {
        "torch": {
            "Sequential_14": {
                "variable": {
                    "value": "self.init_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv(3, 32, 3, 2, padding=1, bn_acti=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.DAB_Block_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.DAB_Block_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv(259, classes, 1, 1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_59": {
                "variable": {
                    "value": "output1_0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output1_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.downsample_1(output0_cat)",
                            "Call"
                        ],
                        [
                            "F.interpolate(output1_0, down_2.shape[-2:], align_corners=False, mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "down_2.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_60": {
                "variable": {
                    "value": "output1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.DAB_Block_1(output1_0)",
                            "Call"
                        ],
                        [
                            "F.interpolate(output1, down_2.shape[-2:], align_corners=False, mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "down_2.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_69": {
                "variable": {
                    "value": "output2_0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output2_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.downsample_2(output1_cat)",
                            "Call"
                        ],
                        [
                            "F.interpolate(output2_0, down_3.shape[-2:], align_corners=False, mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "down_3.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_70": {
                "variable": {
                    "value": "output2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.DAB_Block_2(output2_0)",
                            "Call"
                        ],
                        [
                            "F.interpolate(output2, down_3.shape[-2:], align_corners=False, mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "down_3.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_75": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(output2_cat)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, input.size()[2:], mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "input.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nIn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nIn",
                            "Method Argument"
                        ],
                        [
                            "nIn",
                            "Method Argument"
                        ],
                        [
                            "nIn",
                            "Method Argument"
                        ],
                        [
                            "nIn",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nOut",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nOut",
                            "Method Argument"
                        ],
                        [
                            "nOut",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kSize",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_107": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nIn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nIn",
                            "Method Argument"
                        ],
                        [
                            "nIn",
                            "Method Argument"
                        ],
                        [
                            "nIn",
                            "Method Argument"
                        ],
                        [
                            "nIn",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "PReLU_108": {
                "variable": {
                    "value": "self.acti",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "nIn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nIn",
                            "Method Argument"
                        ],
                        [
                            "nIn",
                            "Method Argument"
                        ],
                        [
                            "nIn",
                            "Method Argument"
                        ],
                        [
                            "nIn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MaxPool2d_164": {
                "variable": {
                    "value": "self.max_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_183": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_172": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(input)",
                            "Call"
                        ],
                        [
                            "self.bn_prelu(output)",
                            "Call"
                        ],
                        [
                            "self.bn(input)",
                            "Call"
                        ],
                        [
                            "self.acti(output)",
                            "Call"
                        ],
                        [
                            "self.bn_relu_1(input)",
                            "Call"
                        ],
                        [
                            "self.conv3x3(output)",
                            "Call"
                        ],
                        [
                            "br1 + br2",
                            "BinOp"
                        ],
                        [
                            "self.bn_relu_2(output)",
                            "Call"
                        ],
                        [
                            "self.conv1x1(output)",
                            "Call"
                        ],
                        [
                            "self.conv3x3(input)",
                            "Call"
                        ],
                        [
                            "F.interpolate(output, max_pool.shape[-2:], align_corners=True, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.cat([output, max_pool], 1)",
                            "Call"
                        ],
                        [
                            "self.bn_prelu(output)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "max_pool.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output, max_pool]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_52": {
                "tensors": {
                    "value": "[output0, down_1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_62": {
                "tensors": {
                    "value": "[output1, output1_0, down_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_72": {
                "tensors": {
                    "value": "[output2, output2_0, down_3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_185": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "transformer_net.py": {
        "torch": {
            "InstanceNorm2d_13": {
                "variable": {
                    "value": "self.in1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_15": {
                "variable": {
                    "value": "self.in2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_17": {
                "variable": {
                    "value": "self.in3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_27": {
                "variable": {
                    "value": "self.in4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_30": {
                "variable": {
                    "value": "self.in5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_54": {
                "variable": {
                    "value": "self.reflection_pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "reflection_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_73": {
                "variable": {
                    "value": "self.in1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_75": {
                "variable": {
                    "value": "self.in2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_100": {
                "variable": {
                    "value": "self.reflection_pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "reflection_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_101": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Upsample_97": {
                "variable": {
                    "value": "self.upsample_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "upsample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "no_grad_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_80": {
                "variable": {
                    "value": "styled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "styled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "style_model(image)",
                            "Call"
                        ],
                        [
                            "F.interpolate(styled, image.size()[2:], mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "image.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_91": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "glob.glob('styles/*.pth')[style_number]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "chunk_307": {
                "variable": {
                    "value": "(x1, y1, x2, y2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes_xyxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes_xyxy",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_314": {
                "variable": {
                    "value": "(y1, x1, y2, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes_yxyx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes_yxyx",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "synchronize_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_311": {
                "tensors": {
                    "value": "[x1, y1, w, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_318": {
                "tensors": {
                    "value": "[x1, y1, w, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_589": {
                "variable": {
                    "value": "self.cmap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.cmap[:n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_72": {
                "f": {
                    "value": "pretrained/DABNet_cityscapes.pth",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}