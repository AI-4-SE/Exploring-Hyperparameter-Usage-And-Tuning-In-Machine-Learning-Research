{
    "policy_learning/efficient_gmm_baselines.py": {
        "sklearn": {
            "PolynomialFeatures_27": {
                "variable": {
                    "value": "self.sampler",
                    "possible_values": []
                },
                "degree": {
                    "value": "degree",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "RBFSampler_49": {
                "variable": {
                    "value": "self.sampler",
                    "possible_values": []
                },
                "gamma": {
                    "value": "gamma",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "n_components": {
                    "value": "num_moments",
                    "possible_values": [
                        [
                            "phi.shape[1]",
                            "Subscript"
                        ],
                        [
                            "phi.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_93": {
                "variable": {
                    "value": "norm_matrix",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "c_sqrt_inv.real",
                    "possible_values": []
                }
            },
            "gather_127": {
                "variable": {
                    "value": "y_dev_selected",
                    "possible_values": []
                },
                "input": {
                    "value": "y_dev_cf",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "policy_a",
                    "possible_values": [
                        [
                            "(policy_out_dev > 0).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_149": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "policy_network.parameters()",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0",
                    "possible_values": []
                }
            },
            "from_numpy_36": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "out",
                    "possible_values": [
                        [
                            "self.sampler.transform(x_batch.detach().cpu().numpy())",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(out).double()",
                            "Call"
                        ],
                        [
                            "out.cuda()",
                            "Call"
                        ],
                        [
                            "self.sampler.transform(x_batch.detach().cpu().numpy())",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(out).double().view(-1, self.num_moments)",
                            "Call"
                        ],
                        [
                            "out.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_58": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "out",
                    "possible_values": [
                        [
                            "self.sampler.transform(x_batch.detach().cpu().numpy())",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(out).double()",
                            "Call"
                        ],
                        [
                            "out.cuda()",
                            "Call"
                        ],
                        [
                            "self.sampler.transform(x_batch.detach().cpu().numpy())",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(out).double().view(-1, self.num_moments)",
                            "Call"
                        ],
                        [
                            "out.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_94": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "diag_102": {
                "input": {
                    "value": "v ** (-0.5)",
                    "possible_values": []
                }
            },
            "eye_107": {
                "n": {
                    "value": "num_moments",
                    "possible_values": [
                        [
                            "phi.shape[1]",
                            "Subscript"
                        ],
                        [
                            "phi.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_available_145": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "LBFGS_168": {
                "variable": {
                    "value": "lbfgs",
                    "possible_values": []
                },
                "params": {
                    "value": "policy_network.parameters()",
                    "possible_values": []
                }
            },
            "is_available_37": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_59": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "eye_163": {
                "variable": {
                    "value": "norm_matrix",
                    "possible_values": []
                },
                "n": {
                    "value": "phi_train.shape[1]",
                    "possible_values": []
                }
            },
            "is_available_164": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "sigmoid_112": {
                "input": {
                    "value": "policy_out",
                    "possible_values": [
                        [
                            "policy_network(x_batch)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "analysis/evaluate_policy.py": {
        "torch": {
            "gather_7": {
                "variable": {
                    "value": "y_dev_selected",
                    "possible_values": []
                },
                "input": {
                    "value": "y_test_cf",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "policy_a",
                    "possible_values": [
                        [
                            "(policy_out_dev > 0).long()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nuisance/estimate_mean_y_network.py": {
        "torch": {
            "MSELoss_125": {
                "variable": {
                    "value": "loss_function",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Adam_150": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "mean_y_network.parameters()",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.linear_1",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.linear_2",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.linear_3",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.linear_1",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "possible_values": [
                        [
                            "2 * dim_x + dim_x * (dim_x - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "dim_x",
                            "Name"
                        ],
                        [
                            "2 * dim_x + dim_x * (dim_x - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "dim_x",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "50",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.linear_2",
                    "possible_values": []
                },
                "in_features": {
                    "value": "50",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "is_available_135": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "LBFGS_140": {
                "variable": {
                    "value": "lbfgs",
                    "possible_values": []
                },
                "params": {
                    "value": "mean_y_network.parameters()",
                    "possible_values": []
                }
            },
            "gather_195": {
                "variable": {
                    "value": "pred_y_dev",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_y_network(x_dev)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "a_dev.view(-1, 1)",
                    "possible_values": []
                }
            },
            "cat_86": {
                "tensors": {
                    "value": "[out_0, out_1]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "gather_144": {
                "variable": {
                    "value": "pred_y_",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_y_network(x)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "a.view(-1, 1)",
                    "possible_values": []
                }
            },
            "gather_162": {
                "variable": {
                    "value": "pred_y_dev",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_y_network(x_dev)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "a_dev.view(-1, 1)",
                    "possible_values": []
                }
            },
            "gather_173": {
                "variable": {
                    "value": "pred_y_batch",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_y_network(x_batch)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "a_batch.view(-1, 1)",
                    "possible_values": []
                }
            },
            "gather_182": {
                "variable": {
                    "value": "pred_y_dev",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_y_network(x_dev)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "a_dev.view(-1, 1)",
                    "possible_values": []
                }
            },
            "leaky_relu_32": {
                "input": {
                    "value": "h",
                    "possible_values": [
                        [
                            "self.linear_1(x)",
                            "Call"
                        ],
                        [
                            "self.linear_2(F.leaky_relu(h))",
                            "Call"
                        ],
                        [
                            "self.linear_3(F.leaky_relu(h))",
                            "Call"
                        ],
                        [
                            "self.linear_1(x)",
                            "Call"
                        ],
                        [
                            "self.linear_2(F.leaky_relu(h))",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_33": {
                "input": {
                    "value": "h",
                    "possible_values": [
                        [
                            "self.linear_1(x)",
                            "Call"
                        ],
                        [
                            "self.linear_2(F.leaky_relu(h))",
                            "Call"
                        ],
                        [
                            "self.linear_3(F.leaky_relu(h))",
                            "Call"
                        ],
                        [
                            "self.linear_1(x)",
                            "Call"
                        ],
                        [
                            "self.linear_2(F.leaky_relu(h))",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_63": {
                "input": {
                    "value": "h",
                    "possible_values": [
                        [
                            "self.linear_1(x)",
                            "Call"
                        ],
                        [
                            "self.linear_2(F.leaky_relu(h))",
                            "Call"
                        ],
                        [
                            "self.linear_3(F.leaky_relu(h))",
                            "Call"
                        ],
                        [
                            "self.linear_1(x)",
                            "Call"
                        ],
                        [
                            "self.linear_2(F.leaky_relu(h))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nuisance/estimate_propensity_network.py": {
        "torch": {
            "NLLLoss_188": {
                "variable": {
                    "value": "nll_loss",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Adam_214": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "propensity_network.parameters()",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.linear_1",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.linear_2",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.linear_3",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.linear_1",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.linear_2",
                    "possible_values": []
                },
                "in_features": {
                    "value": "50",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "from_numpy_154": {
                "variable": {
                    "value": "result",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "out",
                    "possible_values": [
                        [
                            "self.propensity_function(x_np)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_200": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "LBFGS_205": {
                "variable": {
                    "value": "lbfgs",
                    "possible_values": []
                },
                "params": {
                    "value": "propensity_network.parameters()",
                    "possible_values": []
                }
            },
            "softmax_33": {
                "input": {
                    "value": "h",
                    "possible_values": [
                        [
                            "self.linear_1(x)",
                            "Call"
                        ],
                        [
                            "self.linear_2(F.leaky_relu(h))",
                            "Call"
                        ],
                        [
                            "self.linear_3(F.leaky_relu(h))",
                            "Call"
                        ],
                        [
                            "self.linear_1(x)",
                            "Call"
                        ],
                        [
                            "self.linear_1(x)",
                            "Call"
                        ],
                        [
                            "self.linear_2(F.leaky_relu(h))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "softmax_69": {
                "input": {
                    "value": "h",
                    "possible_values": [
                        [
                            "self.linear_1(x)",
                            "Call"
                        ],
                        [
                            "self.linear_2(F.leaky_relu(h))",
                            "Call"
                        ],
                        [
                            "self.linear_3(F.leaky_relu(h))",
                            "Call"
                        ],
                        [
                            "self.linear_1(x)",
                            "Call"
                        ],
                        [
                            "self.linear_1(x)",
                            "Call"
                        ],
                        [
                            "self.linear_2(F.leaky_relu(h))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_95": {
                "tensors": {
                    "value": "[out_0, out_1]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_108": {
                "tensors": {
                    "value": "[out_0, out_1]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "is_available_155": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "log_170": {
                "input": {
                    "value": "output[:, 0]",
                    "possible_values": []
                }
            },
            "leaky_relu_31": {
                "input": {
                    "value": "h",
                    "possible_values": [
                        [
                            "self.linear_1(x)",
                            "Call"
                        ],
                        [
                            "self.linear_2(F.leaky_relu(h))",
                            "Call"
                        ],
                        [
                            "self.linear_3(F.leaky_relu(h))",
                            "Call"
                        ],
                        [
                            "self.linear_1(x)",
                            "Call"
                        ],
                        [
                            "self.linear_1(x)",
                            "Call"
                        ],
                        [
                            "self.linear_2(F.leaky_relu(h))",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_32": {
                "input": {
                    "value": "h",
                    "possible_values": [
                        [
                            "self.linear_1(x)",
                            "Call"
                        ],
                        [
                            "self.linear_2(F.leaky_relu(h))",
                            "Call"
                        ],
                        [
                            "self.linear_3(F.leaky_relu(h))",
                            "Call"
                        ],
                        [
                            "self.linear_1(x)",
                            "Call"
                        ],
                        [
                            "self.linear_1(x)",
                            "Call"
                        ],
                        [
                            "self.linear_2(F.leaky_relu(h))",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_39": {
                "input": {
                    "value": "h",
                    "possible_values": [
                        [
                            "self.linear_1(x)",
                            "Call"
                        ],
                        [
                            "self.linear_2(F.leaky_relu(h))",
                            "Call"
                        ],
                        [
                            "self.linear_3(F.leaky_relu(h))",
                            "Call"
                        ],
                        [
                            "self.linear_1(x)",
                            "Call"
                        ],
                        [
                            "self.linear_1(x)",
                            "Call"
                        ],
                        [
                            "self.linear_2(F.leaky_relu(h))",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_68": {
                "input": {
                    "value": "h",
                    "possible_values": [
                        [
                            "self.linear_1(x)",
                            "Call"
                        ],
                        [
                            "self.linear_2(F.leaky_relu(h))",
                            "Call"
                        ],
                        [
                            "self.linear_3(F.leaky_relu(h))",
                            "Call"
                        ],
                        [
                            "self.linear_1(x)",
                            "Call"
                        ],
                        [
                            "self.linear_1(x)",
                            "Call"
                        ],
                        [
                            "self.linear_2(F.leaky_relu(h))",
                            "Call"
                        ]
                    ]
                }
            },
            "log_189": {
                "input": {
                    "value": "x_",
                    "possible_values": []
                }
            },
            "log_175": {
                "input": {
                    "value": "output[:, 0]",
                    "possible_values": []
                }
            }
        }
    },
    "nuisance/r_glm.py": {
        "torch": {
            "randn_71": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "*size": {
                    "value": "100000",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "sigmoid_26": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(x, self.weights) + self.intercept",
                    "possible_values": []
                }
            },
            "is_available_13": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "isnan_46": {
                "input": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "torch.DoubleTensor(reg_out[1:])",
                            "Call"
                        ],
                        [
                            "torch.DoubleTensor(lin_reg_out[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_66": {
                "input": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "torch.DoubleTensor(reg_out[1:])",
                            "Call"
                        ],
                        [
                            "torch.DoubleTensor(lin_reg_out[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_17": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.randn(100000, 3).double()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weights",
                    "possible_values": []
                }
            },
            "matmul_26": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.randn(100000, 3).double()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weights",
                    "possible_values": []
                }
            },
            "matmul_84": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.randn(100000, 3).double()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "w",
                    "possible_values": [
                        [
                            "torch.DoubleTensor([1.0, -1.0, 2.0])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "policy_learning/deep_gmm.py": {
        "torch": {
            "Linear_16": {
                "variable": {
                    "value": "self.linear_1",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim_x",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.linear_2",
                    "possible_values": []
                },
                "in_features": {
                    "value": "50",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "is_available_68": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_73": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "gather_129": {
                "variable": {
                    "value": "y_dev_selected",
                    "possible_values": []
                },
                "input": {
                    "value": "y_dev_cf",
                    "possible_values": [
                        [
                            "y_dev_cf.cpu()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "policy_a",
                    "possible_values": [
                        [
                            "(policy_out_dev > 0).long()",
                            "Call"
                        ],
                        [
                            "(policy_out_dev > 0).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_95": {
                "variable": {
                    "value": "y_dev_selected",
                    "possible_values": []
                },
                "input": {
                    "value": "y_dev_cf",
                    "possible_values": [
                        [
                            "y_dev_cf.cpu()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "policy_a",
                    "possible_values": [
                        [
                            "(policy_out_dev > 0).long()",
                            "Call"
                        ],
                        [
                            "(policy_out_dev > 0).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_21": {
                "input": {
                    "value": "h",
                    "possible_values": [
                        [
                            "self.linear_1(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_26": {
                "input": {
                    "value": "policy_out",
                    "possible_values": [
                        [
                            "policy_network(x_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_34": {
                "input": {
                    "value": "policy_out_dev",
                    "possible_values": [
                        [
                            "policy_network(x_dev).detach()",
                            "Call"
                        ],
                        [
                            "policy_network(x_dev).detach().cpu()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "policy_learning/policy_networks.py": {
        "torch": {
            "Linear_11": {
                "variable": {
                    "value": "self.linear",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim_x",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.linear",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.linear_1",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim_x",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.linear_2",
                    "possible_values": []
                },
                "in_features": {
                    "value": "50",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "is_available_24": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_49": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_73": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "leaky_relu_66": {
                "input": {
                    "value": "h",
                    "possible_values": [
                        [
                            "self.linear_1(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "policy_learning/unweighted_baselines.py": {
        "torch": {
            "gather_22": {
                "variable": {
                    "value": "q",
                    "possible_values": []
                },
                "input": {
                    "value": "propensity_network(x)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "a.view(-1, 1)",
                    "possible_values": []
                }
            },
            "gather_30": {
                "variable": {
                    "value": "mean_y_pred_a",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_y_pred",
                    "possible_values": [
                        [
                            "mean_y_network(x)",
                            "Call"
                        ],
                        [
                            "mean_y_network(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "a.view(-1, 1)",
                    "possible_values": []
                }
            },
            "gather_31": {
                "variable": {
                    "value": "q",
                    "possible_values": []
                },
                "input": {
                    "value": "propensity_network(x)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "a.view(-1, 1)",
                    "possible_values": []
                }
            },
            "Adam_67": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "policy_network.parameters()",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0",
                    "possible_values": []
                }
            },
            "is_available_48": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "LBFGS_56": {
                "variable": {
                    "value": "lbfgs",
                    "possible_values": []
                },
                "params": {
                    "value": "policy_network.parameters()",
                    "possible_values": []
                }
            },
            "gather_118": {
                "variable": {
                    "value": "y_dev_selected",
                    "possible_values": []
                },
                "input": {
                    "value": "y_dev_cf",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "policy_a",
                    "possible_values": [
                        [
                            "(policy_out_dev > 0).long()",
                            "Call"
                        ],
                        [
                            "(policy_out_dev > 0).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_91": {
                "variable": {
                    "value": "y_dev_selected",
                    "possible_values": []
                },
                "input": {
                    "value": "y_dev_cf",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "policy_a",
                    "possible_values": [
                        [
                            "(policy_out_dev > 0).long()",
                            "Call"
                        ],
                        [
                            "(policy_out_dev > 0).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "log_10": {
                "input": {
                    "value": "1 + torch.exp(policy_out)",
                    "possible_values": []
                }
            },
            "exp_10": {
                "input": {
                    "value": "policy_out",
                    "possible_values": [
                        [
                            "policy_network(x_batch)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "run_jobs_experiment.py": {
        "torch": {
            "is_available_137": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "manual_seed_157": {
                "seed": {
                    "value": "starting_seed",
                    "possible_values": [
                        [
                            "batch_job['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_available_158": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_138": {
                "type": {
                    "value": "device_i",
                    "possible_values": [
                        [
                            "p_i % num_gpu",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_159": {
                "seed": {
                    "value": "starting_seed",
                    "possible_values": [
                        [
                            "batch_job['seed']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "run_synthetic_experiment.py": {
        "torch": {
            "is_available_182": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "manual_seed_202": {
                "seed": {
                    "value": "starting_seed",
                    "possible_values": [
                        [
                            "batch_job['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_available_203": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_183": {
                "type": {
                    "value": "device_i",
                    "possible_values": [
                        [
                            "p_i % num_gpu",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_204": {
                "seed": {
                    "value": "starting_seed",
                    "possible_values": [
                        [
                            "batch_job['seed']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "scenarios/jobs_scenario.py": {
        "torch": {
            "is_available_47": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "scenarios/quadratic_scenario.py": {
        "torch": {
            "from_numpy_20": {
                "variable": {
                    "value": "self.y_theta_0",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_theta_0",
                    "possible_values": [
                        [
                            "np.array([1.0, -1.0, 0.5, 0, 1.5])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_21": {
                "variable": {
                    "value": "self.y_theta_1",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_theta_1",
                    "possible_values": [
                        [
                            "np.array([-3.0, 0.5, 1.5, -2.5, 0.5])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_22": {
                "variable": {
                    "value": "self.a_theta",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "a_theta",
                    "possible_values": [
                        [
                            "np.array([1.5, 2.0, -2.0, -0.5, 1.5])",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_45": {
                "variable": {
                    "value": "a_probs",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(to_quadratic(x), self.a_theta) + self.a_b",
                    "possible_values": []
                }
            },
            "from_numpy_81": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "possible_values": [
                        [
                            "np.random.normal(self.x_mean, self.x_std.reshape(1, -1), size=(num_data, x_dim))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x).double()",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_95": {
                "variable": {
                    "value": "a",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "a",
                    "possible_values": [
                        [
                            "np.array([np.random.choice([0, 1], p=a_probs[i]) for i in range(num_data)])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(a).long()",
                            "Call"
                        ],
                        [
                            "a.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_96": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y",
                    "possible_values": [
                        [
                            "np.array([y_cf[i, a[i]] for i in range(num_data)])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).double().view(-1, 1)",
                            "Call"
                        ],
                        [
                            "y.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_97": {
                "variable": {
                    "value": "y_cf",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_cf",
                    "possible_values": [
                        [
                            "np.concatenate([y_0, y_1], axis=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_cf).double()",
                            "Call"
                        ],
                        [
                            "y_cf.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_23": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "stack_39": {
                "tensors": {
                    "value": "[y_mean_0, y_mean_1]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "stack_47": {
                "tensors": {
                    "value": "[a_probs, 1 - a_probs]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "is_available_54": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_58": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_82": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_98": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "matmul_37": {
                "input": {
                    "value": "to_quadratic(x)",
                    "possible_values": []
                },
                "other": {
                    "value": "self.y_theta_0",
                    "possible_values": []
                }
            },
            "matmul_38": {
                "input": {
                    "value": "to_quadratic(x)",
                    "possible_values": []
                },
                "other": {
                    "value": "self.y_theta_1",
                    "possible_values": []
                }
            },
            "matmul_45": {
                "input": {
                    "value": "to_quadratic(x)",
                    "possible_values": []
                },
                "other": {
                    "value": "self.a_theta",
                    "possible_values": []
                }
            }
        }
    },
    "scenarios/simple_scenario.py": {
        "torch": {
            "from_numpy_18": {
                "variable": {
                    "value": "self.y_theta_0",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_theta_0",
                    "possible_values": []
                }
            },
            "from_numpy_19": {
                "variable": {
                    "value": "self.y_theta_1",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_theta_1",
                    "possible_values": []
                }
            },
            "from_numpy_20": {
                "variable": {
                    "value": "self.a_theta",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "a_theta",
                    "possible_values": []
                }
            },
            "sigmoid_43": {
                "variable": {
                    "value": "a_probs",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(x, self.a_theta) + self.a_b",
                    "possible_values": []
                }
            },
            "from_numpy_78": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "possible_values": [
                        [
                            "np.random.normal(self.x_mean, self.x_std.reshape(1, -1), size=(num_data, x_dim))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x).double()",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_92": {
                "variable": {
                    "value": "a",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "a",
                    "possible_values": [
                        [
                            "np.array([np.random.choice([0, 1], p=a_probs[i]) for i in range(num_data)])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(a).long()",
                            "Call"
                        ],
                        [
                            "a.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_93": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y",
                    "possible_values": [
                        [
                            "np.array([y_cf[i, a[i]] for i in range(num_data)])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).double().view(-1, 1)",
                            "Call"
                        ],
                        [
                            "y.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_94": {
                "variable": {
                    "value": "y_cf",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_cf",
                    "possible_values": [
                        [
                            "np.concatenate([y_0, y_1], axis=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_cf).double()",
                            "Call"
                        ],
                        [
                            "y_cf.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_21": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "stack_37": {
                "tensors": {
                    "value": "[y_mean_0, y_mean_1]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "stack_44": {
                "tensors": {
                    "value": "[a_probs, 1 - a_probs]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "is_available_51": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_55": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_79": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_95": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "matmul_35": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "np.random.normal(self.x_mean, self.x_std.reshape(1, -1), size=(num_data, x_dim))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x).double()",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.y_theta_0",
                    "possible_values": []
                }
            },
            "matmul_36": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "np.random.normal(self.x_mean, self.x_std.reshape(1, -1), size=(num_data, x_dim))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x).double()",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.y_theta_1",
                    "possible_values": []
                }
            },
            "matmul_43": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "np.random.normal(self.x_mean, self.x_std.reshape(1, -1), size=(num_data, x_dim))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x).double()",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.a_theta",
                    "possible_values": []
                }
            }
        }
    },
    "util/input_embedding.py": {
        "torch": {
            "is_available_9": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_11": {
                "tensors": {
                    "value": "[x, torch.matmul(x_squared, sym)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "matmul_11": {
                "input": {
                    "value": "x_squared",
                    "possible_values": [
                        [
                            "(x.unsqueeze(1) * x.unsqueeze(2)).view(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "sym",
                    "possible_values": [
                        [
                            "torch.DoubleTensor([[1, 0, 0], [0, 1, 0], [0, 1, 0], [0, 0, 1]])",
                            "Call"
                        ],
                        [
                            "sym.cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "util/oadam.py": {
        "torch": {
            "zeros_like_72": {
                "variable": {
                    "value": "state[exp_avg]",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "possible_values": []
                }
            },
            "zeros_like_74": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "possible_values": []
                }
            },
            "zeros_like_76": {
                "variable": {
                    "value": "state[previous_update]",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "possible_values": []
                }
            },
            "zeros_like_79": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "possible_values": []
                }
            },
            "max_99": {
                "input": {
                    "value": "max_exp_avg_sq",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sq",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    }
}