{
    "learning.py": {
        "sklearn": {
            "StratifiedKFold_17": {
                "variable": {
                    "value": "skf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "num_fold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "SVC_34": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "rbf",
                    "type": "str",
                    "possible_values": []
                },
                "C": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "scale",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LogisticRegression_40": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "solver": {
                    "value": "lbfgs",
                    "type": "str",
                    "possible_values": []
                },
                "multi_class": {
                    "value": "multinomial",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "neural.py": {
        "sklearn": {
            "OneHotEncoder_45": {
                "variable": {
                    "value": "enc",
                    "type": "variable",
                    "possible_values": []
                },
                "handle_unknown": {
                    "value": "ignore",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "manual_seed_6": {
                "seed": {
                    "value": "123321",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_36": {
                "variable": {
                    "value": "instance",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.features[index, :].todense()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.h1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_layer_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "30",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.h2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_layer_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "30",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_layer_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "30",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.h3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_layer_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "30",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.h4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_neurons",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_66": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ELU_67": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_68": {
                "variable": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_106": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "BCELoss_108": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_139": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_38": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.targets[index].todense()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "propStar.py": {
        "sklearn": {
            "KBinsDiscretizer_68": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "encode": {
                    "value": "ordinal",
                    "type": "str",
                    "possible_values": []
                },
                "n_bins": {
                    "value": "n_bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TfidfVectorizer_248": {
                "variable": {
                    "value": "vectorizer",
                    "type": "variable",
                    "possible_values": []
                },
                "max_features": {
                    "value": "max_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "MethodArgument"
                        ]
                    ]
                },
                "binary": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TfidfVectorizer_251": {
                "variable": {
                    "value": "vectorizer",
                    "type": "variable",
                    "possible_values": []
                },
                "max_features": {
                    "value": "max_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "MethodArgument"
                        ]
                    ]
                },
                "binary": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "HashingVectorizer_254": {
                "variable": {
                    "value": "vectorizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LabelEncoder_568": {
                "variable": {
                    "value": "le",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "roc_auc_score_584": {
                "variable": {
                    "value": "roc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "le.transform(test_classes)",
                            "Call"
                        ],
                        [
                            "le.transform(test_classes)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict(test_features)",
                            "Call"
                        ],
                        [
                            "model.predict(test_features, return_proba=True)",
                            "Call"
                        ],
                        [
                            "model.predict(test_features, clean_tmp=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "LabelEncoder_640": {
                "variable": {
                    "value": "le",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "roc_auc_score_673": {
                "variable": {
                    "value": "roc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "le.transform(test_classes)",
                            "Call"
                        ],
                        [
                            "le.transform(test_classes)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "preds_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict(test_features, clean_tmp=True, return_int_predictions=False, return_scores=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}