{
    "lwlrap_share.py": {
        "sklearn": {}
    },
    "metrics_plots.py": {
        "sklearn": {
            "label_ranking_average_precision_score_42": {
                "variable": {
                    "value": "overall_lwlrap",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true[nonzero_weight_sample_indices, :] > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_pred[nonzero_weight_sample_indices, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "sample_weight[nonzero_weight_sample_indices]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.sum(y_true > 0, axis=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fed_fsd.py": {
        "torch": {
            "Sequential_272": {
                "variable": {
                    "value": "fsd_melspec",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "torchaudio.transforms.Resample(orig_freq=44100, new_freq=22050)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_467": {
                "variable": {
                    "value": "test_clip_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(test_data.info)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 128, kernel_size=(5, 5), padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, 128, kernel_size=(5, 5), padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, 128, kernel_size=(5, 5), padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GRU_47": {
                "variable": {
                    "value": "self.bigru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "variable": {
                    "value": "self.conv_group1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 32, kernel_size=(3, 3), padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_100": {
                "variable": {
                    "value": "self.conv_group2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(32, 64, kernel_size=(3, 3), padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_113": {
                "variable": {
                    "value": "self.conv_group3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 128, kernel_size=(3, 3), padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_121": {
                "variable": {
                    "value": "self.glob_maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(12, 12)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AvgPool2d_122": {
                "variable": {
                    "value": "self.glob_avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(12, 12)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_124": {
                "variable": {
                    "value": "self.fc_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(256, 256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_144": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_max, x_avg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_213": {
                "variable": {
                    "value": "self.clip_order",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.info['fname'].to_numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_215": {
                "variable": {
                    "value": "self.n_segs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.info['n_segs'].to_numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_215": {
                "variable": {
                    "value": "self.n_segs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_219": {
                "variable": {
                    "value": "self.ground_truth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self.info)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.len_vocab",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_233": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filepath in enumerate(segs, 1)",
                            "Call"
                        ],
                        [
                            "self.data_path + str(fname) + '.' + str(n) + '.pt'",
                            "BinOp"
                        ],
                        [
                            "self.file_list[item]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReduceLROnPlateau_380": {
                "variable": {
                    "value": "plateau_catcher",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimiser",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimiser",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "max",
                    "type": "str",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_69": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataloader",
                            "variable"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "x.permute(2, 0, 3, 1).reshape(12, -1, 256)",
                            "Call"
                        ],
                        [
                            "self.bigru(x)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2).reshape(-1, 128)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv_group1(x)",
                            "Call"
                        ],
                        [
                            "self.conv_group2(x)",
                            "Call"
                        ],
                        [
                            "self.conv_group3(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x_max, x_avg), 1)",
                            "Call"
                        ],
                        [
                            "self.fc_layers(x)",
                            "Call"
                        ],
                        [
                            "torch.load(filepath)",
                            "Call"
                        ],
                        [
                            "self.transforms(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_148": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataloader",
                            "variable"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "x.permute(2, 0, 3, 1).reshape(12, -1, 256)",
                            "Call"
                        ],
                        [
                            "self.bigru(x)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2).reshape(-1, 128)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv_group1(x)",
                            "Call"
                        ],
                        [
                            "self.conv_group2(x)",
                            "Call"
                        ],
                        [
                            "self.conv_group3(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x_max, x_avg), 1)",
                            "Call"
                        ],
                        [
                            "self.fc_layers(x)",
                            "Call"
                        ],
                        [
                            "torch.load(filepath)",
                            "Call"
                        ],
                        [
                            "self.transforms(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_305": {
                "variable": {
                    "value": "audio_mel",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(audio_mel, audio_mel[:n_extra_frames])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_469": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_531": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_566": {
                "f": {
                    "value": "best_epoch_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoints/best.pt'",
                            "Method Argument"
                        ],
                        [
                            "'checkpoints/best.pt'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_570": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_575": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_576": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_577": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_579": {
                "variable": {
                    "value": "param.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "param.data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_29": {
                "kernel_size": {
                    "value": "(2, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_36": {
                "kernel_size": {
                    "value": "(2, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_41": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_43": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_85": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_89": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_93": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_96": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_102": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_106": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_109": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_114": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_115": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_118": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_125": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_126": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_319": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data, data[-1].unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "save_322": {
                "obj": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "audio_mel[i * n_overlap:i * n_overlap + n_frames]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((data, data[-1].unsqueeze(0)))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "filepath_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dir + filename_out",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_441": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoints_dir + 'epoch_' + str(epoch) + '.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_254": {
                "input": {
                    "value": "self.ground_truth.sum(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_520": {
                "dataset": {
                    "value": "client",
                    "type": "variable",
                    "possible_values": [
                        [
                            "this_rounds_clients",
                            "variable"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pytorchtools.py": {
        "torch": {
            "save_50": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "raytune_script.py": {
        "torch": {
            "DataLoader_47": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FSD50K_MelSpec1s(split='train', subdir=subdir)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_52": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FSD50K_MelSpec1s(split='val', subdir=subdir)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BCELoss_70": {
                "variable": {
                    "value": "loss_func",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_130": {
                "variable": {
                    "value": "test_clip_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(test_data.info)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_63": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_64": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_95": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_69": {
                "f": {
                    "value": "model_pt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_122": {
                "obj": {
                    "value": "glob_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, 'checkpoint.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_85": {
                "dataset": {
                    "value": "client",
                    "type": "variable",
                    "possible_values": [
                        [
                            "this_rounds_clients",
                            "variable"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}