{
    "evaluate.py": {
        "torch": {
            "is_available_7": {
                "variable": {
                    "value": "USE_CUDA",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_8": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if USE_CUDA else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "set_grad_enabled_52": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_22": {
                "input": {
                    "value": "torch.max(attn, dim=1)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_33": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decoder_output",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_22": {
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_34": {
                "tensors": {
                    "value": "(preds, out.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "evaluate_wic.py": {
        "torch": {
            "is_available_5": {
                "variable": {
                    "value": "USE_CUDA",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_6": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if USE_CUDA else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "set_grad_enabled_40": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_23": {
                "input": {
                    "value": "torch.max(attn, dim=1)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_23": {
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "load.py": {
        "torch": {
            "TensorDataset_185": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.FloatTensor(trg_embs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_186": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(torch.FloatTensor(trg_embs), torch.FloatTensor(ctx_embs), torch.LongTensor(def_ids), torch.LongTensor(lengths))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_192": {
                "variable": {
                    "value": "voc_w2v",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save_dir, 'voc_w2v.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_193": {
                "variable": {
                    "value": "voc_dec",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save_dir, 'voc_dec.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_201": {
                "variable": {
                    "value": "voc_w2v",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save_dir, 'voc_w2v.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_209": {
                "variable": {
                    "value": "voc_w2v",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save_dir, 'voc_w2v.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_211": {
                "variable": {
                    "value": "pretrain_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.FloatTensor(trg_embs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_212": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "pretrain_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(torch.FloatTensor(trg_embs))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_173": {
                "variable": {
                    "value": "voc_w2v",
                    "type": "variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "voc_w2v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_pretrain(args.w2v_file)",
                            "Call"
                        ],
                        [
                            "torch.save(voc_w2v, os.path.join(args.save_dir, 'voc_w2v.tar'))",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(args.save_dir, 'voc_w2v.tar'))",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(args.save_dir, 'voc_w2v.tar'))",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(args.save_dir, 'voc_w2v.tar'))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.save_dir, 'voc_w2v.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_174": {
                "variable": {
                    "value": "voc_dec",
                    "type": "variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "voc_dec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Voc(name='s2s')",
                            "Call"
                        ],
                        [
                            "torch.save(voc_dec, os.path.join(args.save_dir, 'voc_dec.tar'))",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(args.save_dir, 'voc_dec.tar'))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.save_dir, 'voc_dec.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "is_available_5": {
                "variable": {
                    "value": "USE_CUDA",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_6": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if USE_CUDA else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_7": {
                "seed": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_21": {
                "variable": {
                    "value": "self.embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_23": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0 if n_layers == 1 else dropout",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "GRU_24": {
                "variable": {
                    "value": "self.gru2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.concat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_33": {
                "variable": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embedded, sense_vec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_37": {
                "variable": {
                    "value": "prob_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out(rnn_output.squeeze(0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_50": {
                "variable": {
                    "value": "self.getReconstructionLoss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.inp_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hdim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.inp_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_98": {
                "variable": {
                    "value": "self.mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "enc_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "enc_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "topk_108": {
                "variable": {
                    "value": "(topk, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sp_z",
                    "type": "variable",
                    "possible_values": []
                },
                "k": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_110": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(topW, aligned_ctx.unsqueeze(2))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_84": {
                "input": {
                    "value": "temp ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_102": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "enc_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "enc_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_113": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "topW * attn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_79": {
                "input": {
                    "value": "h * (1 - h)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_82": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear1_out.clamp(min=0, max=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_99": {
                "input": {
                    "value": "torch.ones(enc_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_110": {
                "input": {
                    "value": "topW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sp_w[indices]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "aligned_ctx.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_116": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "topW * attn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, aligned_ctx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_130": {
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.softmax(torch.matmul(topW, aligned_ctx.unsqueeze(2)), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_99": {
                "*size": {
                    "value": "enc_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, aligned_ctx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_63": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trg_emb.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.inp_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_126": {
                "variable": {
                    "value": "sp_info",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "topW * nn.functional.softmax(topk, dim=1).unsqueeze(2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_127": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sp_info, aligned_ctx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_121": {
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.softmax(torch.matmul(topW, aligned_ctx.unsqueeze(2)), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_126": {
                "input": {
                    "value": "topk",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_126": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "is_available_11": {
                "variable": {
                    "value": "USE_CUDA",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_12": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if USE_CUDA else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_13": {
                "seed": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_41": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_42": {
                "variable": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "length.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_49": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "losses / length.float()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__51": {
                "parameters": {
                    "value": "decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "50.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_71": {
                "obj": {
                    "value": "{'decoder': decoder.state_dict(), 'spine': spine.state_dict(), 'mask_gen': mask_generator.state_dict(), 'decoder_opt': decoder_optimizer.state_dict(), 'loss': loss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save_dir, 'model', 'xSense_{}.tar'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_101": {
                "obj": {
                    "value": "{'epoch': epoch, 'sparsity': sparsity, 'spine': spine.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save_dir, 'model', 'pretrained_spine.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_47": {
                "input": {
                    "value": "decoder_output",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "def_ids[t]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "PAD_IDX",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "is_available_9": {
                "variable": {
                    "value": "USE_CUDA",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_10": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if USE_CUDA else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_11": {
                "seed": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_55": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_72": {
                "variable": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "text_len",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_73": {
                "variable": {
                    "value": "idxes",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(text_len).item()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "torch.LongTensor(max_len)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_73": {
                "variable": {
                    "value": "idxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_89": {
                "variable": {
                    "value": "loss_all",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_18": {
                "variable": {
                    "value": "spine_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, spine.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_25": {
                "variable": {
                    "value": "sp_ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save/model/pretrained_spine.tar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Embedding_30": {
                "variable": {
                    "value": "dec_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_voc_dec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VOC_DEC_NUM + 4",
                            "BinOp"
                        ],
                        [
                            "VOC_DEC_NUM + 4",
                            "BinOp"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_42": {
                "variable": {
                    "value": "decoder_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, list(decoder.parameters()) + list(mask_generator.parameters()))",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_52": {
                "num_embeddings": {
                    "value": "n_voc_dec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VOC_DEC_NUM + 4",
                            "BinOp"
                        ],
                        [
                            "VOC_DEC_NUM + 4",
                            "BinOp"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "visualize_spine.py": {
        "torch": {
            "load_56": {
                "variable": {
                    "value": "sp_ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save/model/pretrained_spine.tar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_63": {
                "variable": {
                    "value": "voc_w2v",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('save', 'voc_w2v.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}