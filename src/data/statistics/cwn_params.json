{
    "data/datasets/ring_utils.py": {
        "sklearn": {
            "LabelBinarizer_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LabelBinarizer_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_29": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty((nodes, oh_all.shape[1]))",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "np.ones((nodes, len(target_label)))",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "variable": {
                    "value": "edge_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(edge_index, dtype=np.long).T",
                            "Attribute"
                        ],
                        [
                            "torch.tensor(edge_index, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(edge_index, dtype=np.long).T",
                            "Attribute"
                        ],
                        [
                            "torch.tensor(edge_index, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nodes",
                            "Method Argument"
                        ],
                        [
                            "nodes",
                            "Method Argument"
                        ],
                        [
                            "nodes",
                            "Method Argument"
                        ],
                        [
                            "nodes",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[val]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty((nodes, oh_all.shape[1]))",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "np.ones((nodes, len(target_label)))",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_82": {
                "variable": {
                    "value": "edge_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(edge_index, dtype=np.long).T",
                            "Attribute"
                        ],
                        [
                            "torch.tensor(edge_index, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(edge_index, dtype=np.long).T",
                            "Attribute"
                        ],
                        [
                            "torch.tensor(edge_index, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_85": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nodes",
                            "Method Argument"
                        ],
                        [
                            "nodes",
                            "Method Argument"
                        ],
                        [
                            "nodes",
                            "Method Argument"
                        ],
                        [
                            "nodes",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[np.argmax(target_label)]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "data/tu_utils.py": {
        "sklearn": {
            "StratifiedKFold_198": {
                "variable": {
                    "value": "skf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "StratifiedKFold_230": {
                "variable": {
                    "value": "skf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "transpose_131": {
                "variable": {
                    "value": "g.edge_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_148": {
                "variable": {
                    "value": "g.node_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(g.node_tags)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "len(tagset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "degs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[get_node_degrees(graph) for graph in g_list]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_159": {
                "variable": {
                    "value": "degrees",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(graph.node_features.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "one_hot_173": {
                "variable": {
                    "value": "graph.node_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hots",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(corrs[pointer:pointer + n])",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "len(uniques)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_191": {
                "data": {
                    "value": "data.label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_191": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "exp/train_utils.py": {
        "sklearn": {
            "accuracy_score_184": {
                "variable": {
                    "value": "metric",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y_true, dim=0).numpy() if len(y_true) > 0 else None",
                            "IfExp"
                        ],
                        [
                            "input_dict['y_true']",
                            "Subscript"
                        ],
                        [
                            "input_dict['y_true']",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(y_pred, dim=0).numpy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y_pred, dim=0).numpy()",
                            "Call"
                        ],
                        [
                            "np.argmax(input_dict['y_pred'], axis=1)",
                            "Call"
                        ],
                        [
                            "input_dict['y_pred']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_absolute_error_192": {
                "variable": {
                    "value": "metric",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y_true, dim=0).numpy() if len(y_true) > 0 else None",
                            "IfExp"
                        ],
                        [
                            "input_dict['y_true']",
                            "Subscript"
                        ],
                        [
                            "input_dict['y_true']",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(y_pred, dim=0).numpy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y_pred, dim=0).numpy()",
                            "Call"
                        ],
                        [
                            "np.argmax(input_dict['y_pred'], axis=1)",
                            "Call"
                        ],
                        [
                            "input_dict['y_pred']",
                            "Subscript"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "CrossEntropyLoss_10": {
                "variable": {
                    "value": "cls_criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_11": {
                "variable": {
                    "value": "bicls_criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_12": {
                "variable": {
                    "value": "reg_criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_13": {
                "variable": {
                    "value": "msereg_criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(y_pred, dim=0).numpy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y_pred, dim=0).numpy()",
                            "Call"
                        ],
                        [
                            "np.argmax(input_dict['y_pred'], axis=1)",
                            "Call"
                        ],
                        [
                            "input_dict['y_pred']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(y_pred, dim=0).numpy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y_pred, dim=0).numpy()",
                            "Call"
                        ],
                        [
                            "np.argmax(input_dict['y_pred'], axis=1)",
                            "Call"
                        ],
                        [
                            "input_dict['y_pred']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_173": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dict['y_pred']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(preds, dtype=torch.float64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pdist_174": {
                "variable": {
                    "value": "mm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dict['y_pred']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(preds, dtype=torch.float64)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.p_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_139": {
                "tensors": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y_true, dim=0).numpy() if len(y_true) > 0 else None",
                            "IfExp"
                        ],
                        [
                            "input_dict['y_true']",
                            "Subscript"
                        ],
                        [
                            "input_dict['y_true']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isnan_67": {
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.y.view(-1)",
                            "Call"
                        ],
                        [
                            "batch.y.to(torch.float32).view(pred.shape)",
                            "Call"
                        ],
                        [
                            "batch.y.view(-1)",
                            "Call"
                        ],
                        [
                            "batch.y.to(torch.float32).view(pred.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_dtype_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_131": {
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.y.view(-1)",
                            "Call"
                        ],
                        [
                            "batch.y.to(torch.float32).view(pred.shape)",
                            "Call"
                        ],
                        [
                            "batch.y.view(-1)",
                            "Call"
                        ],
                        [
                            "batch.y.to(torch.float32).view(pred.shape)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data/complex.py": {
        "torch": {
            "is_tensor_242": {
                "obj": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.items()",
                            "Call"
                        ],
                        [
                            "self(*keys)",
                            "Call"
                        ],
                        [
                            "kwargs.items()",
                            "Call"
                        ],
                        [
                            "data[key]",
                            "Subscript"
                        ],
                        [
                            "items[0]",
                            "Subscript"
                        ],
                        [
                            "item + cum",
                            "BinOp"
                        ],
                        [
                            "item.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "item + cum",
                            "BinOp"
                        ],
                        [
                            "item.set_value(value, layout='coo')",
                            "Call"
                        ],
                        [
                            "torch.full((num_cells,), i, dtype=torch.long, device=device)",
                            "Call"
                        ],
                        [
                            "item",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "full_429": {
                "variable": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_cells,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in enumerate(data_list)",
                            "Call"
                        ],
                        [
                            "i in enumerate(xs)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "item.device",
                            "Attribute"
                        ],
                        [
                            "item.device()",
                            "Call"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_452": {
                "variable": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "items",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[key]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "ref_data.__cat_dim__(key, item)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_725": {
                "tensors": {
                    "value": "label_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_409": {
                "variable": {
                    "value": "inc",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.num_cells",
                            "Attribute"
                        ],
                        [
                            "self.num_cells_down",
                            "Attribute"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "self.num_cells_up",
                            "Attribute"
                        ],
                        [
                            "[[boundary_inc], [cell_inc]]",
                            "List"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "data.__inc__(key, item)",
                            "Call"
                        ],
                        [
                            "torch.tensor(inc)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_454": {
                "variable": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "items",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[key]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "ref_data.__cat_dim__(key, item)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_579": {
                "variable": {
                    "value": "upper_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.cochains[dim + 1].x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "self.cochains[dim].shared_coboundaries",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_587": {
                "variable": {
                    "value": "lower_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.cochains[dim - 1].x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "self.cochains[dim].shared_boundaries",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_tensor_287": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_456": {
                "variable": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "items",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[key]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_386": {
                "data": {
                    "value": "cat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.__cat_dim__(key, data[key])",
                            "Call"
                        ]
                    ]
                }
            },
            "full_404": {
                "size": {
                    "value": "(size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in enumerate(data_list)",
                            "Call"
                        ],
                        [
                            "i in enumerate(xs)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "item.device",
                            "Attribute"
                        ],
                        [
                            "item.device()",
                            "Call"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "full_398": {
                "size": {
                    "value": "(size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in enumerate(data_list)",
                            "Call"
                        ],
                        [
                            "i in enumerate(xs)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "item.device",
                            "Attribute"
                        ],
                        [
                            "item.device()",
                            "Call"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "data/data_loading.py": {
        "torch": {
            "tensor_67": {
                "data": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch",
                            "Method Argument"
                        ],
                        [
                            "batch",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_69": {
                "data": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch",
                            "Method Argument"
                        ],
                        [
                            "batch",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "data/datasets/csl.py": {
        "torch": {
            "load_68": {
                "variable": {
                    "value": "(data, slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "variable": {
                    "value": "vx",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_nodes, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_94": {
                "variable": {
                    "value": "edge_attr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "edge_index.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_114": {
                "obj": {
                    "value": "self.collate(complexes, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.processed_paths[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "data/datasets/dataset.py": {
        "torch": {
            "tensor_348": {
                "variable": {
                    "value": "data[dims]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "data['dims']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_tensor_167": {
                "obj": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.data['labels']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_334": {
                "variable": {
                    "value": "slices[dim][key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "slices[dim][key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_341": {
                "variable": {
                    "value": "data[labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data['labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "cat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "cochain_data.__cat_dim__(key, item)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "cat_dims[key]",
                            "Subscript"
                        ],
                        [
                            "cochain.__cat_dim__(key, cochain[key])",
                            "Call"
                        ],
                        [
                            "0 if cat_dim is None else cat_dim",
                            "IfExp"
                        ]
                    ]
                }
            },
            "stack_343": {
                "variable": {
                    "value": "data[labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data['labels']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_tensor_209": {
                "obj": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.slices[dim].values()",
                            "Call"
                        ],
                        [
                            "cochain_data[key]",
                            "Subscript"
                        ],
                        [
                            "data['labels'][0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_347": {
                "variable": {
                    "value": "data[labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "data['labels']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_326": {
                "variable": {
                    "value": "data[dim][key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data[dim][key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "cat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "cochain_data.__cat_dim__(key, item)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "cat_dims[key]",
                            "Subscript"
                        ],
                        [
                            "cochain.__cat_dim__(key, cochain[key])",
                            "Call"
                        ],
                        [
                            "0 if cat_dim is None else cat_dim",
                            "IfExp"
                        ]
                    ]
                }
            },
            "stack_328": {
                "variable": {
                    "value": "data[dim][key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data[dim][key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_332": {
                "variable": {
                    "value": "data[dim][key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "data[dim][key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "data/datasets/dummy.py": {
        "torch": {
            "load_14": {
                "variable": {
                    "value": "(self.data, self.slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_54": {
                "variable": {
                    "value": "(self.data, self.slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_43": {
                "obj": {
                    "value": "self.collate(complexes, self.max_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_91": {
                "obj": {
                    "value": "self.collate(complexes, self.max_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "data/datasets/flow_utils.py": {
        "torch": {
            "empty_209": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, connections)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_210": {
                "variable": {
                    "value": "orient",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "connections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.count_nonzero() - np.sum(A.diagonal() != 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_250": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((len(tuple_to_edge), 1))",
                            "Call"
                        ],
                        [
                            "sparse.csr_matrix(T2).dot(sparse.csr_matrix(x)).toarray()",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "generate_trajectory(start_rect, end_rect, ckpts[class_id], G)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_252": {
                "data": {
                    "value": "[class_id]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "data/datasets/ogb.py": {
        "torch": {
            "load_52": {
                "variable": {
                    "value": "(data, slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_53": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_54": {
                "variable": {
                    "value": "tasks",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_80": {
                "obj": {
                    "value": "self.collate(complexes, self.max_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_83": {
                "obj": {
                    "value": "split_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.get_idx_split()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "self.processed_paths[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_86": {
                "obj": {
                    "value": "dataset.num_tasks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "data/datasets/ringlookup.py": {
        "torch": {
            "load_22": {
                "variable": {
                    "value": "(self.data, self.slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_23": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "complex.nodes.num_cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_71": {
                "variable": {
                    "value": "complex.edges.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "complex.edges.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_72": {
                "variable": {
                    "value": "complex.two_cells.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "complex.two_cells.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_77": {
                "obj": {
                    "value": "self.collate(complexes, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.processed_paths[0]",
                            "Subscript"
                        ],
                        [
                            "self.processed_paths[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_83": {
                "obj": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(self.processed_paths[1])",
                            "Call"
                        ],
                        [
                            "[train_ids, val_ids, None]",
                            "List"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.processed_paths[0]",
                            "Subscript"
                        ],
                        [
                            "self.processed_paths[1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "data/datasets/ringtransfer.py": {
        "torch": {
            "load_24": {
                "variable": {
                    "value": "(self.data, self.slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_25": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_70": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "complex.nodes.num_cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_75": {
                "variable": {
                    "value": "complex.edges.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "complex.edges.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_76": {
                "variable": {
                    "value": "complex.two_cells.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "complex.two_cells.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_80": {
                "obj": {
                    "value": "self.collate(complexes, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.processed_paths[0]",
                            "Subscript"
                        ],
                        [
                            "self.processed_paths[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_86": {
                "obj": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(self.processed_paths[1])",
                            "Call"
                        ],
                        [
                            "[train_ids, val_ids, None]",
                            "List"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.processed_paths[0]",
                            "Subscript"
                        ],
                        [
                            "self.processed_paths[1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "data/datasets/sr.py": {
        "torch": {
            "ones_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_62": {
                "variable": {
                    "value": "(self.data, self.slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_110": {
                "obj": {
                    "value": "self.collate(complexes, self.max_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.processed_paths[0]",
                            "Subscript"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "data/datasets/test_flow.py": {
        "torch": {
            "count_nonzero_42": {
                "input": {
                    "value": "cochain.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_41": {
                "input": {
                    "value": "cochain.x == -1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_55": {
                "input": {
                    "value": "cochain.upper_orient == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_56": {
                "input": {
                    "value": "cochain.upper_orient == -1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_57": {
                "input": {
                    "value": "cochain.lower_orient == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_58": {
                "input": {
                    "value": "cochain.lower_orient == -1",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "data/datasets/test_ocean.py": {
        "torch": {
            "sum_24": {
                "input": {
                    "value": "cochain.upper_orient == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_25": {
                "input": {
                    "value": "cochain.upper_orient == -1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_26": {
                "input": {
                    "value": "cochain.lower_orient == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_27": {
                "input": {
                    "value": "cochain.lower_orient == -1",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "data/datasets/test_zinc.py": {
        "torch": {
            "equal_32": {
                "input": {
                    "value": "data1.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "data2.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_33": {
                "input": {
                    "value": "data1.cochains[0].x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "data2.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "data/datasets/tu.py": {
        "torch": {
            "load_53": {
                "variable": {
                    "value": "(self.data, self.slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_121": {
                "obj": {
                    "value": "self.collate(complexes, self.max_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "data/datasets/zinc.py": {
        "torch": {
            "load_46": {
                "variable": {
                    "value": "(data, slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_47": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_95": {
                "obj": {
                    "value": "self.collate(data_list, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.processed_paths[0]",
                            "Subscript"
                        ],
                        [
                            "self.processed_paths[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_99": {
                "obj": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.load_dataset()",
                            "Call"
                        ],
                        [
                            "torch.load(self.processed_paths[1])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.processed_paths[0]",
                            "Subscript"
                        ],
                        [
                            "self.processed_paths[1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "data/dummy_complexes.py": {
        "torch": {
            "tensor_67": {
                "variable": {
                    "value": "v_up_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_69": {
                "variable": {
                    "value": "v_shared_coboundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 3, 3, 1, 1, 2, 2, 5, 5, 4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "variable": {
                    "value": "v_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [2], [3], [4], [5]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "variable": {
                    "value": "yv",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_75": {
                "variable": {
                    "value": "e_boundary_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.LongTensor(e_boundaries).view(-1), torch.LongTensor([0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5]).view(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "variable": {
                    "value": "e_up_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[2, 4, 2, 5, 4, 5], [4, 2, 5, 2, 5, 4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_81": {
                "variable": {
                    "value": "e_shared_coboundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_82": {
                "variable": {
                    "value": "e_down_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 3, 1, 2, 1, 5, 2, 3, 2, 4, 2, 5, 3, 4, 4, 5], [1, 0, 3, 0, 2, 1, 5, 1, 3, 2, 4, 2, 5, 2, 4, 3, 5, 4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "variable": {
                    "value": "e_shared_boundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 0, 0, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 3, 3, 4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "variable": {
                    "value": "e_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [2], [3], [4], [5], [6]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_88": {
                "variable": {
                    "value": "ye",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_94": {
                "variable": {
                    "value": "t_boundary_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.LongTensor(t_boundaries).view(-1), torch.LongTensor([0, 0, 0]).view(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_97": {
                "variable": {
                    "value": "t_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_98": {
                "variable": {
                    "value": "yt",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_134": {
                "variable": {
                    "value": "v_up_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 3, 1, 2, 1, 4, 2, 3, 3, 4], [1, 0, 3, 0, 2, 1, 4, 1, 3, 2, 4, 3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_136": {
                "variable": {
                    "value": "v_shared_coboundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 3, 3, 1, 1, 5, 5, 2, 2, 4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_137": {
                "variable": {
                    "value": "v_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [2], [3], [4], [5]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_138": {
                "variable": {
                    "value": "yv",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_142": {
                "variable": {
                    "value": "e_boundary_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.LongTensor(e_boundaries).view(-1), torch.LongTensor([0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5]).view(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_146": {
                "variable": {
                    "value": "e_up_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 2, 0, 3, 0, 3, 0, 4, 0, 5, 1, 2, 1, 2, 1, 3, 1, 4, 1, 5, 2, 3, 2, 4, 2, 5, 3, 4, 3, 5, 4, 5, 4, 5], [1, 0, 2, 0, 3, 0, 3, 0, 4, 0, 5, 0, 2, 1, 2, 1, 3, 1, 4, 1, 5, 1, 3, 2, 4, 2, 5, 2, 4, 3, 5, 3, 5, 4, 5, 4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_148": {
                "variable": {
                    "value": "e_shared_coboundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[2, 2, 2, 2, 0, 0, 2, 2, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_150": {
                "variable": {
                    "value": "e_down_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 3, 0, 5, 1, 2, 1, 5, 2, 3, 2, 4, 3, 4, 4, 5], [1, 0, 3, 0, 5, 0, 2, 1, 5, 1, 3, 2, 4, 2, 4, 3, 5, 4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_152": {
                "variable": {
                    "value": "e_shared_boundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 0, 0, 1, 1, 2, 2, 1, 1, 3, 3, 3, 3, 3, 3, 4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_154": {
                "variable": {
                    "value": "e_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [2], [3], [4], [5], [6]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_155": {
                "variable": {
                    "value": "ye",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_161": {
                "variable": {
                    "value": "t_boundary_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.LongTensor(t_boundaries).view(-1), torch.LongTensor([0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2]).view(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_164": {
                "variable": {
                    "value": "t_down_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 1, 0, 2, 0, 2, 1, 2, 1, 2], [1, 0, 1, 0, 2, 0, 2, 0, 2, 1, 2, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_166": {
                "variable": {
                    "value": "t_shared_boundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[4, 4, 5, 5, 0, 0, 3, 3, 1, 1, 2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_167": {
                "variable": {
                    "value": "t_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [2], [3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_168": {
                "variable": {
                    "value": "yt",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[2, 2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_184": {
                "variable": {
                    "value": "v_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_185": {
                "variable": {
                    "value": "yv",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_201": {
                "variable": {
                    "value": "v_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_202": {
                "variable": {
                    "value": "yv",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_225": {
                "variable": {
                    "value": "v_up_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 3, 1, 2, 2, 3], [1, 0, 3, 0, 2, 1, 3, 2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_227": {
                "variable": {
                    "value": "v_shared_coboundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 3, 3, 1, 1, 2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_228": {
                "variable": {
                    "value": "v_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [2], [3], [4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_229": {
                "variable": {
                    "value": "yv",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_233": {
                "variable": {
                    "value": "e_boundary_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.LongTensor(e_boundaries).view(-1), torch.LongTensor([0, 0, 1, 1, 2, 2, 3, 3]).view(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_236": {
                "variable": {
                    "value": "e_down_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 3, 1, 2, 2, 3], [1, 0, 3, 0, 2, 1, 3, 2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_238": {
                "variable": {
                    "value": "e_shared_boundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 0, 0, 2, 2, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_239": {
                "variable": {
                    "value": "e_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [2], [3], [4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_240": {
                "variable": {
                    "value": "ye",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_266": {
                "variable": {
                    "value": "v_up_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 3, 1, 2, 2, 3], [1, 0, 3, 0, 2, 1, 3, 2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_268": {
                "variable": {
                    "value": "v_shared_coboundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 3, 3, 1, 1, 2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_269": {
                "variable": {
                    "value": "v_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [2], [3], [4], [5]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_270": {
                "variable": {
                    "value": "yv",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_274": {
                "variable": {
                    "value": "e_boundary_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.LongTensor(e_boundaries).view(-1), torch.LongTensor([0, 0, 1, 1, 2, 2, 3, 3]).view(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_277": {
                "variable": {
                    "value": "e_down_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 3, 1, 2, 2, 3], [1, 0, 3, 0, 2, 1, 3, 2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_279": {
                "variable": {
                    "value": "e_shared_boundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 0, 0, 2, 2, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_280": {
                "variable": {
                    "value": "e_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [2], [3], [4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_281": {
                "variable": {
                    "value": "ye",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_308": {
                "variable": {
                    "value": "v_up_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 2, 1, 2, 1, 3, 2, 3, 3, 4], [1, 0, 2, 0, 2, 1, 3, 1, 3, 2, 4, 3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_310": {
                "variable": {
                    "value": "v_shared_coboundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 2, 2, 1, 1, 3, 3, 4, 4, 5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_311": {
                "variable": {
                    "value": "v_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [2], [3], [4], [5]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_312": {
                "variable": {
                    "value": "yv",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_316": {
                "variable": {
                    "value": "e_boundary_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.LongTensor(e_boundaries).view(-1), torch.LongTensor([0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5]).view(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_320": {
                "variable": {
                    "value": "e_down_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 3, 1, 3, 0, 2, 1, 2, 2, 4, 1, 4, 3, 4, 3, 5, 4, 5], [1, 0, 3, 0, 3, 1, 2, 0, 2, 1, 4, 2, 4, 1, 4, 3, 5, 3, 5, 4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_323": {
                "variable": {
                    "value": "e_shared_boundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_325": {
                "variable": {
                    "value": "e_up_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 2, 1, 2, 1, 3, 1, 4, 3, 4], [1, 0, 2, 0, 2, 1, 3, 1, 4, 1, 4, 3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_327": {
                "variable": {
                    "value": "e_shared_coboundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_329": {
                "variable": {
                    "value": "e_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [2], [3], [4], [5], [6]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_330": {
                "variable": {
                    "value": "ye",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_336": {
                "variable": {
                    "value": "t_boundary_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.LongTensor(t_boundaries).view(-1), torch.LongTensor([0, 0, 0, 1, 1, 1]).view(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_340": {
                "variable": {
                    "value": "t_down_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1], [1, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_342": {
                "variable": {
                    "value": "t_shared_boundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_343": {
                "variable": {
                    "value": "t_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_344": {
                "variable": {
                    "value": "yt",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_398": {
                "variable": {
                    "value": "v_up_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 2, 0, 3, 1, 2, 1, 3, 2, 3], [1, 0, 2, 0, 3, 0, 2, 1, 3, 1, 3, 2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_400": {
                "variable": {
                    "value": "v_shared_coboundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 2, 2, 5, 5, 1, 1, 3, 3, 4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_401": {
                "variable": {
                    "value": "v_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [2], [3], [4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_402": {
                "variable": {
                    "value": "yv",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[3, 3, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_406": {
                "variable": {
                    "value": "e_boundary_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.LongTensor(e_boundaries).view(-1), torch.LongTensor([0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5]).view(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_410": {
                "variable": {
                    "value": "e_up_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 2, 1, 2, 0, 5, 0, 3, 3, 5, 1, 3, 1, 4, 3, 4, 2, 4, 2, 5, 4, 5], [1, 0, 2, 0, 2, 1, 5, 0, 3, 0, 5, 3, 3, 1, 4, 1, 4, 3, 4, 2, 5, 2, 5, 4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_414": {
                "variable": {
                    "value": "e_shared_coboundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_416": {
                "variable": {
                    "value": "e_down_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 2, 0, 3, 0, 5, 1, 2, 1, 3, 1, 4, 2, 4, 2, 5, 3, 4, 3, 5, 4, 5], [1, 0, 2, 0, 3, 0, 5, 0, 2, 1, 3, 1, 4, 1, 4, 2, 5, 2, 4, 3, 5, 3, 5, 4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_420": {
                "variable": {
                    "value": "e_shared_boundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 0, 0, 1, 1, 0, 0, 2, 2, 1, 1, 2, 2, 2, 2, 0, 0, 3, 3, 3, 3, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_422": {
                "variable": {
                    "value": "e_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [2], [3], [4], [5], [6]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_423": {
                "variable": {
                    "value": "ye",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_429": {
                "variable": {
                    "value": "t_boundary_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.LongTensor(t_boundaries).view(-1), torch.LongTensor([0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3]).view(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_433": {
                "variable": {
                    "value": "t_up_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 2, 1, 2, 0, 3, 1, 3, 2, 3], [1, 0, 2, 0, 2, 1, 3, 0, 3, 1, 3, 2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_435": {
                "variable": {
                    "value": "t_shared_coboundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_436": {
                "variable": {
                    "value": "t_down_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 2, 0, 3, 1, 2, 1, 3, 2, 3], [1, 0, 2, 0, 3, 0, 2, 1, 3, 1, 3, 2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_438": {
                "variable": {
                    "value": "t_shared_boundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 1, 1, 2, 2, 3, 3, 5, 5, 4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_439": {
                "variable": {
                    "value": "t_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [2], [3], [4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_440": {
                "variable": {
                    "value": "yt",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[2, 2, 2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_446": {
                "variable": {
                    "value": "p_boundary_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.LongTensor(p_boundaries).view(-1), torch.LongTensor([0, 0, 0, 0]).view(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_449": {
                "variable": {
                    "value": "p_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_450": {
                "variable": {
                    "value": "yp",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_474": {
                "variable": {
                    "value": "v_up_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 3, 1, 2, 2, 3], [1, 0, 3, 0, 2, 1, 3, 2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_476": {
                "variable": {
                    "value": "v_shared_coboundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 3, 3, 1, 1, 2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_477": {
                "variable": {
                    "value": "v_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [2], [3], [4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_478": {
                "variable": {
                    "value": "yv",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_482": {
                "variable": {
                    "value": "e_boundary_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.LongTensor(e_boundaries).view(-1), torch.LongTensor([0, 0, 1, 1, 2, 2, 3, 3]).view(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_485": {
                "variable": {
                    "value": "e_down_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 3, 1, 2, 2, 3], [1, 0, 3, 0, 2, 1, 3, 2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_487": {
                "variable": {
                    "value": "e_shared_boundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 0, 0, 2, 2, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_488": {
                "variable": {
                    "value": "e_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [2], [3], [4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_489": {
                "variable": {
                    "value": "ye",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_491": {
                "variable": {
                    "value": "e_upper_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 2, 0, 3, 1, 2, 1, 3, 2, 3], [1, 0, 2, 0, 3, 0, 2, 1, 3, 1, 3, 2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_493": {
                "variable": {
                    "value": "e_shared_coboundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0] * 12",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_502": {
                "variable": {
                    "value": "c_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_503": {
                "variable": {
                    "value": "yc",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_527": {
                "variable": {
                    "value": "v_up_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 3, 1, 2, 1, 6, 2, 3, 2, 4, 4, 5, 5, 6, 6, 7], [1, 0, 3, 0, 2, 1, 6, 1, 3, 2, 4, 2, 5, 4, 6, 5, 7, 6]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_530": {
                "variable": {
                    "value": "v_shared_coboundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 3, 3, 1, 1, 7, 7, 2, 2, 4, 4, 5, 5, 6, 6, 8, 8]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_532": {
                "variable": {
                    "value": "v_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [2], [3], [4], [5], [6], [7], [8]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_533": {
                "variable": {
                    "value": "yv",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 0, 0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_537": {
                "variable": {
                    "value": "e_boundary_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.LongTensor(e_boundaries).view(-1), torch.LongTensor([0, 0, 1, 1, 2, 2, 3, 3, 7, 7, 4, 4, 5, 5, 6, 6, 8, 8]).view(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_540": {
                "variable": {
                    "value": "e_down_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 3, 1, 2, 2, 3, 1, 4, 2, 4, 4, 5, 5, 6, 6, 7, 6, 8, 7, 8, 0, 7, 1, 7], [1, 0, 3, 0, 2, 1, 3, 2, 4, 1, 4, 2, 5, 4, 6, 5, 7, 6, 8, 6, 8, 7, 7, 0, 7, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_544": {
                "variable": {
                    "value": "e_shared_boundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 0, 0, 2, 2, 3, 3, 2, 2, 2, 2, 4, 4, 5, 5, 6, 6, 6, 6, 6, 6, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_547": {
                "variable": {
                    "value": "e_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [2], [3], [4], [5], [6], [7], [8], [9]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_548": {
                "variable": {
                    "value": "ye",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 1, 1, 1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_550": {
                "variable": {
                    "value": "e_upper_index_c1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 2, 0, 3, 1, 2, 1, 3, 2, 3], [1, 0, 2, 0, 3, 0, 2, 1, 3, 1, 3, 2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_552": {
                "variable": {
                    "value": "e_upper_index_c2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 4, 1, 5, 1, 6, 1, 7, 4, 5, 4, 6, 4, 7, 5, 6, 5, 7, 6, 7], [4, 1, 5, 1, 6, 1, 7, 1, 5, 4, 6, 4, 7, 4, 6, 5, 7, 5, 7, 6]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_555": {
                "variable": {
                    "value": "e_upper_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_upper_index_c1, e_upper_index_c2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_556": {
                "variable": {
                    "value": "e_shared_coboundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0] * 12 + [1] * 20",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_565": {
                "variable": {
                    "value": "c_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_566": {
                "variable": {
                    "value": "c_down_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1], [1, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_568": {
                "variable": {
                    "value": "c_shared_boundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_570": {
                "variable": {
                    "value": "yc",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_21": {
                "variable": {
                    "value": "edge_attr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "complex.cochains[1].x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "cochain.shared_coboundaries",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "data/helper_test.py": {
        "torch": {
            "zeros_70": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "equal_122": {
                "input": {
                    "value": "yielded.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "expected.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_162": {
                "input": {
                    "value": "yielded.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "expected.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_65": {
                "input": {
                    "value": "edge_attr1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ex[edge_to_id[edge]].squeeze()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "edge_attr2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "edge_attr[i].squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_130": {
                "input": {
                    "value": "y_cochain.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "e_cochain.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_132": {
                "input": {
                    "value": "y_cochain.boundary_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "e_cochain.boundary_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_171": {
                "input": {
                    "value": "y_cochain.boundary_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "e_cochain.boundary_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_196": {
                "input": {
                    "value": "y_cochain.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "e_cochain.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_151": {
                "input": {
                    "value": "y_cochain.upper_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "e_cochain.upper_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_152": {
                "input": {
                    "value": "y_cochain.shared_coboundaries",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "e_cochain.shared_coboundaries",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_190": {
                "input": {
                    "value": "y_cochain.upper_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "e_cochain.upper_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_191": {
                "input": {
                    "value": "y_cochain.shared_coboundaries",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "e_cochain.shared_coboundaries",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_139": {
                "input": {
                    "value": "y_cochain.lower_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "e_cochain.lower_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_140": {
                "input": {
                    "value": "y_cochain.shared_boundaries",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "e_cochain.shared_boundaries",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_178": {
                "input": {
                    "value": "y_cochain.lower_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "e_cochain.lower_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_179": {
                "input": {
                    "value": "y_cochain.shared_boundaries",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "e_cochain.shared_boundaries",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "data/perm_utils.py": {
        "torch": {
            "tensor_26": {
                "variable": {
                    "value": "y_perm",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "P @ y",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "data/sr_utils.py": {
        "torch": {
            "tensor_12": {
                "data": {
                    "value": "list(nx_graph.edges())",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_12": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "data/test_batching.py": {
        "torch": {
            "tensor_15": {
                "variable": {
                    "value": "expected_node_upper",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4, 5, 6, 5, 8, 6, 7, 7, 8, 7, 9, 8, 9], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3, 6, 5, 8, 5, 7, 6, 8, 7, 9, 7, 9, 8]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_17": {
                "variable": {
                    "value": "expected_node_shared_coboundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 3, 3, 1, 1, 2, 2, 5, 5, 4, 4, 6, 6, 9, 9, 7, 7, 8, 8, 11, 11, 10, 10]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_18": {
                "variable": {
                    "value": "expected_node_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [2], [3], [4], [5], [1], [2], [3], [4], [5]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_19": {
                "variable": {
                    "value": "expected_node_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_20": {
                "variable": {
                    "value": "expected_node_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 0, 0, 0, 1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_22": {
                "variable": {
                    "value": "expected_edge_upper",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[2, 4, 2, 5, 4, 5, 8, 10, 8, 11, 10, 11], [4, 2, 5, 2, 5, 4, 10, 8, 11, 8, 11, 10]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "variable": {
                    "value": "expected_edge_shared_coboundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_25": {
                "variable": {
                    "value": "expected_edge_lower",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 3, 1, 2, 1, 5, 2, 3, 2, 4, 2, 5, 3, 4, 4, 5, 6, 7, 6, 9, 7, 8, 7, 11, 8, 9, 8, 10, 8, 11, 9, 10, 10, 11], [1, 0, 3, 0, 2, 1, 5, 1, 3, 2, 4, 2, 5, 2, 4, 3, 5, 4, 7, 6, 9, 6, 8, 7, 11, 7, 9, 8, 10, 8, 11, 8, 10, 9, 11, 10]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_28": {
                "variable": {
                    "value": "expected_edge_shared_boundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 0, 0, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 3, 3, 4, 4, 6, 6, 5, 5, 7, 7, 7, 7, 8, 8, 8, 8, 7, 7, 8, 8, 9, 9]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_30": {
                "variable": {
                    "value": "expected_edge_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [2], [3], [4], [5], [6], [1], [2], [3], [4], [5], [6]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "variable": {
                    "value": "expected_edge_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "expected_edge_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "variable": {
                    "value": "expected_two_cell_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "variable": {
                    "value": "expected_two_cell_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "variable": {
                    "value": "expected_two_cell_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "variable": {
                    "value": "expected_node_upper",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 3, 1, 2, 2, 3, 5, 6, 5, 8, 6, 7, 7, 8], [1, 0, 3, 0, 2, 1, 3, 2, 6, 5, 8, 5, 7, 6, 8, 7]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "variable": {
                    "value": "expected_node_shared_coboundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 3, 3, 1, 1, 2, 2, 4, 4, 7, 7, 5, 5, 6, 6]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "variable": {
                    "value": "expected_node_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [2], [3], [4], [5], [1], [2], [3], [4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_69": {
                "variable": {
                    "value": "expected_node_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 0, 0, 0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "variable": {
                    "value": "expected_node_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 0, 0, 0, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_72": {
                "variable": {
                    "value": "expected_edge_lower",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 3, 1, 2, 2, 3, 4, 5, 4, 7, 5, 6, 6, 7], [1, 0, 3, 0, 2, 1, 3, 2, 5, 4, 7, 4, 6, 5, 7, 6]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "variable": {
                    "value": "expected_edge_shared_boundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 0, 0, 2, 2, 3, 3, 6, 6, 5, 5, 7, 7, 8, 8]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_76": {
                "variable": {
                    "value": "expected_edge_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [2], [3], [4], [1], [2], [3], [4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_77": {
                "variable": {
                    "value": "expected_edge_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 1, 1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "variable": {
                    "value": "expected_edge_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 0, 0, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "variable": {
                    "value": "kite_node_upper",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 2, 1, 2, 1, 3, 2, 3, 3, 4], [1, 0, 2, 0, 2, 1, 3, 1, 3, 2, 4, 3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "expected_node_upper",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[kite_node_upper, shifted_house_node_upper]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "variable": {
                    "value": "kite_node_shared_coboundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 2, 2, 1, 1, 3, 3, 4, 4, 5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "expected_node_shared_coboundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[kite_node_shared_coboundaries, shifted_house_node_shared_coboundaries]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_109": {
                "variable": {
                    "value": "expected_node_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [2], [3], [4], [5], [1], [2], [3], [4], [5]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_110": {
                "variable": {
                    "value": "expected_node_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_111": {
                "variable": {
                    "value": "expected_node_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 0, 0, 0, 1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_113": {
                "variable": {
                    "value": "kite_edge_upper",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 2, 1, 2, 1, 3, 1, 4, 3, 4], [1, 0, 2, 0, 2, 1, 3, 1, 4, 1, 4, 3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "expected_edge_upper",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[kite_edge_upper, shifted_house_edge_upper]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_119": {
                "variable": {
                    "value": "kite_edge_shared_coboundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "expected_edge_shared_coboundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[kite_edge_shared_coboundaries, shifted_house_edge_shared_coboundaries]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_123": {
                "variable": {
                    "value": "kite_edge_lower",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 3, 1, 3, 0, 2, 1, 2, 2, 4, 1, 4, 3, 4, 3, 5, 4, 5], [1, 0, 3, 0, 3, 1, 2, 0, 2, 1, 4, 2, 4, 1, 4, 3, 5, 3, 5, 4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_127": {
                "variable": {
                    "value": "expected_edge_lower",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[kite_edge_lower, shifted_house_lower]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "variable": {
                    "value": "kite_edge_shared_boundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "expected_edge_shared_boundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[kite_edge_shared_boundaries, shifted_house_edge_shared_boundaries]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_133": {
                "variable": {
                    "value": "expected_edge_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [2], [3], [4], [5], [6], [1], [2], [3], [4], [5], [6]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_134": {
                "variable": {
                    "value": "expected_edge_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_135": {
                "variable": {
                    "value": "expected_edge_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_137": {
                "variable": {
                    "value": "expected_two_cell_lower",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1], [1, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_139": {
                "variable": {
                    "value": "expected_two_cell_shared_boundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_140": {
                "variable": {
                    "value": "expected_two_cell_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [2], [1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_141": {
                "variable": {
                    "value": "expected_two_cell_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[2, 2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_142": {
                "variable": {
                    "value": "expected_two_cell_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_171": {
                "variable": {
                    "value": "expected_node_upper",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4, 5, 6, 5, 8, 6, 7, 7, 8], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3, 6, 5, 8, 5, 7, 6, 8, 7]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_173": {
                "variable": {
                    "value": "expected_node_shared_coboundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 3, 3, 1, 1, 2, 2, 5, 5, 4, 4, 6, 6, 9, 9, 7, 7, 8, 8]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_174": {
                "variable": {
                    "value": "expected_node_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [2], [3], [4], [5], [1], [2], [3], [4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_175": {
                "variable": {
                    "value": "expected_node_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 0, 0, 0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_176": {
                "variable": {
                    "value": "expected_node_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 0, 0, 0, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_178": {
                "variable": {
                    "value": "expected_edge_upper",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[2, 4, 2, 5, 4, 5], [4, 2, 5, 2, 5, 4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_180": {
                "variable": {
                    "value": "expected_edge_shared_coboundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_181": {
                "variable": {
                    "value": "expected_edge_lower",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 3, 1, 2, 1, 5, 2, 3, 2, 4, 2, 5, 3, 4, 4, 5, 6, 7, 6, 9, 7, 8, 8, 9], [1, 0, 3, 0, 2, 1, 5, 1, 3, 2, 4, 2, 5, 2, 4, 3, 5, 4, 7, 6, 9, 6, 8, 7, 9, 8]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_184": {
                "variable": {
                    "value": "expected_edge_shared_boundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 0, 0, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 3, 3, 4, 4, 6, 6, 5, 5, 7, 7, 8, 8]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_186": {
                "variable": {
                    "value": "expected_edge_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [2], [3], [4], [5], [6], [1], [2], [3], [4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_187": {
                "variable": {
                    "value": "expected_edge_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_188": {
                "variable": {
                    "value": "expected_edge_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 0, 0, 0, 0, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_190": {
                "variable": {
                    "value": "expected_two_cell_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_191": {
                "variable": {
                    "value": "expected_two_cell_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_192": {
                "variable": {
                    "value": "expected_two_cell_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_221": {
                "variable": {
                    "value": "expected_node_upper",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4, 5, 6, 5, 8, 6, 7, 7, 8, 9, 10, 9, 12, 10, 11, 11, 12, 11, 13, 12, 13], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3, 6, 5, 8, 5, 7, 6, 8, 7, 10, 9, 12, 9, 11, 10, 12, 11, 13, 11, 13, 12]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_224": {
                "variable": {
                    "value": "expected_node_shared_coboundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 3, 3, 1, 1, 2, 2, 5, 5, 4, 4, 6, 6, 9, 9, 7, 7, 8, 8, 10, 10, 13, 13, 11, 11, 12, 12, 15, 15, 14, 14]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_226": {
                "variable": {
                    "value": "expected_node_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [2], [3], [4], [5], [1], [2], [3], [4], [1], [2], [3], [4], [5]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_227": {
                "variable": {
                    "value": "expected_node_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_228": {
                "variable": {
                    "value": "expected_node_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_230": {
                "variable": {
                    "value": "expected_edge_upper",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[2, 4, 2, 5, 4, 5, 12, 14, 12, 15, 14, 15], [4, 2, 5, 2, 5, 4, 14, 12, 15, 12, 15, 14]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_232": {
                "variable": {
                    "value": "expected_edge_shared_coboundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_233": {
                "variable": {
                    "value": "expected_edge_lower",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 3, 1, 2, 1, 5, 2, 3, 2, 4, 2, 5, 3, 4, 4, 5, 6, 7, 6, 9, 7, 8, 8, 9, 10, 11, 10, 13, 11, 12, 11, 15, 12, 13, 12, 14, 12, 15, 13, 14, 14, 15], [1, 0, 3, 0, 2, 1, 5, 1, 3, 2, 4, 2, 5, 2, 4, 3, 5, 4, 7, 6, 9, 6, 8, 7, 9, 8, 11, 10, 13, 10, 12, 11, 15, 11, 13, 12, 14, 12, 15, 12, 14, 13, 15, 14]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_236": {
                "variable": {
                    "value": "expected_edge_shared_boundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 0, 0, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 3, 3, 4, 4, 6, 6, 5, 5, 7, 7, 8, 8, 10, 10, 9, 9, 11, 11, 11, 11, 12, 12, 12, 12, 11, 11, 12, 12, 13, 13]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_238": {
                "variable": {
                    "value": "expected_edge_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [2], [3], [4], [5], [6], [1], [2], [3], [4], [1], [2], [3], [4], [5], [6]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_239": {
                "variable": {
                    "value": "expected_edge_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_240": {
                "variable": {
                    "value": "expected_edge_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_242": {
                "variable": {
                    "value": "expected_two_cell_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_243": {
                "variable": {
                    "value": "expected_two_cell_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_244": {
                "variable": {
                    "value": "expected_two_cell_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_273": {
                "variable": {
                    "value": "expected_node_upper",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_275": {
                "variable": {
                    "value": "expected_node_shared_coboundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 3, 3, 1, 1, 2, 2, 5, 5, 4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_276": {
                "variable": {
                    "value": "expected_node_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [2], [3], [4], [5]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_277": {
                "variable": {
                    "value": "expected_node_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_278": {
                "variable": {
                    "value": "expected_node_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_280": {
                "variable": {
                    "value": "expected_edge_upper",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[2, 4, 2, 5, 4, 5], [4, 2, 5, 2, 5, 4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_282": {
                "variable": {
                    "value": "expected_edge_shared_coboundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_283": {
                "variable": {
                    "value": "expected_edge_lower",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 3, 1, 2, 1, 5, 2, 3, 2, 4, 2, 5, 3, 4, 4, 5], [1, 0, 3, 0, 2, 1, 5, 1, 3, 2, 4, 2, 5, 2, 4, 3, 5, 4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_286": {
                "variable": {
                    "value": "expected_edge_shared_boundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 0, 0, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 3, 3, 4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_288": {
                "variable": {
                    "value": "expected_edge_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [2], [3], [4], [5], [6]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_289": {
                "variable": {
                    "value": "expected_edge_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_290": {
                "variable": {
                    "value": "expected_edge_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_292": {
                "variable": {
                    "value": "expected_two_cell_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_293": {
                "variable": {
                    "value": "expected_two_cell_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_294": {
                "variable": {
                    "value": "expected_two_cell_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_536": {
                "variable": {
                    "value": "vx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "35",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_537": {
                "variable": {
                    "value": "ex",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "37",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_538": {
                "variable": {
                    "value": "tx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1036": {
                "variable": {
                    "value": "unshuffled_ys",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "unshuffled_ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(unshuffled_ys, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1037": {
                "variable": {
                    "value": "shuffled_ys",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "shuffled_ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(shuffled_ys, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1058": {
                "variable": {
                    "value": "ys1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ys1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(ys1, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1059": {
                "variable": {
                    "value": "ys2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ys2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(ys2, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_38": {
                "input": {
                    "value": "expected_node_upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4, 5, 6, 5, 8, 6, 7, 7, 8, 7, 9, 8, 9], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3, 6, 5, 8, 5, 7, 6, 8, 7, 9, 7, 9, 8]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 5, 6, 5, 8, 6, 7, 7, 8], [1, 0, 3, 0, 2, 1, 3, 2, 6, 5, 8, 5, 7, 6, 8, 7]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.cat([kite_node_upper, shifted_house_node_upper], 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4, 5, 6, 5, 8, 6, 7, 7, 8], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3, 6, 5, 8, 5, 7, 6, 8, 7]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4, 5, 6, 5, 8, 6, 7, 7, 8, 9, 10, 9, 12, 10, 11, 11, 12, 11, 13, 12, 13], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3, 6, 5, 8, 5, 7, 6, 8, 7, 10, 9, 12, 9, 11, 10, 12, 11, 13, 11, 13, 12]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3]], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.nodes.upper_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_39": {
                "input": {
                    "value": "expected_node_shared_coboundaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0, 0, 3, 3, 1, 1, 2, 2, 5, 5, 4, 4, 6, 6, 9, 9, 7, 7, 8, 8, 11, 11, 10, 10], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 3, 3, 1, 1, 2, 2, 4, 4, 7, 7, 5, 5, 6, 6], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.cat([kite_node_shared_coboundaries, shifted_house_node_shared_coboundaries], 0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 3, 3, 1, 1, 2, 2, 5, 5, 4, 4, 6, 6, 9, 9, 7, 7, 8, 8], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 3, 3, 1, 1, 2, 2, 5, 5, 4, 4, 6, 6, 9, 9, 7, 7, 8, 8, 10, 10, 13, 13, 11, 11, 12, 12, 15, 15, 14, 14], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 3, 3, 1, 1, 2, 2, 5, 5, 4, 4], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.nodes.shared_coboundaries",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_42": {
                "input": {
                    "value": "expected_node_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [1], [2], [3], [4], [5]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [1], [2], [3], [4]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [1], [2], [3], [4], [5]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [1], [2], [3], [4]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [1], [2], [3], [4], [1], [2], [3], [4], [5]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.nodes.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_43": {
                "input": {
                    "value": "expected_node_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.nodes.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_44": {
                "input": {
                    "value": "expected_node_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.nodes.batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_46": {
                "input": {
                    "value": "expected_edge_upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[2, 4, 2, 5, 4, 5, 8, 10, 8, 11, 10, 11], [4, 2, 5, 2, 5, 4, 10, 8, 11, 8, 11, 10]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.cat([kite_edge_upper, shifted_house_edge_upper], 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[2, 4, 2, 5, 4, 5], [4, 2, 5, 2, 5, 4]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[2, 4, 2, 5, 4, 5, 12, 14, 12, 15, 14, 15], [4, 2, 5, 2, 5, 4, 14, 12, 15, 12, 15, 14]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[2, 4, 2, 5, 4, 5], [4, 2, 5, 2, 5, 4]], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.edges.upper_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_47": {
                "input": {
                    "value": "expected_edge_shared_coboundaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.cat([kite_edge_shared_coboundaries, shifted_house_edge_shared_coboundaries], 0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.edges.shared_coboundaries",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_48": {
                "input": {
                    "value": "expected_edge_lower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 1, 5, 2, 3, 2, 4, 2, 5, 3, 4, 4, 5, 6, 7, 6, 9, 7, 8, 7, 11, 8, 9, 8, 10, 8, 11, 9, 10, 10, 11], [1, 0, 3, 0, 2, 1, 5, 1, 3, 2, 4, 2, 5, 2, 4, 3, 5, 4, 7, 6, 9, 6, 8, 7, 11, 7, 9, 8, 10, 8, 11, 8, 10, 9, 11, 10]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 4, 5, 4, 7, 5, 6, 6, 7], [1, 0, 3, 0, 2, 1, 3, 2, 5, 4, 7, 4, 6, 5, 7, 6]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.cat([kite_edge_lower, shifted_house_lower], 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 1, 5, 2, 3, 2, 4, 2, 5, 3, 4, 4, 5, 6, 7, 6, 9, 7, 8, 8, 9], [1, 0, 3, 0, 2, 1, 5, 1, 3, 2, 4, 2, 5, 2, 4, 3, 5, 4, 7, 6, 9, 6, 8, 7, 9, 8]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 1, 5, 2, 3, 2, 4, 2, 5, 3, 4, 4, 5, 6, 7, 6, 9, 7, 8, 8, 9, 10, 11, 10, 13, 11, 12, 11, 15, 12, 13, 12, 14, 12, 15, 13, 14, 14, 15], [1, 0, 3, 0, 2, 1, 5, 1, 3, 2, 4, 2, 5, 2, 4, 3, 5, 4, 7, 6, 9, 6, 8, 7, 9, 8, 11, 10, 13, 10, 12, 11, 15, 11, 13, 12, 14, 12, 15, 12, 14, 13, 15, 14]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 1, 5, 2, 3, 2, 4, 2, 5, 3, 4, 4, 5], [1, 0, 3, 0, 2, 1, 5, 1, 3, 2, 4, 2, 5, 2, 4, 3, 5, 4]], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.edges.lower_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_49": {
                "input": {
                    "value": "expected_edge_shared_boundaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([1, 1, 0, 0, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 3, 3, 4, 4, 6, 6, 5, 5, 7, 7, 7, 7, 8, 8, 8, 8, 7, 7, 8, 8, 9, 9], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 0, 0, 2, 2, 3, 3, 6, 6, 5, 5, 7, 7, 8, 8], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.cat([kite_edge_shared_boundaries, shifted_house_edge_shared_boundaries], 0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 0, 0, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 3, 3, 4, 4, 6, 6, 5, 5, 7, 7, 8, 8], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 0, 0, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 3, 3, 4, 4, 6, 6, 5, 5, 7, 7, 8, 8, 10, 10, 9, 9, 11, 11, 11, 11, 12, 12, 12, 12, 11, 11, 12, 12, 13, 13], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 0, 0, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 3, 3, 4, 4], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.edges.shared_boundaries",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_50": {
                "input": {
                    "value": "expected_edge_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [6], [1], [2], [3], [4], [5], [6]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [1], [2], [3], [4]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [6], [1], [2], [3], [4], [5], [6]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [6], [1], [2], [3], [4]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [6], [1], [2], [3], [4], [1], [2], [3], [4], [5], [6]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [6]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.edges.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_51": {
                "input": {
                    "value": "expected_edge_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.edges.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_52": {
                "input": {
                    "value": "expected_edge_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.edges.batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_58": {
                "input": {
                    "value": "expected_two_cell_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1], [1]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [1]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [1]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.two_cells.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_59": {
                "input": {
                    "value": "expected_two_cell_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([2, 2], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([2, 2, 2], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([2], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([2, 2], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([2], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.two_cells.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_60": {
                "input": {
                    "value": "expected_two_cell_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 2], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.two_cells.batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_80": {
                "input": {
                    "value": "expected_node_upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4, 5, 6, 5, 8, 6, 7, 7, 8, 7, 9, 8, 9], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3, 6, 5, 8, 5, 7, 6, 8, 7, 9, 7, 9, 8]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 5, 6, 5, 8, 6, 7, 7, 8], [1, 0, 3, 0, 2, 1, 3, 2, 6, 5, 8, 5, 7, 6, 8, 7]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.cat([kite_node_upper, shifted_house_node_upper], 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4, 5, 6, 5, 8, 6, 7, 7, 8], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3, 6, 5, 8, 5, 7, 6, 8, 7]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4, 5, 6, 5, 8, 6, 7, 7, 8, 9, 10, 9, 12, 10, 11, 11, 12, 11, 13, 12, 13], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3, 6, 5, 8, 5, 7, 6, 8, 7, 10, 9, 12, 9, 11, 10, 12, 11, 13, 11, 13, 12]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3]], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.nodes.upper_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_81": {
                "input": {
                    "value": "expected_node_shared_coboundaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0, 0, 3, 3, 1, 1, 2, 2, 5, 5, 4, 4, 6, 6, 9, 9, 7, 7, 8, 8, 11, 11, 10, 10], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 3, 3, 1, 1, 2, 2, 4, 4, 7, 7, 5, 5, 6, 6], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.cat([kite_node_shared_coboundaries, shifted_house_node_shared_coboundaries], 0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 3, 3, 1, 1, 2, 2, 5, 5, 4, 4, 6, 6, 9, 9, 7, 7, 8, 8], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 3, 3, 1, 1, 2, 2, 5, 5, 4, 4, 6, 6, 9, 9, 7, 7, 8, 8, 10, 10, 13, 13, 11, 11, 12, 12, 15, 15, 14, 14], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 3, 3, 1, 1, 2, 2, 5, 5, 4, 4], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.nodes.shared_coboundaries",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_84": {
                "input": {
                    "value": "expected_node_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [1], [2], [3], [4], [5]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [1], [2], [3], [4]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [1], [2], [3], [4], [5]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [1], [2], [3], [4]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [1], [2], [3], [4], [1], [2], [3], [4], [5]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.nodes.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_85": {
                "input": {
                    "value": "expected_node_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.nodes.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_86": {
                "input": {
                    "value": "expected_node_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.nodes.batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_90": {
                "input": {
                    "value": "expected_edge_lower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 1, 5, 2, 3, 2, 4, 2, 5, 3, 4, 4, 5, 6, 7, 6, 9, 7, 8, 7, 11, 8, 9, 8, 10, 8, 11, 9, 10, 10, 11], [1, 0, 3, 0, 2, 1, 5, 1, 3, 2, 4, 2, 5, 2, 4, 3, 5, 4, 7, 6, 9, 6, 8, 7, 11, 7, 9, 8, 10, 8, 11, 8, 10, 9, 11, 10]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 4, 5, 4, 7, 5, 6, 6, 7], [1, 0, 3, 0, 2, 1, 3, 2, 5, 4, 7, 4, 6, 5, 7, 6]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.cat([kite_edge_lower, shifted_house_lower], 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 1, 5, 2, 3, 2, 4, 2, 5, 3, 4, 4, 5, 6, 7, 6, 9, 7, 8, 8, 9], [1, 0, 3, 0, 2, 1, 5, 1, 3, 2, 4, 2, 5, 2, 4, 3, 5, 4, 7, 6, 9, 6, 8, 7, 9, 8]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 1, 5, 2, 3, 2, 4, 2, 5, 3, 4, 4, 5, 6, 7, 6, 9, 7, 8, 8, 9, 10, 11, 10, 13, 11, 12, 11, 15, 12, 13, 12, 14, 12, 15, 13, 14, 14, 15], [1, 0, 3, 0, 2, 1, 5, 1, 3, 2, 4, 2, 5, 2, 4, 3, 5, 4, 7, 6, 9, 6, 8, 7, 9, 8, 11, 10, 13, 10, 12, 11, 15, 11, 13, 12, 14, 12, 15, 12, 14, 13, 15, 14]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 1, 5, 2, 3, 2, 4, 2, 5, 3, 4, 4, 5], [1, 0, 3, 0, 2, 1, 5, 1, 3, 2, 4, 2, 5, 2, 4, 3, 5, 4]], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.edges.lower_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_91": {
                "input": {
                    "value": "expected_edge_shared_boundaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([1, 1, 0, 0, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 3, 3, 4, 4, 6, 6, 5, 5, 7, 7, 7, 7, 8, 8, 8, 8, 7, 7, 8, 8, 9, 9], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 0, 0, 2, 2, 3, 3, 6, 6, 5, 5, 7, 7, 8, 8], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.cat([kite_edge_shared_boundaries, shifted_house_edge_shared_boundaries], 0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 0, 0, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 3, 3, 4, 4, 6, 6, 5, 5, 7, 7, 8, 8], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 0, 0, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 3, 3, 4, 4, 6, 6, 5, 5, 7, 7, 8, 8, 10, 10, 9, 9, 11, 11, 11, 11, 12, 12, 12, 12, 11, 11, 12, 12, 13, 13], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 0, 0, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 3, 3, 4, 4], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.edges.shared_boundaries",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_92": {
                "input": {
                    "value": "expected_edge_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [6], [1], [2], [3], [4], [5], [6]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [1], [2], [3], [4]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [6], [1], [2], [3], [4], [5], [6]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [6], [1], [2], [3], [4]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [6], [1], [2], [3], [4], [1], [2], [3], [4], [5], [6]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [6]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.edges.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_93": {
                "input": {
                    "value": "expected_edge_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.edges.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_94": {
                "input": {
                    "value": "expected_edge_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.edges.batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_144": {
                "input": {
                    "value": "expected_node_upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4, 5, 6, 5, 8, 6, 7, 7, 8, 7, 9, 8, 9], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3, 6, 5, 8, 5, 7, 6, 8, 7, 9, 7, 9, 8]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 5, 6, 5, 8, 6, 7, 7, 8], [1, 0, 3, 0, 2, 1, 3, 2, 6, 5, 8, 5, 7, 6, 8, 7]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.cat([kite_node_upper, shifted_house_node_upper], 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4, 5, 6, 5, 8, 6, 7, 7, 8], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3, 6, 5, 8, 5, 7, 6, 8, 7]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4, 5, 6, 5, 8, 6, 7, 7, 8, 9, 10, 9, 12, 10, 11, 11, 12, 11, 13, 12, 13], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3, 6, 5, 8, 5, 7, 6, 8, 7, 10, 9, 12, 9, 11, 10, 12, 11, 13, 11, 13, 12]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3]], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.nodes.upper_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_145": {
                "input": {
                    "value": "expected_node_shared_coboundaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0, 0, 3, 3, 1, 1, 2, 2, 5, 5, 4, 4, 6, 6, 9, 9, 7, 7, 8, 8, 11, 11, 10, 10], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 3, 3, 1, 1, 2, 2, 4, 4, 7, 7, 5, 5, 6, 6], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.cat([kite_node_shared_coboundaries, shifted_house_node_shared_coboundaries], 0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 3, 3, 1, 1, 2, 2, 5, 5, 4, 4, 6, 6, 9, 9, 7, 7, 8, 8], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 3, 3, 1, 1, 2, 2, 5, 5, 4, 4, 6, 6, 9, 9, 7, 7, 8, 8, 10, 10, 13, 13, 11, 11, 12, 12, 15, 15, 14, 14], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 3, 3, 1, 1, 2, 2, 5, 5, 4, 4], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.nodes.shared_coboundaries",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_148": {
                "input": {
                    "value": "expected_node_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [1], [2], [3], [4], [5]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [1], [2], [3], [4]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [1], [2], [3], [4], [5]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [1], [2], [3], [4]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [1], [2], [3], [4], [1], [2], [3], [4], [5]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.nodes.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_149": {
                "input": {
                    "value": "expected_node_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.nodes.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_150": {
                "input": {
                    "value": "expected_node_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.nodes.batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_152": {
                "input": {
                    "value": "expected_edge_upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[2, 4, 2, 5, 4, 5, 8, 10, 8, 11, 10, 11], [4, 2, 5, 2, 5, 4, 10, 8, 11, 8, 11, 10]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.cat([kite_edge_upper, shifted_house_edge_upper], 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[2, 4, 2, 5, 4, 5], [4, 2, 5, 2, 5, 4]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[2, 4, 2, 5, 4, 5, 12, 14, 12, 15, 14, 15], [4, 2, 5, 2, 5, 4, 14, 12, 15, 12, 15, 14]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[2, 4, 2, 5, 4, 5], [4, 2, 5, 2, 5, 4]], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.edges.upper_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_153": {
                "input": {
                    "value": "expected_edge_shared_coboundaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.cat([kite_edge_shared_coboundaries, shifted_house_edge_shared_coboundaries], 0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.edges.shared_coboundaries",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_154": {
                "input": {
                    "value": "expected_edge_lower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 1, 5, 2, 3, 2, 4, 2, 5, 3, 4, 4, 5, 6, 7, 6, 9, 7, 8, 7, 11, 8, 9, 8, 10, 8, 11, 9, 10, 10, 11], [1, 0, 3, 0, 2, 1, 5, 1, 3, 2, 4, 2, 5, 2, 4, 3, 5, 4, 7, 6, 9, 6, 8, 7, 11, 7, 9, 8, 10, 8, 11, 8, 10, 9, 11, 10]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 4, 5, 4, 7, 5, 6, 6, 7], [1, 0, 3, 0, 2, 1, 3, 2, 5, 4, 7, 4, 6, 5, 7, 6]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.cat([kite_edge_lower, shifted_house_lower], 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 1, 5, 2, 3, 2, 4, 2, 5, 3, 4, 4, 5, 6, 7, 6, 9, 7, 8, 8, 9], [1, 0, 3, 0, 2, 1, 5, 1, 3, 2, 4, 2, 5, 2, 4, 3, 5, 4, 7, 6, 9, 6, 8, 7, 9, 8]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 1, 5, 2, 3, 2, 4, 2, 5, 3, 4, 4, 5, 6, 7, 6, 9, 7, 8, 8, 9, 10, 11, 10, 13, 11, 12, 11, 15, 12, 13, 12, 14, 12, 15, 13, 14, 14, 15], [1, 0, 3, 0, 2, 1, 5, 1, 3, 2, 4, 2, 5, 2, 4, 3, 5, 4, 7, 6, 9, 6, 8, 7, 9, 8, 11, 10, 13, 10, 12, 11, 15, 11, 13, 12, 14, 12, 15, 12, 14, 13, 15, 14]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 1, 5, 2, 3, 2, 4, 2, 5, 3, 4, 4, 5], [1, 0, 3, 0, 2, 1, 5, 1, 3, 2, 4, 2, 5, 2, 4, 3, 5, 4]], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.edges.lower_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_155": {
                "input": {
                    "value": "expected_edge_shared_boundaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([1, 1, 0, 0, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 3, 3, 4, 4, 6, 6, 5, 5, 7, 7, 7, 7, 8, 8, 8, 8, 7, 7, 8, 8, 9, 9], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 0, 0, 2, 2, 3, 3, 6, 6, 5, 5, 7, 7, 8, 8], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.cat([kite_edge_shared_boundaries, shifted_house_edge_shared_boundaries], 0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 0, 0, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 3, 3, 4, 4, 6, 6, 5, 5, 7, 7, 8, 8], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 0, 0, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 3, 3, 4, 4, 6, 6, 5, 5, 7, 7, 8, 8, 10, 10, 9, 9, 11, 11, 11, 11, 12, 12, 12, 12, 11, 11, 12, 12, 13, 13], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 0, 0, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 3, 3, 4, 4], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.edges.shared_boundaries",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_156": {
                "input": {
                    "value": "expected_edge_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [6], [1], [2], [3], [4], [5], [6]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [1], [2], [3], [4]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [6], [1], [2], [3], [4], [5], [6]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [6], [1], [2], [3], [4]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [6], [1], [2], [3], [4], [1], [2], [3], [4], [5], [6]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [6]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.edges.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_157": {
                "input": {
                    "value": "expected_edge_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.edges.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_158": {
                "input": {
                    "value": "expected_edge_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.edges.batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_162": {
                "input": {
                    "value": "expected_two_cell_lower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0, 1], [1, 0]], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.two_cells.lower_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_163": {
                "input": {
                    "value": "expected_two_cell_shared_boundaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([1, 1], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.two_cells.shared_boundaries",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_164": {
                "input": {
                    "value": "expected_two_cell_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1], [1]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [1]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [1]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.two_cells.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_165": {
                "input": {
                    "value": "expected_two_cell_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([2, 2], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([2, 2, 2], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([2], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([2, 2], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([2], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.two_cells.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_166": {
                "input": {
                    "value": "expected_two_cell_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 2], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.two_cells.batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_194": {
                "input": {
                    "value": "expected_node_upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4, 5, 6, 5, 8, 6, 7, 7, 8, 7, 9, 8, 9], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3, 6, 5, 8, 5, 7, 6, 8, 7, 9, 7, 9, 8]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 5, 6, 5, 8, 6, 7, 7, 8], [1, 0, 3, 0, 2, 1, 3, 2, 6, 5, 8, 5, 7, 6, 8, 7]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.cat([kite_node_upper, shifted_house_node_upper], 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4, 5, 6, 5, 8, 6, 7, 7, 8], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3, 6, 5, 8, 5, 7, 6, 8, 7]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4, 5, 6, 5, 8, 6, 7, 7, 8, 9, 10, 9, 12, 10, 11, 11, 12, 11, 13, 12, 13], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3, 6, 5, 8, 5, 7, 6, 8, 7, 10, 9, 12, 9, 11, 10, 12, 11, 13, 11, 13, 12]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3]], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.nodes.upper_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_195": {
                "input": {
                    "value": "expected_node_shared_coboundaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0, 0, 3, 3, 1, 1, 2, 2, 5, 5, 4, 4, 6, 6, 9, 9, 7, 7, 8, 8, 11, 11, 10, 10], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 3, 3, 1, 1, 2, 2, 4, 4, 7, 7, 5, 5, 6, 6], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.cat([kite_node_shared_coboundaries, shifted_house_node_shared_coboundaries], 0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 3, 3, 1, 1, 2, 2, 5, 5, 4, 4, 6, 6, 9, 9, 7, 7, 8, 8], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 3, 3, 1, 1, 2, 2, 5, 5, 4, 4, 6, 6, 9, 9, 7, 7, 8, 8, 10, 10, 13, 13, 11, 11, 12, 12, 15, 15, 14, 14], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 3, 3, 1, 1, 2, 2, 5, 5, 4, 4], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.nodes.shared_coboundaries",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_198": {
                "input": {
                    "value": "expected_node_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [1], [2], [3], [4], [5]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [1], [2], [3], [4]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [1], [2], [3], [4], [5]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [1], [2], [3], [4]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [1], [2], [3], [4], [1], [2], [3], [4], [5]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.nodes.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_199": {
                "input": {
                    "value": "expected_node_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.nodes.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_200": {
                "input": {
                    "value": "expected_node_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.nodes.batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_202": {
                "input": {
                    "value": "expected_edge_upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[2, 4, 2, 5, 4, 5, 8, 10, 8, 11, 10, 11], [4, 2, 5, 2, 5, 4, 10, 8, 11, 8, 11, 10]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.cat([kite_edge_upper, shifted_house_edge_upper], 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[2, 4, 2, 5, 4, 5], [4, 2, 5, 2, 5, 4]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[2, 4, 2, 5, 4, 5, 12, 14, 12, 15, 14, 15], [4, 2, 5, 2, 5, 4, 14, 12, 15, 12, 15, 14]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[2, 4, 2, 5, 4, 5], [4, 2, 5, 2, 5, 4]], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.edges.upper_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_203": {
                "input": {
                    "value": "expected_edge_shared_coboundaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.cat([kite_edge_shared_coboundaries, shifted_house_edge_shared_coboundaries], 0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.edges.shared_coboundaries",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_204": {
                "input": {
                    "value": "expected_edge_lower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 1, 5, 2, 3, 2, 4, 2, 5, 3, 4, 4, 5, 6, 7, 6, 9, 7, 8, 7, 11, 8, 9, 8, 10, 8, 11, 9, 10, 10, 11], [1, 0, 3, 0, 2, 1, 5, 1, 3, 2, 4, 2, 5, 2, 4, 3, 5, 4, 7, 6, 9, 6, 8, 7, 11, 7, 9, 8, 10, 8, 11, 8, 10, 9, 11, 10]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 4, 5, 4, 7, 5, 6, 6, 7], [1, 0, 3, 0, 2, 1, 3, 2, 5, 4, 7, 4, 6, 5, 7, 6]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.cat([kite_edge_lower, shifted_house_lower], 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 1, 5, 2, 3, 2, 4, 2, 5, 3, 4, 4, 5, 6, 7, 6, 9, 7, 8, 8, 9], [1, 0, 3, 0, 2, 1, 5, 1, 3, 2, 4, 2, 5, 2, 4, 3, 5, 4, 7, 6, 9, 6, 8, 7, 9, 8]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 1, 5, 2, 3, 2, 4, 2, 5, 3, 4, 4, 5, 6, 7, 6, 9, 7, 8, 8, 9, 10, 11, 10, 13, 11, 12, 11, 15, 12, 13, 12, 14, 12, 15, 13, 14, 14, 15], [1, 0, 3, 0, 2, 1, 5, 1, 3, 2, 4, 2, 5, 2, 4, 3, 5, 4, 7, 6, 9, 6, 8, 7, 9, 8, 11, 10, 13, 10, 12, 11, 15, 11, 13, 12, 14, 12, 15, 12, 14, 13, 15, 14]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 1, 5, 2, 3, 2, 4, 2, 5, 3, 4, 4, 5], [1, 0, 3, 0, 2, 1, 5, 1, 3, 2, 4, 2, 5, 2, 4, 3, 5, 4]], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.edges.lower_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_205": {
                "input": {
                    "value": "expected_edge_shared_boundaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([1, 1, 0, 0, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 3, 3, 4, 4, 6, 6, 5, 5, 7, 7, 7, 7, 8, 8, 8, 8, 7, 7, 8, 8, 9, 9], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 0, 0, 2, 2, 3, 3, 6, 6, 5, 5, 7, 7, 8, 8], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.cat([kite_edge_shared_boundaries, shifted_house_edge_shared_boundaries], 0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 0, 0, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 3, 3, 4, 4, 6, 6, 5, 5, 7, 7, 8, 8], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 0, 0, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 3, 3, 4, 4, 6, 6, 5, 5, 7, 7, 8, 8, 10, 10, 9, 9, 11, 11, 11, 11, 12, 12, 12, 12, 11, 11, 12, 12, 13, 13], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 0, 0, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 3, 3, 4, 4], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.edges.shared_boundaries",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_206": {
                "input": {
                    "value": "expected_edge_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [6], [1], [2], [3], [4], [5], [6]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [1], [2], [3], [4]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [6], [1], [2], [3], [4], [5], [6]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [6], [1], [2], [3], [4]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [6], [1], [2], [3], [4], [1], [2], [3], [4], [5], [6]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [6]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.edges.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_207": {
                "input": {
                    "value": "expected_edge_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.edges.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_208": {
                "input": {
                    "value": "expected_edge_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.edges.batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_214": {
                "input": {
                    "value": "expected_two_cell_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1], [1]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [1]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [1]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.two_cells.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_215": {
                "input": {
                    "value": "expected_two_cell_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([2, 2], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([2, 2, 2], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([2], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([2, 2], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([2], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.two_cells.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_216": {
                "input": {
                    "value": "expected_two_cell_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 2], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.two_cells.batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_246": {
                "input": {
                    "value": "expected_node_upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4, 5, 6, 5, 8, 6, 7, 7, 8, 7, 9, 8, 9], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3, 6, 5, 8, 5, 7, 6, 8, 7, 9, 7, 9, 8]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 5, 6, 5, 8, 6, 7, 7, 8], [1, 0, 3, 0, 2, 1, 3, 2, 6, 5, 8, 5, 7, 6, 8, 7]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.cat([kite_node_upper, shifted_house_node_upper], 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4, 5, 6, 5, 8, 6, 7, 7, 8], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3, 6, 5, 8, 5, 7, 6, 8, 7]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4, 5, 6, 5, 8, 6, 7, 7, 8, 9, 10, 9, 12, 10, 11, 11, 12, 11, 13, 12, 13], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3, 6, 5, 8, 5, 7, 6, 8, 7, 10, 9, 12, 9, 11, 10, 12, 11, 13, 11, 13, 12]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3]], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.nodes.upper_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_247": {
                "input": {
                    "value": "expected_node_shared_coboundaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0, 0, 3, 3, 1, 1, 2, 2, 5, 5, 4, 4, 6, 6, 9, 9, 7, 7, 8, 8, 11, 11, 10, 10], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 3, 3, 1, 1, 2, 2, 4, 4, 7, 7, 5, 5, 6, 6], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.cat([kite_node_shared_coboundaries, shifted_house_node_shared_coboundaries], 0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 3, 3, 1, 1, 2, 2, 5, 5, 4, 4, 6, 6, 9, 9, 7, 7, 8, 8], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 3, 3, 1, 1, 2, 2, 5, 5, 4, 4, 6, 6, 9, 9, 7, 7, 8, 8, 10, 10, 13, 13, 11, 11, 12, 12, 15, 15, 14, 14], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 3, 3, 1, 1, 2, 2, 5, 5, 4, 4], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.nodes.shared_coboundaries",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_250": {
                "input": {
                    "value": "expected_node_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [1], [2], [3], [4], [5]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [1], [2], [3], [4]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [1], [2], [3], [4], [5]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [1], [2], [3], [4]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [1], [2], [3], [4], [1], [2], [3], [4], [5]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.nodes.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_251": {
                "input": {
                    "value": "expected_node_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.nodes.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_252": {
                "input": {
                    "value": "expected_node_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.nodes.batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_254": {
                "input": {
                    "value": "expected_edge_upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[2, 4, 2, 5, 4, 5, 8, 10, 8, 11, 10, 11], [4, 2, 5, 2, 5, 4, 10, 8, 11, 8, 11, 10]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.cat([kite_edge_upper, shifted_house_edge_upper], 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[2, 4, 2, 5, 4, 5], [4, 2, 5, 2, 5, 4]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[2, 4, 2, 5, 4, 5, 12, 14, 12, 15, 14, 15], [4, 2, 5, 2, 5, 4, 14, 12, 15, 12, 15, 14]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[2, 4, 2, 5, 4, 5], [4, 2, 5, 2, 5, 4]], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.edges.upper_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_255": {
                "input": {
                    "value": "expected_edge_shared_coboundaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.cat([kite_edge_shared_coboundaries, shifted_house_edge_shared_coboundaries], 0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.edges.shared_coboundaries",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_256": {
                "input": {
                    "value": "expected_edge_lower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 1, 5, 2, 3, 2, 4, 2, 5, 3, 4, 4, 5, 6, 7, 6, 9, 7, 8, 7, 11, 8, 9, 8, 10, 8, 11, 9, 10, 10, 11], [1, 0, 3, 0, 2, 1, 5, 1, 3, 2, 4, 2, 5, 2, 4, 3, 5, 4, 7, 6, 9, 6, 8, 7, 11, 7, 9, 8, 10, 8, 11, 8, 10, 9, 11, 10]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 4, 5, 4, 7, 5, 6, 6, 7], [1, 0, 3, 0, 2, 1, 3, 2, 5, 4, 7, 4, 6, 5, 7, 6]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.cat([kite_edge_lower, shifted_house_lower], 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 1, 5, 2, 3, 2, 4, 2, 5, 3, 4, 4, 5, 6, 7, 6, 9, 7, 8, 8, 9], [1, 0, 3, 0, 2, 1, 5, 1, 3, 2, 4, 2, 5, 2, 4, 3, 5, 4, 7, 6, 9, 6, 8, 7, 9, 8]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 1, 5, 2, 3, 2, 4, 2, 5, 3, 4, 4, 5, 6, 7, 6, 9, 7, 8, 8, 9, 10, 11, 10, 13, 11, 12, 11, 15, 12, 13, 12, 14, 12, 15, 13, 14, 14, 15], [1, 0, 3, 0, 2, 1, 5, 1, 3, 2, 4, 2, 5, 2, 4, 3, 5, 4, 7, 6, 9, 6, 8, 7, 9, 8, 11, 10, 13, 10, 12, 11, 15, 11, 13, 12, 14, 12, 15, 12, 14, 13, 15, 14]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 1, 5, 2, 3, 2, 4, 2, 5, 3, 4, 4, 5], [1, 0, 3, 0, 2, 1, 5, 1, 3, 2, 4, 2, 5, 2, 4, 3, 5, 4]], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.edges.lower_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_257": {
                "input": {
                    "value": "expected_edge_shared_boundaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([1, 1, 0, 0, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 3, 3, 4, 4, 6, 6, 5, 5, 7, 7, 7, 7, 8, 8, 8, 8, 7, 7, 8, 8, 9, 9], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 0, 0, 2, 2, 3, 3, 6, 6, 5, 5, 7, 7, 8, 8], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.cat([kite_edge_shared_boundaries, shifted_house_edge_shared_boundaries], 0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 0, 0, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 3, 3, 4, 4, 6, 6, 5, 5, 7, 7, 8, 8], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 0, 0, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 3, 3, 4, 4, 6, 6, 5, 5, 7, 7, 8, 8, 10, 10, 9, 9, 11, 11, 11, 11, 12, 12, 12, 12, 11, 11, 12, 12, 13, 13], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 0, 0, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 3, 3, 4, 4], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.edges.shared_boundaries",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_258": {
                "input": {
                    "value": "expected_edge_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [6], [1], [2], [3], [4], [5], [6]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [1], [2], [3], [4]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [6], [1], [2], [3], [4], [5], [6]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [6], [1], [2], [3], [4]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [6], [1], [2], [3], [4], [1], [2], [3], [4], [5], [6]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [6]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.edges.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_259": {
                "input": {
                    "value": "expected_edge_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.edges.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_260": {
                "input": {
                    "value": "expected_edge_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.edges.batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_266": {
                "input": {
                    "value": "expected_two_cell_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1], [1]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [1]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [1]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.two_cells.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_267": {
                "input": {
                    "value": "expected_two_cell_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([2, 2], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([2, 2, 2], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([2], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([2, 2], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([2], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.two_cells.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_268": {
                "input": {
                    "value": "expected_two_cell_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 2], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.two_cells.batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_296": {
                "input": {
                    "value": "expected_node_upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4, 5, 6, 5, 8, 6, 7, 7, 8, 7, 9, 8, 9], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3, 6, 5, 8, 5, 7, 6, 8, 7, 9, 7, 9, 8]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 5, 6, 5, 8, 6, 7, 7, 8], [1, 0, 3, 0, 2, 1, 3, 2, 6, 5, 8, 5, 7, 6, 8, 7]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.cat([kite_node_upper, shifted_house_node_upper], 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4, 5, 6, 5, 8, 6, 7, 7, 8], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3, 6, 5, 8, 5, 7, 6, 8, 7]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4, 5, 6, 5, 8, 6, 7, 7, 8, 9, 10, 9, 12, 10, 11, 11, 12, 11, 13, 12, 13], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3, 6, 5, 8, 5, 7, 6, 8, 7, 10, 9, 12, 9, 11, 10, 12, 11, 13, 11, 13, 12]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3]], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.nodes.upper_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_297": {
                "input": {
                    "value": "expected_node_shared_coboundaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0, 0, 3, 3, 1, 1, 2, 2, 5, 5, 4, 4, 6, 6, 9, 9, 7, 7, 8, 8, 11, 11, 10, 10], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 3, 3, 1, 1, 2, 2, 4, 4, 7, 7, 5, 5, 6, 6], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.cat([kite_node_shared_coboundaries, shifted_house_node_shared_coboundaries], 0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 3, 3, 1, 1, 2, 2, 5, 5, 4, 4, 6, 6, 9, 9, 7, 7, 8, 8], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 3, 3, 1, 1, 2, 2, 5, 5, 4, 4, 6, 6, 9, 9, 7, 7, 8, 8, 10, 10, 13, 13, 11, 11, 12, 12, 15, 15, 14, 14], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 3, 3, 1, 1, 2, 2, 5, 5, 4, 4], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.nodes.shared_coboundaries",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_300": {
                "input": {
                    "value": "expected_node_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [1], [2], [3], [4], [5]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [1], [2], [3], [4]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [1], [2], [3], [4], [5]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [1], [2], [3], [4]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [1], [2], [3], [4], [1], [2], [3], [4], [5]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.nodes.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_301": {
                "input": {
                    "value": "expected_node_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.nodes.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_302": {
                "input": {
                    "value": "expected_node_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.nodes.batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_304": {
                "input": {
                    "value": "expected_edge_upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[2, 4, 2, 5, 4, 5, 8, 10, 8, 11, 10, 11], [4, 2, 5, 2, 5, 4, 10, 8, 11, 8, 11, 10]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.cat([kite_edge_upper, shifted_house_edge_upper], 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[2, 4, 2, 5, 4, 5], [4, 2, 5, 2, 5, 4]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[2, 4, 2, 5, 4, 5, 12, 14, 12, 15, 14, 15], [4, 2, 5, 2, 5, 4, 14, 12, 15, 12, 15, 14]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[2, 4, 2, 5, 4, 5], [4, 2, 5, 2, 5, 4]], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.edges.upper_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_305": {
                "input": {
                    "value": "expected_edge_shared_coboundaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.cat([kite_edge_shared_coboundaries, shifted_house_edge_shared_coboundaries], 0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.edges.shared_coboundaries",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_306": {
                "input": {
                    "value": "expected_edge_lower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 1, 5, 2, 3, 2, 4, 2, 5, 3, 4, 4, 5, 6, 7, 6, 9, 7, 8, 7, 11, 8, 9, 8, 10, 8, 11, 9, 10, 10, 11], [1, 0, 3, 0, 2, 1, 5, 1, 3, 2, 4, 2, 5, 2, 4, 3, 5, 4, 7, 6, 9, 6, 8, 7, 11, 7, 9, 8, 10, 8, 11, 8, 10, 9, 11, 10]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 4, 5, 4, 7, 5, 6, 6, 7], [1, 0, 3, 0, 2, 1, 3, 2, 5, 4, 7, 4, 6, 5, 7, 6]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.cat([kite_edge_lower, shifted_house_lower], 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 1, 5, 2, 3, 2, 4, 2, 5, 3, 4, 4, 5, 6, 7, 6, 9, 7, 8, 8, 9], [1, 0, 3, 0, 2, 1, 5, 1, 3, 2, 4, 2, 5, 2, 4, 3, 5, 4, 7, 6, 9, 6, 8, 7, 9, 8]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 1, 5, 2, 3, 2, 4, 2, 5, 3, 4, 4, 5, 6, 7, 6, 9, 7, 8, 8, 9, 10, 11, 10, 13, 11, 12, 11, 15, 12, 13, 12, 14, 12, 15, 13, 14, 14, 15], [1, 0, 3, 0, 2, 1, 5, 1, 3, 2, 4, 2, 5, 2, 4, 3, 5, 4, 7, 6, 9, 6, 8, 7, 9, 8, 11, 10, 13, 10, 12, 11, 15, 11, 13, 12, 14, 12, 15, 12, 14, 13, 15, 14]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 1, 5, 2, 3, 2, 4, 2, 5, 3, 4, 4, 5], [1, 0, 3, 0, 2, 1, 5, 1, 3, 2, 4, 2, 5, 2, 4, 3, 5, 4]], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.edges.lower_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_307": {
                "input": {
                    "value": "expected_edge_shared_boundaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([1, 1, 0, 0, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 3, 3, 4, 4, 6, 6, 5, 5, 7, 7, 7, 7, 8, 8, 8, 8, 7, 7, 8, 8, 9, 9], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 0, 0, 2, 2, 3, 3, 6, 6, 5, 5, 7, 7, 8, 8], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.cat([kite_edge_shared_boundaries, shifted_house_edge_shared_boundaries], 0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 0, 0, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 3, 3, 4, 4, 6, 6, 5, 5, 7, 7, 8, 8], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 0, 0, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 3, 3, 4, 4, 6, 6, 5, 5, 7, 7, 8, 8, 10, 10, 9, 9, 11, 11, 11, 11, 12, 12, 12, 12, 11, 11, 12, 12, 13, 13], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 0, 0, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 3, 3, 4, 4], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.edges.shared_boundaries",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_308": {
                "input": {
                    "value": "expected_edge_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [6], [1], [2], [3], [4], [5], [6]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [1], [2], [3], [4]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [6], [1], [2], [3], [4], [5], [6]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [6], [1], [2], [3], [4]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [6], [1], [2], [3], [4], [1], [2], [3], [4], [5], [6]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [3], [4], [5], [6]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.edges.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_309": {
                "input": {
                    "value": "expected_edge_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.edges.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_310": {
                "input": {
                    "value": "expected_edge_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 1, 1, 1, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 0, 0, 0, 0], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.edges.batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_316": {
                "input": {
                    "value": "expected_two_cell_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1], [1]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [2], [1]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [1]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.two_cells.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_317": {
                "input": {
                    "value": "expected_two_cell_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([2, 2], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([2, 2, 2], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([2], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([2, 2], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([2], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.two_cells.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_318": {
                "input": {
                    "value": "expected_two_cell_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 0, 1], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 2], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch.two_cells.batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_544": {
                "input": {
                    "value": "batch.cochains[0].x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "vx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(21, 35, dtype=torch.float).view(14, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_545": {
                "input": {
                    "value": "batch.cochains[1].x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "ex",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(21, 37, dtype=torch.float).view(16, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_546": {
                "input": {
                    "value": "batch.cochains[2].x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "tx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(21, 23, dtype=torch.float).view(2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_1061": {
                "input": {
                    "value": "ys1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(ys1, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "ys2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(ys2, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_101": {
                "data": {
                    "value": "[[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_106": {
                "data": {
                    "value": "[0, 0, 3, 3, 1, 1, 2, 2, 5, 5, 4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_115": {
                "data": {
                    "value": "[[2, 4, 2, 5, 4, 5], [4, 2, 5, 2, 5, 4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_120": {
                "data": {
                    "value": "[0, 0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_125": {
                "data": {
                    "value": "[[0, 1, 0, 3, 1, 2, 1, 5, 2, 3, 2, 4, 2, 5, 3, 4, 4, 5], [1, 0, 3, 0, 2, 1, 5, 1, 3, 2, 4, 2, 5, 2, 4, 3, 5, 4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_130": {
                "data": {
                    "value": "[1, 1, 0, 0, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 3, 3, 4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_646": {
                "variable": {
                    "value": "batched_xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batched_x[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_656": {
                "variable": {
                    "value": "xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_687": {
                "variable": {
                    "value": "batched_xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batched_x[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_697": {
                "variable": {
                    "value": "xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_729": {
                "variable": {
                    "value": "batched_xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batched_x[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_744": {
                "variable": {
                    "value": "xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_821": {
                "variable": {
                    "value": "batched_xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batched_x[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_834": {
                "variable": {
                    "value": "xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_917": {
                "variable": {
                    "value": "batched_xs_boundaries[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batched_x_boundaries[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_919": {
                "variable": {
                    "value": "batched_xs_cells[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batched_x_cells[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_939": {
                "variable": {
                    "value": "xs_boundaries[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_boundaries[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_940": {
                "variable": {
                    "value": "xs_cells[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_cells[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_1040": {
                "input": {
                    "value": "unshuffled_ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(unshuffled_ys, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "shuffled_ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(shuffled_ys, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_585": {
                "input": {
                    "value": "txs_after[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "txs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_607": {
                "variable": {
                    "value": "batched_xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batched_x[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_617": {
                "variable": {
                    "value": "xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_662": {
                "input": {
                    "value": "batched_xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_703": {
                "input": {
                    "value": "batched_xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_750": {
                "input": {
                    "value": "xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "batched_xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_775": {
                "variable": {
                    "value": "batched_xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batched_x[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_790": {
                "variable": {
                    "value": "xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_841": {
                "input": {
                    "value": "xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "batched_xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_865": {
                "variable": {
                    "value": "batched_xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batched_x[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_878": {
                "variable": {
                    "value": "xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_947": {
                "input": {
                    "value": "xs_boundaries[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "batched_xs_boundaries[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_952": {
                "input": {
                    "value": "xs_cells[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "batched_xs_cells[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_984": {
                "variable": {
                    "value": "batched_xs_boundaries[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batched_x_boundaries[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_986": {
                "variable": {
                    "value": "batched_xs_cells[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batched_x_cells[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1006": {
                "variable": {
                    "value": "xs_boundaries[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_boundaries[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1007": {
                "variable": {
                    "value": "xs_cells[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_cells[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_562": {
                "tensors": {
                    "value": "xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_568": {
                "input": {
                    "value": "batch.cochains[i].x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_578": {
                "tensors": {
                    "value": "xs_after[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_623": {
                "input": {
                    "value": "batched_xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_796": {
                "input": {
                    "value": "xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "batched_xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_885": {
                "input": {
                    "value": "xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "batched_xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_1014": {
                "input": {
                    "value": "xs_boundaries[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "batched_xs_boundaries[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_1019": {
                "input": {
                    "value": "xs_cells[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "batched_xs_cells[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_909": {
                "input": {
                    "value": "boundary_attrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params[dim].kwargs['boundary_attr']",
                            "Subscript"
                        ],
                        [
                            "params[dim].kwargs['boundary_attr']",
                            "Subscript"
                        ],
                        [
                            "params[dim].kwargs['boundary_attr']",
                            "Subscript"
                        ],
                        [
                            "params[dim].kwargs['boundary_attr']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "params[dim].boundary_index[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_911": {
                "input": {
                    "value": "params[dim].x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "params[dim].boundary_index[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_931": {
                "input": {
                    "value": "boundary_attrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params[dim].kwargs['boundary_attr']",
                            "Subscript"
                        ],
                        [
                            "params[dim].kwargs['boundary_attr']",
                            "Subscript"
                        ],
                        [
                            "params[dim].kwargs['boundary_attr']",
                            "Subscript"
                        ],
                        [
                            "params[dim].kwargs['boundary_attr']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "params[dim].boundary_index[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_933": {
                "input": {
                    "value": "params[dim].x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "params[dim].boundary_index[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_976": {
                "input": {
                    "value": "boundary_attrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params[dim].kwargs['boundary_attr']",
                            "Subscript"
                        ],
                        [
                            "params[dim].kwargs['boundary_attr']",
                            "Subscript"
                        ],
                        [
                            "params[dim].kwargs['boundary_attr']",
                            "Subscript"
                        ],
                        [
                            "params[dim].kwargs['boundary_attr']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "params[dim].boundary_index[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_978": {
                "input": {
                    "value": "params[dim].x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "params[dim].boundary_index[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_998": {
                "input": {
                    "value": "boundary_attrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params[dim].kwargs['boundary_attr']",
                            "Subscript"
                        ],
                        [
                            "params[dim].kwargs['boundary_attr']",
                            "Subscript"
                        ],
                        [
                            "params[dim].kwargs['boundary_attr']",
                            "Subscript"
                        ],
                        [
                            "params[dim].kwargs['boundary_attr']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "params[dim].boundary_index[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_1000": {
                "input": {
                    "value": "params[dim].x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "params[dim].boundary_index[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "data/test_data.py": {
        "torch": {
            "tensor_11": {
                "variable": {
                    "value": "expected_v_up_attr",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [1], [4], [4], [2], [2], [3], [3], [6], [6], [5], [5]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_17": {
                "variable": {
                    "value": "expected_e_up_attr",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [1], [1], [1], [1], [1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_21": {
                "variable": {
                    "value": "expected_e_down_attr",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[2], [2], [1], [1], [3], [3], [3], [3], [4], [4], [4], [4], [3], [3], [4], [4], [5], [5]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "variable": {
                    "value": "expected_v_up_attr",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [1], [4], [4], [2], [2], [3], [3], [6], [6], [5], [5]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "variable": {
                    "value": "expected_e_down_attr",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[2], [2], [1], [1], [3], [3], [3], [3], [4], [4], [4], [4], [3], [3], [4], [4], [5], [5]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_13": {
                "input": {
                    "value": "expected_v_up_attr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1], [1], [4], [4], [2], [2], [3], [3], [6], [6], [5], [5]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [1], [4], [4], [2], [2], [3], [3], [6], [6], [5], [5]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v_up_attr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v_cochain_params.kwargs['up_attr']",
                            "Subscript"
                        ],
                        [
                            "v_cochain_params.kwargs['up_attr']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_18": {
                "input": {
                    "value": "expected_e_up_attr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1], [1], [1], [1], [1], [1]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "e_up_attr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "e_cochain_params.kwargs['up_attr']",
                            "Subscript"
                        ],
                        [
                            "e_cochain_params.kwargs['up_attr']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_23": {
                "input": {
                    "value": "expected_e_down_attr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[2], [2], [1], [1], [3], [3], [3], [3], [4], [4], [4], [4], [3], [3], [4], [4], [5], [5]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[2], [2], [1], [1], [3], [3], [3], [3], [4], [4], [4], [4], [3], [3], [4], [4], [5], [5]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "e_down_attr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "e_cochain_params.kwargs['down_attr']",
                            "Subscript"
                        ],
                        [
                            "e_cochain_params.kwargs['down_attr']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_44": {
                "input": {
                    "value": "expected_v_up_attr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1], [1], [4], [4], [2], [2], [3], [3], [6], [6], [5], [5]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [1], [4], [4], [2], [2], [3], [3], [6], [6], [5], [5]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v_up_attr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v_cochain_params.kwargs['up_attr']",
                            "Subscript"
                        ],
                        [
                            "v_cochain_params.kwargs['up_attr']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_54": {
                "input": {
                    "value": "expected_e_down_attr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[2], [2], [1], [1], [3], [3], [3], [3], [4], [4], [4], [4], [3], [3], [4], [4], [5], [5]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[2], [2], [1], [1], [3], [3], [3], [3], [4], [4], [4], [4], [3], [3], [4], [4], [5], [5]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "e_down_attr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "e_cochain_params.kwargs['down_attr']",
                            "Subscript"
                        ],
                        [
                            "e_cochain_params.kwargs['down_attr']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "data/test_tu_utils.py": {
        "torch": {
            "sum_44": {
                "variable": {
                    "value": "row_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "graph.x",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_46": {
                "variable": {
                    "value": "tags",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "graph.x",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_88": {
                "variable": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "feats.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_45": {
                "input": {
                    "value": "row_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(feats, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.ones(feats.shape[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_49": {
                "input": {
                    "value": "tags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(feats, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "encoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor([encoder[deg] for deg in d])",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_89": {
                "input": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "graph.x",
                            "Attribute"
                        ]
                    ]
                },
                "other": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(feats.shape[0], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_45": {
                "*size": {
                    "value": "feats.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_61": {
                "seed": {
                    "value": "43",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_65": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "data/test_utils.py": {
        "torch": {
            "tensor_79": {
                "variable": {
                    "value": "expected_v_up_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_83": {
                "variable": {
                    "value": "expected_v_up_attr",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [1], [3], [3], [3], [3], [5], [5], [6], [6], [7], [7]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "variable": {
                    "value": "expected_e_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [3], [3], [5], [6], [7]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "variable": {
                    "value": "expected_e_up_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[3, 4, 3, 5, 4, 5], [4, 3, 5, 3, 5, 4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_97": {
                "variable": {
                    "value": "expected_e_up_attr",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[9], [9], [9], [9], [9], [9]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "variable": {
                    "value": "expected_e_down_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 2, 2, 3, 2, 4, 3, 4, 1, 3, 1, 5, 3, 5, 4, 5], [1, 0, 2, 0, 3, 2, 4, 2, 4, 3, 3, 1, 5, 1, 5, 3, 5, 4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_104": {
                "variable": {
                    "value": "expected_e_down_attr",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0], [0], [1], [1], [2], [2], [2], [2], [2], [2], [3], [3], [3], [3], [3], [3], [4], [4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_115": {
                "variable": {
                    "value": "expected_t_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[9]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_239": {
                "variable": {
                    "value": "expected_v_up_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_243": {
                "variable": {
                    "value": "expected_v_up_attr",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [1], [3], [3], [3], [3], [5], [5], [6], [6], [7], [7]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_250": {
                "variable": {
                    "value": "expected_e_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [3], [3], [5], [6], [7]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_253": {
                "variable": {
                    "value": "expected_e_up_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 2, 0, 3, 1, 2, 1, 3, 2, 3, 3, 4, 3, 5, 4, 5], [1, 0, 2, 0, 3, 0, 2, 1, 3, 1, 3, 2, 4, 3, 5, 3, 5, 4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_257": {
                "variable": {
                    "value": "expected_e_up_attr",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[6], [6], [6], [6], [6], [6], [6], [6], [6], [6], [6], [6], [9], [9], [9], [9], [9], [9]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_260": {
                "variable": {
                    "value": "expected_e_down_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 2, 2, 3, 2, 4, 3, 4, 1, 3, 1, 5, 3, 5, 4, 5], [1, 0, 2, 0, 3, 2, 4, 2, 4, 3, 3, 1, 5, 1, 5, 3, 5, 4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_264": {
                "variable": {
                    "value": "expected_e_down_attr",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0], [0], [1], [1], [2], [2], [2], [2], [2], [2], [3], [3], [3], [3], [3], [3], [4], [4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_275": {
                "variable": {
                    "value": "expected_t_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[6], [9]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_277": {
                "variable": {
                    "value": "expected_t_down_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1], [1, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_281": {
                "variable": {
                    "value": "expected_t_down_attr",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[5], [5]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_286": {
                "variable": {
                    "value": "expected_t_boundary_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 2, 3, 3, 4, 5], [0, 0, 0, 0, 1, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_352": {
                "variable": {
                    "value": "expected_v_up_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_356": {
                "variable": {
                    "value": "expected_v_up_attr",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 1.0], [0.0, 1.0], [0.0, 3.0], [0.0, 3.0], [1.0, 2.0], [1.0, 2.0], [2.0, 3.0], [2.0, 3.0], [2.0, 4.0], [2.0, 4.0], [3.0, 4.0], [3.0, 4.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_373": {
                "variable": {
                    "value": "expected_e_up_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 2, 0, 3, 1, 2, 1, 3, 2, 3, 3, 4, 3, 5, 4, 5], [1, 0, 2, 0, 3, 0, 2, 1, 3, 1, 3, 2, 4, 3, 5, 3, 5, 4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_378": {
                "variable": {
                    "value": "expected_e_down_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0, 2, 2, 3, 2, 4, 3, 4, 1, 3, 1, 5, 3, 5, 4, 5], [1, 0, 2, 0, 3, 2, 4, 2, 4, 3, 3, 1, 5, 1, 5, 3, 5, 4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_382": {
                "variable": {
                    "value": "expected_e_down_attr",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0], [0], [1], [1], [2], [2], [2], [2], [2], [2], [3], [3], [3], [3], [3], [3], [4], [4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_394": {
                "variable": {
                    "value": "expected_t_down_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1], [1, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_398": {
                "variable": {
                    "value": "expected_t_down_attr",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[2.0, 3.0], [2.0, 3.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_403": {
                "variable": {
                    "value": "expected_t_boundary_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 2, 3, 3, 4, 5], [0, 0, 0, 0, 1, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "data": {
                    "value": "[[0, 0, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4], [1, 3, 0, 2, 1, 3, 4, 0, 2, 4, 2, 3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_76": {
                "input": {
                    "value": "v_params.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "house.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_81": {
                "input": {
                    "value": "v_params.up_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_v_up_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3]], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_85": {
                "input": {
                    "value": "v_params.kwargs['up_attr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_v_up_attr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1], [1], [3], [3], [3], [3], [5], [5], [6], [6], [7], [7]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [1], [3], [3], [3], [3], [5], [5], [6], [6], [7], [7]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.0, 1.0], [0.0, 1.0], [0.0, 3.0], [0.0, 3.0], [1.0, 2.0], [1.0, 2.0], [2.0, 3.0], [2.0, 3.0], [2.0, 4.0], [2.0, 4.0], [3.0, 4.0], [3.0, 4.0]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_91": {
                "input": {
                    "value": "e_params.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_e_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1], [3], [3], [5], [6], [7]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [3], [3], [5], [6], [7]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([[0.0, 1.0], [0.0, 3.0], [1.0, 2.0], [2.0, 3.0], [2.0, 4.0], [3.0, 4.0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_95": {
                "input": {
                    "value": "e_params.up_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_e_up_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[3, 4, 3, 5, 4, 5], [4, 3, 5, 3, 5, 4]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 2, 0, 3, 1, 2, 1, 3, 2, 3, 3, 4, 3, 5, 4, 5], [1, 0, 2, 0, 3, 0, 2, 1, 3, 1, 3, 2, 4, 3, 5, 3, 5, 4]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 2, 0, 3, 1, 2, 1, 3, 2, 3, 3, 4, 3, 5, 4, 5], [1, 0, 2, 0, 3, 0, 2, 1, 3, 1, 3, 2, 4, 3, 5, 3, 5, 4]], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_98": {
                "input": {
                    "value": "e_params.kwargs['up_attr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_e_up_attr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[9], [9], [9], [9], [9], [9]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[6], [6], [6], [6], [6], [6], [6], [6], [6], [6], [6], [6], [9], [9], [9], [9], [9], [9]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_103": {
                "input": {
                    "value": "e_params.down_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_e_down_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0, 1, 0, 2, 2, 3, 2, 4, 3, 4, 1, 3, 1, 5, 3, 5, 4, 5], [1, 0, 2, 0, 3, 2, 4, 2, 4, 3, 3, 1, 5, 1, 5, 3, 5, 4]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 2, 2, 3, 2, 4, 3, 4, 1, 3, 1, 5, 3, 5, 4, 5], [1, 0, 2, 0, 3, 2, 4, 2, 4, 3, 3, 1, 5, 1, 5, 3, 5, 4]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 2, 2, 3, 2, 4, 3, 4, 1, 3, 1, 5, 3, 5, 4, 5], [1, 0, 2, 0, 3, 2, 4, 2, 4, 3, 3, 1, 5, 1, 5, 3, 5, 4]], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_107": {
                "input": {
                    "value": "e_params.kwargs['down_attr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_e_down_attr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0], [0], [1], [1], [2], [2], [2], [2], [2], [2], [3], [3], [3], [3], [3], [3], [4], [4]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0], [0], [1], [1], [2], [2], [2], [2], [2], [2], [3], [3], [3], [3], [3], [3], [4], [4]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0], [0], [1], [1], [2], [2], [2], [2], [2], [2], [3], [3], [3], [3], [3], [3], [4], [4]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_109": {
                "input": {
                    "value": "e_params.kwargs['boundary_attr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "house.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_111": {
                "input": {
                    "value": "e_params.kwargs['boundary_index'][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.LongTensor([0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_112": {
                "input": {
                    "value": "e_params.kwargs['boundary_index'][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.LongTensor([0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_116": {
                "input": {
                    "value": "t_params.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_t_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[9]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[6], [9]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_119": {
                "input": {
                    "value": "t_params.kwargs['boundary_attr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_e_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1], [3], [3], [5], [6], [7]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [3], [3], [5], [6], [7]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([[0.0, 1.0], [0.0, 3.0], [1.0, 2.0], [2.0, 3.0], [2.0, 4.0], [3.0, 4.0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_121": {
                "input": {
                    "value": "t_params.kwargs['boundary_index'][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.LongTensor([0, 0, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_122": {
                "input": {
                    "value": "t_params.kwargs['boundary_index'][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.LongTensor([3, 4, 5])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_124": {
                "input": {
                    "value": "house_complex.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "house.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_236": {
                "input": {
                    "value": "v_params.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "house.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_241": {
                "input": {
                    "value": "v_params.up_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_v_up_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3]], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_245": {
                "input": {
                    "value": "v_params.kwargs['up_attr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_v_up_attr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1], [1], [3], [3], [3], [3], [5], [5], [6], [6], [7], [7]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [1], [3], [3], [3], [3], [5], [5], [6], [6], [7], [7]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.0, 1.0], [0.0, 1.0], [0.0, 3.0], [0.0, 3.0], [1.0, 2.0], [1.0, 2.0], [2.0, 3.0], [2.0, 3.0], [2.0, 4.0], [2.0, 4.0], [3.0, 4.0], [3.0, 4.0]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_251": {
                "input": {
                    "value": "e_params.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_e_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1], [3], [3], [5], [6], [7]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [3], [3], [5], [6], [7]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([[0.0, 1.0], [0.0, 3.0], [1.0, 2.0], [2.0, 3.0], [2.0, 4.0], [3.0, 4.0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_255": {
                "input": {
                    "value": "e_params.up_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_e_up_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[3, 4, 3, 5, 4, 5], [4, 3, 5, 3, 5, 4]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 2, 0, 3, 1, 2, 1, 3, 2, 3, 3, 4, 3, 5, 4, 5], [1, 0, 2, 0, 3, 0, 2, 1, 3, 1, 3, 2, 4, 3, 5, 3, 5, 4]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 2, 0, 3, 1, 2, 1, 3, 2, 3, 3, 4, 3, 5, 4, 5], [1, 0, 2, 0, 3, 0, 2, 1, 3, 1, 3, 2, 4, 3, 5, 3, 5, 4]], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_258": {
                "input": {
                    "value": "e_params.kwargs['up_attr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_e_up_attr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[9], [9], [9], [9], [9], [9]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[6], [6], [6], [6], [6], [6], [6], [6], [6], [6], [6], [6], [9], [9], [9], [9], [9], [9]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_263": {
                "input": {
                    "value": "e_params.down_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_e_down_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0, 1, 0, 2, 2, 3, 2, 4, 3, 4, 1, 3, 1, 5, 3, 5, 4, 5], [1, 0, 2, 0, 3, 2, 4, 2, 4, 3, 3, 1, 5, 1, 5, 3, 5, 4]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 2, 2, 3, 2, 4, 3, 4, 1, 3, 1, 5, 3, 5, 4, 5], [1, 0, 2, 0, 3, 2, 4, 2, 4, 3, 3, 1, 5, 1, 5, 3, 5, 4]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 2, 2, 3, 2, 4, 3, 4, 1, 3, 1, 5, 3, 5, 4, 5], [1, 0, 2, 0, 3, 2, 4, 2, 4, 3, 3, 1, 5, 1, 5, 3, 5, 4]], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_267": {
                "input": {
                    "value": "e_params.kwargs['down_attr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_e_down_attr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0], [0], [1], [1], [2], [2], [2], [2], [2], [2], [3], [3], [3], [3], [3], [3], [4], [4]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0], [0], [1], [1], [2], [2], [2], [2], [2], [2], [3], [3], [3], [3], [3], [3], [4], [4]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0], [0], [1], [1], [2], [2], [2], [2], [2], [2], [3], [3], [3], [3], [3], [3], [4], [4]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_269": {
                "input": {
                    "value": "e_params.kwargs['boundary_attr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "house.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_271": {
                "input": {
                    "value": "e_params.kwargs['boundary_index'][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.LongTensor([0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_272": {
                "input": {
                    "value": "e_params.kwargs['boundary_index'][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.LongTensor([0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_276": {
                "input": {
                    "value": "t_params.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_t_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[9]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[6], [9]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_280": {
                "input": {
                    "value": "t_params.down_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_t_down_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0, 1], [1, 0]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1], [1, 0]], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_282": {
                "input": {
                    "value": "t_params.kwargs['down_attr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_t_down_attr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[5], [5]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[2.0, 3.0], [2.0, 3.0]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_285": {
                "input": {
                    "value": "t_params.kwargs['boundary_attr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_e_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1], [3], [3], [5], [6], [7]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [3], [3], [5], [6], [7]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([[0.0, 1.0], [0.0, 3.0], [1.0, 2.0], [2.0, 3.0], [2.0, 4.0], [3.0, 4.0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_288": {
                "input": {
                    "value": "t_params.kwargs['boundary_index']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_t_boundary_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0, 1, 2, 3, 3, 4, 5], [0, 0, 0, 0, 1, 1, 1]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 2, 3, 3, 4, 5], [0, 0, 0, 0, 1, 1, 1]], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_289": {
                "input": {
                    "value": "house_complex.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "house.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_349": {
                "input": {
                    "value": "v_params.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "house.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_354": {
                "input": {
                    "value": "v_params.up_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_v_up_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4], [1, 0, 3, 0, 2, 1, 3, 2, 4, 2, 4, 3]], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_359": {
                "input": {
                    "value": "v_params.kwargs['up_attr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_v_up_attr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1], [1], [3], [3], [3], [3], [5], [5], [6], [6], [7], [7]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [1], [3], [3], [3], [3], [5], [5], [6], [6], [7], [7]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.0, 1.0], [0.0, 1.0], [0.0, 3.0], [0.0, 3.0], [1.0, 2.0], [1.0, 2.0], [2.0, 3.0], [2.0, 3.0], [2.0, 4.0], [2.0, 4.0], [3.0, 4.0], [3.0, 4.0]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_371": {
                "input": {
                    "value": "e_params.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_e_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1], [3], [3], [5], [6], [7]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [3], [3], [5], [6], [7]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([[0.0, 1.0], [0.0, 3.0], [1.0, 2.0], [2.0, 3.0], [2.0, 4.0], [3.0, 4.0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_375": {
                "input": {
                    "value": "e_params.up_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_e_up_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[3, 4, 3, 5, 4, 5], [4, 3, 5, 3, 5, 4]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 2, 0, 3, 1, 2, 1, 3, 2, 3, 3, 4, 3, 5, 4, 5], [1, 0, 2, 0, 3, 0, 2, 1, 3, 1, 3, 2, 4, 3, 5, 3, 5, 4]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 2, 0, 3, 1, 2, 1, 3, 2, 3, 3, 4, 3, 5, 4, 5], [1, 0, 2, 0, 3, 0, 2, 1, 3, 1, 3, 2, 4, 3, 5, 3, 5, 4]], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_381": {
                "input": {
                    "value": "e_params.down_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_e_down_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0, 1, 0, 2, 2, 3, 2, 4, 3, 4, 1, 3, 1, 5, 3, 5, 4, 5], [1, 0, 2, 0, 3, 2, 4, 2, 4, 3, 3, 1, 5, 1, 5, 3, 5, 4]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 2, 2, 3, 2, 4, 3, 4, 1, 3, 1, 5, 3, 5, 4, 5], [1, 0, 2, 0, 3, 2, 4, 2, 4, 3, 3, 1, 5, 1, 5, 3, 5, 4]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 0, 2, 2, 3, 2, 4, 3, 4, 1, 3, 1, 5, 3, 5, 4, 5], [1, 0, 2, 0, 3, 2, 4, 2, 4, 3, 3, 1, 5, 1, 5, 3, 5, 4]], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_385": {
                "input": {
                    "value": "e_params.kwargs['down_attr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_e_down_attr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0], [0], [1], [1], [2], [2], [2], [2], [2], [2], [3], [3], [3], [3], [3], [3], [4], [4]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0], [0], [1], [1], [2], [2], [2], [2], [2], [2], [3], [3], [3], [3], [3], [3], [4], [4]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0], [0], [1], [1], [2], [2], [2], [2], [2], [2], [3], [3], [3], [3], [3], [3], [4], [4]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_387": {
                "input": {
                    "value": "e_params.kwargs['boundary_attr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "house.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_389": {
                "input": {
                    "value": "e_params.kwargs['boundary_index'][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.LongTensor([0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_390": {
                "input": {
                    "value": "e_params.kwargs['boundary_index'][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.LongTensor([0, 1, 0, 3, 1, 2, 2, 3, 2, 4, 3, 4])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_397": {
                "input": {
                    "value": "t_params.down_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_t_down_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0, 1], [1, 0]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1], [1, 0]], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_399": {
                "input": {
                    "value": "t_params.kwargs['down_attr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_t_down_attr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[5], [5]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[2.0, 3.0], [2.0, 3.0]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_402": {
                "input": {
                    "value": "t_params.kwargs['boundary_attr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_e_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1], [3], [3], [5], [6], [7]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1], [3], [3], [5], [6], [7]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([[0.0, 1.0], [0.0, 3.0], [1.0, 2.0], [2.0, 3.0], [2.0, 4.0], [3.0, 4.0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_405": {
                "input": {
                    "value": "t_params.kwargs['boundary_index']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_t_boundary_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0, 1, 2, 3, 3, 4, 5], [0, 0, 0, 0, 1, 1, 1]], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 2, 3, 3, 4, 5], [0, 0, 0, 0, 1, 1, 1]], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_406": {
                "input": {
                    "value": "house_complex.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "house.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_440": {
                "input": {
                    "value": "v_params_a.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "v_params_b.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_443": {
                "input": {
                    "value": "v_params_a.up_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "v_params_b.up_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_444": {
                "input": {
                    "value": "v_params_a.kwargs['up_attr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "v_params_b.kwargs['up_attr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_453": {
                "input": {
                    "value": "e_params_a.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "e_params_b.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_454": {
                "input": {
                    "value": "e_params_a.up_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "e_params_b.up_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_455": {
                "input": {
                    "value": "e_params_a.kwargs['up_attr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "e_params_b.kwargs['up_attr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_456": {
                "input": {
                    "value": "e_params_a.down_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "e_params_b.down_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_457": {
                "input": {
                    "value": "e_params_a.kwargs['down_attr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "e_params_b.kwargs['down_attr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_458": {
                "input": {
                    "value": "e_params_a.kwargs['boundary_attr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "e_params_b.kwargs['boundary_attr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_460": {
                "input": {
                    "value": "e_params_a.kwargs['boundary_index'][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "e_params_b.kwargs['boundary_index'][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_461": {
                "input": {
                    "value": "e_params_a.kwargs['boundary_index'][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "e_params_b.kwargs['boundary_index'][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_467": {
                "input": {
                    "value": "t_params_a.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "t_params_b.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_468": {
                "input": {
                    "value": "t_params_a.down_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "t_params_b.down_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_469": {
                "input": {
                    "value": "t_params_a.kwargs['down_attr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "t_params_b.kwargs['down_attr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_474": {
                "input": {
                    "value": "t_params_a.kwargs['boundary_attr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "t_params_b.kwargs['boundary_attr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_475": {
                "input": {
                    "value": "t_params_a.kwargs['boundary_index']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "t_params_b.kwargs['boundary_index']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_478": {
                "input": {
                    "value": "house_cell_a.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "house_cell_b.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_512": {
                "input": {
                    "value": "v_params_a.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "v_params_b.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_515": {
                "input": {
                    "value": "v_params_a.up_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "v_params_b.up_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_516": {
                "input": {
                    "value": "v_params_a.kwargs['up_attr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "v_params_b.kwargs['up_attr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_525": {
                "input": {
                    "value": "e_params_a.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "e_params_b.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_526": {
                "input": {
                    "value": "e_params_a.up_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "e_params_b.up_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_527": {
                "input": {
                    "value": "e_params_a.kwargs['up_attr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "e_params_b.kwargs['up_attr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_528": {
                "input": {
                    "value": "e_params_a.down_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "e_params_b.down_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_529": {
                "input": {
                    "value": "e_params_a.kwargs['down_attr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "e_params_b.kwargs['down_attr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_530": {
                "input": {
                    "value": "e_params_a.kwargs['boundary_attr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "e_params_b.kwargs['boundary_attr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_532": {
                "input": {
                    "value": "e_params_a.kwargs['boundary_index'][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "e_params_b.kwargs['boundary_index'][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_533": {
                "input": {
                    "value": "e_params_a.kwargs['boundary_index'][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "e_params_b.kwargs['boundary_index'][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_539": {
                "input": {
                    "value": "t_params_a.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "t_params_b.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_548": {
                "input": {
                    "value": "t_params_a.kwargs['boundary_attr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "t_params_b.kwargs['boundary_attr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_549": {
                "input": {
                    "value": "t_params_a.kwargs['boundary_index']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "t_params_b.kwargs['boundary_index']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_552": {
                "input": {
                    "value": "house_cell.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "house_simp.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_146": {
                "input": {
                    "value": "complexes[i].nodes.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "house1.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_147": {
                "input": {
                    "value": "complexes[i].y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "house1.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_170": {
                "input": {
                    "value": "complexes[i].nodes.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "house1.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_171": {
                "input": {
                    "value": "complexes[i].y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "house1.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_576": {
                "input": {
                    "value": "complexes[i].nodes.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "house1.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_577": {
                "input": {
                    "value": "complexes[i].y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "house1.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_620": {
                "input": {
                    "value": "complexes[i].nodes.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "house1.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_621": {
                "input": {
                    "value": "complexes[i].edges.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "e_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([[0.0, 1.0], [0.0, 3.0], [1.0, 2.0], [2.0, 3.0], [2.0, 4.0], [3.0, 4.0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_623": {
                "input": {
                    "value": "complexes[i].y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "house1.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_60": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_128": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_128": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_129": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_130": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_130": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_151": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_151": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_152": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_152": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_153": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_153": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_175": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_176": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_177": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_178": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_179": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_180": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_196": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_197": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_198": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_199": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_200": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_201": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_216": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_216": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_328": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_328": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_414": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_414": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_486": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_486": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_556": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_556": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_557": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_557": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_558": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_558": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_601": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_601": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_602": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_602": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_603": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_603": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "data/utils.py": {
        "torch": {
            "tensor_423": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_425": {
                "variable": {
                    "value": "edge_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "edge_index.numpy()",
                            "Call"
                        ],
                        [
                            "torch.tensor(edge_index)",
                            "Call"
                        ],
                        [
                            "edge_index",
                            "Method Argument"
                        ],
                        [
                            "edge_index",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_427": {
                "variable": {
                    "value": "edge_attr",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_attr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(edge_attr)",
                            "Call"
                        ],
                        [
                            "edge_attr.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_429": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v_y if i == 0 else None",
                            "IfExp"
                        ],
                        [
                            "torch.tensor(y)",
                            "Call"
                        ],
                        [
                            "v_y if i == 0 else None",
                            "IfExp"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_188": {
                "data": {
                    "value": "all_upper_index[dim]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_190": {
                "data": {
                    "value": "all_lower_index[dim]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_192": {
                "data": {
                    "value": "all_shared_coboundaries[dim]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_194": {
                "data": {
                    "value": "all_shared_boundaries[dim]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_483": {
                "variable": {
                    "value": "xs[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "edge_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "edge_attr[e]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_541": {
                "input": {
                    "value": "complex.cochains[0].x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "graph.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_540": {
                "input": {
                    "value": "complex.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "graph.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_473": {
                "input": {
                    "value": "ex[edge_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "edge_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "edge_attr[e]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "exp/evaluate_sr_cwn_emb_mag.py": {
        "torch": {
            "manual_seed_27": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed in range(5)",
                            "Call"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_28": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed in range(5)",
                            "Call"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_29": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed in range(5)",
                            "Call"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_default_dtype_34": {
                "d": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_embeddings(family, baseline, seed)",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(embeddings, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_48": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_100": {
                "input": {
                    "value": "torch.abs(embeddings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_100": {
                "input": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_embeddings(family, baseline, seed)",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(embeddings, 0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "exp/run_exp.py": {
        "torch": {
            "Adam_291": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_34": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_35": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_36": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_296": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=args.lr)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'min' if args.minimize else 'max'",
                            "IfExp"
                        ]
                    ]
                },
                "factor": {
                    "value": "args.lr_scheduler_decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "patience": {
                    "value": "args.lr_scheduler_patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_22": {
                "type": {
                    "value": "'cuda:' + str(args.device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_23": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_default_dtype_43": {
                "d": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_301": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=args.lr)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "args.lr_scheduler_decay_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "args.lr_scheduler_decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "exp/test_sr.py": {
        "torch": {
            "max_99": {
                "variable": {
                    "value": "apex",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(embeddings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_13": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed in range(5)",
                            "Call"
                        ],
                        [
                            "seed in range(5)",
                            "Call"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_14": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed in range(5)",
                            "Call"
                        ],
                        [
                            "seed in range(5)",
                            "Call"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_15": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed in range(5)",
                            "Call"
                        ],
                        [
                            "seed in range(5)",
                            "Call"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_74": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(embeddings, 0)",
                            "Call"
                        ],
                        [
                            "_get_cwn_sr_embeddings(family, seed)",
                            "Call"
                        ],
                        [
                            "_get_cwn_sr_embeddings(family, seed, baseline=True)",
                            "Call"
                        ],
                        [
                            "embeddings",
                            "Method Argument"
                        ],
                        [
                            "embeddings",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "perm_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "perm_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(perm_embeddings, 0)",
                            "Call"
                        ],
                        [
                            "_get_cwn_sr_embeddings(family, seed)",
                            "Call"
                        ],
                        [
                            "_get_cwn_sr_embeddings(family, seed, baseline=True)",
                            "Call"
                        ],
                        [
                            "perm_embeddings",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_84": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embeddings[i], perm_embeddings[i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pdist_87": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((embeddings[i], perm_embeddings[i]), 0)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "all_102": {
                "input": {
                    "value": "apex < thresh",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "set_default_dtype_108": {
                "d": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_default_dtype_115": {
                "d": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_default_dtype_121": {
                "d": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_default_dtype_128": {
                "d": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_33": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_99": {
                "input": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(embeddings, 0)",
                            "Call"
                        ],
                        [
                            "_get_cwn_sr_embeddings(family, seed)",
                            "Call"
                        ],
                        [
                            "_get_cwn_sr_embeddings(family, seed, baseline=True)",
                            "Call"
                        ],
                        [
                            "embeddings",
                            "Method Argument"
                        ],
                        [
                            "embeddings",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mp/cell_mp.py": {
        "torch": {
            "zeros_518": {
                "variable": {
                    "value": "up_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.up_msg_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_520": {
                "variable": {
                    "value": "down_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.down_msg_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_522": {
                "variable": {
                    "value": "boundary_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.boundary_msg_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mp/graph_models.py": {
        "torch": {
            "ModuleList_50": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_80": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.x",
                            "Attribute"
                        ],
                        [
                            "self.conv1(x, edge_index)",
                            "Call"
                        ],
                        [
                            "conv(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, batch)",
                            "Call"
                        ],
                        [
                            "model_nonlinearity(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "data.x",
                            "Attribute"
                        ],
                        [
                            "self.conv1(x, edge_index)",
                            "Call"
                        ],
                        [
                            "conv(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.jump(xs)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, batch)",
                            "Call"
                        ],
                        [
                            "model_nonlinearity(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "data.x",
                            "Attribute"
                        ],
                        [
                            "self.conv1(x, edge_index)",
                            "Call"
                        ],
                        [
                            "conv(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, batch)",
                            "Call"
                        ],
                        [
                            "model_nonlinearity(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "data.x",
                            "Attribute"
                        ],
                        [
                            "self.conv1(x, edge_index)",
                            "Call"
                        ],
                        [
                            "conv(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.jump(xs)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, batch)",
                            "Call"
                        ],
                        [
                            "model_nonlinearity(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_105": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_122": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_143": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.x",
                            "Attribute"
                        ],
                        [
                            "self.conv1(x, edge_index)",
                            "Call"
                        ],
                        [
                            "conv(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, batch)",
                            "Call"
                        ],
                        [
                            "model_nonlinearity(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "data.x",
                            "Attribute"
                        ],
                        [
                            "self.conv1(x, edge_index)",
                            "Call"
                        ],
                        [
                            "conv(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.jump(xs)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, batch)",
                            "Call"
                        ],
                        [
                            "model_nonlinearity(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "data.x",
                            "Attribute"
                        ],
                        [
                            "self.conv1(x, edge_index)",
                            "Call"
                        ],
                        [
                            "conv(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, batch)",
                            "Call"
                        ],
                        [
                            "model_nonlinearity(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "data.x",
                            "Attribute"
                        ],
                        [
                            "self.conv1(x, edge_index)",
                            "Call"
                        ],
                        [
                            "conv(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.jump(xs)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, batch)",
                            "Call"
                        ],
                        [
                            "model_nonlinearity(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_168": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_180": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_181": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_198": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.x",
                            "Attribute"
                        ],
                        [
                            "self.conv1(x, edge_index)",
                            "Call"
                        ],
                        [
                            "conv(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, batch)",
                            "Call"
                        ],
                        [
                            "model_nonlinearity(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "data.x",
                            "Attribute"
                        ],
                        [
                            "self.conv1(x, edge_index)",
                            "Call"
                        ],
                        [
                            "conv(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.jump(xs)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, batch)",
                            "Call"
                        ],
                        [
                            "model_nonlinearity(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "data.x",
                            "Attribute"
                        ],
                        [
                            "self.conv1(x, edge_index)",
                            "Call"
                        ],
                        [
                            "conv(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, batch)",
                            "Call"
                        ],
                        [
                            "model_nonlinearity(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "data.x",
                            "Attribute"
                        ],
                        [
                            "self.conv1(x, edge_index)",
                            "Call"
                        ],
                        [
                            "conv(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.jump(xs)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, batch)",
                            "Call"
                        ],
                        [
                            "model_nonlinearity(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_223": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_240": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_261": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.x",
                            "Attribute"
                        ],
                        [
                            "self.conv1(x, edge_index)",
                            "Call"
                        ],
                        [
                            "conv(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, batch)",
                            "Call"
                        ],
                        [
                            "model_nonlinearity(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "data.x",
                            "Attribute"
                        ],
                        [
                            "self.conv1(x, edge_index)",
                            "Call"
                        ],
                        [
                            "conv(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.jump(xs)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, batch)",
                            "Call"
                        ],
                        [
                            "model_nonlinearity(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "data.x",
                            "Attribute"
                        ],
                        [
                            "self.conv1(x, edge_index)",
                            "Call"
                        ],
                        [
                            "conv(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, batch)",
                            "Call"
                        ],
                        [
                            "model_nonlinearity(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "data.x",
                            "Attribute"
                        ],
                        [
                            "self.conv1(x, edge_index)",
                            "Call"
                        ],
                        [
                            "conv(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.jump(xs)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, batch)",
                            "Call"
                        ],
                        [
                            "model_nonlinearity(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_119": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_layers * hidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_121": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_237": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_layers * hidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_239": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_42": {
                "*args": {
                    "value": "Linear(num_features, hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "*args": {
                    "value": "Linear(num_features, hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_160": {
                "*args": {
                    "value": "Linear(num_features, hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_215": {
                "*args": {
                    "value": "Linear(num_features, hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_98": {
                "in_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_101": {
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_161": {
                "in_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_164": {
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_216": {
                "in_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_219": {
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_54": {
                "*args": {
                    "value": "Linear(hidden, hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_109": {
                "*args": {
                    "value": "Linear(hidden, hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_172": {
                "*args": {
                    "value": "Linear(hidden, hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_227": {
                "*args": {
                    "value": "Linear(hidden, hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_58": {
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_110": {
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_113": {
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_173": {
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_176": {
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_228": {
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_231": {
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mp/layers.py": {
        "torch": {
            "ModuleList_47": {
                "variable": {
                    "value": "self.mp_levels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[down_x_j, down_attr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_112": {
                "variable": {
                    "value": "self.mp_levels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_137": {
                "variable": {
                    "value": "self.mp_levels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_239": {
                "variable": {
                    "value": "self.mp_levels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_73": {
                "variable": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([eps])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[up_x_j, up_attr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_177": {
                "variable": {
                    "value": "self.eps1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([eps])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_178": {
                "variable": {
                    "value": "self.eps2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([eps])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_222": {
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([up_x_j, up_attr], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([down_x_j, down_attr], dim=-1)",
                            "Call"
                        ],
                        [
                            "self.update_nn(cochain.x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_276": {
                "variable": {
                    "value": "combine_nn",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(kwargs['hidden'] * 2, kwargs['hidden'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_199": {
                "tensors": {
                    "value": "[out_up, out_boundaries]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_257": {
                "variable": {
                    "value": "update_up_nn",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(kwargs['layer_dim'], kwargs['hidden'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_268": {
                "variable": {
                    "value": "update_boundaries_nn",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(kwargs['layer_dim'], kwargs['hidden'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_244": {
                "variable": {
                    "value": "msg_up_nn",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Catter()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_277": {
                "in_features": {
                    "value": "kwargs['hidden'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "kwargs['hidden']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_258": {
                "in_features": {
                    "value": "kwargs['layer_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "kwargs['hidden']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_261": {
                "in_features": {
                    "value": "kwargs['hidden']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "kwargs['hidden']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_269": {
                "in_features": {
                    "value": "kwargs['layer_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "kwargs['hidden']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_272": {
                "in_features": {
                    "value": "kwargs['hidden']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "kwargs['hidden']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_246": {
                "in_features": {
                    "value": "kwargs['layer_dim'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "kwargs['layer_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "mp/models.py": {
        "torch": {
            "ModuleList_28": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_70": {
                "variable": {
                    "value": "pooled_xs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.max_dim + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.cochains[0].batch.max() + 1",
                            "BinOp"
                        ],
                        [
                            "data.cochains[0].batch.max() + 1",
                            "BinOp"
                        ],
                        [
                            "data.cochains[0].batch.max() + 1",
                            "BinOp"
                        ],
                        [
                            "data.cochains[0].batch.max() + 1",
                            "BinOp"
                        ],
                        [
                            "data.batch.max() + 1",
                            "BinOp"
                        ],
                        [
                            "data.batch.max() + 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "xs[0].size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "batch_size.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_104": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pooled_xs.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "model_nonlinearity(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "pooled_xs.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "model_nonlinearity(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "pooled_xs.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "self.lin(x)",
                            "Call"
                        ],
                        [
                            "conv(data)",
                            "Call"
                        ],
                        [
                            "torch.abs(x)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, data.batch, size=batch_size)",
                            "Call"
                        ],
                        [
                            "torch.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "conv(data)",
                            "Call"
                        ],
                        [
                            "torch.abs(x)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, data.batch, size=batch_size)",
                            "Call"
                        ],
                        [
                            "torch.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "pooled_xs.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_137": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_152": {
                "variable": {
                    "value": "self.lin1s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_161": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "final_hidden_multiplier * hidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_176": {
                "variable": {
                    "value": "pooled_xs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.max_dim + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.cochains[0].batch.max() + 1",
                            "BinOp"
                        ],
                        [
                            "data.cochains[0].batch.max() + 1",
                            "BinOp"
                        ],
                        [
                            "data.cochains[0].batch.max() + 1",
                            "BinOp"
                        ],
                        [
                            "data.cochains[0].batch.max() + 1",
                            "BinOp"
                        ],
                        [
                            "data.batch.max() + 1",
                            "BinOp"
                        ],
                        [
                            "data.batch.max() + 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "xs[0].size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "batch_size.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_236": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_281": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_282": {
                "variable": {
                    "value": "self.update_top_nns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_330": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_346": {
                "variable": {
                    "value": "pooled_xs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.max_dim + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.cochains[0].batch.max() + 1",
                            "BinOp"
                        ],
                        [
                            "data.cochains[0].batch.max() + 1",
                            "BinOp"
                        ],
                        [
                            "data.cochains[0].batch.max() + 1",
                            "BinOp"
                        ],
                        [
                            "data.cochains[0].batch.max() + 1",
                            "BinOp"
                        ],
                        [
                            "data.batch.max() + 1",
                            "BinOp"
                        ],
                        [
                            "data.batch.max() + 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "xs[0].size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "batch_size.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_388": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pooled_xs.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "model_nonlinearity(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "pooled_xs.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "model_nonlinearity(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "pooled_xs.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "self.lin(x)",
                            "Call"
                        ],
                        [
                            "conv(data)",
                            "Call"
                        ],
                        [
                            "torch.abs(x)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, data.batch, size=batch_size)",
                            "Call"
                        ],
                        [
                            "torch.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "conv(data)",
                            "Call"
                        ],
                        [
                            "torch.abs(x)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, data.batch, size=batch_size)",
                            "Call"
                        ],
                        [
                            "torch.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "pooled_xs.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_409": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_413": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_input_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_432": {
                "variable": {
                    "value": "pooled_xs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.max_dim + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.cochains[0].batch.max() + 1",
                            "BinOp"
                        ],
                        [
                            "data.cochains[0].batch.max() + 1",
                            "BinOp"
                        ],
                        [
                            "data.cochains[0].batch.max() + 1",
                            "BinOp"
                        ],
                        [
                            "data.cochains[0].batch.max() + 1",
                            "BinOp"
                        ],
                        [
                            "data.batch.max() + 1",
                            "BinOp"
                        ],
                        [
                            "data.batch.max() + 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "xs[0].size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "batch_size.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_465": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_480": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_481": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_511": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lin1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_512": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pooled_xs.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "model_nonlinearity(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "pooled_xs.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "model_nonlinearity(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "pooled_xs.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "self.lin(x)",
                            "Call"
                        ],
                        [
                            "conv(data)",
                            "Call"
                        ],
                        [
                            "torch.abs(x)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, data.batch, size=batch_size)",
                            "Call"
                        ],
                        [
                            "torch.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "conv(data)",
                            "Call"
                        ],
                        [
                            "torch.abs(x)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, data.batch, size=batch_size)",
                            "Call"
                        ],
                        [
                            "torch.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "pooled_xs.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_538": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_552": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_553": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_580": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lin1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_581": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pooled_xs.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "model_nonlinearity(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "pooled_xs.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "model_nonlinearity(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "pooled_xs.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "self.lin(x)",
                            "Call"
                        ],
                        [
                            "conv(data)",
                            "Call"
                        ],
                        [
                            "torch.abs(x)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, data.batch, size=batch_size)",
                            "Call"
                        ],
                        [
                            "torch.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "conv(data)",
                            "Call"
                        ],
                        [
                            "torch.abs(x)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, data.batch, size=batch_size)",
                            "Call"
                        ],
                        [
                            "torch.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "pooled_xs.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_606": {
                "variable": {
                    "value": "self.lin0s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_609": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_610": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_630": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pooled_xs.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "model_nonlinearity(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "pooled_xs.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "model_nonlinearity(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "pooled_xs.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "self.lin(x)",
                            "Call"
                        ],
                        [
                            "conv(data)",
                            "Call"
                        ],
                        [
                            "torch.abs(x)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, data.batch, size=batch_size)",
                            "Call"
                        ],
                        [
                            "torch.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "conv(data)",
                            "Call"
                        ],
                        [
                            "torch.abs(x)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, data.batch, size=batch_size)",
                            "Call"
                        ],
                        [
                            "torch.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "pooled_xs.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "conv_update",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(layer_dim, hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "conv_up",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(layer_dim * 2, layer_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "conv_down",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(layer_dim * 2, layer_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_layers * hidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_239": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pooled_xs.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "model_nonlinearity(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "pooled_xs.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "model_nonlinearity(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "pooled_xs.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "self.lin(x)",
                            "Call"
                        ],
                        [
                            "conv(data)",
                            "Call"
                        ],
                        [
                            "torch.abs(x)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, data.batch, size=batch_size)",
                            "Call"
                        ],
                        [
                            "torch.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "conv(data)",
                            "Call"
                        ],
                        [
                            "torch.abs(x)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, data.batch, size=batch_size)",
                            "Call"
                        ],
                        [
                            "torch.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "pooled_xs.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_247": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pooled_xs.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "model_nonlinearity(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "pooled_xs.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "model_nonlinearity(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "pooled_xs.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "self.lin(x)",
                            "Call"
                        ],
                        [
                            "conv(data)",
                            "Call"
                        ],
                        [
                            "torch.abs(x)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, data.batch, size=batch_size)",
                            "Call"
                        ],
                        [
                            "torch.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "conv(data)",
                            "Call"
                        ],
                        [
                            "torch.abs(x)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, data.batch, size=batch_size)",
                            "Call"
                        ],
                        [
                            "torch.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "pooled_xs.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_288": {
                "variable": {
                    "value": "v_conv_update",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(layer_dim, hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_294": {
                "variable": {
                    "value": "e_conv_update",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(layer_dim, hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_300": {
                "variable": {
                    "value": "v_conv_up",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(layer_dim * 2, layer_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_304": {
                "variable": {
                    "value": "e_conv_down",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(layer_dim * 2, layer_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_309": {
                "variable": {
                    "value": "e_conv_up",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(e_conv_inp_dim, layer_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_327": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_layers * hidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_329": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_471": {
                "variable": {
                    "value": "update_up",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_472": {
                "variable": {
                    "value": "update_down",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_473": {
                "variable": {
                    "value": "update",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_493": {
                "variable": {
                    "value": "data.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "data.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_504": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pooled_xs.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "model_nonlinearity(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "pooled_xs.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "model_nonlinearity(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "pooled_xs.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "self.lin(x)",
                            "Call"
                        ],
                        [
                            "conv(data)",
                            "Call"
                        ],
                        [
                            "torch.abs(x)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, data.batch, size=batch_size)",
                            "Call"
                        ],
                        [
                            "torch.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "conv(data)",
                            "Call"
                        ],
                        [
                            "torch.abs(x)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, data.batch, size=batch_size)",
                            "Call"
                        ],
                        [
                            "torch.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "pooled_xs.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_545": {
                "variable": {
                    "value": "update_down",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_546": {
                "variable": {
                    "value": "update",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_565": {
                "variable": {
                    "value": "data.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "data.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_573": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pooled_xs.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "model_nonlinearity(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "pooled_xs.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "model_nonlinearity(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "pooled_xs.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "self.lin(x)",
                            "Call"
                        ],
                        [
                            "conv(data)",
                            "Call"
                        ],
                        [
                            "torch.abs(x)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, data.batch, size=batch_size)",
                            "Call"
                        ],
                        [
                            "torch.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "conv(data)",
                            "Call"
                        ],
                        [
                            "torch.abs(x)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, data.batch, size=batch_size)",
                            "Call"
                        ],
                        [
                            "torch.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "pooled_xs.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_233": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pooled_xs.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "model_nonlinearity(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "pooled_xs.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "model_nonlinearity(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "pooled_xs.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "self.lin(x)",
                            "Call"
                        ],
                        [
                            "conv(data)",
                            "Call"
                        ],
                        [
                            "torch.abs(x)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, data.batch, size=batch_size)",
                            "Call"
                        ],
                        [
                            "torch.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "conv(data)",
                            "Call"
                        ],
                        [
                            "torch.abs(x)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, data.batch, size=batch_size)",
                            "Call"
                        ],
                        [
                            "torch.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "pooled_xs.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "layer_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "layer_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layer_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "layer_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layer_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Linear_289": {
                "in_features": {
                    "value": "layer_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_291": {
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_295": {
                "in_features": {
                    "value": "layer_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_297": {
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_301": {
                "in_features": {
                    "value": "layer_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layer_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Linear_305": {
                "in_features": {
                    "value": "layer_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layer_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Linear_310": {
                "in_features": {
                    "value": "e_conv_inp_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_dim * 2 if include_top_features else layer_dim",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "layer_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Linear_608": {
                "in_features": {
                    "value": "num_input_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_157": {
                "in_features": {
                    "value": "num_layers * hidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "final_hidden_multiplier * hidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_160": {
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "final_hidden_multiplier * hidden",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_317": {
                "*args": {
                    "value": "Linear(layer_dim, hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_318": {
                "in_features": {
                    "value": "layer_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "num_input_features if i == 0 else hidden",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_320": {
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mp/molec_models.py": {
        "torch": {
            "Embedding_36": {
                "variable": {
                    "value": "self.v_embed_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "atom_types",
                    "type": "variable",
                    "possible_values": [
                        [
                            "atom_types",
                            "Method Argument"
                        ],
                        [
                            "atom_types",
                            "Method Argument"
                        ],
                        [
                            "atom_types",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "variable"
                        ],
                        [
                            "hidden",
                            "variable"
                        ],
                        [
                            "hidden",
                            "variable"
                        ],
                        [
                            "hidden",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_48": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_63": {
                "variable": {
                    "value": "self.lin1s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "final_hidden_multiplier * hidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_143": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_205": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_220": {
                "variable": {
                    "value": "self.lin1s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_229": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "final_hidden_multiplier * hidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_298": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_343": {
                "variable": {
                    "value": "self.v_embed_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "atom_types",
                    "type": "variable",
                    "possible_values": [
                        [
                            "atom_types",
                            "Method Argument"
                        ],
                        [
                            "atom_types",
                            "Method Argument"
                        ],
                        [
                            "atom_types",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "variable"
                        ],
                        [
                            "hidden",
                            "variable"
                        ],
                        [
                            "hidden",
                            "variable"
                        ],
                        [
                            "hidden",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_354": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_369": {
                "variable": {
                    "value": "self.lin1s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_372": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "final_hidden_multiplier * hidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_422": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_460": {
                "variable": {
                    "value": "self.v_embed_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "atom_types",
                    "type": "variable",
                    "possible_values": [
                        [
                            "atom_types",
                            "Method Argument"
                        ],
                        [
                            "atom_types",
                            "Method Argument"
                        ],
                        [
                            "atom_types",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "variable"
                        ],
                        [
                            "hidden",
                            "variable"
                        ],
                        [
                            "hidden",
                            "variable"
                        ],
                        [
                            "hidden",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_470": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_487": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_488": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_510": {
                "variable": {
                    "value": "xs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "xs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_40": {
                "variable": {
                    "value": "self.e_embed_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "bond_types",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bond_types",
                            "Method Argument"
                        ],
                        [
                            "bond_types",
                            "Method Argument"
                        ],
                        [
                            "bond_types",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "variable"
                        ],
                        [
                            "hidden",
                            "variable"
                        ],
                        [
                            "hidden",
                            "variable"
                        ],
                        [
                            "hidden",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_106": {
                "variable": {
                    "value": "xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_146": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "params.x",
                            "Attribute"
                        ],
                        [
                            "conv(x=x, edge_index=edge_index, edge_attr=edge_attr)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, data.nodes.batch, size=batch_size)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "act(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_154": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "params.x",
                            "Attribute"
                        ],
                        [
                            "conv(x=x, edge_index=edge_index, edge_attr=edge_attr)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, data.nodes.batch, size=batch_size)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "act(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_258": {
                "variable": {
                    "value": "xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "self.in_dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_301": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "params.x",
                            "Attribute"
                        ],
                        [
                            "conv(x=x, edge_index=edge_index, edge_attr=edge_attr)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, data.nodes.batch, size=batch_size)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "act(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_309": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "params.x",
                            "Attribute"
                        ],
                        [
                            "conv(x=x, edge_index=edge_index, edge_attr=edge_attr)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, data.nodes.batch, size=batch_size)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "act(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_347": {
                "variable": {
                    "value": "self.e_embed_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "bond_types",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bond_types",
                            "Method Argument"
                        ],
                        [
                            "bond_types",
                            "Method Argument"
                        ],
                        [
                            "bond_types",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "variable"
                        ],
                        [
                            "hidden",
                            "variable"
                        ],
                        [
                            "hidden",
                            "variable"
                        ],
                        [
                            "hidden",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_400": {
                "variable": {
                    "value": "xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_425": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "params.x",
                            "Attribute"
                        ],
                        [
                            "conv(x=x, edge_index=edge_index, edge_attr=edge_attr)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, data.nodes.batch, size=batch_size)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "act(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_433": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "params.x",
                            "Attribute"
                        ],
                        [
                            "conv(x=x, edge_index=edge_index, edge_attr=edge_attr)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, data.nodes.batch, size=batch_size)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "act(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_464": {
                "variable": {
                    "value": "self.e_embed_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "bond_types",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bond_types",
                            "Method Argument"
                        ],
                        [
                            "bond_types",
                            "Method Argument"
                        ],
                        [
                            "bond_types",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "variable"
                        ],
                        [
                            "hidden",
                            "variable"
                        ],
                        [
                            "hidden",
                            "variable"
                        ],
                        [
                            "hidden",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_532": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "params.x",
                            "Attribute"
                        ],
                        [
                            "conv(x=x, edge_index=edge_index, edge_attr=edge_attr)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, data.nodes.batch, size=batch_size)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "act(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_536": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "params.x",
                            "Attribute"
                        ],
                        [
                            "conv(x=x, edge_index=edge_index, edge_attr=edge_attr)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, data.nodes.batch, size=batch_size)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "act(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_140": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "params.x",
                            "Attribute"
                        ],
                        [
                            "conv(x=x, edge_index=edge_index, edge_attr=edge_attr)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, data.nodes.batch, size=batch_size)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "act(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_268": {
                "variable": {
                    "value": "xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_295": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "params.x",
                            "Attribute"
                        ],
                        [
                            "conv(x=x, edge_index=edge_index, edge_attr=edge_attr)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, data.nodes.batch, size=batch_size)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "act(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_419": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_xs, dim=0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.mean(0)",
                            "Call"
                        ],
                        [
                            "x.sum(0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "params.x",
                            "Attribute"
                        ],
                        [
                            "conv(x=x, edge_index=edge_index, edge_attr=edge_attr)",
                            "Call"
                        ],
                        [
                            "self.pooling_fn(x, data.nodes.batch, size=batch_size)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "act(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_371": {
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "final_hidden_multiplier * hidden",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "in_features": {
                    "value": "num_layers * hidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "final_hidden_multiplier * hidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "final_hidden_multiplier * hidden",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_225": {
                "in_features": {
                    "value": "num_layers * hidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "final_hidden_multiplier * hidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_228": {
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "final_hidden_multiplier * hidden",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_479": {
                "*args": {
                    "value": "Linear(layer_dim, hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_480": {
                "in_features": {
                    "value": "layer_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "embed_dim if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "embed_dim if i == 0 else hidden",
                            "IfExp"
                        ],
                        [
                            "embed_dim if i == 0 else hidden",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_483": {
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mp/nn.py": {
        "torch": {
            "zeros_55": {
                "variable": {
                    "value": "pooled_xs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_dim + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.cochains[0].batch.max() + 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "xs[0].size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "batch_size.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mp/ring_exp_models.py": {
        "torch": {
            "ModuleList_24": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.init_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_input_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_input_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_input_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_input_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.init_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_96": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_108": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_87": {
                "*args": {
                    "value": "Linear(num_features, hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "in_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_91": {
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_100": {
                "*args": {
                    "value": "Linear(hidden, hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_101": {
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_104": {
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mp/test_cell_mp.py": {
        "torch": {
            "tensor_28": {
                "variable": {
                    "value": "expected_down_msg",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[6], [10], [17], [9], [13], [10]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "variable": {
                    "value": "expected_up_msg",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0], [0], [11], [0], [9], [8]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "variable": {
                    "value": "expected_boundary_msg",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[3], [5], [7], [5], [9], [8]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "variable": {
                    "value": "expected_up_msg",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[6], [4], [11], [9], [7]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "variable": {
                    "value": "expected_down_msg",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_61": {
                "variable": {
                    "value": "expected_boundary_msg",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_81": {
                "variable": {
                    "value": "expected_up_msg",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_84": {
                "variable": {
                    "value": "expected_down_msg",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "variable": {
                    "value": "expected_boundary_msg",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[14]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_98": {
                "variable": {
                    "value": "down_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1], [1, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_101": {
                "variable": {
                    "value": "down_attr",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_104": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[32], [17]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_109": {
                "variable": {
                    "value": "expected_updated_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[17], [32]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_202": {
                "variable": {
                    "value": "expected_e_up_msg",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[4 + 5 + 6 + 2 + 3 + 4], [3 + 5 + 6 + 1 + 3 + 4], [2 + 5 + 6 + 1 + 2 + 4], [1 + 5 + 6 + 1 + 2 + 3], [1 + 4 + 6 + 2 + 3 + 6], [1 + 4 + 5 + 2 + 3 + 5]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_220": {
                "variable": {
                    "value": "expected_e_up_msg",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[4 + 5 + 6 + 2 + 3 + 4], [1 + 5 + 6 + 1 + 2 + 3], [3 + 5 + 6 + 1 + 3 + 4], [1 + 4 + 5 + 2 + 3 + 5], [2 + 5 + 6 + 1 + 2 + 4], [1 + 4 + 6 + 2 + 3 + 6]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_237": {
                "variable": {
                    "value": "expected_t_down_msg",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[2 + 2 + 3 + 3], [1 + 1 + 3 + 3], [1 + 1 + 2 + 2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_243": {
                "variable": {
                    "value": "expected_t_boundary_msg",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1 + 6 + 5 + 4], [2 + 3 + 5 + 6], [1 + 2 + 3 + 4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_260": {
                "variable": {
                    "value": "expected_t_down_msg",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[t1_x + t1_x + t2_x + t2_x], [t0_x + t0_x + t1_x + t1_x], [t0_x + t0_x + t2_x + t2_x]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_266": {
                "variable": {
                    "value": "expected_t_boundary_msg",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1 + 6 + 5 + 4], [1 + 2 + 3 + 4], [2 + 3 + 5 + 6]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_29": {
                "input": {
                    "value": "down_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cmp.propagate(e.up_index, e.down_index, e.boundary_index, x=e.x, up_attr=e.kwargs['up_attr'], down_attr=e.kwargs['down_attr'], boundary_attr=e.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(v.up_index, v.down_index, v.boundary_index, x=v.x, up_attr=v.kwargs['up_attr'], down_attr=v.kwargs['down_attr'], boundary_attr=v.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(t.up_index, t.down_index, t.boundary_index, x=t.x, up_attr=t.kwargs['up_attr'], down_attr=t.kwargs['down_attr'], boundary_attr=t.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(up_index, down_index, None, x=x, down_attr=down_attr)",
                            "Call"
                        ],
                        [
                            "cmp.propagate(up_index=params.up_index, down_index=None, boundary_index=None, x=params.x, up_attr=None)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_down_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[6], [10], [17], [9], [13], [10]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.zeros(5, 1)",
                            "Call"
                        ],
                        [
                            "torch.zeros(1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_32": {
                "input": {
                    "value": "up_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cmp.propagate(e.up_index, e.down_index, e.boundary_index, x=e.x, up_attr=e.kwargs['up_attr'], down_attr=e.kwargs['down_attr'], boundary_attr=e.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(v.up_index, v.down_index, v.boundary_index, x=v.x, up_attr=v.kwargs['up_attr'], down_attr=v.kwargs['down_attr'], boundary_attr=v.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(t.up_index, t.down_index, t.boundary_index, x=t.x, up_attr=t.kwargs['up_attr'], down_attr=t.kwargs['down_attr'], boundary_attr=t.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(up_index, down_index, None, x=x, down_attr=down_attr)",
                            "Call"
                        ],
                        [
                            "cmp.propagate(up_index=params.up_index, down_index=None, boundary_index=None, x=params.x, up_attr=None)",
                            "Call"
                        ],
                        [
                            "cmp.propagate(up_index=params.up_index, down_index=None, boundary_index=None, x=params.x, up_attr=None)",
                            "Call"
                        ],
                        [
                            "cmp.propagate(up_index=params.up_index, down_index=None, boundary_index=None, x=params.x, up_attr=None)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_up_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0], [0], [11], [0], [9], [8]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[6], [4], [11], [9], [7]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.zeros(1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_35": {
                "input": {
                    "value": "boundary_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cmp.propagate(e.up_index, e.down_index, e.boundary_index, x=e.x, up_attr=e.kwargs['up_attr'], down_attr=e.kwargs['down_attr'], boundary_attr=e.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(v.up_index, v.down_index, v.boundary_index, x=v.x, up_attr=v.kwargs['up_attr'], down_attr=v.kwargs['down_attr'], boundary_attr=v.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(t.up_index, t.down_index, t.boundary_index, x=t.x, up_attr=t.kwargs['up_attr'], down_attr=t.kwargs['down_attr'], boundary_attr=t.kwargs['boundary_attr'])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_boundary_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[3], [5], [7], [5], [9], [8]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.zeros(5, 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[14]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_56": {
                "input": {
                    "value": "up_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cmp.propagate(e.up_index, e.down_index, e.boundary_index, x=e.x, up_attr=e.kwargs['up_attr'], down_attr=e.kwargs['down_attr'], boundary_attr=e.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(v.up_index, v.down_index, v.boundary_index, x=v.x, up_attr=v.kwargs['up_attr'], down_attr=v.kwargs['down_attr'], boundary_attr=v.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(t.up_index, t.down_index, t.boundary_index, x=t.x, up_attr=t.kwargs['up_attr'], down_attr=t.kwargs['down_attr'], boundary_attr=t.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(up_index, down_index, None, x=x, down_attr=down_attr)",
                            "Call"
                        ],
                        [
                            "cmp.propagate(up_index=params.up_index, down_index=None, boundary_index=None, x=params.x, up_attr=None)",
                            "Call"
                        ],
                        [
                            "cmp.propagate(up_index=params.up_index, down_index=None, boundary_index=None, x=params.x, up_attr=None)",
                            "Call"
                        ],
                        [
                            "cmp.propagate(up_index=params.up_index, down_index=None, boundary_index=None, x=params.x, up_attr=None)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_up_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0], [0], [11], [0], [9], [8]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[6], [4], [11], [9], [7]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.zeros(1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_59": {
                "input": {
                    "value": "down_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cmp.propagate(e.up_index, e.down_index, e.boundary_index, x=e.x, up_attr=e.kwargs['up_attr'], down_attr=e.kwargs['down_attr'], boundary_attr=e.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(v.up_index, v.down_index, v.boundary_index, x=v.x, up_attr=v.kwargs['up_attr'], down_attr=v.kwargs['down_attr'], boundary_attr=v.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(t.up_index, t.down_index, t.boundary_index, x=t.x, up_attr=t.kwargs['up_attr'], down_attr=t.kwargs['down_attr'], boundary_attr=t.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(up_index, down_index, None, x=x, down_attr=down_attr)",
                            "Call"
                        ],
                        [
                            "cmp.propagate(up_index=params.up_index, down_index=None, boundary_index=None, x=params.x, up_attr=None)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_down_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[6], [10], [17], [9], [13], [10]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.zeros(5, 1)",
                            "Call"
                        ],
                        [
                            "torch.zeros(1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_62": {
                "input": {
                    "value": "boundary_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cmp.propagate(e.up_index, e.down_index, e.boundary_index, x=e.x, up_attr=e.kwargs['up_attr'], down_attr=e.kwargs['down_attr'], boundary_attr=e.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(v.up_index, v.down_index, v.boundary_index, x=v.x, up_attr=v.kwargs['up_attr'], down_attr=v.kwargs['down_attr'], boundary_attr=v.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(t.up_index, t.down_index, t.boundary_index, x=t.x, up_attr=t.kwargs['up_attr'], down_attr=t.kwargs['down_attr'], boundary_attr=t.kwargs['boundary_attr'])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_boundary_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[3], [5], [7], [5], [9], [8]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.zeros(5, 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[14]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_82": {
                "input": {
                    "value": "up_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cmp.propagate(e.up_index, e.down_index, e.boundary_index, x=e.x, up_attr=e.kwargs['up_attr'], down_attr=e.kwargs['down_attr'], boundary_attr=e.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(v.up_index, v.down_index, v.boundary_index, x=v.x, up_attr=v.kwargs['up_attr'], down_attr=v.kwargs['down_attr'], boundary_attr=v.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(t.up_index, t.down_index, t.boundary_index, x=t.x, up_attr=t.kwargs['up_attr'], down_attr=t.kwargs['down_attr'], boundary_attr=t.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(up_index, down_index, None, x=x, down_attr=down_attr)",
                            "Call"
                        ],
                        [
                            "cmp.propagate(up_index=params.up_index, down_index=None, boundary_index=None, x=params.x, up_attr=None)",
                            "Call"
                        ],
                        [
                            "cmp.propagate(up_index=params.up_index, down_index=None, boundary_index=None, x=params.x, up_attr=None)",
                            "Call"
                        ],
                        [
                            "cmp.propagate(up_index=params.up_index, down_index=None, boundary_index=None, x=params.x, up_attr=None)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_up_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0], [0], [11], [0], [9], [8]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[6], [4], [11], [9], [7]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.zeros(1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_85": {
                "input": {
                    "value": "down_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cmp.propagate(e.up_index, e.down_index, e.boundary_index, x=e.x, up_attr=e.kwargs['up_attr'], down_attr=e.kwargs['down_attr'], boundary_attr=e.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(v.up_index, v.down_index, v.boundary_index, x=v.x, up_attr=v.kwargs['up_attr'], down_attr=v.kwargs['down_attr'], boundary_attr=v.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(t.up_index, t.down_index, t.boundary_index, x=t.x, up_attr=t.kwargs['up_attr'], down_attr=t.kwargs['down_attr'], boundary_attr=t.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(up_index, down_index, None, x=x, down_attr=down_attr)",
                            "Call"
                        ],
                        [
                            "cmp.propagate(up_index=params.up_index, down_index=None, boundary_index=None, x=params.x, up_attr=None)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_down_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[6], [10], [17], [9], [13], [10]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.zeros(5, 1)",
                            "Call"
                        ],
                        [
                            "torch.zeros(1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_88": {
                "input": {
                    "value": "boundary_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cmp.propagate(e.up_index, e.down_index, e.boundary_index, x=e.x, up_attr=e.kwargs['up_attr'], down_attr=e.kwargs['down_attr'], boundary_attr=e.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(v.up_index, v.down_index, v.boundary_index, x=v.x, up_attr=v.kwargs['up_attr'], down_attr=v.kwargs['down_attr'], boundary_attr=v.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(t.up_index, t.down_index, t.boundary_index, x=t.x, up_attr=t.kwargs['up_attr'], down_attr=t.kwargs['down_attr'], boundary_attr=t.kwargs['boundary_attr'])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_boundary_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[3], [5], [7], [5], [9], [8]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.zeros(5, 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[14]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_111": {
                "input": {
                    "value": "up_msg + down_msg",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_updated_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[17], [32]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_126": {
                "input": {
                    "value": "isolated_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out[4]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.zeros_like(isolated_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_133": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mp.propagate(edge_index=params.up_index, x=params.x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "up_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cmp.propagate(e.up_index, e.down_index, e.boundary_index, x=e.x, up_attr=e.kwargs['up_attr'], down_attr=e.kwargs['down_attr'], boundary_attr=e.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(v.up_index, v.down_index, v.boundary_index, x=v.x, up_attr=v.kwargs['up_attr'], down_attr=v.kwargs['down_attr'], boundary_attr=v.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(t.up_index, t.down_index, t.boundary_index, x=t.x, up_attr=t.kwargs['up_attr'], down_attr=t.kwargs['down_attr'], boundary_attr=t.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(up_index, down_index, None, x=x, down_attr=down_attr)",
                            "Call"
                        ],
                        [
                            "cmp.propagate(up_index=params.up_index, down_index=None, boundary_index=None, x=params.x, up_attr=None)",
                            "Call"
                        ],
                        [
                            "cmp.propagate(up_index=params.up_index, down_index=None, boundary_index=None, x=params.x, up_attr=None)",
                            "Call"
                        ],
                        [
                            "cmp.propagate(up_index=params.up_index, down_index=None, boundary_index=None, x=params.x, up_attr=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_134": {
                "input": {
                    "value": "down_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cmp.propagate(e.up_index, e.down_index, e.boundary_index, x=e.x, up_attr=e.kwargs['up_attr'], down_attr=e.kwargs['down_attr'], boundary_attr=e.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(v.up_index, v.down_index, v.boundary_index, x=v.x, up_attr=v.kwargs['up_attr'], down_attr=v.kwargs['down_attr'], boundary_attr=v.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(t.up_index, t.down_index, t.boundary_index, x=t.x, up_attr=t.kwargs['up_attr'], down_attr=t.kwargs['down_attr'], boundary_attr=t.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(up_index, down_index, None, x=x, down_attr=down_attr)",
                            "Call"
                        ],
                        [
                            "cmp.propagate(up_index=params.up_index, down_index=None, boundary_index=None, x=params.x, up_attr=None)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.zeros_like(down_msg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_149": {
                "input": {
                    "value": "mp_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mp.propagate(edge_index=empty_edge_index, x=params.x)",
                            "Call"
                        ],
                        [
                            "mp.propagate(edge_index=empty_edge_index, x=params.x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.zeros_like(mp_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_155": {
                "input": {
                    "value": "mp_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mp.propagate(edge_index=empty_edge_index, x=params.x)",
                            "Call"
                        ],
                        [
                            "mp.propagate(edge_index=empty_edge_index, x=params.x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "up_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cmp.propagate(e.up_index, e.down_index, e.boundary_index, x=e.x, up_attr=e.kwargs['up_attr'], down_attr=e.kwargs['down_attr'], boundary_attr=e.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(v.up_index, v.down_index, v.boundary_index, x=v.x, up_attr=v.kwargs['up_attr'], down_attr=v.kwargs['down_attr'], boundary_attr=v.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(t.up_index, t.down_index, t.boundary_index, x=t.x, up_attr=t.kwargs['up_attr'], down_attr=t.kwargs['down_attr'], boundary_attr=t.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(up_index, down_index, None, x=x, down_attr=down_attr)",
                            "Call"
                        ],
                        [
                            "cmp.propagate(up_index=params.up_index, down_index=None, boundary_index=None, x=params.x, up_attr=None)",
                            "Call"
                        ],
                        [
                            "cmp.propagate(up_index=params.up_index, down_index=None, boundary_index=None, x=params.x, up_attr=None)",
                            "Call"
                        ],
                        [
                            "cmp.propagate(up_index=params.up_index, down_index=None, boundary_index=None, x=params.x, up_attr=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_170": {
                "input": {
                    "value": "mp_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mp.propagate(edge_index=empty_edge_index, x=params.x)",
                            "Call"
                        ],
                        [
                            "mp.propagate(edge_index=empty_edge_index, x=params.x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.zeros_like(mp_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_176": {
                "input": {
                    "value": "mp_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mp.propagate(edge_index=empty_edge_index, x=params.x)",
                            "Call"
                        ],
                        [
                            "mp.propagate(edge_index=empty_edge_index, x=params.x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "up_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cmp.propagate(e.up_index, e.down_index, e.boundary_index, x=e.x, up_attr=e.kwargs['up_attr'], down_attr=e.kwargs['down_attr'], boundary_attr=e.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(v.up_index, v.down_index, v.boundary_index, x=v.x, up_attr=v.kwargs['up_attr'], down_attr=v.kwargs['down_attr'], boundary_attr=v.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(t.up_index, t.down_index, t.boundary_index, x=t.x, up_attr=t.kwargs['up_attr'], down_attr=t.kwargs['down_attr'], boundary_attr=t.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(up_index, down_index, None, x=x, down_attr=down_attr)",
                            "Call"
                        ],
                        [
                            "cmp.propagate(up_index=params.up_index, down_index=None, boundary_index=None, x=params.x, up_attr=None)",
                            "Call"
                        ],
                        [
                            "cmp.propagate(up_index=params.up_index, down_index=None, boundary_index=None, x=params.x, up_attr=None)",
                            "Call"
                        ],
                        [
                            "cmp.propagate(up_index=params.up_index, down_index=None, boundary_index=None, x=params.x, up_attr=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_209": {
                "input": {
                    "value": "e_up_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cmp.propagate(e.up_index, e.down_index, e.boundary_index, x=e.x, up_attr=e.kwargs['up_attr'], down_attr=e.kwargs['down_attr'], boundary_attr=e.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(e.up_index, e.down_index, e.boundary_index, x=e.x, up_attr=e.kwargs['up_attr'], down_attr=e.kwargs['down_attr'], boundary_attr=e.kwargs['boundary_attr'])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_e_up_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[4 + 5 + 6 + 2 + 3 + 4], [3 + 5 + 6 + 1 + 3 + 4], [2 + 5 + 6 + 1 + 2 + 4], [1 + 5 + 6 + 1 + 2 + 3], [1 + 4 + 6 + 2 + 3 + 6], [1 + 4 + 5 + 2 + 3 + 5]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[4 + 5 + 6 + 2 + 3 + 4], [1 + 5 + 6 + 1 + 2 + 3], [3 + 5 + 6 + 1 + 3 + 4], [1 + 4 + 5 + 2 + 3 + 5], [2 + 5 + 6 + 1 + 2 + 4], [1 + 4 + 6 + 2 + 3 + 6]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_227": {
                "input": {
                    "value": "e_up_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cmp.propagate(e.up_index, e.down_index, e.boundary_index, x=e.x, up_attr=e.kwargs['up_attr'], down_attr=e.kwargs['down_attr'], boundary_attr=e.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(e.up_index, e.down_index, e.boundary_index, x=e.x, up_attr=e.kwargs['up_attr'], down_attr=e.kwargs['down_attr'], boundary_attr=e.kwargs['boundary_attr'])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_e_up_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[4 + 5 + 6 + 2 + 3 + 4], [3 + 5 + 6 + 1 + 3 + 4], [2 + 5 + 6 + 1 + 2 + 4], [1 + 5 + 6 + 1 + 2 + 3], [1 + 4 + 6 + 2 + 3 + 6], [1 + 4 + 5 + 2 + 3 + 5]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[4 + 5 + 6 + 2 + 3 + 4], [1 + 5 + 6 + 1 + 2 + 3], [3 + 5 + 6 + 1 + 3 + 4], [1 + 4 + 5 + 2 + 3 + 5], [2 + 5 + 6 + 1 + 2 + 4], [1 + 4 + 6 + 2 + 3 + 6]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_241": {
                "input": {
                    "value": "t_down_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cmp.propagate(t.up_index, t.down_index, t.boundary_index, x=t.x, up_attr=t.kwargs['up_attr'], down_attr=t.kwargs['down_attr'], boundary_attr=t.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(t.up_index, t.down_index, t.boundary_index, x=t.x, up_attr=t.kwargs['up_attr'], down_attr=t.kwargs['down_attr'], boundary_attr=t.kwargs['boundary_attr'])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_t_down_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[2 + 2 + 3 + 3], [1 + 1 + 3 + 3], [1 + 1 + 2 + 2]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[t1_x + t1_x + t2_x + t2_x], [t0_x + t0_x + t1_x + t1_x], [t0_x + t0_x + t2_x + t2_x]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_247": {
                "input": {
                    "value": "t_boundary_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cmp.propagate(t.up_index, t.down_index, t.boundary_index, x=t.x, up_attr=t.kwargs['up_attr'], down_attr=t.kwargs['down_attr'], boundary_attr=t.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(t.up_index, t.down_index, t.boundary_index, x=t.x, up_attr=t.kwargs['up_attr'], down_attr=t.kwargs['down_attr'], boundary_attr=t.kwargs['boundary_attr'])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_t_boundary_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1 + 6 + 5 + 4], [2 + 3 + 5 + 6], [1 + 2 + 3 + 4]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1 + 6 + 5 + 4], [1 + 2 + 3 + 4], [2 + 3 + 5 + 6]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_264": {
                "input": {
                    "value": "t_down_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cmp.propagate(t.up_index, t.down_index, t.boundary_index, x=t.x, up_attr=t.kwargs['up_attr'], down_attr=t.kwargs['down_attr'], boundary_attr=t.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(t.up_index, t.down_index, t.boundary_index, x=t.x, up_attr=t.kwargs['up_attr'], down_attr=t.kwargs['down_attr'], boundary_attr=t.kwargs['boundary_attr'])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_t_down_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[2 + 2 + 3 + 3], [1 + 1 + 3 + 3], [1 + 1 + 2 + 2]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[t1_x + t1_x + t2_x + t2_x], [t0_x + t0_x + t1_x + t1_x], [t0_x + t0_x + t2_x + t2_x]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_270": {
                "input": {
                    "value": "t_boundary_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cmp.propagate(t.up_index, t.down_index, t.boundary_index, x=t.x, up_attr=t.kwargs['up_attr'], down_attr=t.kwargs['down_attr'], boundary_attr=t.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(t.up_index, t.down_index, t.boundary_index, x=t.x, up_attr=t.kwargs['up_attr'], down_attr=t.kwargs['down_attr'], boundary_attr=t.kwargs['boundary_attr'])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_t_boundary_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1 + 6 + 5 + 4], [2 + 3 + 5 + 6], [1 + 2 + 3 + 4]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1 + 6 + 5 + 4], [1 + 2 + 3 + 4], [2 + 3 + 5 + 6]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_126": {
                "input": {
                    "value": "isolated_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out[4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_134": {
                "input": {
                    "value": "down_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cmp.propagate(e.up_index, e.down_index, e.boundary_index, x=e.x, up_attr=e.kwargs['up_attr'], down_attr=e.kwargs['down_attr'], boundary_attr=e.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(v.up_index, v.down_index, v.boundary_index, x=v.x, up_attr=v.kwargs['up_attr'], down_attr=v.kwargs['down_attr'], boundary_attr=v.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(t.up_index, t.down_index, t.boundary_index, x=t.x, up_attr=t.kwargs['up_attr'], down_attr=t.kwargs['down_attr'], boundary_attr=t.kwargs['boundary_attr'])",
                            "Call"
                        ],
                        [
                            "cmp.propagate(up_index, down_index, None, x=x, down_attr=down_attr)",
                            "Call"
                        ],
                        [
                            "cmp.propagate(up_index=params.up_index, down_index=None, boundary_index=None, x=params.x, up_attr=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_149": {
                "input": {
                    "value": "mp_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mp.propagate(edge_index=empty_edge_index, x=params.x)",
                            "Call"
                        ],
                        [
                            "mp.propagate(edge_index=empty_edge_index, x=params.x)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_170": {
                "input": {
                    "value": "mp_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mp.propagate(edge_index=empty_edge_index, x=params.x)",
                            "Call"
                        ],
                        [
                            "mp.propagate(edge_index=empty_edge_index, x=params.x)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_128": {
                "input": {
                    "value": "out[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.zeros_like(out[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_128": {
                "input": {
                    "value": "out[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "mp/test_layers.py": {
        "torch": {
            "tensor_20": {
                "variable": {
                    "value": "expected_v_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[12], [9], [25], [25], [23]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "variable": {
                    "value": "expected_e_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[10], [20], [47], [22], [42], [37]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_26": {
                "variable": {
                    "value": "expected_t_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "variable": {
                    "value": "expected_v_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[12], [9], [25], [25], [23]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "variable": {
                    "value": "expected_e_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[4], [7], [23], [9], [25], [24]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "variable": {
                    "value": "expected_t_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[15]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "expected_v_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[12], [24], [24], [15], [25], [31], [47], [24]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "expected_e_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[35], [79], [41], [27], [66], [70], [92], [82], [53]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "variable": {
                    "value": "expected_ring_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[15], [33]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "msg_net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "update_net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(1, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_92": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[yv, ye, yt]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "SGD_94": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cin_conv.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out_v, out_e, out_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_100": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_119": {
                "variable": {
                    "value": "update_up",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(1, 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_120": {
                "variable": {
                    "value": "update_down",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(1, 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_121": {
                "variable": {
                    "value": "update",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(1, 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_144": {
                "variable": {
                    "value": "expected_ex",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[3], [5], [7], [5], [9], [8]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_148": {
                "variable": {
                    "value": "expected_tx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[14]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_157": {
                "variable": {
                    "value": "embed_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_21": {
                "input": {
                    "value": "v_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dsmp.forward(v_params, e_params, t_params)",
                            "Call"
                        ],
                        [
                            "dsmp.forward(v_params, e_params, t_params)",
                            "Call"
                        ],
                        [
                            "dsmp.forward(v_params, e_params, ring_params)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_v_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[12], [9], [25], [25], [23]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[12], [9], [25], [25], [23]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[12], [24], [24], [15], [25], [31], [47], [24]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_24": {
                "input": {
                    "value": "e_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dsmp.forward(v_params, e_params, t_params)",
                            "Call"
                        ],
                        [
                            "dsmp.forward(v_params, e_params, t_params)",
                            "Call"
                        ],
                        [
                            "dsmp.forward(v_params, e_params, ring_params)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_e_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[10], [20], [47], [22], [42], [37]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[4], [7], [23], [9], [25], [24]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[35], [79], [41], [27], [66], [70], [92], [82], [53]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_27": {
                "input": {
                    "value": "t_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dsmp.forward(v_params, e_params, t_params)",
                            "Call"
                        ],
                        [
                            "dsmp.forward(v_params, e_params, t_params)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_t_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[15]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_40": {
                "input": {
                    "value": "v_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dsmp.forward(v_params, e_params, t_params)",
                            "Call"
                        ],
                        [
                            "dsmp.forward(v_params, e_params, t_params)",
                            "Call"
                        ],
                        [
                            "dsmp.forward(v_params, e_params, ring_params)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_v_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[12], [9], [25], [25], [23]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[12], [9], [25], [25], [23]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[12], [24], [24], [15], [25], [31], [47], [24]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_43": {
                "input": {
                    "value": "e_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dsmp.forward(v_params, e_params, t_params)",
                            "Call"
                        ],
                        [
                            "dsmp.forward(v_params, e_params, t_params)",
                            "Call"
                        ],
                        [
                            "dsmp.forward(v_params, e_params, ring_params)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_e_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[10], [20], [47], [22], [42], [37]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[4], [7], [23], [9], [25], [24]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[35], [79], [41], [27], [66], [70], [92], [82], [53]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_46": {
                "input": {
                    "value": "t_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dsmp.forward(v_params, e_params, t_params)",
                            "Call"
                        ],
                        [
                            "dsmp.forward(v_params, e_params, t_params)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_t_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[15]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_60": {
                "input": {
                    "value": "v_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dsmp.forward(v_params, e_params, t_params)",
                            "Call"
                        ],
                        [
                            "dsmp.forward(v_params, e_params, t_params)",
                            "Call"
                        ],
                        [
                            "dsmp.forward(v_params, e_params, ring_params)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_v_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[12], [9], [25], [25], [23]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[12], [9], [25], [25], [23]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[12], [24], [24], [15], [25], [31], [47], [24]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_64": {
                "input": {
                    "value": "e_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dsmp.forward(v_params, e_params, t_params)",
                            "Call"
                        ],
                        [
                            "dsmp.forward(v_params, e_params, t_params)",
                            "Call"
                        ],
                        [
                            "dsmp.forward(v_params, e_params, ring_params)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_e_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[10], [20], [47], [22], [42], [37]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[4], [7], [23], [9], [25], [24]], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[35], [79], [41], [27], [66], [70], [92], [82], [53]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_69": {
                "input": {
                    "value": "ring_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dsmp.forward(v_params, e_params, ring_params)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_ring_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[15], [33]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_145": {
                "input": {
                    "value": "expected_ex",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[3], [5], [7], [5], [9], [8]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "ex",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv.forward(v_params.x, e_params.boundary_index)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_149": {
                "input": {
                    "value": "expected_tx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[14]], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "tx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv.forward(e_params.x, t_params.boundary_index)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_73": {
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_119": {
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_120": {
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_121": {
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_112": {
                "input": {
                    "value": "all_params_before[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "all_params_after[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "mp/test_models.py": {
        "torch": {
            "cat_87": {
                "variable": {
                    "value": "batched_preds1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batched_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batched_preds, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batched_preds, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "batched_preds2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batched_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batched_preds, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batched_preds, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "preds1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "preds1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(preds1, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "preds2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "preds2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(preds2, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_33": {
                "variable": {
                    "value": "batched_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batched_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batched_preds, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batched_preds, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_39": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(preds, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(preds, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "batched_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batched_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batched_preds, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batched_preds, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(preds, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(preds, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_147": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_198": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_213": {
                "variable": {
                    "value": "batched_res[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batched_res[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_226": {
                "variable": {
                    "value": "unbatched_res[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "unbatched_res[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "allclose_43": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(preds, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(preds, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batched_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batched_preds, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batched_preds, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "atol": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_69": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(preds, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(preds, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batched_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batched_preds, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batched_preds, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "atol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "equal_102": {
                "input": {
                    "value": "batched_preds1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(batched_preds, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batched_preds2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(batched_preds, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_136": {
                "input": {
                    "value": "preds1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(preds1, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "preds2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(preds2, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_167": {
                "variable": {
                    "value": "batched_res[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batched_res[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_181": {
                "variable": {
                    "value": "unbatched_res[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "unbatched_res[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "allclose_229": {
                "input": {
                    "value": "unbatched_res[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "batched_res[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "atol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_184": {
                "input": {
                    "value": "unbatched_res[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "batched_res[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "atol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "max_230": {
                "input": {
                    "value": "torch.abs(unbatched_res[key] - batched_res[key])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_185": {
                "input": {
                    "value": "torch.abs(unbatched_res[key] - batched_res[key])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_230": {
                "input": {
                    "value": "unbatched_res[key] - batched_res[key]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_185": {
                "input": {
                    "value": "unbatched_res[key] - batched_res[key]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "mp/test_molec_models.py": {
        "torch": {
            "manual_seed_19": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_79": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "batched_res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batched_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batched_res, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batched_res, dim=0)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_115": {
                "variable": {
                    "value": "unbatched_res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "unbatched_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(unbatched_res, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(unbatched_res, dim=0)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_127": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "batched_res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batched_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batched_res, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batched_res, dim=0)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "unbatched_res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "unbatched_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(unbatched_res, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(unbatched_res, dim=0)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_177": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_199": {
                "variable": {
                    "value": "batched_res[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batched_res[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_218": {
                "variable": {
                    "value": "unbatched_res[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "unbatched_res[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_233": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "batched_res[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batched_res[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "unbatched_res[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "unbatched_res[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "allclose_116": {
                "input": {
                    "value": "unbatched_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(unbatched_res, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(unbatched_res, dim=0)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "other": {
                    "value": "batched_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batched_res, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batched_res, dim=0)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "atol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_164": {
                "input": {
                    "value": "unbatched_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(unbatched_res, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(unbatched_res, dim=0)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "other": {
                    "value": "batched_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batched_res, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batched_res, dim=0)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "atol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_221": {
                "input": {
                    "value": "unbatched_res[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "batched_res[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "atol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "batched_res[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batched_res[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_280": {
                "variable": {
                    "value": "unbatched_res[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "unbatched_res[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "allclose_67": {
                "input": {
                    "value": "unbatched_res[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "batched_res[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "atol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "max_222": {
                "input": {
                    "value": "torch.abs(unbatched_res[key] - batched_res[key])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_283": {
                "input": {
                    "value": "unbatched_res[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "batched_res[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "atol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "max_68": {
                "input": {
                    "value": "torch.abs(unbatched_res[key] - batched_res[key])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_222": {
                "input": {
                    "value": "unbatched_res[key] - batched_res[key]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_284": {
                "input": {
                    "value": "torch.abs(unbatched_res[key] - batched_res[key])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_68": {
                "input": {
                    "value": "unbatched_res[key] - batched_res[key]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_284": {
                "input": {
                    "value": "unbatched_res[key] - batched_res[key]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "mp/test_orientation.py": {
        "torch": {
            "cat_53": {
                "variable": {
                    "value": "batched_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batched_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batched_preds, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(preds, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "allclose_62": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(preds, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batched_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batched_preds, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "equal_67": {
                "input": {
                    "value": "cochain1.lower_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "cochain2.lower_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_68": {
                "input": {
                    "value": "cochain1.upper_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "cochain2.upper_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_78": {
                "input": {
                    "value": "T2 @ out_up1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "out_up2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.propagate(cochain2.upper_index, cochain2.lower_index, None, x=cochain2.x, up_attr=cochain2.upper_orient.view(-1, 1), down_attr=cochain2.lower_orient.view(-1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_79": {
                "input": {
                    "value": "T2 @ out_down1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "out_down2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer.propagate(cochain2.upper_index, cochain2.lower_index, None, x=cochain2.x, up_attr=cochain2.upper_orient.view(-1, 1), down_attr=cochain2.lower_orient.view(-1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_80": {
                "input": {
                    "value": "T2 @ (cochain1.x + out_up1 + out_down1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "cochain2.x + out_up2 + out_down2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_85": {
                "input": {
                    "value": "cochain1.lower_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "cochain2.lower_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_86": {
                "input": {
                    "value": "cochain1.upper_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "cochain2.upper_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_95": {
                "input": {
                    "value": "T2 @ pred1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "pred2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward(CochainBatch.from_cochain_list([cochain2]), include_partial=True)",
                            "Call"
                        ],
                        [
                            "model.forward(CochainBatch.from_cochain_list([cochain2]), include_partial=True)",
                            "Call"
                        ],
                        [
                            "model.forward(CochainBatch.from_cochain_list([cochain2]), include_partial=True)",
                            "Call"
                        ],
                        [
                            "model.forward(CochainBatch.from_cochain_list([cochain2]), include_partial=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_97": {
                "input": {
                    "value": "final1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward(CochainBatch.from_cochain_list([cochain1]), include_partial=True)",
                            "Call"
                        ],
                        [
                            "model.forward(CochainBatch.from_cochain_list([cochain1]), include_partial=True)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "final2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward(CochainBatch.from_cochain_list([cochain2]), include_partial=True)",
                            "Call"
                        ],
                        [
                            "model.forward(CochainBatch.from_cochain_list([cochain2]), include_partial=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_102": {
                "input": {
                    "value": "cochain1.lower_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "cochain2.lower_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_103": {
                "input": {
                    "value": "cochain1.upper_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "cochain2.upper_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_112": {
                "input": {
                    "value": "T2 @ pred1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "pred2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward(CochainBatch.from_cochain_list([cochain2]), include_partial=True)",
                            "Call"
                        ],
                        [
                            "model.forward(CochainBatch.from_cochain_list([cochain2]), include_partial=True)",
                            "Call"
                        ],
                        [
                            "model.forward(CochainBatch.from_cochain_list([cochain2]), include_partial=True)",
                            "Call"
                        ],
                        [
                            "model.forward(CochainBatch.from_cochain_list([cochain2]), include_partial=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_114": {
                "input": {
                    "value": "final1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward(CochainBatch.from_cochain_list([cochain1]), include_partial=True)",
                            "Call"
                        ],
                        [
                            "model.forward(CochainBatch.from_cochain_list([cochain1]), include_partial=True)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "final2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward(CochainBatch.from_cochain_list([cochain2]), include_partial=True)",
                            "Call"
                        ],
                        [
                            "model.forward(CochainBatch.from_cochain_list([cochain2]), include_partial=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_119": {
                "input": {
                    "value": "cochain1.lower_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "cochain2.lower_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_120": {
                "input": {
                    "value": "cochain1.upper_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "cochain2.upper_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_136": {
                "input": {
                    "value": "cochain1.lower_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "cochain2.lower_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_137": {
                "input": {
                    "value": "cochain1.upper_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "cochain2.upper_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_147": {
                "input": {
                    "value": "pred1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward(CochainBatch.from_cochain_list([cochain1]), include_partial=True)",
                            "Call"
                        ],
                        [
                            "model.forward(CochainBatch.from_cochain_list([cochain1]), include_partial=True)",
                            "Call"
                        ],
                        [
                            "model.forward(CochainBatch.from_cochain_list([cochain1]), include_partial=True)",
                            "Call"
                        ],
                        [
                            "model.forward(CochainBatch.from_cochain_list([cochain1]), include_partial=True)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pred2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward(CochainBatch.from_cochain_list([cochain2]), include_partial=True)",
                            "Call"
                        ],
                        [
                            "model.forward(CochainBatch.from_cochain_list([cochain2]), include_partial=True)",
                            "Call"
                        ],
                        [
                            "model.forward(CochainBatch.from_cochain_list([cochain2]), include_partial=True)",
                            "Call"
                        ],
                        [
                            "model.forward(CochainBatch.from_cochain_list([cochain2]), include_partial=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_37": {
                "data": {
                    "value": "T2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.diag([+1.0, +1.0, +1.0, +1.0, -1.0, -1.0])",
                            "Call"
                        ],
                        [
                            "generate_oriented_flow_pair()",
                            "Call"
                        ],
                        [
                            "generate_oriented_flow_pair()",
                            "Call"
                        ],
                        [
                            "generate_oriented_flow_pair()",
                            "Call"
                        ],
                        [
                            "generate_oriented_flow_pair()",
                            "Call"
                        ],
                        [
                            "generate_oriented_flow_pair()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_129": {
                "input": {
                    "value": "T2 @ pred1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "pred2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward(CochainBatch.from_cochain_list([cochain2]), include_partial=True)",
                            "Call"
                        ],
                        [
                            "model.forward(CochainBatch.from_cochain_list([cochain2]), include_partial=True)",
                            "Call"
                        ],
                        [
                            "model.forward(CochainBatch.from_cochain_list([cochain2]), include_partial=True)",
                            "Call"
                        ],
                        [
                            "model.forward(CochainBatch.from_cochain_list([cochain2]), include_partial=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_131": {
                "input": {
                    "value": "pred1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward(CochainBatch.from_cochain_list([cochain1]), include_partial=True)",
                            "Call"
                        ],
                        [
                            "model.forward(CochainBatch.from_cochain_list([cochain1]), include_partial=True)",
                            "Call"
                        ],
                        [
                            "model.forward(CochainBatch.from_cochain_list([cochain1]), include_partial=True)",
                            "Call"
                        ],
                        [
                            "model.forward(CochainBatch.from_cochain_list([cochain1]), include_partial=True)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pred2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward(CochainBatch.from_cochain_list([cochain2]), include_partial=True)",
                            "Call"
                        ],
                        [
                            "model.forward(CochainBatch.from_cochain_list([cochain2]), include_partial=True)",
                            "Call"
                        ],
                        [
                            "model.forward(CochainBatch.from_cochain_list([cochain2]), include_partial=True)",
                            "Call"
                        ],
                        [
                            "model.forward(CochainBatch.from_cochain_list([cochain2]), include_partial=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mp/test_permutation.py": {
        "torch": {
            "allclose_36": {
                "input": {
                    "value": "comp_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(embeddings, dummy_graphs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "permuted_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward(ComplexBatch.from_complex_list([permuted_comp], max_dim=permuted_comp.dimension))",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    }
}