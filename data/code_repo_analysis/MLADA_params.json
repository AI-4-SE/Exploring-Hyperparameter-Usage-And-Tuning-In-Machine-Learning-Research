{
    "src/classifier/base.py": {
        "torch": {
            "Parameter_15": {
                "variable": {
                    "value": "self.I_way",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.eye(self.args.way, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_28": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "XS.unsqueeze(0) - XQ.unsqueeze(1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_41": {
                "variable": {
                    "value": "dot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XS.unsqueeze(0).unsqueeze(-2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "XQ.unsqueeze(1).unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_50": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(XS, dim=1).unsqueeze(0) * torch.norm(XQ, dim=1).unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "torch.max(scale, torch.ones_like(scale) * 1e-08)",
                            "Call"
                        ]
                    ]
                }
            },
            "unique_66": {
                "variable": {
                    "value": "(unique1, inv_S)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "YS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "YS",
                            "Method Argument"
                        ]
                    ]
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "return_inverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unique_67": {
                "variable": {
                    "value": "(unique2, inv_Q)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "YQ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "YQ",
                            "Method Argument"
                        ]
                    ]
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "return_inverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_81": {
                "variable": {
                    "value": "Y_new",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.args.way",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "unique1.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "unique1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_109": {
                "variable": {
                    "value": "Y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.I_way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_100": {
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "mean_120": {
                "input": {
                    "value": "(torch.argmax(pred, dim=1) == true).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_15": {
                "n": {
                    "value": "self.args.way",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_47": {
                "input": {
                    "value": "XS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "XS",
                            "Method Argument"
                        ],
                        [
                            "XS",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_47": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_48": {
                "input": {
                    "value": "XQ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "XQ",
                            "Method Argument"
                        ],
                        [
                            "XQ",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_48": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_51": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(XS, dim=1).unsqueeze(0) * torch.norm(XQ, dim=1).unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "torch.max(scale, torch.ones_like(scale) * 1e-08)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_77": {
                "input": {
                    "value": "unique1 - unique2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_97": {
                "p": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "drop_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_98": {
                "in_features": {
                    "value": "in_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "in_d",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_ds[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_91": {
                "p": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "drop_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_92": {
                "in_features": {
                    "value": "in_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "in_d",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_ds[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_120": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/dataset/loader.py": {
        "torch": {
            "nonzero_339": {
                "input": {
                    "value": "torch.sum(torch.abs(vocab.vectors), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_340": {
                "input": {
                    "value": "torch.abs(vocab.vectors)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_340": {
                "input": {
                    "value": "vocab.vectors",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/dataset/utils.py": {
        "torch": {
            "from_numpy_30": {
                "variable": {
                    "value": "data[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/embedding/rnn.py": {
        "torch": {
            "LSTM_12": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bidirectional",
                            "Method Argument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_81": {
                "variable": {
                    "value": "text",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sort_text",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._sort_tensor(input=text, lengths=text_len)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sort_len.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "variable": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_zero, dim1, dim2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input, zero)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_87": {
                "sequence": {
                    "value": "text",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pack_padded_sequence(sort_text, lengths=sort_len.cpu().numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.rnn(text)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(text, batch_first=True)[0]",
                            "Subscript"
                        ],
                        [
                            "self._unsort_tensor(text, invert_order, num_zero)",
                            "Call"
                        ],
                        [
                            "text",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/embedding/wordebd.py": {
        "torch": {
            "Embedding_14": {
                "variable": {
                    "value": "self.embedding_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_34": {
                "input": {
                    "value": "data['text']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "weights['ebd.embedding_layer.weight']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/modelD.py": {
        "torch": {
            "Sequential_13": {
                "variable": {
                    "value": "self.d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(0.2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_14": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "in_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_17": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_20": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/modelG.py": {
        "torch": {
            "LSTM_20": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "variable": {
                    "value": "self.seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(256, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_31": {
                "variable": {
                    "value": "avg_sentence_ebd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w2v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ebd",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_44": {
                "variable": {
                    "value": "word_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ebd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ebd(data)",
                            "Call"
                        ],
                        [
                            "self.rnn(ebd, data['text_len'])",
                            "Call"
                        ],
                        [
                            "self.seq(ebd).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "ebd",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_46": {
                "variable": {
                    "value": "sentence_ebd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.unsqueeze(word_weight, dim=-1) * w2v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "variable": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(reverse_feature.shape[0], 500 - reverse_feature.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "reverse_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(reverse_feature, zero)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "sentence_ebd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(avg_sentence_ebd, sentence_ebd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_46": {
                "input": {
                    "value": "word_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(ebd, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/r2d2.py": {
        "torch": {
            "Parameter_18": {
                "variable": {
                    "value": "self.lam",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(-1, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_19": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(0, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_20": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(1, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_24": {
                "variable": {
                    "value": "self.I_support",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.eye(self.args.shot * self.args.way, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_27": {
                "variable": {
                    "value": "self.I_way",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.eye(self.args.way, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "embedding_51": {
                "variable": {
                    "value": "Y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.I_way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_74": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10.0 ** self.alpha * XQ @ W + self.beta",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "YQ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reidx_y(YS, YQ)",
                            "Call"
                        ],
                        [
                            "YQ",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_81": {
                "variable": {
                    "value": "y_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10.0 ** self.alpha * XQ @ W + self.beta",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_18": {
                "data": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_19": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_20": {
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_25": {
                "n": {
                    "value": "self.args.shot * self.args.way",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_27": {
                "n": {
                    "value": "self.args.way",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "inverse_39": {
                "input": {
                    "value": "XS @ XS.t() + 10.0 ** self.lam * self.I_support",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/tools/tool.py": {
        "torch": {
            "load_127": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_120": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_121": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/tools/visualization.py": {
        "torch": {
            "from_numpy_19": {
                "variable": {
                    "value": "data[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "variable": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "20 - temp['text'].shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_98": {
                "f": {
                    "value": "best_path + '.G'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/train/test.py": {
        "torch": {
            "ones_40": {
                "variable": {
                    "value": "YQ_d",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "query['label'].shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "variable": {
                    "value": "YSource_d",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "query['label'].shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "variable": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(query_data.shape[0], 50 - query_data.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "query_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(query_data, zero)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/train/train.py": {
        "torch": {
            "Adam_33": {
                "variable": {
                    "value": "optG",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "grad_param(model, ['G', 'clf'])",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_34": {
                "variable": {
                    "value": "optD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "grad_param(model, ['D'])",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_d",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_37": {
                "variable": {
                    "value": "schedulerG",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optG",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(grad_param(model, ['G', 'clf']), lr=args.lr_g)",
                            "Call"
                        ],
                        [
                            "optG",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "max",
                    "type": "str",
                    "possible_values": []
                },
                "patience": {
                    "value": "args.patience // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_39": {
                "variable": {
                    "value": "schedulerD",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optD",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(grad_param(model, ['D']), lr=args.lr_d)",
                            "Call"
                        ],
                        [
                            "optD",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "max",
                    "type": "str",
                    "possible_values": []
                },
                "patience": {
                    "value": "args.patience // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_190": {
                "variable": {
                    "value": "YQ_d",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "query['label'].shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_194": {
                "variable": {
                    "value": "YSource_d",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "source['label'].shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialLR_43": {
                "variable": {
                    "value": "schedulerG",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optG",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(grad_param(model, ['G', 'clf']), lr=args.lr_g)",
                            "Call"
                        ],
                        [
                            "optG",
                            "Method Argument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "args.ExponentialLR_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialLR_44": {
                "variable": {
                    "value": "schedulerD",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optD",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(grad_param(model, ['D']), lr=args.lr_d)",
                            "Call"
                        ],
                        [
                            "optD",
                            "Method Argument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "args.ExponentialLR_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_140": {
                "f": {
                    "value": "best_path + '.G'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_141": {
                "f": {
                    "value": "best_path + '.D'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_142": {
                "f": {
                    "value": "best_path + '.clf'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_159": {
                "obj": {
                    "value": "model['G'].state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "best_path + '.G'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_160": {
                "obj": {
                    "value": "model['D'].state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "best_path + '.D'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_161": {
                "obj": {
                    "value": "model['clf'].state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "best_path + '.clf'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_115": {
                "obj": {
                    "value": "model['G'].state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "best_path + '.G'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_116": {
                "obj": {
                    "value": "model['D'].state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "best_path + '.D'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_117": {
                "obj": {
                    "value": "model['clf'].state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "best_path + '.clf'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_entropy_199": {
                "input": {
                    "value": "XSource_logitsD",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model['D'](XSource_inputD)",
                            "Call"
                        ],
                        [
                            "model['D'](XSource_inputD)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "YSource_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(source['label'].shape, dtype=torch.long).to(source['label'].device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_208": {
                "input": {
                    "value": "XSource_logitsD",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model['D'](XSource_inputD)",
                            "Call"
                        ],
                        [
                            "model['D'](XSource_inputD)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "YSource_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(source['label'].shape, dtype=torch.long).to(source['label'].device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/train/utils.py": {
        "torch": {}
    }
}