{
    "test_unet.py": {
        "sklearn": {
            "confusion_matrix_474": {
                "variable": {
                    "value": "conf_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.reshape(y_gt, (y_gt.shape[0] * y_gt.shape[1], y_gt.shape[2]))",
                            "Call"
                        ],
                        [
                            "[i for i in gt]",
                            "ListComp"
                        ],
                        [
                            "to_class_no(gt)",
                            "Call"
                        ],
                        [
                            "np.asarray(gt, dtype='int32')",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.reshape(y_pred, (y_pred.shape[0] * y_pred.shape[1], y_pred.shape[2]))",
                            "Call"
                        ],
                        [
                            "[i for i in pred]",
                            "ListComp"
                        ],
                        [
                            "to_class_no(pred)",
                            "Call"
                        ],
                        [
                            "np.asarray(pred, dtype='int32')",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "[0, 1, 2, 3, 4, 5, 6, 7, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cohen_kappa_score_476": {
                "variable": {
                    "value": "kappa",
                    "type": "variable",
                    "possible_values": []
                },
                "y1": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.reshape(y_gt, (y_gt.shape[0] * y_gt.shape[1], y_gt.shape[2]))",
                            "Call"
                        ],
                        [
                            "[i for i in gt]",
                            "ListComp"
                        ],
                        [
                            "to_class_no(gt)",
                            "Call"
                        ],
                        [
                            "np.asarray(gt, dtype='int32')",
                            "Call"
                        ]
                    ]
                },
                "y2": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.reshape(y_pred, (y_pred.shape[0] * y_pred.shape[1], y_pred.shape[2]))",
                            "Call"
                        ],
                        [
                            "[i for i in pred]",
                            "ListComp"
                        ],
                        [
                            "to_class_no(pred)",
                            "Call"
                        ],
                        [
                            "np.asarray(pred, dtype='int32')",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "[0, 1, 2, 3, 4, 5, 6, 7]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "PSPNet/pspnet.py": {
        "tensorflow": {}
    },
    "main_unet.py": {
        "tensorflow": {
            "mean_iou_46": {
                "labels": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "predictions": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(color_dict)",
                            "Call"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_41": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "method(self, args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.identity(value)",
                            "Call"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "local_variables_initializer_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_40": {
                "control_inputs": {
                    "value": "[update_op]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    }
}