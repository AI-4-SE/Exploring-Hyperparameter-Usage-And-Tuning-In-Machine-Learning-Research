{
    "bert/modeling.py": {
        "torch": {
            "Parameter_119": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(config.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_120": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(config.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_135": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_136": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_137": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_142": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_146": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_172": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_173": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_174": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_176": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_193": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_205": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_215": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_217": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_241": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_253": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_255": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_282": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(layer) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_295": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_296": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_387": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_388": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_439": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_149": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_337": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_339": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_408": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_472": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "erf_35": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_119": {
                "*size": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_120": {
                "*size": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_126": {
                "input": {
                    "value": "s + self.variance_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_199": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "bert/optimization.py": {
        "torch": {
            "cos_25": {
                "input": {
                    "value": "math.pi * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_118": {
                "variable": {
                    "value": "state[next_m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_120": {
                "variable": {
                    "value": "state[next_v]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__127": {
                "parameters": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "group['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "bert/sentiment_modeling.py": {
        "torch": {
            "sum_53": {
                "variable": {
                    "value": "input_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_mask.to(dtype=span_starts.dtype)",
                            "Call"
                        ],
                        [
                            "input_mask.to(dtype=input_score.dtype)",
                            "Call"
                        ],
                        [
                            "(1.0 - input_mask) * -10000.0",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cumsum_54": {
                "variable": {
                    "value": "word_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(input_mask, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_64": {
                "variable": {
                    "value": "JR",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "span_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "span_ends_offset - span_starts_offset + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_70": {
                "variable": {
                    "value": "span_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "span_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(JR).unsqueeze(0).to(span_starts_offset.device) + span_starts_offset.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "torch.min(span_indices, (text_length - 1) * torch.ones_like(span_indices))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_73": {
                "variable": {
                    "value": "row_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "JR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(span_width)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_89": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_prob * input",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogSoftmax_98": {
                "variable": {
                    "value": "log_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_118": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(predictions, dim=0)",
                            "Call"
                        ],
                        [
                            "predictions.to(device)",
                            "Call"
                        ],
                        [
                            "convert_crf_output(outputs, sequence_length, device)",
                            "Call"
                        ],
                        [
                            "convert_crf_output(outputs, sequence_length, device)",
                            "Call"
                        ],
                        [
                            "convert_crf_output(outputs, sequence_length, device)",
                            "Call"
                        ],
                        [
                            "convert_crf_output(outputs, sequence_length, device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_131": {
                "variable": {
                    "value": "self.affine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_180": {
                "variable": {
                    "value": "self.affine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_246": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_282": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_283": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_284": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_285": {
                "variable": {
                    "value": "self.affine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_286": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_363": {
                "variable": {
                    "value": "self.bio_affine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_364": {
                "variable": {
                    "value": "self.cls_affine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_435": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_436": {
                "variable": {
                    "value": "self.unary_affine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_437": {
                "variable": {
                    "value": "self.binary_affine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_438": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_439": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_440": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_526": {
                "variable": {
                    "value": "self.affine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_574": {
                "variable": {
                    "value": "self.neu_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_575": {
                "variable": {
                    "value": "self.pos_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_576": {
                "variable": {
                    "value": "self.neg_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_69": {
                "start": {
                    "value": "JR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(span_width)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_69": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_87": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_327": {
                "variable": {
                    "value": "cls_loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_392": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_484": {
                "variable": {
                    "value": "ac_loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_like_70": {
                "input": {
                    "value": "span_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(JR).unsqueeze(0).to(span_starts_offset.device) + span_starts_offset.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "torch.min(span_indices, (text_length - 1) * torch.ones_like(span_indices))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_101": {
                "input": {
                    "value": "torch.sum(positions.to(dtype=log_probs.dtype) * log_probs, dim=-1) / (torch.sum(positions.to(dtype=log_probs.dtype), dim=-1) + mask.to(dtype=log_probs.dtype))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_104": {
                "input": {
                    "value": "torch.sum(positions.to(dtype=log_probs.dtype) * log_probs, dim=-1) / torch.sum(positions.to(dtype=log_probs.dtype), dim=-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_117": {
                "data": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_sequence(output[0], sequence_length)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_159": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_208": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_404": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_554": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_331": {
                "input": {
                    "value": "flat_label_masks.to(dtype=loss.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_394": {
                "input": {
                    "value": "flat_attention_mask * loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_488": {
                "input": {
                    "value": "flat_label_masks * ac_loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_101": {
                "input": {
                    "value": "positions.to(dtype=log_probs.dtype) * log_probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_104": {
                "input": {
                    "value": "positions.to(dtype=log_probs.dtype) * log_probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_105": {
                "input": {
                    "value": "positions.to(dtype=log_probs.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_161": {
                "input": {
                    "value": "attention_mask * loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_210": {
                "input": {
                    "value": "attention_mask * loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_406": {
                "input": {
                    "value": "flat_attention_mask * loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_556": {
                "input": {
                    "value": "attention_mask * loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_102": {
                "input": {
                    "value": "positions.to(dtype=log_probs.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "crf_new.py": {
        "torch": {
            "max_21": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gather_22": {
                "variable": {
                    "value": "max_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx.view(-1, 1, m_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "variable": {
                    "value": "init_transitions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.tagset_size + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.tagset_size + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_42": {
                "variable": {
                    "value": "self.transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_transitions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(self.tagset_size + 2, self.tagset_size + 2)",
                            "Call"
                        ],
                        [
                            "init_transitions.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "Softmax_43": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_115": {
                "variable": {
                    "value": "length_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.long()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "partition_history",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "partition_history",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(partition_history, 0).view(seq_len, batch_size, -1).transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(partition_history, 0).view(seq_len, batch_size, tag_size, nbest).transpose(1, 0).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_163": {
                "variable": {
                    "value": "partition_history",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_166": {
                "variable": {
                    "value": "last_partition",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "partition_history",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(partition_history, 0).view(seq_len, batch_size, -1).transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(partition_history, 0).view(seq_len, batch_size, tag_size, nbest).transpose(1, 0).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "last_position",
                    "type": "variable",
                    "possible_values": [
                        [
                            "length_mask.view(batch_size, 1, 1).expand(batch_size, 1, tag_size) - 1",
                            "BinOp"
                        ],
                        [
                            "length_mask.view(batch_size, 1, 1, 1).expand(batch_size, 1, tag_size, nbest) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_169": {
                "variable": {
                    "value": "(_, last_bp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "last_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last_partition.expand(batch_size, tag_size, tag_size) + self.transitions.view(1, tag_size, tag_size).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "last_partition.expand(batch_size, tag_size, nbest, tag_size) + self.transitions.view(1, tag_size, 1, tag_size).expand(batch_size, tag_size, nbest, tag_size)",
                            "BinOp"
                        ],
                        [
                            "last_values.view(batch_size, tag_size * nbest, tag_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_177": {
                "variable": {
                    "value": "back_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "back_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(back_points).view(seq_len, batch_size, tag_size)",
                            "Call"
                        ],
                        [
                            "back_points.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "back_points.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(back_points).view(seq_len, batch_size, tag_size, nbest)",
                            "Call"
                        ],
                        [
                            "back_points.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "back_points.transpose(1, 0).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_178": {
                "variable": {
                    "value": "probLists",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "probLists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(probLists).view(seq_len, batch_size, tag_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_247": {
                "variable": {
                    "value": "length_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.long()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_249": {
                "variable": {
                    "value": "end_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tags",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "length_mask - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_252": {
                "variable": {
                    "value": "end_energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_transition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transitions[:, STOP_TAG].contiguous().view(1, tag_size).expand(batch_size, tag_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "end_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(tags, 1, length_mask - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_257": {
                "variable": {
                    "value": "tg_energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.view(seq_len, batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "new_tags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "autograd.Variable(torch.LongTensor(batch_size, seq_len))",
                            "Call"
                        ],
                        [
                            "new_tags.cuda()",
                            "Call"
                        ],
                        [
                            "new_tags.transpose(1, 0).contiguous().view(seq_len, batch_size, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_296": {
                "variable": {
                    "value": "length_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.long()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_353": {
                "variable": {
                    "value": "partition_history",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "partition_history",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(partition_history, 0).view(seq_len, batch_size, -1).transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(partition_history, 0).view(seq_len, batch_size, tag_size, nbest).transpose(1, 0).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_353": {
                "variable": {
                    "value": "partition_history",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_356": {
                "variable": {
                    "value": "last_partition",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "partition_history",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(partition_history, 0).view(seq_len, batch_size, -1).transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(partition_history, 0).view(seq_len, batch_size, tag_size, nbest).transpose(1, 0).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "last_position",
                    "type": "variable",
                    "possible_values": [
                        [
                            "length_mask.view(batch_size, 1, 1).expand(batch_size, 1, tag_size) - 1",
                            "BinOp"
                        ],
                        [
                            "length_mask.view(batch_size, 1, 1, 1).expand(batch_size, 1, tag_size, nbest) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "topk_360": {
                "variable": {
                    "value": "(end_partition, end_bp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "last_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last_partition.expand(batch_size, tag_size, tag_size) + self.transitions.view(1, tag_size, tag_size).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "last_partition.expand(batch_size, tag_size, nbest, tag_size) + self.transitions.view(1, tag_size, 1, tag_size).expand(batch_size, tag_size, nbest, tag_size)",
                            "BinOp"
                        ],
                        [
                            "last_values.view(batch_size, tag_size * nbest, tag_size)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "nbest",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_368": {
                "variable": {
                    "value": "back_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "back_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(back_points).view(seq_len, batch_size, tag_size)",
                            "Call"
                        ],
                        [
                            "back_points.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "back_points.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(back_points).view(seq_len, batch_size, tag_size, nbest)",
                            "Call"
                        ],
                        [
                            "back_points.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "back_points.transpose(1, 0).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_426": {
                "variable": {
                    "value": "(max_scores, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats + self.transitions.view(1, tag_size, tag_size).expand(ins_num, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "scores.view(seq_len, batch_size, tag_size, tag_size)",
                            "Call"
                        ],
                        [
                            "feats + self.transitions.view(1, tag_size, tag_size).expand(ins_num, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "scores.view(seq_len, batch_size, tag_size, tag_size)",
                            "Call"
                        ],
                        [
                            "feats + self.transitions.view(1, tag_size, tag_size).expand(ins_num, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "scores.view(seq_len, batch_size, tag_size, tag_size)",
                            "Call"
                        ],
                        [
                            "end_partition[:, :, STOP_TAG]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "softmax_428": {
                "variable": {
                    "value": "path_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "minus_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores - max_scores.view(batch_size, 1).expand(batch_size, nbest)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_23": {
                "input": {
                    "value": "torch.sum(torch.exp(vec - max_score.expand_as(vec)), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_148": {
                "variable": {
                    "value": "(partition, cur_bp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cur_values + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "self.transitions.view(1, tag_size, tag_size).expand(batch_size, tag_size, tag_size) + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "cur_values + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "cur_values.view(batch_size, tag_size, tag_size) + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "cur_values.view(batch_size, tag_size, 1, tag_size).expand(batch_size, tag_size, nbest, tag_size) + partition.contiguous().view(batch_size, tag_size, nbest, 1).expand(batch_size, tag_size, nbest, tag_size)",
                            "BinOp"
                        ],
                        [
                            "cur_values.view(batch_size, tag_size * nbest, tag_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_149": {
                "variable": {
                    "value": "prb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.softmax(cur_values)",
                            "Call"
                        ],
                        [
                            "torch.gather(prb, 1, cur_bp.unsqueeze(1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "cur_bp.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_203": {
                "variable": {
                    "value": "pointer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "back_points[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pointer.contiguous().view(batch_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_204": {
                "variable": {
                    "value": "dec_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probLists[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pointer.contiguous().view(batch_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_331": {
                "variable": {
                    "value": "(partition, cur_bp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cur_values + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "self.transitions.view(1, tag_size, tag_size).expand(batch_size, tag_size, tag_size) + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "cur_values + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "cur_values.view(batch_size, tag_size, tag_size) + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "cur_values.view(batch_size, tag_size, 1, tag_size).expand(batch_size, tag_size, nbest, tag_size) + partition.contiguous().view(batch_size, tag_size, nbest, 1).expand(batch_size, tag_size, nbest, tag_size)",
                            "BinOp"
                        ],
                        [
                            "cur_values.view(batch_size, tag_size * nbest, tag_size)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "nbest",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_408": {
                "variable": {
                    "value": "new_pointer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "back_points[idx].view(batch_size, tag_size * nbest)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pointer.contiguous().view(batch_size, nbest)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_201": {
                "input": {
                    "value": "probLists[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pointer.contiguous().view(batch_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_23": {
                "input": {
                    "value": "torch.exp(vec - max_score.expand_as(vec))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_170": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "scores.size(1)",
                            "Call"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "tag_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats.size(2)",
                            "Call"
                        ],
                        [
                            "feats.size(2)",
                            "Call"
                        ],
                        [
                            "scores.size(2)",
                            "Call"
                        ],
                        [
                            "feats.size(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_171": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "scores.size(1)",
                            "Call"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "tag_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats.size(2)",
                            "Call"
                        ],
                        [
                            "feats.size(2)",
                            "Call"
                        ],
                        [
                            "scores.size(2)",
                            "Call"
                        ],
                        [
                            "feats.size(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_364": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "scores.size(1)",
                            "Call"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "tag_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats.size(2)",
                            "Call"
                        ],
                        [
                            "feats.size(2)",
                            "Call"
                        ],
                        [
                            "scores.size(2)",
                            "Call"
                        ],
                        [
                            "feats.size(2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nbest",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_23": {
                "input": {
                    "value": "vec - max_score.expand_as(vec)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "dataProcess.py": {
        "torch": {}
    },
    "main.py": {
        "torch": {}
    },
    "opinionMining.py": {
        "torch": {
            "Parameter_32": {
                "variable": {
                    "value": "self.targetSyn_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.target_hidden_dim, self.bert_encoder_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_33": {
                "variable": {
                    "value": "self.targetSyn_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.target_hidden_dim, self.bert_encoder_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.relationSyn_u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.relation_hidden_dim, self.bert_encoder_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.relationSyn_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.relation_hidden_dim, self.bert_encoder_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_43": {
                "variable": {
                    "value": "self.targetHidden2Tag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.label_size + 2, self.target_hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_44": {
                "variable": {
                    "value": "self.targetHidden2Tag_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, self.label_size + 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_54": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_55": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_92": {
                "variable": {
                    "value": "relation_loss_function",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([0.01, 1.0]).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_95": {
                "variable": {
                    "value": "relationScoreLoss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[1 - relationScoreLoss, relationScoreLoss]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_123": {
                "variable": {
                    "value": "t_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_input_ids.size(0)",
                            "Call"
                        ],
                        [
                            "all_input_ids.size(0)",
                            "Call"
                        ],
                        [
                            "all_input_ids.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_input_ids.size(1)",
                            "Call"
                        ],
                        [
                            "all_input_ids.size(1)",
                            "Call"
                        ],
                        [
                            "all_input_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_input_ids.size(1)",
                            "Call"
                        ],
                        [
                            "all_input_ids.size(1)",
                            "Call"
                        ],
                        [
                            "all_input_ids.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_124": {
                "variable": {
                    "value": "r_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_input_ids.size(0)",
                            "Call"
                        ],
                        [
                            "all_input_ids.size(0)",
                            "Call"
                        ],
                        [
                            "all_input_ids.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_input_ids.size(1)",
                            "Call"
                        ],
                        [
                            "all_input_ids.size(1)",
                            "Call"
                        ],
                        [
                            "all_input_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_input_ids.size(1)",
                            "Call"
                        ],
                        [
                            "all_input_ids.size(1)",
                            "Call"
                        ],
                        [
                            "all_input_ids.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_133": {
                "variable": {
                    "value": "target_weighted",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(batch_size, seq_len, seq_len)",
                            "Call"
                        ],
                        [
                            "r_tensor.cuda()",
                            "Call"
                        ],
                        [
                            "r_tensor * r_temp",
                            "BinOp"
                        ],
                        [
                            "relationScore * maskMatrix.float()",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "sequence_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_encoder_layers[-1]",
                            "Subscript"
                        ],
                        [
                            "self.dropout(sequence_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_134": {
                "variable": {
                    "value": "target_div",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(batch_size, seq_len, seq_len)",
                            "Call"
                        ],
                        [
                            "r_tensor.cuda()",
                            "Call"
                        ],
                        [
                            "r_tensor * r_temp",
                            "BinOp"
                        ],
                        [
                            "relationScore * maskMatrix.float()",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_138": {
                "variable": {
                    "value": "target_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_weighted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(r_tensor, sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "target_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(r_tensor, 2)",
                            "Call"
                        ],
                        [
                            "target_div + targetIfZero",
                            "BinOp"
                        ],
                        [
                            "target_div.unsqueeze(2).repeat(1, 1, self.bert_encoder_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_140": {
                "variable": {
                    "value": "target_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(sequence_output, self.targetSyn_s, None) + F.linear(target_r, self.targetSyn_r, None)",
                            "BinOp"
                        ],
                        [
                            "F.tanh(target_hidden)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_143": {
                "variable": {
                    "value": "relation_weighted",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(batch_size, seq_len, seq_len)",
                            "Call"
                        ],
                        [
                            "t_tensor.cuda()",
                            "Call"
                        ],
                        [
                            "tag_score_final * temp_T_tensor",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "sequence_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_encoder_layers[-1]",
                            "Subscript"
                        ],
                        [
                            "self.dropout(sequence_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_144": {
                "variable": {
                    "value": "relation_div",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(batch_size, seq_len, seq_len)",
                            "Call"
                        ],
                        [
                            "t_tensor.cuda()",
                            "Call"
                        ],
                        [
                            "tag_score_final * temp_T_tensor",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_148": {
                "variable": {
                    "value": "relation_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relation_weighted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(t_tensor, sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "relation_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(t_tensor, 2)",
                            "Call"
                        ],
                        [
                            "relation_div + relationIfZero",
                            "BinOp"
                        ],
                        [
                            "relation_div.unsqueeze(2).repeat(1, 1, self.bert_encoder_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_150": {
                "variable": {
                    "value": "relation_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relation_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(sequence_output, self.relationSyn_s, None) + F.linear(relation_a, self.relationSyn_u, None)",
                            "BinOp"
                        ],
                        [
                            "F.tanh(relation_hidden)",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_153": {
                "variable": {
                    "value": "targetPredictInput",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(sequence_output, self.targetSyn_s, None) + F.linear(target_r, self.targetSyn_r, None)",
                            "BinOp"
                        ],
                        [
                            "F.tanh(target_hidden)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.targetHidden2Tag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.targetHidden2Tag_b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_162": {
                "variable": {
                    "value": "temp_T_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_input_ids.size(0)",
                            "Call"
                        ],
                        [
                            "all_input_ids.size(0)",
                            "Call"
                        ],
                        [
                            "all_input_ids.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_input_ids.size(1)",
                            "Call"
                        ],
                        [
                            "all_input_ids.size(1)",
                            "Call"
                        ],
                        [
                            "all_input_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_input_ids.size(1)",
                            "Call"
                        ],
                        [
                            "all_input_ids.size(1)",
                            "Call"
                        ],
                        [
                            "all_input_ids.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_207": {
                "variable": {
                    "value": "temp_T_tensor[idx, Abegin:Aend, Abegin:Aend]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "Aend - Abegin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "Aend - Abegin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_209": {
                "variable": {
                    "value": "temp_T_tensor[idx, Obegin:Oend, Obegin:Oend]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "Oend - Obegin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "Oend - Obegin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_139": {
                "input": {
                    "value": "target_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.div(target_weighted, target_div)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.targetSyn_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "linear_149": {
                "input": {
                    "value": "relation_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.div(relation_weighted, relation_div)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.relationSyn_u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "ones_189": {
                "variable": {
                    "value": "temp_T_tensor[idx, Abegin:Aend, Abegin:Aend]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "Aend - Abegin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "Aend - Abegin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_193": {
                "variable": {
                    "value": "temp_T_tensor[idx, Obegin:Oend, Obegin:Oend]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "Oend - Obegin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "Oend - Obegin",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "relationAttention.py": {
        "torch": {
            "Parameter_17": {
                "variable": {
                    "value": "self.w_ta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.relation_attention_dim, self.relation_hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_18": {
                "variable": {
                    "value": "self.w_ja",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.relation_attention_dim, self.relation_hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_19": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 1, 1, self.relation_attention_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_20": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, self.relation_attention_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_27": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_40": {
                "variable": {
                    "value": "ta_result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relation_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.w_ta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "linear_42": {
                "variable": {
                    "value": "ja_result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relation_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.w_ja",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "tanh_44": {
                "variable": {
                    "value": "attention_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ta_result + ja_result + self.b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_45": {
                "variable": {
                    "value": "attention_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(ta_result + ja_result + self.b)",
                            "Call"
                        ],
                        [
                            "F.linear(attention_alpha, self.v, None)",
                            "Call"
                        ],
                        [
                            "self.softmax(attention_alpha.view(batchSize, seqLen, seqLen))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        }
    }
}