{
    "baselines/common/distributions.py": {
        "tensorflow": {
            "get_default_session_290": {
                "variable": {
                    "value": "Xval",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_290": {
                "variable": {
                    "value": "Xval",
                    "type": "variable",
                    "possible_values": []
                },
                "main": {
                    "value": "pd.sample()",
                    "type": "Call",
                    "possible_values": []
                },
                "feed_dict": {
                    "value": "{M: Mval}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "get_variable_88": {
                "variable": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "logstd",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self.size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_89": {
                "variable": {
                    "value": "pdparam",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mean, mean * 0.0 + logstd]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_145": {
                "variable": {
                    "value": "one_hot_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.logits.get_shape().as_list()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_152": {
                "variable": {
                    "value": "ea0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logits - tf.reduce_max(self.logits, axis=-1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - tf.reduce_max(self.logits, axis=-1, keep_dims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_153": {
                "variable": {
                    "value": "ea1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other.logits - tf.reduce_max(other.logits, axis=-1, keep_dims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_154": {
                "variable": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ea0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(a0)",
                            "Call"
                        ],
                        [
                            "tf.exp(a0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_155": {
                "variable": {
                    "value": "z1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ea1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(a1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_160": {
                "variable": {
                    "value": "ea0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logits - tf.reduce_max(self.logits, axis=-1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - tf.reduce_max(self.logits, axis=-1, keep_dims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_161": {
                "variable": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ea0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(a0)",
                            "Call"
                        ],
                        [
                            "tf.exp(a0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "split_194": {
                "variable": {
                    "value": "(mean, logstd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "len(flat.shape) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_197": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='logstd', shape=[1, self.size], initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_220": {
                "variable": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "prepend_shape + self.param_shape()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "placeholder_47": {
                "dtype": {
                    "value": "self.sample_dtype()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "prepend_shape + self.sample_shape()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "argmax_140": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_146": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "one_hot_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(x, self.logits.get_shape().as_list()[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_157": {
                "input_tensor": {
                    "value": "p0 * (a0 - tf.log(z0) - a1 + tf.log(z1))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_163": {
                "input_tensor": {
                    "value": "p0 * (tf.log(z0) - a0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_166": {
                "input": {
                    "value": "self.logits - tf.log(-tf.log(u))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_178": {
                "x": {
                    "value": "tf.stack([p.mode() for p in self.categoricals], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_180": {
                "inputs": {
                    "value": "[p.neglogp(px) for (p, px) in zip(self.categoricals, tf.unstack(x, axis=-1))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "add_n_182": {
                "inputs": {
                    "value": "[p.kl(q) for (p, q) in zip(self.categoricals, other.categoricals)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "add_n_184": {
                "inputs": {
                    "value": "[p.entropy() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cast_186": {
                "x": {
                    "value": "tf.stack([p.sample() for p in self.categoricals], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_208": {
                "input_tensor": {
                    "value": "other.logstd - self.logstd + (tf.square(self.std) + tf.square(self.mean - other.mean)) / (2.0 * tf.square(other.std)) - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_210": {
                "input_tensor": {
                    "value": "self.logstd + 0.5 * np.log(2.0 * np.pi * np.e)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "round_224": {
                "x": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_226": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.logits, labels=tf.to_float(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_230": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.logits, labels=self.ps)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "to_float_233": {
                "x": {
                    "value": "math_ops.less(u, self.ps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_150": {
                "input_tensor": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_151": {
                "input_tensor": {
                    "value": "other.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_159": {
                "input_tensor": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_165": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_178": {
                "values": {
                    "value": "[p.mode() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_186": {
                "values": {
                    "value": "[p.sample() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_205": {
                "input_tensor": {
                    "value": "self.logstd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_226": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.to_float(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_228": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.logits, labels=self.ps)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_230": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_232": {
                "input": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_233": {
                "x": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(self.logits))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.shape(self.ps))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_257": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_initializer_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_166": {
                "x": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(self.logits))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.shape(self.ps))",
                            "Call"
                        ]
                    ]
                }
            },
            "split_174": {
                "value": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "nvec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 2, 3]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_228": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_157": {
                "x": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(ea0, axis=-1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(ea0, axis=-1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_163": {
                "x": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(ea0, axis=-1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(ea0, axis=-1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_203": {
                "input_tensor": {
                    "value": "tf.square((x - self.mean) / self.std)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "to_float_204": {
                "x": {
                    "value": "tf.shape(x)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_212": {
                "input": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_226": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unstack_180": {
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "square_203": {
                "x": {
                    "value": "(x - self.mean) / self.std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_204": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_208": {
                "x": {
                    "value": "other.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/common/misc_util.py": {
        "tensorflow": {
            "set_random_seed_75": {
                "seed": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/common/mpi_adam.py": {
        "tensorflow": {
            "Variable_57": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.random.randn(3).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_58": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.random.randn(2, 5).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_62": {
                "variable": {
                    "value": "update_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "stepsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                }
            },
            "set_random_seed_55": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_default_session_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_65": {
                "main": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_random_seed_69": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_default_session_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_70": {
                "main": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_59": {
                "input_tensor": {
                    "value": "tf.sin(b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_59": {
                "x": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.random.randn(3).astype('float32'))",
                            "Call"
                        ],
                        [
                            "stepsize * np.sqrt(1 - self.beta2 ** self.t) / (1 - self.beta1 ** self.t)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_59": {
                "x": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.random.randn(2, 5).astype('float32'))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/common/mpi_running_mean_std.py": {
        "tensorflow": {
            "get_variable_8": {
                "variable": {
                    "value": "self._sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "()",
                            "MethodArgument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "runningsum",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_13": {
                "variable": {
                    "value": "self._sumsq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "()",
                            "MethodArgument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(epsilon)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "runningsumsq",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_18": {
                "variable": {
                    "value": "self._count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(epsilon)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "count",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "to_float_25": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self._sum / self._count",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_26": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(tf.to_float(self._sumsq / self._count) - tf.square(self.mean), 0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_28": {
                "variable": {
                    "value": "newsum",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_29": {
                "variable": {
                    "value": "newsumsq",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "var",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_30": {
                "variable": {
                    "value": "newcount",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "count",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_26": {
                "x": {
                    "value": "tf.to_float(self._sumsq / self._count) - tf.square(self.mean)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_11": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_16": {
                "value": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_21": {
                "value": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "to_float_26": {
                "x": {
                    "value": "self._sumsq / self._count",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_26": {
                "x": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_add_32": {
                "ref": {
                    "value": "self._sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "newsum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=self.shape, dtype=tf.float64, name='sum')",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_add_33": {
                "ref": {
                    "value": "self._sumsq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "newsumsq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=self.shape, dtype=tf.float64, name='var')",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_add_34": {
                "ref": {
                    "value": "self._count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "newcount",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=[], dtype=tf.float64, name='count')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/common/tests/test_tf_util.py": {
        "tensorflow": {
            "placeholder_12": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_13": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_28": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_27": {
                "name_or_scope": {
                    "value": "other",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/common/tf_util.py": {
        "tensorflow": {
            "cond_20": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.cast(condition, 'bool')",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : then_expression",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : else_expression",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "ConfigProto_55": {
                "variable": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": []
                },
                "inter_op_parallelism_threads": {
                    "value": "num_cpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(os.getenv('RCALL_NUM_CPU', multiprocessing.cpu_count()))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "intra_op_parallelism_threads": {
                    "value": "num_cpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(os.getenv('RCALL_NUM_CPU', multiprocessing.cpu_count()))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gradients_214": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_41": {
                "condition": {
                    "value": "tf.abs(x) < delta",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.square(x) * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "delta * (tf.abs(x) - 0.5 * delta)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_default_session_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_80": {
                "main": {
                    "value": "tf.variables_initializer(new_variables)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_110": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "filter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[filter_size[0], filter_size[1], int(x.get_shape()[3]), num_filters]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(-w_bound, w_bound)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "collections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_112": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 1, num_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "collections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "group_175": {
                "variable": {
                    "value": "self.update_group",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*updates",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "concat_217": {
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(grad if grad is not None else tf.zeros_like(v), [numel(v)]) for (v, grad) in zip(var_list, grads)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "placeholder_228": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[total_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "group_235": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*assigns",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "concat_242": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(v, [numel(v)]) for v in var_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "placeholder_255": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.name",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_263": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, intprod(x.get_shape().as_list()[1:])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_20": {
                "x": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "InteractiveSession_60": {
                "config": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(inter_op_parallelism_threads=num_cpu, intra_op_parallelism_threads=num_cpu)",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Session_62": {
                "config": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(inter_op_parallelism_threads=num_cpu, intra_op_parallelism_threads=num_cpu)",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variables_initializer_80": {
                "var_list": {
                    "value": "new_variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "set(tf.global_variables()) - ALREADY_INITIALIZED",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_91": {
                "value": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(*shape).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "out * (std / np.sqrt(np.square(out).sum(axis=axis, keepdims=True)))",
                            "BinOp"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=dtype, shape=shape, name=name)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_96": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.name",
                            "Attribute"
                        ]
                    ]
                }
            },
            "get_default_session_238": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_238": {
                "main": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "feed_dict": {
                    "value": "{self.theta: theta}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "get_default_session_245": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_245": {
                "main": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_42": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_43": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_uniform_initializer_110": {
                "minval": {
                    "value": "-w_bound",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "w_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sqrt(6.0 / (fan_in + fan_out))",
                            "Call"
                        ]
                    ]
                }
            },
            "image_116": {
                "name": {
                    "value": "summary_tag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "data": {
                    "value": "tf.transpose(tf.reshape(w, [filter_size[0], filter_size[1], -1, 1]), [2, 0, 1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "max_images": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_121": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', filter_shape, dtype, tf.random_uniform_initializer(-w_bound, w_bound), collections=collections)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, stride[0], stride[1], 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_default_session_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_194": {
                "main": {
                    "value": "self.outputs_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "feed_dict": {
                    "value": "feed_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "clip_by_norm_216": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "clip_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "abs_44": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_initializer_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_117": {
                "a": {
                    "value": "tf.reshape(w, [filter_size[0], filter_size[1], -1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[2, 0, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_218": {
                "tensor": {
                    "value": "grad if grad is not None else tf.zeros_like(v)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numel(v)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_233": {
                "ref": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vars",
                            "Name"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.reshape(theta[start:start + size], shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_117": {
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', filter_shape, dtype, tf.random_uniform_initializer(-w_bound, w_bound), collections=collections)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[filter_size[0], filter_size[1], -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_233": {
                "tensor": {
                    "value": "theta[start:start + size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_242": {
                "tensor": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vars",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "[numel(v)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_218": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vars",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/her/actor_critic.py": {
        "tensorflow": {
            "concat_31": {
                "variable": {
                    "value": "input_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[o, g]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_39": {
                "variable": {
                    "value": "input_Q",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[o, g, self.pi_tf / self.max_u]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_42": {
                "variable": {
                    "value": "input_Q",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[o, g, self.u_tf / self.max_u]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "pi",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_37": {
                "name_or_scope": {
                    "value": "Q",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_35": {
                "x": {
                    "value": "nn(input_pi, [self.hidden] * self.layers + [self.dimu])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/her/ddpg.py": {
        "tensorflow": {
            "get_collection_310": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope + '/' + scope",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_315": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope + '/' + scope",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_default_session_321": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_339": {
                "variable": {
                    "value": "batch_tf[r]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch_tf['r']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_340": {
                "variable": {
                    "value": "batch_tf[w]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch_tf['w']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_362": {
                "variable": {
                    "value": "target_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "batch_tf['r'] + self.gamma * target_Q_pi_tf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "*clip_range",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "square_365": {
                "variable": {
                    "value": "self.errors_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.td_error_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_366": {
                "variable": {
                    "value": "self.errors_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "batch_tf['w'] * self.errors_tf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_367": {
                "variable": {
                    "value": "self.Q_loss_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.errors_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_371": {
                "variable": {
                    "value": "Q_grads_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.Q_loss_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self._vars('main/Q')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_372": {
                "variable": {
                    "value": "pi_grads_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.pi_loss_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self._vars('main/pi')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "InteractiveSession_323": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_394": {
                "var_list": {
                    "value": "self._global_vars('')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "run_394": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_326": {
                "name_or_scope": {
                    "value": "o_stats",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_330": {
                "name_or_scope": {
                    "value": "g_stats",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_343": {
                "name_or_scope": {
                    "value": "main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_348": {
                "name_or_scope": {
                    "value": "target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stop_gradient_364": {
                "input": {
                    "value": "target_tf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(batch_tf['r'] + self.gamma * target_Q_pi_tf, *clip_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_369": {
                "input_tensor": {
                    "value": "self.main.Q_pi_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_370": {
                "input_tensor": {
                    "value": "tf.square(self.main.pi_tf / self.max_u)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_436": {
                "ref": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "placeholder_90": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_370": {
                "x": {
                    "value": "self.main.pi_tf / self.max_u",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/her/normalizer.py": {
        "tensorflow": {
            "get_variable_31": {
                "variable": {
                    "value": "self.sum_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.local_sum.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_34": {
                "variable": {
                    "value": "self.sumsq_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.local_sumsq.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "sumsq",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_37": {
                "variable": {
                    "value": "self.count_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.local_count.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "count",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_40": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_43": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "std",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "self.count_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "count_pl",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "self.sum_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "sum_pl",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "self.sumsq_pl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "sumsq_pl",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_50": {
                "variable": {
                    "value": "self.update_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "self.count_tf.assign_add(self.count_pl)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.sum_tf.assign_add(self.sum_pl)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_55": {
                "variable": {
                    "value": "self.recompute_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.assign(self.mean, self.sum_tf / self.count_tf)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.assign(self.std, tf.sqrt(tf.maximum(tf.square(self.eps), self.sumsq_tf / self.count_tf - tf.square(self.sum_tf / self.count_tf))))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_124": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_77": {
                "t": {
                    "value": "(v - mean) / std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-clip_range",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "clip_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.default_clip_range",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_default_session_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_56": {
                "ref": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.sum_tf / self.count_tf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_57": {
                "ref": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.sqrt(tf.maximum(tf.square(self.eps), self.sumsq_tf / self.count_tf - tf.square(self.sum_tf / self.count_tf)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_125": {
                "shape": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_initializer_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_initializer_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_initializer_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_57": {
                "x": {
                    "value": "tf.maximum(tf.square(self.eps), self.sumsq_tf / self.count_tf - tf.square(self.sum_tf / self.count_tf))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_57": {
                "x": {
                    "value": "tf.square(self.eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.sumsq_tf / self.count_tf - tf.square(self.sum_tf / self.count_tf)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_58": {
                "x": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_59": {
                "x": {
                    "value": "self.sum_tf / self.count_tf",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/her/util.py": {
        "tensorflow": {
            "concat_54": {
                "values": {
                    "value": "[tf.reshape(grad, [U.numel(v)]) for (v, grad) in zip(var_list, grads)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_63": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=input, units=size, kernel_initializer=tf.contrib.layers.xavier_initializer(), reuse=reuse, name=name + '_' + str(i))",
                            "Call"
                        ],
                        [
                            "activation(input)",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, [-1])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name + '_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_72": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=input, units=size, kernel_initializer=tf.contrib.layers.xavier_initializer(), reuse=reuse, name=name + '_' + str(i))",
                            "Call"
                        ],
                        [
                            "activation(input)",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_155": {
                "tensor": {
                    "value": "tf.cast(source, target.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "episode_batch['u'].shape",
                            "Attribute"
                        ],
                        [
                            "[1] * (dim - 1) + [-1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_155": {
                "x": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "target.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_54": {
                "tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[U.numel(v)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/logger.py": {
        "tensorflow": {
            "summary_iterator_462": {
                "path": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fnames",
                            "Name"
                        ]
                    ]
                }
            },
            "as_bytes_155": {
                "bytes_or_text": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(osp.abspath(dir), prefix)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}