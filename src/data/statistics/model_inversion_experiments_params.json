{
    "Utils/SVC_Utils.py": {
        "sklearn": {
            "PCA_26": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_components",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_components",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MinMaxScaler_27": {
                "variable": {
                    "value": "scaling",
                    "type": "variable",
                    "possible_values": []
                },
                "feature_range": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "PCA_73": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "180",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MinMaxScaler_74": {
                "variable": {
                    "value": "scaling",
                    "type": "variable",
                    "possible_values": []
                },
                "feature_range": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "make_pipeline_75": {
                "variable": {
                    "value": "pipe_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "*steps": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PCA(n_components=n_components)",
                            "Call"
                        ],
                        [
                            "PCA(n_components=180)",
                            "Call"
                        ]
                    ]
                },
                "memory": {
                    "value": "scaling",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MinMaxScaler(feature_range=(-1, 1))",
                            "Call"
                        ],
                        [
                            "MinMaxScaler(feature_range=(-1, 1))",
                            "Call"
                        ]
                    ]
                },
                "verbose": {
                    "value": "svm.SVC(C=params['svc__C'], gamma=params['svc__gamma'], probability=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SVC_30": {
                "variable": {
                    "value": "svc",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_range",
                            "variable"
                        ],
                        [
                            "i in range(len(clfs))",
                            "Call"
                        ],
                        [
                            "i in range(len(class_accuracies))",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gamma_range",
                            "variable"
                        ],
                        [
                            "j in range(len(targets))",
                            "Call"
                        ]
                    ]
                }
            },
            "make_pipeline_31": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "*steps": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PCA(n_components=n_components)",
                            "Call"
                        ],
                        [
                            "PCA(n_components=180)",
                            "Call"
                        ]
                    ]
                },
                "memory": {
                    "value": "scaling",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MinMaxScaler(feature_range=(-1, 1))",
                            "Call"
                        ],
                        [
                            "MinMaxScaler(feature_range=(-1, 1))",
                            "Call"
                        ]
                    ]
                },
                "verbose": {
                    "value": "svc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "svm.SVC(C=i, gamma=j)",
                            "Call"
                        ]
                    ]
                }
            },
            "SVC_75": {
                "C": {
                    "value": "params['svc__C']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "pipe.get_params(deep=True)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "params['svc__gamma']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "pipe.get_params(deep=True)",
                            "Call"
                        ]
                    ]
                },
                "probability": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "eq_48": {
                "variable": {
                    "value": "num_correct",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(preds)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_48": {
                "variable": {
                    "value": "num_correct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_48": {
                "ndarray": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf.predict(inputs)",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "Utils/metrics.py": {
        "sklearn": {
            "roc_curve_236": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([])",
                            "Call"
                        ],
                        [
                            "np.concatenate((labels, np.ones(train_size)), axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate((labels, np.zeros(out_size)), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([])",
                            "Call"
                        ],
                        [
                            "np.concatenate((predictions, train_predictions.detach().cpu().numpy()), axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate((predictions, out_predictions.detach().cpu().numpy()), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "pos_label": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "auc_237": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roc_curve(labels, predictions, pos_label=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roc_curve(labels, predictions, pos_label=1)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "device_11": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "sort_100": {
                "variable": {
                    "value": "(train_sort, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "train_posteriors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(target.predict_proba(traininputs)).float()",
                            "Call"
                        ],
                        [
                            "F.softmax(target_net(train_imgs.detach()), dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(target_net(train_imgs.detach()), dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(target_net(train_imgs.detach()), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_103": {
                "variable": {
                    "value": "(out_sort, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out_posteriors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(target.predict_proba(outinputs)).float()",
                            "Call"
                        ],
                        [
                            "F.softmax(target_net(out_imgs.detach()), dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(target_net(out_imgs.detach()), dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(target_net(out_imgs.detach()), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_121": {
                "variable": {
                    "value": "train_lbl",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "mini_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_imgs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "train_imgs.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_122": {
                "variable": {
                    "value": "out_lbl",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "mini_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_imgs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "train_imgs.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_125": {
                "variable": {
                    "value": "train_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.squeeze(attack_net(train_top_k))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_126": {
                "variable": {
                    "value": "out_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.squeeze(attack_net(out_top_k))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_188": {
                "variable": {
                    "value": "train_posteriors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_net(train_imgs.detach())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_189": {
                "variable": {
                    "value": "out_posteriors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_net(out_imgs.detach())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_191": {
                "variable": {
                    "value": "(train_sort, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "train_posteriors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(target.predict_proba(traininputs)).float()",
                            "Call"
                        ],
                        [
                            "F.softmax(target_net(train_imgs.detach()), dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(target_net(train_imgs.detach()), dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(target_net(train_imgs.detach()), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_194": {
                "variable": {
                    "value": "(out_sort, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out_posteriors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(target.predict_proba(outinputs)).float()",
                            "Call"
                        ],
                        [
                            "F.softmax(target_net(out_imgs.detach()), dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(target_net(out_imgs.detach()), dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(target_net(out_imgs.detach()), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_204": {
                "variable": {
                    "value": "train_lbl",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "train_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_imgs.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_205": {
                "variable": {
                    "value": "out_lbl",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_imgs.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_208": {
                "variable": {
                    "value": "train_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.squeeze(attack_net(train_top_k))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_209": {
                "variable": {
                    "value": "out_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.squeeze(attack_net(out_top_k))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_265": {
                "variable": {
                    "value": "train_posteriors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_net(train_imgs.detach())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_266": {
                "variable": {
                    "value": "out_posteriors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_net(out_imgs.detach())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_268": {
                "variable": {
                    "value": "(train_sort, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "train_posteriors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(target.predict_proba(traininputs)).float()",
                            "Call"
                        ],
                        [
                            "F.softmax(target_net(train_imgs.detach()), dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(target_net(train_imgs.detach()), dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(target_net(train_imgs.detach()), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_271": {
                "variable": {
                    "value": "(out_sort, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out_posteriors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(target.predict_proba(outinputs)).float()",
                            "Call"
                        ],
                        [
                            "F.softmax(target_net(out_imgs.detach()), dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(target_net(out_imgs.detach()), dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(target_net(out_imgs.detach()), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_91": {
                "variable": {
                    "value": "train_posteriors",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target.predict_proba(traininputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_92": {
                "variable": {
                    "value": "out_posteriors",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target.predict_proba(outinputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_95": {
                "variable": {
                    "value": "train_posteriors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_net(train_imgs.detach())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_96": {
                "variable": {
                    "value": "out_posteriors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_net(out_imgs.detach())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_125": {
                "input": {
                    "value": "attack_net(train_top_k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_126": {
                "input": {
                    "value": "attack_net(out_top_k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_208": {
                "input": {
                    "value": "attack_net(train_top_k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_209": {
                "input": {
                    "value": "attack_net(out_top_k)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "cyphercat/metrics.py": {
        "sklearn": {},
        "torch": {
            "device_10": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "sort_141": {
                "variable": {
                    "value": "(train_sort, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "train_posteriors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(target.predict_proba(traininputs)).float()",
                            "Call"
                        ],
                        [
                            "fcnal.softmax(target_model(train_imgs.detach()), dim=1)",
                            "Call"
                        ],
                        [
                            "fcnal.softmax(target_model(train_imgs.detach()), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_144": {
                "variable": {
                    "value": "(out_sort, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out_posteriors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(target.predict_proba(outinputs)).float()",
                            "Call"
                        ],
                        [
                            "fcnal.softmax(target_model(out_imgs.detach()), dim=1)",
                            "Call"
                        ],
                        [
                            "fcnal.softmax(target_model(out_imgs.detach()), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_161": {
                "variable": {
                    "value": "train_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attack_model(train_top_k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_162": {
                "variable": {
                    "value": "out_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attack_model(out_top_k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_230": {
                "variable": {
                    "value": "train_posteriors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_model(train_imgs.detach())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_232": {
                "variable": {
                    "value": "out_posteriors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_model(out_imgs.detach())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_235": {
                "variable": {
                    "value": "(train_sort, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "train_posteriors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(target.predict_proba(traininputs)).float()",
                            "Call"
                        ],
                        [
                            "fcnal.softmax(target_model(train_imgs.detach()), dim=1)",
                            "Call"
                        ],
                        [
                            "fcnal.softmax(target_model(train_imgs.detach()), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_238": {
                "variable": {
                    "value": "(out_sort, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out_posteriors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(target.predict_proba(outinputs)).float()",
                            "Call"
                        ],
                        [
                            "fcnal.softmax(target_model(out_imgs.detach()), dim=1)",
                            "Call"
                        ],
                        [
                            "fcnal.softmax(target_model(out_imgs.detach()), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_128": {
                "variable": {
                    "value": "train_posteriors",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target.predict_proba(traininputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_130": {
                "variable": {
                    "value": "out_posteriors",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target.predict_proba(outinputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_134": {
                "variable": {
                    "value": "train_posteriors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_model(train_imgs.detach())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_136": {
                "variable": {
                    "value": "out_posteriors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_model(out_imgs.detach())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cyphercat/train.py": {
        "sklearn": {},
        "torch": {
            "device_12": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "eye_26": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_409": {
                "variable": {
                    "value": "train_posteriors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "learner(data)",
                            "Call"
                        ],
                        [
                            "target_model(train_imgs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_412": {
                "variable": {
                    "value": "train_lbl",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "mini_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_data.shape[0]",
                            "Subscript"
                        ],
                        [
                            "in_data.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squeeze_416": {
                "variable": {
                    "value": "train_inference",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_inference",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inf_model(train_posteriors, label_to_onehot(train_lbl).to(device))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(train_inference)",
                            "Call"
                        ],
                        [
                            "inf_model(train_posteriors, label_to_onehot(train_lbls).to(device))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(train_inference)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sort_169": {
                "variable": {
                    "value": "(train_sort, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "train_posteriors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fcnal.softmax(shadow_model(train_data), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(in_preds).float()",
                            "Call"
                        ],
                        [
                            "fcnal.softmax(target_model(in_data), dim=1)",
                            "Call"
                        ],
                        [
                            "fcnal.softmax(outputs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_173": {
                "variable": {
                    "value": "(out_sort, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out_posteriors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fcnal.softmax(shadow_model(out_data), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(out_preds).float()",
                            "Call"
                        ],
                        [
                            "fcnal.softmax(target_model(out_data), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_183": {
                "variable": {
                    "value": "train_lbl",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "mini_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_data.shape[0]",
                            "Subscript"
                        ],
                        [
                            "in_data.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_184": {
                "variable": {
                    "value": "out_lbl",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_mini_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_data.shape[0]",
                            "Subscript"
                        ],
                        [
                            "out_data.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squeeze_188": {
                "variable": {
                    "value": "train_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attack_model(train_top_k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_189": {
                "variable": {
                    "value": "out_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attack_model(out_top_k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_359": {
                "variable": {
                    "value": "train_lbl",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "mini_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_data.shape[0]",
                            "Subscript"
                        ],
                        [
                            "in_data.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_360": {
                "variable": {
                    "value": "out_lbl",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_mini_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_data.shape[0]",
                            "Subscript"
                        ],
                        [
                            "out_data.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "softmax_362": {
                "variable": {
                    "value": "train_posteriors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_model(in_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_363": {
                "variable": {
                    "value": "out_posteriors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_model(out_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_365": {
                "variable": {
                    "value": "(train_sort, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "train_posteriors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fcnal.softmax(shadow_model(train_data), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(in_preds).float()",
                            "Call"
                        ],
                        [
                            "fcnal.softmax(target_model(in_data), dim=1)",
                            "Call"
                        ],
                        [
                            "fcnal.softmax(outputs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_366": {
                "variable": {
                    "value": "(out_sort, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out_posteriors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fcnal.softmax(shadow_model(out_data), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(out_preds).float()",
                            "Call"
                        ],
                        [
                            "fcnal.softmax(target_model(out_data), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_384": {
                "variable": {
                    "value": "train_inference",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_inference",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inf_model(train_posteriors, label_to_onehot(train_lbl).to(device))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(train_inference)",
                            "Call"
                        ],
                        [
                            "inf_model(train_posteriors, label_to_onehot(train_lbls).to(device))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(train_inference)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_388": {
                "variable": {
                    "value": "out_inference",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_inference",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inf_model(out_posteriors, label_to_onehot(out_lbl).to(device))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(out_inference)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_150": {
                "variable": {
                    "value": "train_posteriors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shadow_model(train_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_152": {
                "variable": {
                    "value": "out_posteriors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shadow_model(out_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_160": {
                "variable": {
                    "value": "train_posteriors",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "in_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shadow_model.predict_proba(traininputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_165": {
                "variable": {
                    "value": "out_posteriors",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "out_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shadow_model.predict_proba(outinputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "KLDivLoss_245": {
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_softmax_246": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_247": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_249": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "true_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "true_labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_391": {
                "input": {
                    "value": "train_inference > 0.5",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_392": {
                "input": {
                    "value": "out_inference < 0.5",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "set_grad_enabled_274": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_279": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "cyphercat/utils/svc_utils.py": {
        "sklearn": {
            "PCA_29": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_components",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_components",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MinMaxScaler_30": {
                "variable": {
                    "value": "scaling",
                    "type": "variable",
                    "possible_values": []
                },
                "feature_range": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "PCA_81": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "180",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MinMaxScaler_82": {
                "variable": {
                    "value": "scaling",
                    "type": "variable",
                    "possible_values": []
                },
                "feature_range": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "make_pipeline_83": {
                "variable": {
                    "value": "pipe_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "*steps": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PCA(n_components=n_components)",
                            "Call"
                        ],
                        [
                            "PCA(n_components=180)",
                            "Call"
                        ]
                    ]
                },
                "memory": {
                    "value": "scaling",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MinMaxScaler(feature_range=(-1, 1))",
                            "Call"
                        ],
                        [
                            "MinMaxScaler(feature_range=(-1, 1))",
                            "Call"
                        ]
                    ]
                },
                "verbose": {
                    "value": "svm.SVC(C=params['svc__C'], gamma=params['svc__gamma'], probability=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SVC_33": {
                "variable": {
                    "value": "svc",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_range",
                            "variable"
                        ],
                        [
                            "i in range(len(clfs))",
                            "Call"
                        ],
                        [
                            "i in range(len(class_accuracies))",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gamma_range",
                            "variable"
                        ],
                        [
                            "j in range(len(targets))",
                            "Call"
                        ]
                    ]
                }
            },
            "make_pipeline_34": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "*steps": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PCA(n_components=n_components)",
                            "Call"
                        ],
                        [
                            "PCA(n_components=180)",
                            "Call"
                        ]
                    ]
                },
                "memory": {
                    "value": "scaling",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MinMaxScaler(feature_range=(-1, 1))",
                            "Call"
                        ],
                        [
                            "MinMaxScaler(feature_range=(-1, 1))",
                            "Call"
                        ]
                    ]
                },
                "verbose": {
                    "value": "svc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "svm.SVC(C=i, gamma=j)",
                            "Call"
                        ]
                    ]
                }
            },
            "SVC_83": {
                "C": {
                    "value": "params['svc__C']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "pipe.get_params(deep=True)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "params['svc__gamma']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "pipe.get_params(deep=True)",
                            "Call"
                        ]
                    ]
                },
                "probability": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "eq_53": {
                "variable": {
                    "value": "num_correct",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(preds)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_53": {
                "variable": {
                    "value": "num_correct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_53": {
                "ndarray": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf.predict(inputs)",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "Classification_baselines/LibriSpeech/LS_UTILS/Data_load.py": {
        "tensorflow": {
            "Exists_110": {
                "filename": {
                    "value": "os.path.join(data_dir, extracted_data)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Utils/data_downloaders.py": {
        "tensorflow": {
            "Exists_182": {
                "filename": {
                    "value": "os.path.join(data_dir, extracted_data)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Utils/datasets.py": {
        "torch": {}
    },
    "Utils/models.py": {
        "torch": {
            "load_432": {
                "variable": {
                    "value": "chpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, kernel_size=6, stride=3, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "self.conv_block_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(n_in, n_hidden, kernel_size=5, stride=1, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.conv_block_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(n_hidden, 2 * n_hidden, kernel_size=5, stride=1, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * n_hidden * (self.size // 4) * (self.size // 4)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * n_hidden",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * n_hidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "n_out",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "n_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_112": {
                "variable": {
                    "value": "self.conv_block_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(n_in, n_hidden, kernel_size=5, stride=1, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_118": {
                "variable": {
                    "value": "self.conv_block_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(n_hidden, 2 * n_hidden, kernel_size=5, stride=1, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_126": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(2 * n_hidden * fc_feature_size * fc_feature_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_127": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * n_hidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "n_out",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "n_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_142": {
                "variable": {
                    "value": "self.cnn_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(n_input, n_out, kernel_size, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_156": {
                "variable": {
                    "value": "self.down_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_160": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(8 * in_size, n_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_164": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_175": {
                "variable": {
                    "value": "self.down_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_179": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(5264, n_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_183": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_196": {
                "variable": {
                    "value": "self.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_198": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "n_out",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "n_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_201": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.hidden(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_215": {
                "variable": {
                    "value": "self.conv_block_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, n_filters, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_223": {
                "variable": {
                    "value": "self.conv_block_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(n_filters, n_filters * 2, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_231": {
                "variable": {
                    "value": "self.dense_block_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(n_filters * 2 * 8 * 8, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_239": {
                "variable": {
                    "value": "self.dense_block_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(64, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_246": {
                "variable": {
                    "value": "self.dense_block_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(32, out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_273": {
                "variable": {
                    "value": "self.dense_block_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_channels, n_filters * 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_280": {
                "variable": {
                    "value": "self.dense_block_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(n_filters * 2, n_filters * 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_287": {
                "variable": {
                    "value": "self.dense_block_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(n_filters * 2, out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_314": {
                "variable": {
                    "value": "self.cnn_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(n_input, n_out, kernel_size, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_339": {
                "variable": {
                    "value": "self.down_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_346": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(cnn_sizes[4], n_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_350": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_389": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_390": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "n_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_391": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_392": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_427": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'arch': str(model.type), 'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict(), 'loss': loss, 'accuracy': accuracy, 'dataset': data_descriptor}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "path + filename + ext",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_35": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_38": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_45": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_50": {
                "in_features": {
                    "value": "256 * out_feat_size * out_feat_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_51": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_53": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_74": {
                "in_channels": {
                    "value": "n_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "num_features": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_77": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "in_channels": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2 * n_hidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_81": {
                "num_features": {
                    "value": "2 * n_hidden",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_83": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_113": {
                "in_channels": {
                    "value": "n_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_114": {
                "num_features": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_116": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_119": {
                "in_channels": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2 * n_hidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_120": {
                "num_features": {
                    "value": "2 * n_hidden",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_122": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_143": {
                "in_channels": {
                    "value": "n_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_input",
                            "Method Argument"
                        ],
                        [
                            "n_input",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "n_out",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "n_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_144": {
                "num_features": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "n_out",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "n_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool1d_146": {
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_161": {
                "in_features": {
                    "value": "8 * in_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_180": {
                "in_features": {
                    "value": "5264",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_216": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_filters",
                            "Method Argument"
                        ],
                        [
                            "n_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_217": {
                "num_features": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_filters",
                            "Method Argument"
                        ],
                        [
                            "n_filters",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_218": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_219": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_224": {
                "in_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_filters",
                            "Method Argument"
                        ],
                        [
                            "n_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_225": {
                "num_features": {
                    "value": "n_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_226": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_227": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_233": {
                "in_features": {
                    "value": "n_filters * 2 * 8 * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_240": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_241": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_242": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_247": {
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_248": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_274": {
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_276": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_281": {
                "in_features": {
                    "value": "n_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_283": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_288": {
                "in_features": {
                    "value": "n_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sigmoid_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_315": {
                "in_channels": {
                    "value": "n_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_input",
                            "Method Argument"
                        ],
                        [
                            "n_input",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "n_out",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "n_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_316": {
                "num_features": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "n_out",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "n_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_317": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool1d_318": {
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_347": {
                "in_features": {
                    "value": "cnn_sizes[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_348": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_398": {
                "tensors": {
                    "value": "(hidden[-2, :, :], hidden[-1, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Utils/train.py": {
        "torch": {
            "device_9": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sort_100": {
                "variable": {
                    "value": "(train_sort, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "train_posteriors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(shadow_net(train_imgs.detach()), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(in_preds).float()",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_104": {
                "variable": {
                    "value": "(out_sort, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out_posteriors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(shadow_net(out_imgs.detach()), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(out_preds).float()",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_113": {
                "variable": {
                    "value": "train_lbl",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "mini_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_imgs.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_114": {
                "variable": {
                    "value": "out_lbl",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "mini_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_imgs.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squeeze_118": {
                "variable": {
                    "value": "train_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attack_net(train_top_k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_119": {
                "variable": {
                    "value": "out_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attack_net(out_top_k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_80": {
                "variable": {
                    "value": "train_posteriors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shadow_net(train_imgs.detach())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_82": {
                "variable": {
                    "value": "out_posteriors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shadow_net(out_imgs.detach())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_90": {
                "variable": {
                    "value": "train_posteriors",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "in_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shadow.predict_proba(traininputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_95": {
                "variable": {
                    "value": "out_posteriors",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "out_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shadow.predict_proba(outinputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_174": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "true_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "true_labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "KLDivLoss_172": {
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_softmax_172": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_173": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_grad_enabled_197": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_202": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_131": {
                "input": {
                    "value": "train_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(attack_net(train_top_k))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_132": {
                "input": {
                    "value": "out_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(attack_net(out_top_k))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Utils/transformations.py": {
        "torch": {
            "from_numpy_23": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "libr.feature.melspectrogram(np.reshape(y, (dims[1],)), 16000, n_mels=self.number_of_mels, fmax=8000)",
                            "Call"
                        ],
                        [
                            "libr.feature.mfcc(S=libr.power_to_db(y))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y)",
                            "Call"
                        ],
                        [
                            "libr.core.stft(np.reshape(y, (dims[1],)))",
                            "Call"
                        ],
                        [
                            "np.abs(y)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).permute(1, 0)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_43": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "libr.feature.melspectrogram(np.reshape(y, (dims[1],)), 16000, n_mels=self.number_of_mels, fmax=8000)",
                            "Call"
                        ],
                        [
                            "libr.feature.mfcc(S=libr.power_to_db(y))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y)",
                            "Call"
                        ],
                        [
                            "libr.core.stft(np.reshape(y, (dims[1],)))",
                            "Call"
                        ],
                        [
                            "np.abs(y)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).permute(1, 0)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "permute_43": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_44": {
                "variable": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.angle(y)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(phase).permute(1, 0)",
                            "Call"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "permute_44": {
                "variable": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_46": {
                "tensors": {
                    "value": "(y, phase)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Utils/visualize_object_survey.py": {
        "torch": {
            "zeros_207": {
                "variable": {
                    "value": "final_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_220": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.normal(loc=0, scale=percent_noise / 100 * (tensor_input.max() - tensor_input.min()), size=temp_input.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "cyphercat/attacks.py": {
        "torch": {
            "device_7": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_7": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cyphercat/datadefs/cifar10_dataset.py": {
        "torch": {
            "ConcatDataset_45": {
                "variable": {
                    "value": "fullset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[trainset, testset]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_40": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "index_csv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.loadtxt(index_file)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cyphercat/datadefs/lfw_dataset.py": {
        "torch": {}
    },
    "cyphercat/datadefs/libri_dataset.py": {
        "torch": {}
    },
    "cyphercat/datadefs/splitter.py": {
        "torch": {
            "randperm_30": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "sum(lengths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_34": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices[offset - length:offset]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "cyphercat/datadefs/voices_dataset.py": {
        "torch": {}
    },
    "cyphercat/defenses.py": {
        "torch": {
            "SGD_52": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "param_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "param_list + list(mod[1].parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_68": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr / 10.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_116": {
                "variable": {
                    "value": "reduced",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "output.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cyphercat/models.py": {
        "torch": {
            "load_443": {
                "variable": {
                    "value": "chpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(n_in, n_filters, kernel_size=6, stride=3, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_100": {
                "variable": {
                    "value": "self.conv_block_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(n_in, n_filters, kernel_size=5, stride=1, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "self.conv_block_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(n_filters, 2 * n_filters, kernel_size=5, stride=1, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_113": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * n_filters * (self.size // 4) * (self.size // 4)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * n_filters",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * n_filters",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "125",
                            "Method Argument"
                        ],
                        [
                            "125",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_134": {
                "variable": {
                    "value": "self.conv_block_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(n_in, n_filters, kernel_size=5, stride=1, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_140": {
                "variable": {
                    "value": "self.conv_block_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(n_filters, 2 * n_filters, kernel_size=5, stride=1, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_147": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * n_filters * 8 * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_148": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * n_filters",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "125",
                            "Method Argument"
                        ],
                        [
                            "125",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_164": {
                "variable": {
                    "value": "self.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "n_in",
                            "Method Argument"
                        ],
                        [
                            "n_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "n_filters",
                            "Method Argument"
                        ],
                        [
                            "n_filters",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_166": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "n_filters",
                            "Method Argument"
                        ],
                        [
                            "n_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "125",
                            "Method Argument"
                        ],
                        [
                            "125",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_169": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.hidden(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_172": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_183": {
                "variable": {
                    "value": "self.conv_block_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(n_in, n_filters, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_191": {
                "variable": {
                    "value": "self.conv_block_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(n_filters, n_filters * 2, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_199": {
                "variable": {
                    "value": "self.dense_block_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(n_filters * 2 * 8 * 8, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_207": {
                "variable": {
                    "value": "self.dense_block_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(64, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_214": {
                "variable": {
                    "value": "self.dense_block_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(32, n_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_240": {
                "variable": {
                    "value": "self.dense_block_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(n_in, n_filters * 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_247": {
                "variable": {
                    "value": "self.dense_block_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(n_filters * 2, n_filters * 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_254": {
                "variable": {
                    "value": "self.dense_block_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(n_filters * 2, n_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_280": {
                "variable": {
                    "value": "self.cnn_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(n_input, n_out, kernel_size, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_305": {
                "variable": {
                    "value": "self.down_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_312": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(cnn_sizes[4], n_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_316": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "125",
                            "Method Argument"
                        ],
                        [
                            "125",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_424": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'arch': str(model.type), 'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict(), 'loss': loss, 'accuracy': accuracy, 'dataset': data_descriptor}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "path + filename + ext",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "n_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "n_in",
                            "Method Argument"
                        ],
                        [
                            "n_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "n_filters",
                            "Method Argument"
                        ],
                        [
                            "n_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_50": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "n_filters",
                            "Method Argument"
                        ],
                        [
                            "n_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3 * n_filters",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_53": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "n_h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3 * n_filters",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * n_h1",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "n_h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * n_h1",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_60": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_65": {
                "in_features": {
                    "value": "256 * out_feat_size * out_feat_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_66": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_68": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "125",
                            "Method Argument"
                        ],
                        [
                            "125",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_101": {
                "in_channels": {
                    "value": "n_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "n_in",
                            "Method Argument"
                        ],
                        [
                            "n_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "n_filters",
                            "Method Argument"
                        ],
                        [
                            "n_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_102": {
                "num_features": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "n_filters",
                            "Method Argument"
                        ],
                        [
                            "n_filters",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_104": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_107": {
                "in_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "n_filters",
                            "Method Argument"
                        ],
                        [
                            "n_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2 * n_filters",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_109": {
                "num_features": {
                    "value": "2 * n_filters",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_111": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_135": {
                "in_channels": {
                    "value": "n_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "n_in",
                            "Method Argument"
                        ],
                        [
                            "n_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "n_filters",
                            "Method Argument"
                        ],
                        [
                            "n_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_136": {
                "num_features": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "n_filters",
                            "Method Argument"
                        ],
                        [
                            "n_filters",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_138": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_141": {
                "in_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "n_filters",
                            "Method Argument"
                        ],
                        [
                            "n_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2 * n_filters",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_143": {
                "num_features": {
                    "value": "2 * n_filters",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_145": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_184": {
                "in_channels": {
                    "value": "n_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "n_in",
                            "Method Argument"
                        ],
                        [
                            "n_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "n_filters",
                            "Method Argument"
                        ],
                        [
                            "n_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_185": {
                "num_features": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "n_filters",
                            "Method Argument"
                        ],
                        [
                            "n_filters",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_186": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_187": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_192": {
                "in_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "n_filters",
                            "Method Argument"
                        ],
                        [
                            "n_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_193": {
                "num_features": {
                    "value": "n_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_194": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_195": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_201": {
                "in_features": {
                    "value": "n_filters * 2 * 8 * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_208": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_209": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_210": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_215": {
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "125",
                            "Method Argument"
                        ],
                        [
                            "125",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_216": {
                "num_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "125",
                            "Method Argument"
                        ],
                        [
                            "125",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_241": {
                "in_features": {
                    "value": "n_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "n_in",
                            "Method Argument"
                        ],
                        [
                            "n_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_243": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_248": {
                "in_features": {
                    "value": "n_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_250": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_255": {
                "in_features": {
                    "value": "n_filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "125",
                            "Method Argument"
                        ],
                        [
                            "125",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sigmoid_257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_281": {
                "in_channels": {
                    "value": "n_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_input",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_282": {
                "num_features": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_283": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool1d_284": {
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_313": {
                "in_features": {
                    "value": "cnn_sizes[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ],
                        [
                            "n_hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_314": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cyphercat/tests/test_dim_reduction.py": {
        "torch": {
            "randn_65": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 3, 32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_17": {
                "variable": {
                    "value": "self.conv_block_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(n_in, n_filters, kernel_size=5, stride=1, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "variable": {
                    "value": "self.conv_block_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(n_filters, 2 * n_filters, kernel_size=5, stride=1, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * n_filters * (self.size // 4) * (self.size // 4)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * n_filters",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * n_filters",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "n_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_20": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2 * n_filters",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_26": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cyphercat/utils/visualize_utils.py": {
        "torch": {
            "zeros_210": {
                "variable": {
                    "value": "final_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_223": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.normal(loc=0, scale=percent_noise / 100 * (tensor_input.max() - tensor_input.min()), size=temp_input.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/test_load.py": {
        "torch": {
            "device_40": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/test_train.py": {
        "torch": {
            "device_40": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_64": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_88": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ccatset.get_split_n(0)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_config.batchsize",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_89": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ccatset.get_split_n(1)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_106": {
                "variable": {
                    "value": "model_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learnrate / 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/test_train_libri.py": {
        "torch": {
            "device_39": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}