{
    "evaluate.py": {
        "torch": {
            "DataLoader_152": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "VisDialDataset(config['dataset'], args.val_json, args.val_dense_json, overfit=args.overfit, in_memory=args.in_memory, return_options=True, add_boundary_toks=False if config['model']['decoder'] == 'disc' else True)",
                            "Call"
                        ],
                        [
                            "VisDialDataset(config['dataset'], args.test_json, overfit=args.overfit, in_memory=args.in_memory, return_options=True, add_boundary_toks=False if config['model']['decoder'] == 'disc' else True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config['solver']['batch_size'] if config['model']['decoder'] == 'disc' else 5",
                    "type": "IfExp",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.cpu_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_97": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_all_98": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_172": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "EncoderDecoderModel(encoder, decoder).to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, args.gpu_ids)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "args.gpu_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_114": {
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "args.gpu_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_116": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_227": {
                "start": {
                    "value": "output.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "DataLoader_138": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "VisDialDataset(config['dataset'], args.train_json, overfit=args.overfit, in_memory=args.in_memory, return_options=True if config['model']['decoder'] == 'disc' else False, add_boundary_toks=False if config['model']['decoder'] == 'disc' else True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config['solver']['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "yaml.load(open(args.config_yml))",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.cpu_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_154": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "VisDialDataset(config['dataset'], args.val_json, args.val_dense_json, overfit=args.overfit, in_memory=args.in_memory, return_options=True, add_boundary_toks=False if config['model']['decoder'] == 'disc' else True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config['solver']['batch_size'] if config['model']['decoder'] == 'disc' else 5",
                    "type": "IfExp",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.cpu_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adamax_214": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config['solver']['initial_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "yaml.load(open(args.config_yml))",
                            "Call"
                        ]
                    ]
                }
            },
            "LambdaLR_215": {
                "variable": {
                    "value": "scheduler",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adamax(model.parameters(), lr=config['solver']['initial_lr'])",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_lambda_fun",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "manual_seed_97": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_all_98": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_170": {
                "variable": {
                    "value": "encoder.word_embed.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(config['dataset']['glove_npy'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_179": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "EncoderDecoderModel(encoder, decoder).to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, args.gpu_ids)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "args.gpu_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_183": {
                "variable": {
                    "value": "criterion",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_115": {
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "args.gpu_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_117": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_185": {
                "variable": {
                    "value": "criterion",
                    "type": "Name",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "train_dataset.vocabulary.PAD_INDEX",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_293": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_344": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_325": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_330": {
                "start": {
                    "value": "output.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "visdialch/data/dataset.py": {
        "torch": {
            "tensor_79": {
                "variable": {
                    "value": "image_features",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "image_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.hdf_reader[image_id]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(image_features)",
                            "Call"
                        ],
                        [
                            "normalize(image_features, dim=0, p=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_144": {
                "variable": {
                    "value": "item[img_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "image_id",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.image_ids[index]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_150": {
                "variable": {
                    "value": "item[ques_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "question_lengths",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "tensor_151": {
                "variable": {
                    "value": "item[hist_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "history_lengths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[len(round_history) for round_history in history]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_152": {
                "variable": {
                    "value": "item[ans_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "answer_lengths",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "tensor_153": {
                "variable": {
                    "value": "item[num_rounds]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "visdial_instance['num_rounds']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "full_246": {
                "variable": {
                    "value": "maxpadded_sequences",
                    "type": "Name",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(sequences), self.config['max_sequence_length'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.vocabulary.PAD_INDEX",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_250": {
                "variable": {
                    "value": "padded_sequences",
                    "type": "Name",
                    "possible_values": []
                },
                "sequences": {
                    "value": "[torch.tensor(sequence) for sequence in sequences]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.vocabulary.PAD_INDEX",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_301": {
                "variable": {
                    "value": "maxpadded_history",
                    "type": "Name",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(history), max_history_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.vocabulary.PAD_INDEX",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_305": {
                "variable": {
                    "value": "padded_history",
                    "type": "Name",
                    "possible_values": []
                },
                "sequences": {
                    "value": "[torch.tensor(round_history) for round_history in history]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.vocabulary.PAD_INDEX",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_83": {
                "variable": {
                    "value": "image_features",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "image_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.hdf_reader[image_id]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(image_features)",
                            "Call"
                        ],
                        [
                            "normalize(image_features, dim=0, p=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_208": {
                "variable": {
                    "value": "item[gt_relevance]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "dense_annotations['gt_relevance']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_211": {
                "variable": {
                    "value": "item[round_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "dense_annotations['round_id']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_179": {
                "variable": {
                    "value": "answer_options_in",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "answer_options_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(answer_options_in, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_180": {
                "variable": {
                    "value": "answer_options_out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "answer_options_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(answer_options_out, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_184": {
                "variable": {
                    "value": "item[opt_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "answer_option_lengths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_194": {
                "variable": {
                    "value": "answer_options",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "answer_options",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(answer_options, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_197": {
                "variable": {
                    "value": "item[opt_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "answer_option_lengths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_203": {
                "variable": {
                    "value": "item[ans_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "answer_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[dialog_round['gt_index'] for dialog_round in dialog]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_251": {
                "data": {
                    "value": "sequence",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "tensor_306": {
                "data": {
                    "value": "round_history",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "visdialch/decoders/disc.py": {
        "torch": {
            "Embedding_12": {
                "variable": {
                    "value": "self.word_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocabulary)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config['word_embedding_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "vocabulary.PAD_INDEX",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_17": {
                "variable": {
                    "value": "self.option_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "config['word_embedding_size']",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dropout": {
                    "value": "config['dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_70": {
                "variable": {
                    "value": "options_embed",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size * num_rounds * num_options",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "nonzero_options_embed.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "nonzero_options_embed.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_91": {
                "variable": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "options_embed * encoder_output",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "visdialch/decoders/gen.py": {
        "torch": {
            "Embedding_10": {
                "variable": {
                    "value": "self.word_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocabulary)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config['word_embedding_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "vocabulary.PAD_INDEX",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_15": {
                "variable": {
                    "value": "self.answer_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "config['word_embedding_size']",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dropout": {
                    "value": "config['dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.lstm_to_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.config['lstm_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(vocabulary)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_27": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config['dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LogSoftmax_28": {
                "variable": {
                    "value": "self.logsoftmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_61": {
                "variable": {
                    "value": "init_cell",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "init_hidden",
                    "type": "Name",
                    "possible_values": [
                        [
                            "encoder_output.view(1, batch_size * num_rounds, -1)",
                            "Call"
                        ],
                        [
                            "init_hidden.repeat(self.config['lstm_num_layers'], 1, 1)",
                            "Call"
                        ],
                        [
                            "encoder_output.view(batch_size, num_rounds, 1, -1)",
                            "Call"
                        ],
                        [
                            "init_hidden.repeat(1, 1, num_options, 1)",
                            "Call"
                        ],
                        [
                            "init_hidden.view(1, batch_size * num_rounds * num_options, -1)",
                            "Call"
                        ],
                        [
                            "init_hidden.repeat(self.config['lstm_num_layers'], 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_101": {
                "variable": {
                    "value": "init_cell",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "init_hidden",
                    "type": "Name",
                    "possible_values": [
                        [
                            "encoder_output.view(1, batch_size * num_rounds, -1)",
                            "Call"
                        ],
                        [
                            "init_hidden.repeat(self.config['lstm_num_layers'], 1, 1)",
                            "Call"
                        ],
                        [
                            "encoder_output.view(batch_size, num_rounds, 1, -1)",
                            "Call"
                        ],
                        [
                            "init_hidden.repeat(1, 1, num_options, 1)",
                            "Call"
                        ],
                        [
                            "init_hidden.view(1, batch_size * num_rounds * num_options, -1)",
                            "Call"
                        ],
                        [
                            "init_hidden.repeat(self.config['lstm_num_layers'], 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_121": {
                "variable": {
                    "value": "ans_word_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "ans_word_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.lstm_to_words(ans_out)",
                            "Call"
                        ],
                        [
                            "self.logsoftmax(self.lstm_to_words(ans_out))",
                            "Call"
                        ],
                        [
                            "torch.gather(ans_word_scores, -1, target_ans_out.unsqueeze(-1)).squeeze()",
                            "Call"
                        ],
                        [
                            "ans_word_scores * (target_ans_out > 0).float().cuda()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "target_ans_out.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_121": {
                "variable": {
                    "value": "ans_word_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_128": {
                "variable": {
                    "value": "ans_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "ans_word_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.lstm_to_words(ans_out)",
                            "Call"
                        ],
                        [
                            "self.logsoftmax(self.lstm_to_words(ans_out))",
                            "Call"
                        ],
                        [
                            "torch.gather(ans_word_scores, -1, target_ans_out.unsqueeze(-1)).squeeze()",
                            "Call"
                        ],
                        [
                            "ans_word_scores * (target_ans_out > 0).float().cuda()",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "visdialch/encoders/lf.py": {
        "torch": {
            "Embedding_13": {
                "variable": {
                    "value": "self.word_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocabulary)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config['word_embedding_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "vocabulary.PAD_INDEX",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_18": {
                "variable": {
                    "value": "self.hist_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "config['word_embedding_size']",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dropout": {
                    "value": "config['dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LSTM_25": {
                "variable": {
                    "value": "self.ques_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "config['word_embedding_size']",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dropout": {
                    "value": "config['dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_32": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config['dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.image_features_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config['img_feature_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['lstm_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.attention_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config['lstm_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.fusion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fusion_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config['img_feature_size'] + config['lstm_hidden_size'] * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "config['lstm_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_104": {
                "variable": {
                    "value": "image_attention_weights",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "image_attention_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.attention_proj(projected_ques_image).squeeze()",
                            "Call"
                        ],
                        [
                            "F.softmax(image_attention_weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "image_attention_weights.unsqueeze(-1).repeat(1, 1, self.config['img_feature_size'])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "fused_vector",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(img, ques_embed, hist_embed)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_132": {
                "variable": {
                    "value": "fused_embedding",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fusion(fused_vector)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "visdialch/encoders/modules.py": {
        "torch": {
            "Sequential_11": {
                "variable": {
                    "value": "self.V_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(p=config['dropout_fc'])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "variable": {
                    "value": "self.Q_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(p=config['dropout_fc'])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(p=config['dropout_fc'])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_33": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_62": {
                "variable": {
                    "value": "att_embed",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "img_embed * ques_embed",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "self.H_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(p=config['dropout_fc'])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.Q_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(p=config['dropout_fc'])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "self.MLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(p=config['dropout_fc'])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "att_embed",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hist_embed, ques_embed)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tril_123": {
                "variable": {
                    "value": "delta_t",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(size=[num_rounds, num_rounds], requires_grad=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cumsum_123": {
                "variable": {
                    "value": "delta_t",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_126": {
                "variable": {
                    "value": "att_embed",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(score, delta_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_131": {
                "variable": {
                    "value": "hist_gs_set",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "hist_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.att(att_embed).squeeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_149": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(p=config['dropout_fc'])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_155": {
                "variable": {
                    "value": "self.att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(p=config['dropout_fc'])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_163": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_182": {
                "variable": {
                    "value": "ques_embed",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "ques_embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ques.view(-1, ques.size(-1))",
                            "Call"
                        ],
                        [
                            "self.Q_embed(ques_embed)",
                            "Call"
                        ],
                        [
                            "ques_embed.view(batch_size, num_rounds, ques_embed.size(-1))",
                            "Call"
                        ],
                        [
                            "ques_embed.unsqueeze(2).repeat(1, 1, num_proposals, 1)",
                            "Call"
                        ],
                        [
                            "self.Q_embed(ques)",
                            "Call"
                        ],
                        [
                            "ques_embed.unsqueeze(2).repeat(1, 1, num_rounds, 1)",
                            "Call"
                        ],
                        [
                            "self.embed(ques)",
                            "Call"
                        ],
                        [
                            "F.normalize(ques_embed, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tensor_226": {
                "variable": {
                    "value": "ques_prob_single",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gumbel_softmax_187": {
                "variable": {
                    "value": "ques_gs",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hist_logits[:, i, :i + 1]",
                            "Subscript"
                        ],
                        [
                            "ques_logits.view(-1, 2)",
                            "Call"
                        ]
                    ]
                },
                "hard": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_238": {
                "variable": {
                    "value": "img_att_cat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(img_att_ques[:, i, :].unsqueeze(1), img_att_temp.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_241": {
                "variable": {
                    "value": "ques_prob",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ques_prob_single, ques_prob_pair)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_243": {
                "variable": {
                    "value": "ques_prob_refine",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "ques_gs[:, i, :].view(-1, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "ques_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat((ques_prob_single, ques_prob_pair), dim=-1)",
                            "Call"
                        ],
                        [
                            "ques_prob.view(-1, 2, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_245": {
                "variable": {
                    "value": "img_att_refined[:, i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "ques_prob_refine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.bmm(ques_gs[:, i, :].view(-1, 1, 2), ques_prob).view(-1, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "img_att_cat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat((img_att_ques[:, i, :].unsqueeze(1), img_att_temp.unsqueeze(1)), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_12": {
                "p": {
                    "value": "config['dropout_fc']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_19": {
                "p": {
                    "value": "config['dropout_fc']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_26": {
                "p": {
                    "value": "config['dropout_fc']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "config['lstm_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_74": {
                "p": {
                    "value": "config['dropout_fc']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_80": {
                "p": {
                    "value": "config['dropout_fc']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_86": {
                "p": {
                    "value": "config['dropout_fc']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_87": {
                "in_features": {
                    "value": "config['lstm_hidden_size'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['lstm_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_90": {
                "p": {
                    "value": "config['dropout_fc']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_91": {
                "in_features": {
                    "value": "config['lstm_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gumbel_softmax_136": {
                "variable": {
                    "value": "hist_gs",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hist_logits[:, i, :i + 1]",
                            "Subscript"
                        ],
                        [
                            "ques_logits.view(-1, 2)",
                            "Call"
                        ]
                    ]
                },
                "hard": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_150": {
                "p": {
                    "value": "config['dropout_fc']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_156": {
                "p": {
                    "value": "config['dropout_fc']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_157": {
                "in_features": {
                    "value": "config['lstm_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_236": {
                "variable": {
                    "value": "img_att_temp",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(img_att_cap, img_att_refined[:, :i, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_237": {
                "variable": {
                    "value": "img_att_temp",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "hist_gs.unsqueeze(-1) * img_att_temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_123": {
                "size": {
                    "value": "[num_rounds, num_rounds]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "visdialch/encoders/rva.py": {
        "torch": {
            "Embedding_14": {
                "variable": {
                    "value": "self.word_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocabulary)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config['word_embedding_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "vocabulary.PAD_INDEX",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_20": {
                "variable": {
                    "value": "self.hist_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "config['word_embedding_size']",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dropout": {
                    "value": "config['dropout']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTM_28": {
                "variable": {
                    "value": "self.ques_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "config['word_embedding_size']",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dropout": {
                    "value": "config['dropout']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.fusion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(p=config['dropout_fc'])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_60": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_101": {
                "variable": {
                    "value": "img_feat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "img_att",
                    "type": "Name",
                    "possible_values": []
                },
                "mat2": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch['img_feat']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_113": {
                "variable": {
                    "value": "fused_vector",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(img_ans_feat, ques_ans_feat, hist_ans_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_115": {
                "variable": {
                    "value": "fused_embedding",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fusion(fused_vector)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_136": {
                "variable": {
                    "value": "ques_encoded",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ques_encoded_forawrd, ques_encoded_backward)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_154": {
                "variable": {
                    "value": "hist_encoded",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hist_encoded_forward, hist_encoded_backward)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_53": {
                "p": {
                    "value": "config['dropout_fc']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "in_features": {
                    "value": "config['img_feature_size'] + config['word_embedding_size'] + config['lstm_hidden_size'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['lstm_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "visdialch/metrics.py": {
        "torch": {
            "sum_128": {
                "variable": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "target_relevance != 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sort_131": {
                "variable": {
                    "value": "(_, rankings)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "predicted_ranks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "scores_to_ranks(predicted_scores)",
                            "Call"
                        ],
                        [
                            "predicted_ranks.view(batch_size * num_rounds, num_options)",
                            "Call"
                        ],
                        [
                            "scores_to_ranks(predicted_scores)",
                            "Call"
                        ],
                        [
                            "predicted_ranks.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sort_133": {
                "variable": {
                    "value": "(_, best_rankings)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "target_relevance",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log2_156": {
                "variable": {
                    "value": "discounts",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(len(rankings)).float() + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "variable": {
                    "value": "__rank_list",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "self._rank_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_157": {
                "input": {
                    "value": "sorted_relevance / discounts",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_70": {
                "start": {
                    "value": "batch_size * num_rounds",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_80": {
                "input": {
                    "value": "(__rank_list <= 1).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_81": {
                "input": {
                    "value": "(__rank_list <= 5).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_82": {
                "input": {
                    "value": "(__rank_list <= 10).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_83": {
                "input": {
                    "value": "__rank_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(self._rank_list).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_84": {
                "input": {
                    "value": "__rank_list.reciprocal()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_156": {
                "start": {
                    "value": "len(rankings)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "visdialch/model.py": {
        "torch": {}
    },
    "visdialch/utils/checkpointing.py": {
        "torch": {
            "load_178": {
                "variable": {
                    "value": "components",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_pthpath",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Path(checkpoint_pthpath)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_111": {
                "obj": {
                    "value": "{'model': self._model_state_dict(), 'optimizer': self.optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "self.ckpt_dirpath / f'checkpoint_{self.last_epoch}.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "visdialch/utils/dynamic_rnn.py": {
        "torch": {
            "pack_padded_sequence_33": {
                "variable": {
                    "value": "packed_seq_input",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "sorted_seq_input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "seq_input.index_select(0, fwd_order)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sorted_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(sorted_len)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "index_select_51": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "bwd_order",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "sort_59": {
                "variable": {
                    "value": "(sorted_len, fwd_order)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "lens.contiguous().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sort_62": {
                "variable": {
                    "value": "(_, bwd_order)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "fwd_order",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_51": {
                "sequence": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pad_packed_sequence(outputs, batch_first=True, total_length=max_sequence_length)[0].index_select(dim=0, index=bwd_order)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "total_length": {
                    "value": "max_sequence_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "seq_input.size(1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "visdialch/utils/layers.py": {
        "torch": {
            "Sequential_10": {
                "variable": {
                    "value": "self.embed_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_dim, out_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_17": {
                "variable": {
                    "value": "self.embed_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_dim, out_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(p=config['dropout_fc'])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(p=config['dropout_fc'])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_51": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_69": {
                "variable": {
                    "value": "ques_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "ques_embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.embed(ques_word_encoded)",
                            "Call"
                        ],
                        [
                            "self.Q_embed(ques)",
                            "Call"
                        ],
                        [
                            "ques_embed.unsqueeze(2).repeat(1, 1, num_rounds, 1)",
                            "Call"
                        ],
                        [
                            "self.filter(ques)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_76": {
                "variable": {
                    "value": "feat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "att.unsqueeze(-1) * ques_word",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "self.H_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(p=config['dropout_fc'])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "variable": {
                    "value": "self.Q_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(p=config['dropout_fc'])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_99": {
                "variable": {
                    "value": "self.att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(p=config['dropout_fc'])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_106": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_127": {
                "variable": {
                    "value": "att_embed",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "hist_embed * ques_embed",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tril_130": {
                "variable": {
                    "value": "att_not_pad",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(size=[num_rounds, num_rounds], requires_grad=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_134": {
                "variable": {
                    "value": "feat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "att_masked.unsqueeze(-1) * hist.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_143": {
                "variable": {
                    "value": "self.filter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(p=config['dropout_fc'])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_11": {
                "in_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Tanh_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_18": {
                "in_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Sigmoid_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_38": {
                "p": {
                    "value": "config['dropout_fc']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_45": {
                "p": {
                    "value": "config['dropout_fc']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "config['lstm_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_75": {
                "input": {
                    "value": "att",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.att(ques_norm).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.softmax(att)",
                            "Call"
                        ],
                        [
                            "att * ques_not_pad",
                            "BinOp"
                        ],
                        [
                            "att / torch.sum(att, dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "self.softmax(att_embed)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_86": {
                "p": {
                    "value": "config['dropout_fc']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_93": {
                "p": {
                    "value": "config['dropout_fc']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_100": {
                "p": {
                    "value": "config['dropout_fc']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_101": {
                "in_features": {
                    "value": "config['lstm_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_130": {
                "size": {
                    "value": "[num_rounds, num_rounds]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_133": {
                "input": {
                    "value": "att_masked",
                    "type": "Name",
                    "possible_values": [
                        [
                            "att * att_not_pad",
                            "BinOp"
                        ],
                        [
                            "att_masked / torch.sum(att_masked, dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_144": {
                "p": {
                    "value": "config['dropout_fc']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_145": {
                "in_features": {
                    "value": "config['word_embedding_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['img_feature_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sigmoid_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}