{
    "python/benchmarks/python_overhead.py": {
        "torch": {
            "randn_52": {
                "*size": {
                    "value": "300",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "400",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_53": {
                "*size": {
                    "value": "400",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "500",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "python/benchmarks/utils.py": {
        "torch": {
            "synchronize_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "python/examples/masked_conv.py": {
        "torch": {
            "Conv2d_132": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "F",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_133": {
                "variable": {
                    "value": "relu",
                    "type": "Variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_134": {
                "variable": {
                    "value": "input_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_135": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "F",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_140": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rectified_input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "relu(input_data)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv.weight * mask",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "conv.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "conv.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "conv.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "synchronize_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "python/examples/min_distance.py": {
        "torch": {
            "from_numpy_35": {
                "variable": {
                    "value": "codes_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "codes",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.random.randint(1 << 32, size=(N, M // 4)).astype('uint32')",
                            "Call"
                        ],
                        [
                            "codes.view('uint8')",
                            "Call"
                        ],
                        [
                            "np.random.randint(1 << 32, size=(N, M // 4)).astype('uint32')",
                            "Call"
                        ],
                        [
                            "codes.view('uint8')",
                            "Call"
                        ],
                        [
                            "np.random.randint(1 << 32, size=(N, M // 4)).astype('uint32')",
                            "Call"
                        ],
                        [
                            "codes.view('uint8')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_36": {
                "variable": {
                    "value": "luts_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "luts",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.random.randn(M, 256).astype('float32')",
                            "Call"
                        ],
                        [
                            "np.random.randn(M, 256).astype('float32')",
                            "Call"
                        ],
                        [
                            "np.random.randn(K, M, 256).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_101": {
                "variable": {
                    "value": "codes_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "codes",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.random.randint(1 << 32, size=(N, M // 4)).astype('uint32')",
                            "Call"
                        ],
                        [
                            "codes.view('uint8')",
                            "Call"
                        ],
                        [
                            "np.random.randint(1 << 32, size=(N, M // 4)).astype('uint32')",
                            "Call"
                        ],
                        [
                            "codes.view('uint8')",
                            "Call"
                        ],
                        [
                            "np.random.randint(1 << 32, size=(N, M // 4)).astype('uint32')",
                            "Call"
                        ],
                        [
                            "codes.view('uint8')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_102": {
                "variable": {
                    "value": "luts_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "luts",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.random.randn(M, 256).astype('float32')",
                            "Call"
                        ],
                        [
                            "np.random.randn(M, 256).astype('float32')",
                            "Call"
                        ],
                        [
                            "np.random.randn(K, M, 256).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_126": {
                "variable": {
                    "value": "codes_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "codes",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.random.randint(1 << 32, size=(N, M // 4)).astype('uint32')",
                            "Call"
                        ],
                        [
                            "codes.view('uint8')",
                            "Call"
                        ],
                        [
                            "np.random.randint(1 << 32, size=(N, M // 4)).astype('uint32')",
                            "Call"
                        ],
                        [
                            "codes.view('uint8')",
                            "Call"
                        ],
                        [
                            "np.random.randint(1 << 32, size=(N, M // 4)).astype('uint32')",
                            "Call"
                        ],
                        [
                            "codes.view('uint8')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_127": {
                "variable": {
                    "value": "luts_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "luts",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.random.randn(M, 256).astype('float32')",
                            "Call"
                        ],
                        [
                            "np.random.randn(M, 256).astype('float32')",
                            "Call"
                        ],
                        [
                            "np.random.randn(K, M, 256).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "python/examples/tum.py": {
        "torch": {
            "randn_262": {
                "variable": {
                    "value": "InputData",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.num_segs * args.seg_length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "args.num_of_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_265": {
                "variable": {
                    "value": "Segments",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.num_segs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_268": {
                "variable": {
                    "value": "SegmentsMetaData",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(torch.max(Segments)[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_284": {
                "ndarray": {
                    "value": "POS_C",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(shape=(L.size,), dtype=np.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_285": {
                "ndarray": {
                    "value": "POS_C",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(shape=(L.size,), dtype=np.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_289": {
                "ndarray": {
                    "value": "NEG_C",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(shape=(L.size,), dtype=np.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_290": {
                "ndarray": {
                    "value": "NEG_C",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(shape=(L.size,), dtype=np.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_294": {
                "ndarray": {
                    "value": "R",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(shape=(L.size,), dtype=D.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_268": {
                "input": {
                    "value": "Segments",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(args.num_segs, dtype=torch.int, device='cuda').fill_(args.seg_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_300": {
                "ndarray": {
                    "value": "R",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(shape=(L.size,), dtype=D.dtype)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "python/tests/test_caffe2.py": {
        "torch": {
            "randn_98": {
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_99": {
                "*size": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_104": {
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_105": {
                "*size": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_106": {
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "python/tests/test_tc.py": {
        "torch": {
            "ones_164": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_168": {
                "variable": {
                    "value": "ref",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GroupNorm_205": {
                "variable": {
                    "value": "GN",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "G",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "G * D",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GroupNorm_258": {
                "variable": {
                    "value": "GN",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "G",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "G * D",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_352": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "C",
                    "type": "Call",
                    "possible_values": [
                        [
                            "add(A, B)",
                            "Call"
                        ],
                        [
                            "add(A, B)",
                            "Call"
                        ],
                        [
                            "add(A, B)",
                            "Call"
                        ],
                        [
                            "add(A, B)",
                            "Call"
                        ],
                        [
                            "T.add(A, B)",
                            "Call"
                        ],
                        [
                            "executor.run((A, B), ())",
                            "Call"
                        ],
                        [
                            "executor.run((A, B), (C,))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "W",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Conv.weight.clone()",
                            "Call"
                        ],
                        [
                            "Conv.weight.clone()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_362": {
                "variable": {
                    "value": "Conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C",
                    "type": "Call",
                    "possible_values": [
                        [
                            "add(A, B)",
                            "Call"
                        ],
                        [
                            "add(A, B)",
                            "Call"
                        ],
                        [
                            "add(A, B)",
                            "Call"
                        ],
                        [
                            "add(A, B)",
                            "Call"
                        ],
                        [
                            "T.add(A, B)",
                            "Call"
                        ],
                        [
                            "executor.run((A, B), ())",
                            "Call"
                        ],
                        [
                            "executor.run((A, B), (C,))",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "O",
                    "type": "Call",
                    "possible_values": [
                        [
                            "executor.run((I0, I1), ())",
                            "Call"
                        ],
                        [
                            "executor.run((I0, I1), ())",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_416": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "C",
                    "type": "Call",
                    "possible_values": [
                        [
                            "add(A, B)",
                            "Call"
                        ],
                        [
                            "add(A, B)",
                            "Call"
                        ],
                        [
                            "add(A, B)",
                            "Call"
                        ],
                        [
                            "add(A, B)",
                            "Call"
                        ],
                        [
                            "T.add(A, B)",
                            "Call"
                        ],
                        [
                            "executor.run((A, B), ())",
                            "Call"
                        ],
                        [
                            "executor.run((A, B), (C,))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "W",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Conv.weight.clone()",
                            "Call"
                        ],
                        [
                            "Conv.weight.clone()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_420": {
                "variable": {
                    "value": "Conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C",
                    "type": "Call",
                    "possible_values": [
                        [
                            "add(A, B)",
                            "Call"
                        ],
                        [
                            "add(A, B)",
                            "Call"
                        ],
                        [
                            "add(A, B)",
                            "Call"
                        ],
                        [
                            "add(A, B)",
                            "Call"
                        ],
                        [
                            "T.add(A, B)",
                            "Call"
                        ],
                        [
                            "executor.run((A, B), ())",
                            "Call"
                        ],
                        [
                            "executor.run((A, B), (C,))",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "O",
                    "type": "Call",
                    "possible_values": [
                        [
                            "executor.run((I0, I1), ())",
                            "Call"
                        ],
                        [
                            "executor.run((I0, I1), ())",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_464": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GroupNorm_320": {
                "variable": {
                    "value": "GN",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "G",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "G * D",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "synchronize_463": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_465": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_486": {
                "variable": {
                    "value": "I0",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "C1",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "C2",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_487": {
                "variable": {
                    "value": "I1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "C2",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "C3",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_65": {
                "*size": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_73": {
                "input": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_79": {
                "*size": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_90": {
                "input": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_96": {
                "*size": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_107": {
                "input": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_115": {
                "*size": {
                    "value": "10 ** 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_116": {
                "*size": {
                    "value": "10 ** 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_125": {
                "input": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_128": {
                "input": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_140": {
                "*size": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_142": {
                "input": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_199": {
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "G",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "D",
                    "type": "Name",
                    "possible_values": [
                        [
                            "T.sub(A, B)",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_200": {
                "*size": {
                    "value": "G",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "D",
                    "type": "Name",
                    "possible_values": [
                        [
                            "T.sub(A, B)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_201": {
                "*size": {
                    "value": "G",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "D",
                    "type": "Name",
                    "possible_values": [
                        [
                            "T.sub(A, B)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_238": {
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "G",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "D",
                    "type": "Name",
                    "possible_values": [
                        [
                            "T.sub(A, B)",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_239": {
                "*size": {
                    "value": "G",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "D",
                    "type": "Name",
                    "possible_values": [
                        [
                            "T.sub(A, B)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_240": {
                "*size": {
                    "value": "G",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "D",
                    "type": "Name",
                    "possible_values": [
                        [
                            "T.sub(A, B)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_456": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_457": {
                "*size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_469": {
                "input": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_291": {
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "G",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "D",
                    "type": "Name",
                    "possible_values": [
                        [
                            "T.sub(A, B)",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_292": {
                "*size": {
                    "value": "G",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "D",
                    "type": "Name",
                    "possible_values": [
                        [
                            "T.sub(A, B)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_293": {
                "*size": {
                    "value": "G",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "D",
                    "type": "Name",
                    "possible_values": [
                        [
                            "T.sub(A, B)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tensor_comprehensions/__init__.py": {
        "torch": {}
    },
    "tensor_comprehensions/torch_tc/tc_function.py": {
        "torch": {
            "is_tensor_35": {
                "obj": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "make_contiguous(unpack_variables(list(real_inputs) + list(rearranged_grad_outputs)))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_48": {
                "obj": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "make_contiguous(unpack_variables(list(real_inputs) + list(rearranged_grad_outputs)))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_60": {
                "obj": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "make_contiguous(unpack_variables(list(real_inputs) + list(rearranged_grad_outputs)))",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_24": {
                "*size": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                }
            },
            "is_tensor_27": {
                "obj": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                }
            }
        }
    }
}