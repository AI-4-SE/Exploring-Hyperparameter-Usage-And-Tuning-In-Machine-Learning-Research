{
    "base_model/ResNet.py": {
        "torch": {
            "Conv2d_8": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_9": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(3 * dilation - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_11": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_17": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_18": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * 4, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_45": {
                "variable": {
                    "value": "out1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_46": {
                "variable": {
                    "value": "out1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out1, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_22": {
                "input": {
                    "value": "out + x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_37": {
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "data_provider/sod_dataset.py": {
        "torch": {
            "DataLoader_138": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dst",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SaliencyDataSet('../dataset/SOD', '../dataset/SOD/train.lst')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_111": {
                "ndarray": {
                    "value": "self.img_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_112": {
                "ndarray": {
                    "value": "self.img_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_149": {
                "tensors": {
                    "value": "[img, label]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_110": {
                "ndarray": {
                    "value": "self.img_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_109": {
                "ndarray": {
                    "value": "self.img_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "efficientnet_pytorch/model.py": {
        "torch": {
            "BatchNorm2d_53": {
                "variable": {
                    "value": "self._bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "oup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._block_args.input_filters * self._block_args.expand_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "self._bn_mom",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self._bn_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "variable": {
                    "value": "self._bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "final_oup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._block_args.output_filters",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "self._bn_mom",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self._bn_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_136": {
                "variable": {
                    "value": "self._bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "round_filters(32, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(1280, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(32, model._global_params)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1 - self._global_params.batch_norm_momentum",
                            "BinOp"
                        ]
                    ]
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._global_params.batch_norm_epsilon",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ModuleList_139": {
                "variable": {
                    "value": "self._blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm2d_161": {
                "variable": {
                    "value": "self._bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "round_filters(32, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(1280, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(32, model._global_params)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1 - self._global_params.batch_norm_momentum",
                            "BinOp"
                        ]
                    ]
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._global_params.batch_norm_epsilon",
                            "Attribute"
                        ]
                    ]
                }
            },
            "BatchNorm2d_45": {
                "variable": {
                    "value": "self._bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "oup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._block_args.input_filters * self._block_args.expand_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "self._bn_mom",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self._bn_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_86": {
                "variable": {
                    "value": "x_squeezed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self._swish(self._bn0(self._expand_conv(inputs)))",
                            "Call"
                        ],
                        [
                            "self._swish(self._bn1(self._depthwise_conv(x)))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x_squeezed) * x",
                            "BinOp"
                        ],
                        [
                            "self._bn2(self._project_conv(x))",
                            "Call"
                        ],
                        [
                            "drop_connect(x, p=drop_connect_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x + inputs",
                            "BinOp"
                        ],
                        [
                            "self._swish(self._bn0(self._conv_stem(inputs)))",
                            "Call"
                        ],
                        [
                            "self._swish(self._bn1(self._conv_head(x)))",
                            "Call"
                        ],
                        [
                            "block(x, drop_connect_rate=drop_connect_rate)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_88": {
                "input": {
                    "value": "x_squeezed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.adaptive_avg_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "self._se_expand(self._swish(self._se_reduce(x_squeezed)))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "efficientnet_pytorch/utils.py": {
        "torch": {
            "floor_90": {
                "variable": {
                    "value": "binary_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "random_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Name"
                        ],
                        [
                            "random_tensor + torch.rand([batch_size, 1, 1, 1], dtype=inputs.dtype, device=inputs.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_47": {
                "variable": {
                    "value": "sigmoid_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ctx.saved_variables[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "rand_89": {
                "*size": {
                    "value": "[batch_size, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_145": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_337": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "open(model_filepath, 'rb')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_119": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_120": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ZeroPad2d_139": {
                "variable": {
                    "value": "self.static_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sigmoid_40": {
                "input": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ctx.saved_variables[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_57": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "helper/evaluator_tool/EvalDataloader.py": {
        "torch": {}
    },
    "helper/evaluator_tool/Evaluator.py": {
        "torch": {
            "device_20": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "helper/evaluator_tool/FmeasueEval.py": {
        "torch": {
            "linspace_62": {
                "variable": {
                    "value": "thlist",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "num",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_16": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_61": {
                "*size": {
                    "value": "num",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "helper/evaluator_tool/MAEEval.py": {
        "torch": {
            "device_16": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_30": {
                "variable": {
                    "value": "mea",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred - gt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_30": {
                "variable": {
                    "value": "mea",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "helper/evaluator_tool/SMeasureEval.py": {
        "torch": {
            "where_51": {
                "variable": {
                    "value": "fg",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "gt == 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds[i]",
                            "Subscript"
                        ],
                        [
                            "pred.view(h, w)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_52": {
                "variable": {
                    "value": "bg",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "gt == 1.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1 - pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_17": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_87": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.arange(0, cols)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_88": {
                "variable": {
                    "value": "j",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.arange(0, rows)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "round_89": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(gt.sum(dim=0) * i).sum() / total",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_90": {
                "variable": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(gt.sum(dim=1) * j).sum() / total",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_51": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds[i]",
                            "Subscript"
                        ],
                        [
                            "pred.view(h, w)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_52": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds[i]",
                            "Subscript"
                        ],
                        [
                            "pred.view(h, w)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_83": {
                "n": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_84": {
                "n": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "helper/evaluator_tool/__init__.py": {
        "torch": {
            "device_17": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "helper/model_saver.py": {
        "torch": {
            "save_44": {
                "obj": {
                    "value": "model_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pathjoin(self.__save_dir_path, self.__base_model_name + '-' + model_ext_name + '.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "helper/optim.py": {
        "torch": {}
    },
    "helper/tester.py": {
        "torch": {
            "device_24": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_34": {
                "f": {
                    "value": "model_pth_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "helper/trainer.py": {
        "torch": {
            "device_34": {
                "variable": {
                    "value": "cpu_device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_25": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_74": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "item['label'].to(self.device)",
                            "Call"
                        ],
                        [
                            "labels.unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "preds.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "helper/visual_helper.py": {
        "torch": {}
    },
    "losses/__init__.py": {
        "torch": {
            "pad_11": {
                "variable": {
                    "value": "target_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "[10, 10, 10, 10]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "circular",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_12": {
                "variable": {
                    "value": "weit",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.avg_pool2d(target_pad, kernel_size=21, stride=1, padding=0) - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_15": {
                "variable": {
                    "value": "dx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.pad(target, [1, 1, 0, 0], mode='reflect')",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "torch.FloatTensor([-0.5, 0, 0.5]).view(1, 1, 1, 3).to(target.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_17": {
                "variable": {
                    "value": "dy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.pad(target, [0, 0, 1, 1], mode='reflect')",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "torch.FloatTensor([-0.5, 0, 0.5]).view(1, 1, 3, 1).to(target.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_24": {
                "variable": {
                    "value": "wbce",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_15": {
                "input": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "[1, 1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_17": {
                "input": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "[0, 0, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool2d_12": {
                "input": {
                    "value": "target_pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(target, [10, 10, 10, 10], mode='circular')",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "networks/DNTD.py": {
        "torch": {
            "rand_269": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_21": {
                "variable": {
                    "value": "self.ppms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_27": {
                "variable": {
                    "value": "self.conv_cats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_39": {
                "variable": {
                    "value": "feature_cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ppm_outs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.ppms[0](x)]",
                            "List"
                        ],
                        [
                            "self.aspp(F.relu(inputs[0], inplace=not self.training))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "variable": {
                    "value": "self._module[relu]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_input_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_64": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.rand(1, 3, 500, 500)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=not self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "not self.training",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "input_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[input]",
                            "List"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "torch.cat(input_features, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_90": {
                "variable": {
                    "value": "self.group_transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[_Transition(encoder_out_channel, out_encoder_channel) for (encoder_out_channel, out_encoder_channel) in zip(encoder_out_channels, encoder_new_out_channels)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_101": {
                "variable": {
                    "value": "self.denseblocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[PlainConv(2, group2_channel, 2, group2_channel // 4, out_channel, drop_rate=drop_rate) for (i, (group2_channel, out_channel)) in enumerate(zip(group2_channels[0:-1], group2_channels[1:]))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleDict_107": {
                "variable": {
                    "value": "group1_transitions",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_122": {
                "variable": {
                    "value": "group1_cancat_transitions",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_128": {
                "variable": {
                    "value": "group2_cancat_transitions",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_137": {
                "variable": {
                    "value": "self.score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_197": {
                "variable": {
                    "value": "db_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "top_group2_input",
                            "Name"
                        ],
                        [
                            "self.group2_cancat_transitions[i - 1](inputs)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_110": {
                "variable": {
                    "value": "transitions",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_116": {
                "variable": {
                    "value": "dw_convs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_242": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "open(pth_path, 'rb')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_289": {
                "input": {
                    "value": "out[0][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "*args": {
                    "value": "nn.Conv2d(dim_in, dim_out, 1, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "num_input_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_output_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_152": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.rand(1, 3, 500, 500)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=not self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_155": {
                "input": {
                    "value": "inputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inplace": {
                    "value": "not self.training",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_285": {
                "f": {
                    "value": "../pretrained_model/dntd-efficient-b0.pth",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "dim_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(ii)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "*args": {
                    "value": "nn.Conv2d(dim_out * 5, channel, 1, 1, padding=0, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_38": {
                "input": {
                    "value": "module(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(row, col)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_25": {
                "output_size": {
                    "value": "ii",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 3, 5, 7]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "dim_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "dim_out * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "trans_outs",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_118": {
                "*args": {
                    "value": "nn.ReLU(inplace=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_118": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "in_channels": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "interpolate_147": {
                "input": {
                    "value": "_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "networks/__init__.py": {
        "torch": {
            "from_numpy_21": {
                "ndarray": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((in_channels, out_channels, kernel_size, kernel_size), dtype=np.float64)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "run.py": {
        "torch": {
            "DataLoader_46": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SaliencyDataSet(config.DATASET_TRAIN_ROOT_DIR, config.DATASET_TRAIN_LIST_PATH, crop_size=(crop_size, crop_size), is_scale=config.DATASET_IS_SCALE, is_random_flip=True, ignore_value=255, is_random_brightness=config.RANDOM_BRIGHT)",
                            "Call"
                        ],
                        [
                            "SaliencyDataSet(config.DATASET_TEST_ROOT_DIR, config.DATASET_TEST_LIST_PATH, crop_size=(None, None))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.BATCH_SIZE",
                            "Attribute"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "batch_size if batch_size < 10 else 10",
                    "type": "IfExp",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_141": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SaliencyDataSet(config.DATASET_TRAIN_ROOT_DIR, config.DATASET_TRAIN_LIST_PATH, crop_size=(crop_size, crop_size), is_scale=config.DATASET_IS_SCALE, is_random_flip=True, ignore_value=255, is_random_brightness=config.RANDOM_BRIGHT)",
                            "Call"
                        ],
                        [
                            "SaliencyDataSet(config.DATASET_TEST_ROOT_DIR, config.DATASET_TEST_LIST_PATH, crop_size=(None, None))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_48": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_50": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_85": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': get_params(model)}, {'params': get_params(model, mode='bias'), 'weight_decay': 0}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.LEARNING_RATE",
                            "Attribute"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "config.WEIGHT_DECAY",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_144": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_146": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_157": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_159": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SummaryWriter_101": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "pathjoin(config.MODEL_SAVE_ROOT_DIR, 'running')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "show_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[imgs, labels, preds]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_count_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_108": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "labels.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_106": {
                "input": {
                    "value": "imgs_dict['preds']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_149": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}