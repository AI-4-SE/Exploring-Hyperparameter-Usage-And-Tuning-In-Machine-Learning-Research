{
    "src/Inference/predictions.py": {
        "tensorflow": {
            "load_model_56": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_path",
                            "Method Argument"
                        ],
                        [
                            "model_path",
                            "Method Argument"
                        ],
                        [
                            "model_path",
                            "Method Argument"
                        ]
                    ]
                },
                "custom_objects": {
                    "value": "{'PAM': PAM, 'CAM': CAM}",
                    "type": "Dict",
                    "possible_values": []
                },
                "compile": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_39": {
                "variable": {
                    "value": "_img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.expand_dims(data, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/Inference/predictions_reconstruction.py": {
        "tensorflow": {}
    },
    "src/Models/UNet/AttentionGatedUNet.py": {
        "tensorflow": {
            "multiply_38": {
                "x": {
                    "value": "[x, psi]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_58": {
                "x": {
                    "value": "[x, psi]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Input_148": {
                "variable": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.input_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNormalization_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Concatenate_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_33": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_36": {
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPooling3D_48": {
                "pool_size": {
                    "value": "[2, 2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNormalization_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Concatenate_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_53": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_56": {
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling3D_68": {
                "pool_size": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[2, 2, 2]",
                            "List"
                        ],
                        [
                            "[2, 2, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "Concatenate_75": {
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "MaxPooling3D_82": {
                "pool_size": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[2, 2, 2]",
                            "List"
                        ],
                        [
                            "[2, 2, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv3DTranspose_88": {
                "filters": {
                    "value": "nr_of_convolutions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nr_of_convolutions",
                            "Method Argument"
                        ],
                        [
                            "nr_of_convolutions",
                            "Method Argument"
                        ],
                        [
                            "nr_of_convolutions",
                            "Method Argument"
                        ],
                        [
                            "nr_of_convolutions",
                            "Method Argument"
                        ],
                        [
                            "nr_of_convolutions",
                            "Method Argument"
                        ],
                        [
                            "nr_of_convolutions",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Activation_91": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Concatenate_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Model_196": {
                "inputs": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Input(shape=self.input_shape)",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Convolution3D(nr_of_convolutions, 3, padding='same')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "SpatialDropout3D(spatial_dropout)(x)",
                            "Call"
                        ],
                        [
                            "MaxPooling3D(downsample)(x_before_downsampling)",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=-1)([pyramid_conv, x])",
                            "Call"
                        ],
                        [
                            "MaxPooling3D(downsample)(x_before_downsampling)",
                            "Call"
                        ],
                        [
                            "Conv3DTranspose(nr_of_convolutions, kernel_size=3, padding='same', strides=2)(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate()([x, attention])",
                            "Call"
                        ],
                        [
                            "convolution_block(x, nr_of_convolutions, use_bn, spatial_dropout)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "variable"
                        ],
                        [
                            "convolution_block(x, self.convolutions[-1], self.encoder_use_bn, self.encoder_spatial_dropout)",
                            "Call"
                        ],
                        [
                            "encoder_block(x, nbc, use_bn=self.encoder_use_bn, spatial_dropout=self.encoder_spatial_dropout)",
                            "Call"
                        ],
                        [
                            "encoder_block_pyramid(x, scaled_input[i], nbc, use_bn=self.encoder_use_bn, spatial_dropout=self.encoder_spatial_dropout)",
                            "Call"
                        ],
                        [
                            "decoder_block(x, connection[i + 1], nbc, use_bn=self.decoder_use_bn, spatial_dropout=self.decoder_spatial_dropout)",
                            "Call"
                        ],
                        [
                            "Convolution3D(self.nb_classes, 1, activation='softmax')(x)",
                            "Call"
                        ],
                        [
                            "Convolution3D(self.nb_classes, 1, activation='softmax')(lay)",
                            "Call"
                        ],
                        [
                            "recons_list[::-1]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Activation_15": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_131": {
                "variable": {
                    "value": "intersection1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "output1 * target1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_137": {
                "t": {
                    "value": "1.0 - dice",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 - epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNormalization_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SpatialDropout3D_17": {
                "rate": {
                    "value": "spatial_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_132": {
                "input_tensor": {
                    "value": "target1 * target1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AveragePooling3D_162": {
                "pool_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "src/Models/UNet/DualAttentionUNet.py": {
        "tensorflow": {
            "transpose_42": {
                "variable": {
                    "value": "vec_aT",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "vec_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Reshape(target_shape=(h * w * d, filters))(x)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_43": {
                "variable": {
                    "value": "aTa",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "vec_aT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(vec_a, perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "vec_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Reshape(target_shape=(h * w * d, filters))(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_45": {
                "variable": {
                    "value": "aaTa",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "vec_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Reshape(target_shape=(h * w * d, filters))(x)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "softmax_aTa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Activation('softmax')(aTa)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_84": {
                "variable": {
                    "value": "b_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Reshape(target_shape=(h * w * d, filters // 8))(b_layer)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_89": {
                "variable": {
                    "value": "bc_mul",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "c_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Convolution3D(filters // 8, 1, use_bias=False)(x)",
                            "Call"
                        ],
                        [
                            "Reshape(target_shape=(h * w * d, filters // 8))(c_layer)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "b_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Convolution3D(filters // 8, 1, use_bias=False)(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(Reshape(target_shape=(h * w * d, filters // 8))(b_layer), perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_91": {
                "variable": {
                    "value": "bcd_mul",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "activation_bc_mul",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Activation(activation='softmax')(bc_mul)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "d_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Convolution3D(filters, 1, use_bias=False)(x)",
                            "Call"
                        ],
                        [
                            "Reshape(target_shape=(h * w * d, filters))(d_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Input_209": {
                "variable": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.input_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_252": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[pam, cam]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_initializer_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPooling3D_116": {
                "pool_size": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[2, 2, 2]",
                            "List"
                        ],
                        [
                            "[2, 2, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "Concatenate_123": {
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "MaxPooling3D_130": {
                "pool_size": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[2, 2, 2]",
                            "List"
                        ],
                        [
                            "[2, 2, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv3DTranspose_136": {
                "filters": {
                    "value": "nr_of_convolutions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nr_of_convolutions",
                            "Method Argument"
                        ],
                        [
                            "nr_of_convolutions",
                            "Method Argument"
                        ],
                        [
                            "nr_of_convolutions",
                            "Method Argument"
                        ],
                        [
                            "nr_of_convolutions",
                            "Method Argument"
                        ],
                        [
                            "nr_of_convolutions",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Concatenate_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_140": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv3DTranspose_147": {
                "filters": {
                    "value": "nr_of_convolutions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nr_of_convolutions",
                            "Method Argument"
                        ],
                        [
                            "nr_of_convolutions",
                            "Method Argument"
                        ],
                        [
                            "nr_of_convolutions",
                            "Method Argument"
                        ],
                        [
                            "nr_of_convolutions",
                            "Method Argument"
                        ],
                        [
                            "nr_of_convolutions",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3DTranspose_149": {
                "filters": {
                    "value": "nr_of_convolutions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nr_of_convolutions",
                            "Method Argument"
                        ],
                        [
                            "nr_of_convolutions",
                            "Method Argument"
                        ],
                        [
                            "nr_of_convolutions",
                            "Method Argument"
                        ],
                        [
                            "nr_of_convolutions",
                            "Method Argument"
                        ],
                        [
                            "nr_of_convolutions",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "upsampling_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(math.pow(2, iteration))",
                            "Call"
                        ]
                    ]
                }
            },
            "Concatenate_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_153": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_279": {
                "inputs": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Input(shape=self.input_shape)",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Convolution3D(nr_of_convolutions, 3, padding='same')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "SpatialDropout3D(spatial_dropout)(x)",
                            "Call"
                        ],
                        [
                            "MaxPooling3D(downsample)(x_before_downsampling)",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=-1)([pyramid_conv, x])",
                            "Call"
                        ],
                        [
                            "MaxPooling3D(downsample)(x_before_downsampling)",
                            "Call"
                        ],
                        [
                            "Conv3DTranspose(nr_of_convolutions, kernel_size=3, padding='same', strides=2)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate()([cross_over_connection, x])",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "convolution_block(x, nr_of_convolutions, use_bn, spatial_dropout)",
                            "Call"
                        ],
                        [
                            "Conv3DTranspose(nr_of_convolutions, kernel_size=3, padding='same', strides=2)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate()([attention_layer_up, cross_over_connection, x])",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "convolution_block(x, nr_of_convolutions, use_bn, spatial_dropout)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "variable"
                        ],
                        [
                            "convolution_block(x, self.convolutions[-1], self.encoder_use_bn, self.encoder_spatial_dropout)",
                            "Call"
                        ],
                        [
                            "add([pam, cam])",
                            "Call"
                        ],
                        [
                            "SpatialDropout3D(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Convolution3D(self.convolutions[-1], 1, padding='same')(x)",
                            "Call"
                        ],
                        [
                            "encoder_block(x, nbc, use_bn=self.encoder_use_bn, spatial_dropout=self.encoder_spatial_dropout)",
                            "Call"
                        ],
                        [
                            "encoder_block_pyramid(x, scaled_input[i], nbc, use_bn=self.encoder_use_bn, spatial_dropout=self.encoder_spatial_dropout)",
                            "Call"
                        ],
                        [
                            "decoder_block(x, connection[i + 1], nbc, use_bn=self.decoder_use_bn, spatial_dropout=self.decoder_spatial_dropout)",
                            "Call"
                        ],
                        [
                            "decoder_block_guided(x, connection[i + 1], nbc, iteration=i + 1, attention_layer=x_bottom, use_bn=self.decoder_use_bn, spatial_dropout=self.decoder_spatial_dropout)",
                            "Call"
                        ],
                        [
                            "Convolution3D(self.nb_classes, 1, activation='softmax')(x)",
                            "Call"
                        ],
                        [
                            "Convolution3D(self.nb_classes, 1, activation='softmax')(lay)",
                            "Call"
                        ],
                        [
                            "recons_list[::-1]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Reshape_41": {
                "target_shape": {
                    "value": "(h * w * d, filters)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Activation_44": {
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Reshape_46": {
                "target_shape": {
                    "value": "(h, w, d, filters)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Reshape_85": {
                "target_shape": {
                    "value": "(h * w * d, filters // 8)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Reshape_86": {
                "target_shape": {
                    "value": "(h * w * d, filters)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Activation_90": {
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Reshape_92": {
                "target_shape": {
                    "value": "(h, w, d, filters)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Activation_102": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_192": {
                "variable": {
                    "value": "intersection1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "output1 * target1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_198": {
                "t": {
                    "value": "1.0 - dice",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 - epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNormalization_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_241": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SpatialDropout3D_242": {
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNormalization_247": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_248": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SpatialDropout3D_249": {
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SpatialDropout3D_253": {
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNormalization_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Reshape_84": {
                "target_shape": {
                    "value": "(h * w * d, filters // 8)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNormalization_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SpatialDropout3D_104": {
                "rate": {
                    "value": "spatial_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_193": {
                "input_tensor": {
                    "value": "target1 * target1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AveragePooling3D_223": {
                "pool_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "src/Models/PLS/PLS.py": {
        "torch": {
            "Conv3d_52": {
                "variable": {
                    "value": "self.decoder_l0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.n_classes * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_53": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_61": {
                "variable": {
                    "value": "downsampled_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, downsampled_1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_67": {
                "variable": {
                    "value": "downsampled_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, downsampled_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_74": {
                "variable": {
                    "value": "downsampled_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "0.125",
                    "type": "float",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, downsampled_3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, self.ds_bridge_l2(out_l2)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, self.ds_bridge_l1(out_l1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/Models/PLS/PLS_buildingblocks.py": {
        "torch": {
            "Conv3d_9": {
                "variable": {
                    "value": "self.dConv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_chans",
                            "Method Argument"
                        ],
                        [
                            "in_chans",
                            "Method Argument"
                        ],
                        [
                            "in_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_chans",
                            "Method Argument"
                        ],
                        [
                            "in_chans",
                            "Method Argument"
                        ],
                        [
                            "in_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "dstride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "in_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_chans",
                            "Method Argument"
                        ],
                        [
                            "in_chans",
                            "Method Argument"
                        ],
                        [
                            "in_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_11": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_chans",
                            "Method Argument"
                        ],
                        [
                            "in_chans",
                            "Method Argument"
                        ],
                        [
                            "in_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_chans",
                            "Method Argument"
                        ],
                        [
                            "out_chans",
                            "Method Argument"
                        ],
                        [
                            "out_chans",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_12": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_chans",
                            "Method Argument"
                        ],
                        [
                            "out_chans",
                            "Method Argument"
                        ],
                        [
                            "out_chans",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_13": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_42": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chans + growth_rate * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_chans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, cat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, cat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, cat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_63": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dConv(x)",
                            "Call"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.norm(out))",
                            "Call"
                        ],
                        [
                            "cp.checkpoint(self.bottleneck_function, x)",
                            "Call"
                        ],
                        [
                            "self.bottleneck_function(x)",
                            "Call"
                        ],
                        [
                            "self.ds_conv_1(x)",
                            "Call"
                        ],
                        [
                            "self.ds_conv_2(cat)",
                            "Call"
                        ],
                        [
                            "self.ds_conv_3(cat)",
                            "Call"
                        ],
                        [
                            "self.ds_conv_4(cat)",
                            "Call"
                        ],
                        [
                            "self.conv(cat)",
                            "Call"
                        ],
                        [
                            "torch.add(out, x)",
                            "Call"
                        ],
                        [
                            "self.ds_conv(x)",
                            "Call"
                        ],
                        [
                            "self.upsampled(out)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Upsample_74": {
                "variable": {
                    "value": "self.upsampled",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}