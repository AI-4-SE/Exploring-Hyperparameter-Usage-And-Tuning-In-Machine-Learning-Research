{
    "lemonade.py": {
        "torch": {
            "ones_109": {
                "variable": {
                    "value": "one",
                    "possible_values": []
                },
                "*size": {
                    "value": "alpha[0, :, :, :, 0].size()",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "rand_111": {
                "variable": {
                    "value": "U",
                    "possible_values": []
                },
                "*size": {
                    "value": "alpha_expanded.size()",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "log_114": {
                "variable": {
                    "value": "fixed",
                    "possible_values": []
                },
                "input": {
                    "value": "one.mul(self.a * self.lambda_2 / self.lambda_1)",
                    "possible_values": []
                }
            },
            "log_117": {
                "variable": {
                    "value": "log_alpha",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha[0, :, :, :, 0] + eps",
                    "possible_values": []
                }
            },
            "mul_117": {
                "variable": {
                    "value": "log_alpha",
                    "possible_values": []
                },
                "input": {
                    "value": "-self.lambda_2 / self.lambda_1",
                    "possible_values": []
                }
            },
            "sum_120": {
                "variable": {
                    "value": "integral",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(U.div(1 - U + eps).mul(alpha_expanded).add(eps).pow(-self.lambda_2 / self.lambda_1).mul(self.a).add(1.0))",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "div_120": {
                "variable": {
                    "value": "integral",
                    "possible_values": []
                },
                "input": {
                    "value": "S",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                }
            },
            "mul_120": {
                "variable": {
                    "value": "integral",
                    "possible_values": []
                },
                "input": {
                    "value": "-2.0",
                    "possible_values": []
                }
            },
            "sum_123": {
                "variable": {
                    "value": "KLD",
                    "possible_values": []
                },
                "input": {
                    "value": "fixed.mul_(-1).add_(log_alpha.mul_(-1)).add_(integral.mul_(-1))",
                    "possible_values": []
                }
            },
            "Adam_181": {
                "variable": {
                    "value": "self.optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "self.lemonade.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "possible_values": []
                }
            },
            "MSELoss_184": {
                "variable": {
                    "value": "self.recon_function",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_33": {
                "variable": {
                    "value": "self.device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(gpu) if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "device_35": {
                "variable": {
                    "value": "self.device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "DataLoader_133": {
                "variable": {
                    "value": "dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "no_grad_155": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "log_120": {
                "input": {
                    "value": "U.div(1 - U + eps).mul(alpha_expanded).add(eps).pow(-self.lambda_2 / self.lambda_1).mul(self.a).add(1.0)",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "ReLU_24": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ELU_25": {
                "variable": {
                    "value": "self.elu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Softplus_26": {
                "variable": {
                    "value": "self.softplus",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "24",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.conv2",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "24",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "48",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "variable": {
                    "value": "self.conv3",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "48",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "72",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "variable": {
                    "value": "self.conv4",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "72",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "self.conv5",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "96",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "120",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "variable": {
                    "value": "self.conv6",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "120",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "48",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "possible_values": []
                }
            },
            "Conv3d_45": {
                "variable": {
                    "value": "self.conv3d",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "48",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_filter * 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.filter_length, remaining_x, remaining_y)",
                    "possible_values": []
                },
                "padding": {
                    "value": "(int(self.filter_length - 1), 0, 0)",
                    "possible_values": []
                }
            },
            "MaxPool2d_48": {
                "variable": {
                    "value": "self.max_pool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_51": {
                "variable": {
                    "value": "self.de_direct",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.n_filter",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.filter_length, self.n_pixel_x, self.n_pixel_y)",
                    "possible_values": []
                },
                "padding": {
                    "value": "(int(self.filter_length - 1), 0, 0)",
                    "possible_values": []
                }
            },
            "rand_83": {
                "variable": {
                    "value": "U",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.alpha.size()",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "tensor_136": {
                "variable": {
                    "value": "self.data",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "possible_values": [
                        [
                            "io.imread(data_file + '.tif').astype(np.float32)",
                            "Call"
                        ],
                        [
                            "data / datastd",
                            "BinOp"
                        ],
                        [
                            "d[data_sheet][...].astype(np.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "tensor_138": {
                "variable": {
                    "value": "self.data",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "possible_values": [
                        [
                            "io.imread(data_file + '.tif').astype(np.float32)",
                            "Call"
                        ],
                        [
                            "data / datastd",
                            "BinOp"
                        ],
                        [
                            "d[data_sheet][...].astype(np.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "possible_values": []
                }
            }
        }
    }
}