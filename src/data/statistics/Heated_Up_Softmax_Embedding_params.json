{
    "tensorflow/metric_learning_lenet.py": {
        "sklearn": {},
        "tensorflow": {
            "ConfigProto_184": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_186": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_189": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_input, n_input, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_191": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_192": {
                "variable": {
                    "value": "alpha_place_holder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_193": {
                "variable": {
                    "value": "lr_place_holder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_212": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "out_layer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_221": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_223": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(pred, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(Y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_226": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, 'float')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_227": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_place_holder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=())",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_230": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_86": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_215": {
                "variable": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.losses.softmax_cross_entropy(logits=out_layer, onehot_labels=Y, label_smoothing=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_218": {
                "variable": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(logits=out_layer, labels=Y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_202": {
                "name_or_scope": {
                    "value": "retrieval",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_223": {
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', [None, n_classes])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_226": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(pred, 1), tf.argmax(Y, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_215": {
                "logits": {
                    "value": "out_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', [None, n_classes])",
                            "Call"
                        ]
                    ]
                },
                "label_smoothing": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_218": {
                "logits": {
                    "value": "out_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', [None, n_classes])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tensorflow/utils.py": {
        "sklearn": {
            "normalized_mutual_info_score_132": {
                "variable": {
                    "value": "nmi",
                    "type": "variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "y_kmeans_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kmeans.predict(embedding)",
                            "Call"
                        ]
                    ]
                }
            },
            "KMeans_127": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "num_category",
                    "type": "variable",
                    "possible_values": []
                },
                "n_init": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "KMeans_129": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "num_category",
                    "type": "variable",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {}
    },
    "tensorflow/deep_metric_learning_Inception.py": {
        "tensorflow": {
            "ConfigProto_188": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_190": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_193": {
                "variable": {
                    "value": "img_place_holder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, default_image_size, default_image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_194": {
                "variable": {
                    "value": "label_place_holder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, num_training_category]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_195": {
                "variable": {
                    "value": "alpha_place_holder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_196": {
                "variable": {
                    "value": "lr_place_holder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_221": {
                "variable": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "out_layer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_231": {
                "variable": {
                    "value": "dummy_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(logits=label_place_holder, labels=label_place_holder)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_234": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_253": {
                "variable": {
                    "value": "optimizer_0",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "decay": {
                    "value": "0.94",
                    "type": "float",
                    "possible_values": []
                }
            },
            "equal_269": {
                "variable": {
                    "value": "correct_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(prediction, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(label_place_holder, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_270": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_pred, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_273": {
                "variable": {
                    "value": "restorer",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "variables_to_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Saver_287": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_224": {
                "variable": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.losses.softmax_cross_entropy(logits=out_layer, onehot_labels=label_place_holder, label_smoothing=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_227": {
                "variable": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(logits=out_layer, labels=label_place_holder)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_258": {
                "variable": {
                    "value": "optimizer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_place_holder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=())",
                            "Call"
                        ]
                    ]
                },
                "decay": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "assign_327": {
                "variable": {
                    "value": "assign_op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "retrieval_layer.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "classifier_init_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((embedding_dim, num_training_category), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "exponential_decay_98": {
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(6 * num_samples_per_epoch / args.training_batch_size)",
                            "Call"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "0.94",
                    "type": "float",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "exponential_decay_learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_211": {
                "name_or_scope": {
                    "value": "retrieval",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_231": {
                "logits": {
                    "value": "label_place_holder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, num_training_category])",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "label_place_holder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, num_training_category])",
                            "Call"
                        ]
                    ]
                }
            },
            "MomentumOptimizer_260": {
                "variable": {
                    "value": "optimizer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_place_holder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=())",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "argmax_269": {
                "input": {
                    "value": "label_place_holder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, num_training_category])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_270": {
                "x": {
                    "value": "correct_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(prediction, 1), tf.argmax(label_place_holder, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_275": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_224": {
                "logits": {
                    "value": "out_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "label_place_holder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, num_training_category])",
                            "Call"
                        ]
                    ]
                },
                "label_smoothing": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_227": {
                "logits": {
                    "value": "out_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "label_place_holder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, num_training_category])",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_262": {
                "variable": {
                    "value": "optimizer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_place_holder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=())",
                            "Call"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/layers.py": {
        "tensorflow": {
            "reduce_sum_69": {
                "variable": {
                    "value": "pos_dis",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "distance_matrix * one_hot_label",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_71": {
                "variable": {
                    "value": "neg_dis",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "distance_matrix * (1.0 - one_hot_label)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_73": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "neg_dis - pos_dis",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_29": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "retrieval_out",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[bn_node, n_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_33": {
                "variable": {
                    "value": "self.bout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_classes])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_35": {
                "variable": {
                    "value": "self.norm_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_36": {
                "variable": {
                    "value": "self.norm_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_normalize_45": {
                "variable": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pre_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_46": {
                "variable": {
                    "value": "norm_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_47": {
                "variable": {
                    "value": "out_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(pre_layer, dim=1)",
                            "Call"
                        ],
                        [
                            "pre_layer",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "norm_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(self.out, dim=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(self.out, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_33": {
                "shape": {
                    "value": "[n_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_55": {
                "variable": {
                    "value": "norm_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_57": {
                "a": {
                    "value": "pre_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "norm_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(self.out, dim=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(self.out, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_59": {
                "a": {
                    "value": "pre_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "norm_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(self.out, dim=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(self.out, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_62": {
                "a": {
                    "value": "pre_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "norm_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(self.out, dim=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(self.out, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_64": {
                "a": {
                    "value": "pre_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/mnist.py": {
        "tensorflow": {
            "as_dtype_117": {
                "type_value": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtypes.as_dtype(dtype).base_dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "tensorflow/nets/inception_utils.py": {
        "tensorflow": {}
    },
    "tensorflow/nets/inception_v1.py": {
        "tensorflow": {
            "pow_30": {
                "variable": {
                    "value": "power",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_31": {
                "variable": {
                    "value": "power_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "power",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pow(inputs, p)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_32": {
                "variable": {
                    "value": "power_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "power_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(power, axis=1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(power_sum, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.pow(power_sum, 1.0 / p)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_33": {
                "variable": {
                    "value": "power_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "power_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(power, axis=1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(power_sum, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.pow(power_sum, 1.0 / p)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0 / p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_26": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_63": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'InceptionV1'",
                            "Method Argument"
                        ],
                        [
                            "'InceptionV1'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV1",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_310": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'InceptionV1'",
                            "Method Argument"
                        ],
                        [
                            "'InceptionV1'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV1",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_103": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_121": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_144": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_162": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_180": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_198": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_216": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_239": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_257": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_314": {
                "name_or_scope": {
                    "value": "Logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_317": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 64, [7, 7], stride=2, scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, [1, 1], scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 192, [3, 3], scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], stride=2, scope=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, [7, 7], stride=1, scope='AvgPool_0a_7x7')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_332": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(net, embedding_dim, [1, 1], activation_fn=None, scope='BottleNeck')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, embedding_dim, [1, 1], activation_fn=None, normalizer_fn=None, scope='BottleNeck')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_91": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_109": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_132": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_150": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_168": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_186": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_204": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_227": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_245": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_92": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_94": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_97": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_100": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_110": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_112": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_115": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_118": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_133": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_135": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_138": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_141": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_151": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_156": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_159": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_169": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_171": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_174": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_177": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_187": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_189": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_192": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_195": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_205": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_207": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_210": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_213": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_228": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_230": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_233": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_236": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_246": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_248": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_251": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_254": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/nets/lenet.py": {
        "tensorflow": {
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'LeNet'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "LeNet",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[images]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "tensorflow/tensorboard_logger.py": {
        "tensorflow": {
            "Summary_172": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "img_summaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Summary_224": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Summary_229": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Event_243": {
                "variable": {
                    "value": "event",
                    "type": "variable",
                    "possible_values": []
                },
                "wall_time": {
                    "value": "self._time()",
                    "type": "Call",
                    "possible_values": []
                },
                "summary": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._scalar_summary(tf_name, value, step)",
                            "Call"
                        ],
                        [
                            "self._histogram_summary(tf_name, value, step=step)",
                            "Call"
                        ],
                        [
                            "self._image_summary(tf_name, images, step=step)",
                            "Call"
                        ],
                        [
                            "summary_pb2.Summary(value=img_summaries)",
                            "Call"
                        ],
                        [
                            "summary_pb2.Summary()",
                            "Call"
                        ],
                        [
                            "summary_pb2.Summary()",
                            "Call"
                        ],
                        [
                            "summary_pb2.Summary()",
                            "Call"
                        ]
                    ]
                }
            },
            "Summary_169": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "HistogramProto_203": {
                "variable": {
                    "value": "hist",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "HistogramProto_211": {
                "variable": {
                    "value": "hist",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Event_52": {
                "wall_time": {
                    "value": "self._time()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "file_version": {
                    "value": "brain.Event:2",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}