{
    "graph.py": {
        "sklearn": {}
    },
    "utils.py": {
        "sklearn": {
            "ParameterGrid_255": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "param_grid": {
                    "value": "grid_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid",
                            "variable"
                        ]
                    ]
                }
            },
            "CountVectorizer_46": {
                "variable": {
                    "value": "vectorizer",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "params",
                    "type": "kwargs",
                    "possible_values": []
                }
            },
            "normalize_125": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "X": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.data.astype(np.float64)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "norm": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'l1'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "fetch_20newsgroups_154": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "params",
                    "type": "kwargs",
                    "possible_values": []
                }
            },
            "fetch_rcv1_164": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "params",
                    "type": "kwargs",
                    "possible_values": []
                }
            },
            "KNeighborsClassifier_226": {
                "n_neighbors": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogisticRegression_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BernoulliNB_228": {
                "alpha": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "RandomForestClassifier_229": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MultinomialNB_230": {
                "alpha": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "RidgeClassifier_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearSVC_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "accuracy_score_239": {
                "y_true": {
                    "value": "train_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "train_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c.predict(train_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_240": {
                "y_true": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "test_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c.predict(test_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_241": {
                "y_true": {
                    "value": "train_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "train_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c.predict(train_data)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_242": {
                "y_true": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "test_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c.predict(test_data)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}