{
    "GraphAutoEncoder/graphAE_dataloader.py": {
        "torch": {
            "from_numpy_149": {
                "variable": {
                    "value": "weights_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pc_weights[:, 3]",
                            "Subscript"
                        ],
                        [
                            "pc_weights[:, 3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_150": {
                "variable": {
                    "value": "pc_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_pc_from_ply_fn(ply_fn)",
                            "Call"
                        ],
                        [
                            "get_augmented_pc(pc)",
                            "Call"
                        ],
                        [
                            "get_pc_from_ply_fn(ply_fn)",
                            "Call"
                        ],
                        [
                            "pc_weights[:, 0:3]",
                            "Subscript"
                        ],
                        [
                            "get_augmented_pc(pc)",
                            "Call"
                        ],
                        [
                            "pc_weights[:, 0:3]",
                            "Subscript"
                        ],
                        [
                            "get_augmented_pc(pc)",
                            "Call"
                        ],
                        [
                            "get_pc_from_ply_fn(ply_fn)",
                            "Call"
                        ],
                        [
                            "get_pc_from_ply_fn(fn)",
                            "Call"
                        ],
                        [
                            "get_pc_from_ply_fn(fn)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "GraphAutoEncoder/graphVAESSW.py": {
        "torch": {
            "ELU_33": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_44": {
                "variable": {
                    "value": "neighbor_num_lst",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "connection_info[:, 0].astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_50": {
                "variable": {
                    "value": "neighbor_id_lstlst",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "neighbor_id_lstlst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neighbor_id_dist_lstlst.reshape((out_point_num, -1, 2))[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(neighbor_id_lstlst).long()",
                            "Call"
                        ],
                        [
                            "self.neighbor_id_lstlst",
                            "Attribute"
                        ],
                        [
                            "self.neighbor_id_lstlst",
                            "Attribute"
                        ],
                        [
                            "neighbor_id_dist_lstlst.reshape((out_point_num, -1, 2))[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(neighbor_id_lstlst).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_61": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(weight_num, out_channel * in_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_64": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_111": {
                "variable": {
                    "value": "pc_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "in_pn + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "in_pc_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(in_pc, torch.zeros(batch, 1, in_channel).float().to(in_pc.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_123": {
                "variable": {
                    "value": "fuse_neighbors",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "pnm,bpni->bpmi",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[w_weights, in_neighbors]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_126": {
                "variable": {
                    "value": "out_neighbors",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "moi,bpmi->bpmo",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[normalized_weights, fuse_neighbors]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_180": {
                "variable": {
                    "value": "pc_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "in_pn + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_192": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "pmw,wc->pmc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[w_weights, normalized_weights]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_195": {
                "variable": {
                    "value": "in_pc_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(in_pc, torch.zeros(batch, 1, in_channel).float().to(device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_199": {
                "variable": {
                    "value": "out_neighbors",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "pmoi,bpmi->bpmo",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[weights, in_neighbors]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_250": {
                "variable": {
                    "value": "self.layer_lst",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_309": {
                "variable": {
                    "value": "self.layer_lst",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ParameterList_383": {
                "variable": {
                    "value": "self.vcoeffs_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_477": {
                "variable": {
                    "value": "gt_pc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(gt_pc, torch.zeros(batch, 1, 3).float().to(device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_478": {
                "variable": {
                    "value": "predict_pc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(predict_pc, torch.zeros(batch, 1, 3).float().to(device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_515": {
                "variable": {
                    "value": "gt_pc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(gt_pc, torch.zeros(batch, 1, 3).float().to(device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_516": {
                "variable": {
                    "value": "predict_pc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(predict_pc, torch.zeros(batch, 1, 3).float().to(device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_553": {
                "variable": {
                    "value": "gt_pc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(gt_pc, torch.zeros(batch, 1, 3).float().to(device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_554": {
                "variable": {
                    "value": "predict_pc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(predict_pc, torch.zeros(batch, 1, 3).float().to(device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_573": {
                "input": {
                    "value": "gt_pc_laplace - predict_pc_laplace",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_573": {
                "variable": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_66": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_point_num, out_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_145": {
                "variable": {
                    "value": "in_pc_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "oi,bpi->bpo",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[self.weight_res.view(out_channel, in_channel), in_pc_pad]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_159": {
                "variable": {
                    "value": "out_pc_res",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "pn,bpno->bpo",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[p_neighbors, in_neighbors]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_216": {
                "variable": {
                    "value": "in_pc_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "oi,bpi->bpo",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[self.weight_res.view(out_channel, in_channel), in_pc_pad]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_229": {
                "variable": {
                    "value": "out_pc_res",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "pm,bpmo->bpo",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[p_neighbors, in_neighbors]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_388": {
                "variable": {
                    "value": "neighbor_num_lst",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "connection_info[:, 0].astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_393": {
                "variable": {
                    "value": "neighbor_id_lstlst",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "neighbor_id_lstlst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neighbor_id_dist_lstlst.reshape((out_point_num, -1, 2))[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(neighbor_id_lstlst).long()",
                            "Call"
                        ],
                        [
                            "self.neighbor_id_lstlst",
                            "Attribute"
                        ],
                        [
                            "self.neighbor_id_lstlst",
                            "Attribute"
                        ],
                        [
                            "neighbor_id_dist_lstlst.reshape((out_point_num, -1, 2))[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(neighbor_id_lstlst).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_399": {
                "variable": {
                    "value": "w_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "raw_w_weights * neighbor_mask_lst.view(out_pn, max_neighbor_num, 1)",
                            "BinOp"
                        ],
                        [
                            "raw_w_weights * neighbor_mask_lst.view(out_pn, max_neighbor_num, 1).repeat(1, 1, weight_num)",
                            "BinOp"
                        ],
                        [
                            "torch.randn(out_point_num, max_neighbor_num, weight_num) / (avg_neighbor_num * weight_num)",
                            "BinOp"
                        ],
                        [
                            "nn.Parameter(w_weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_419": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_pc - predict_pc",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_419": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_500": {
                "variable": {
                    "value": "loss_l1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_pc_laplace - predict_pc_laplace",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_500": {
                "variable": {
                    "value": "loss_l1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_61": {
                "*size": {
                    "value": "weight_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight_num",
                            "Attribute"
                        ],
                        [
                            "self.weight_num",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "out_channel * in_channel",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "*size": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out_channel",
                            "Attribute"
                        ],
                        [
                            "self.out_channel",
                            "Attribute"
                        ],
                        [
                            "self.channel_lst[l + 1]",
                            "Subscript"
                        ],
                        [
                            "self.channel_lst[l + 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Parameter_77": {
                "variable": {
                    "value": "p_neighbors",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(out_point_num, max_neighbor_num) / avg_neighbor_num",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_81": {
                "variable": {
                    "value": "weight_res",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out_channel * in_channel",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_84": {
                "variable": {
                    "value": "weight_res",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "weight_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(1, out_channel * in_channel)",
                            "Call"
                        ],
                        [
                            "weight_res / out_channel",
                            "BinOp"
                        ],
                        [
                            "nn.Parameter(weight_res)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_66": {
                "*size": {
                    "value": "out_point_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "connection_info.shape[0]",
                            "Subscript"
                        ],
                        [
                            "connection_info.shape[0]",
                            "Subscript"
                        ],
                        [
                            "connection_info.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out_channel",
                            "Attribute"
                        ],
                        [
                            "self.out_channel",
                            "Attribute"
                        ],
                        [
                            "self.channel_lst[l + 1]",
                            "Subscript"
                        ],
                        [
                            "self.channel_lst[l + 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_121": {
                "*size": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "in_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_channel",
                            "Attribute"
                        ],
                        [
                            "self.in_channel",
                            "Attribute"
                        ],
                        [
                            "self.channel_lst[l]",
                            "Subscript"
                        ],
                        [
                            "self.channel_lst[l]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "abs_155": {
                "input": {
                    "value": "p_neighbors_raw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.p_neighbors",
                            "Attribute"
                        ],
                        [
                            "self.p_neighbors",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_195": {
                "*size": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "in_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_channel",
                            "Attribute"
                        ],
                        [
                            "self.in_channel",
                            "Attribute"
                        ],
                        [
                            "self.channel_lst[l]",
                            "Subscript"
                        ],
                        [
                            "self.channel_lst[l]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "abs_225": {
                "input": {
                    "value": "p_neighbors_raw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.p_neighbors",
                            "Attribute"
                        ],
                        [
                            "self.p_neighbors",
                            "Attribute"
                        ]
                    ]
                }
            },
            "randn_398": {
                "*size": {
                    "value": "out_point_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "connection_info.shape[0]",
                            "Subscript"
                        ],
                        [
                            "connection_info.shape[0]",
                            "Subscript"
                        ],
                        [
                            "connection_info.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_neighbor_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neighbor_id_lstlst.shape[1]",
                            "Subscript"
                        ],
                        [
                            "self.max_neighbor_num",
                            "Attribute"
                        ],
                        [
                            "self.max_neighbor_num",
                            "Attribute"
                        ],
                        [
                            "neighbor_id_lstlst.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "weight_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight_num",
                            "Attribute"
                        ],
                        [
                            "self.weight_num",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_477": {
                "*size": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "in_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_478": {
                "*size": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "in_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_515": {
                "*size": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "in_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_516": {
                "*size": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "in_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_553": {
                "*size": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "in_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_554": {
                "*size": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "in_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ],
                        [
                            "gt_pc.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_573": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_77": {
                "*size": {
                    "value": "out_point_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "connection_info.shape[0]",
                            "Subscript"
                        ],
                        [
                            "connection_info.shape[0]",
                            "Subscript"
                        ],
                        [
                            "connection_info.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_neighbor_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neighbor_id_lstlst.shape[1]",
                            "Subscript"
                        ],
                        [
                            "self.max_neighbor_num",
                            "Attribute"
                        ],
                        [
                            "self.max_neighbor_num",
                            "Attribute"
                        ],
                        [
                            "neighbor_id_lstlst.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "GraphAutoEncoder/graphVAE_train.py": {
        "torch": {
            "device_56": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda' if torch.cuda.is_available() else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_269": {
                "variable": {
                    "value": "temply_facedata",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack(tri_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_277": {
                "variable": {
                    "value": "net_autoenc",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net_autoenc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Net_autoenc(param, temply_facedata)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(net_autoenc, device_ids=device_ids).to(device)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0, 1, 2, 3]",
                            "List"
                        ],
                        [
                            "[0, 1, 2, 3]",
                            "List"
                        ]
                    ]
                }
            },
            "ExponentialLR_281": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getoptim(param.lr, net_autoenc)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_294": {
                "variable": {
                    "value": "dataloader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(param, framelist, temply_facedata)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "param.batch * len(device_ids)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_260": {
                "variable": {
                    "value": "ae_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "ae_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter(lambda x: x.requires_grad, itertools.chain(net_autoenc.module.net_geodec.parameters(), net_autoenc.module.net_geoenc.parameters(), net_autoenc.module.mcvcoeffsdec.parameters(), net_autoenc.module.mcvcoeffsenc.parameters()))",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "learningrate",
                    "type": "variable",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_286": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "param.read_weight_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_202": {
                "variable": {
                    "value": "t_eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t_logstd.exp()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_206": {
                "variable": {
                    "value": "klloss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-0.5 - t_logstd + 0.5 * t_mu ** 2 + 0.5 * torch.exp(2 * t_logstd)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_107": {
                "variable": {
                    "value": "meshvet",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([x, y, z])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_107": {
                "variable": {
                    "value": "meshvet",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_315": {
                "*size": {
                    "value": "loss.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device(f'cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_342": {
                "obj": {
                    "value": "{'encgeo_state_dict': net_autoenc.module.net_geoenc.state_dict(), 'decgeo_state_dict': net_autoenc.module.net_geodec.state_dict(), 'mcvcoeffsdec_dict': net_autoenc.module.mcvcoeffsdec.state_dict(), 'mcvcoeffsenc_dict': net_autoenc.module.mcvcoeffsenc.state_dict(), 'optimizer_state_dict': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param.write_weight_folder + 'model_%07d' % iteration + '_best.weight'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_206": {
                "input": {
                    "value": "2 * t_logstd",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}