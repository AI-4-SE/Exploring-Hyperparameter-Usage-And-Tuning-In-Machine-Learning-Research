{
    "classification.py": {
        "sklearn": {
            "LinearSVC_79": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "C": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "KMeans_96": {
                "variable": {
                    "value": "cluster",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "13",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "data_utils/ShapeNetLoader.py": {
        "torch": {
            "from_numpy_260": {
                "variable": {
                    "value": "point_set",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "point_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.loadtxt(mystring).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "point_set[:, 0:3]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(point_set)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "geom_torch.py": {
        "torch": {
            "ones_12": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[xyz.shape[0], 1, xyz.shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_14": {
                "variable": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xyz, ones]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_15": {
                "variable": {
                    "value": "xyz_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mat",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([xyz, ones], dim=1)",
                            "Call"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_34": {
                "variable": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pts0_centered * conf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "pts1_centered.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_54": {
                "variable": {
                    "value": "Rs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "Rs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "Rs + [R[None]]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(Rs, dim=0)",
                            "Call"
                        ],
                        [
                            "random_pose(N=len(x), range=random_range)",
                            "Call"
                        ],
                        [
                            "Rs.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Rs).to(x.device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(Rs).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Rs).to(x.device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_117": {
                "variable": {
                    "value": "Rs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Rs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "Rs + [R[None]]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(Rs, dim=0)",
                            "Call"
                        ],
                        [
                            "random_pose(N=len(x), range=random_range)",
                            "Call"
                        ],
                        [
                            "Rs.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Rs).to(x.device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(Rs).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Rs).to(x.device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "from_numpy_118": {
                "variable": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "center_pts1 - torch.matmul(Rs, center_pts0)",
                            "BinOp"
                        ],
                        [
                            "random_t((N,), limit=float(limit_t))",
                            "Call"
                        ],
                        [
                            "random_pose(N=len(x), range=random_range)",
                            "Call"
                        ],
                        [
                            "ts.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(ts).to(x.device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(ts).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(ts).to(x.device)",
                            "Call"
                        ],
                        [
                            "ts + [v_t * np.random.uniform(-1, 1, 2)[:, None]]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_166": {
                "variable": {
                    "value": "Rs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Rs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "Rs + [R[None]]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(Rs, dim=0)",
                            "Call"
                        ],
                        [
                            "random_pose(N=len(x), range=random_range)",
                            "Call"
                        ],
                        [
                            "Rs.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Rs).to(x.device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(Rs).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Rs).to(x.device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "from_numpy_167": {
                "variable": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "center_pts1 - torch.matmul(Rs, center_pts0)",
                            "BinOp"
                        ],
                        [
                            "random_t((N,), limit=float(limit_t))",
                            "Call"
                        ],
                        [
                            "random_pose(N=len(x), range=random_range)",
                            "Call"
                        ],
                        [
                            "ts.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(ts).to(x.device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(ts).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(ts).to(x.device)",
                            "Call"
                        ],
                        [
                            "ts + [v_t * np.random.uniform(-1, 1, 2)[:, None]]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "svd_49": {
                "variable": {
                    "value": "(U, S, V)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cov[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "det_50": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(V, U.transpose(1, 0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "Vd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[V[:, :-1], V[:, -1:] * d]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_52": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Vd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([V[:, :-1], V[:, -1:] * d], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "U.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_56": {
                "input": {
                    "value": "Rs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "Rs + [R[None]]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(Rs, dim=0)",
                            "Call"
                        ],
                        [
                            "random_pose(N=len(x), range=random_range)",
                            "Call"
                        ],
                        [
                            "Rs.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Rs).to(x.device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(Rs).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Rs).to(x.device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "other": {
                    "value": "center_pts0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(pts0 * conf).sum(dim=2, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_119": {
                "input": {
                    "value": "Rs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "Rs + [R[None]]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(Rs, dim=0)",
                            "Call"
                        ],
                        [
                            "random_pose(N=len(x), range=random_range)",
                            "Call"
                        ],
                        [
                            "Rs.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Rs).to(x.device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(Rs).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Rs).to(x.device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "erfcinv(inv_x) * np.pi",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_121": {
                "input": {
                    "value": "Rs.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "center_pts1 - torch.matmul(Rs, center_pts0)",
                            "BinOp"
                        ],
                        [
                            "random_t((N,), limit=float(limit_t))",
                            "Call"
                        ],
                        [
                            "random_pose(N=len(x), range=random_range)",
                            "Call"
                        ],
                        [
                            "ts.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(ts).to(x.device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(ts).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(ts).to(x.device)",
                            "Call"
                        ],
                        [
                            "ts + [v_t * np.random.uniform(-1, 1, 2)[:, None]]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_168": {
                "input": {
                    "value": "Rs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "Rs + [R[None]]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(Rs, dim=0)",
                            "Call"
                        ],
                        [
                            "random_pose(N=len(x), range=random_range)",
                            "Call"
                        ],
                        [
                            "Rs.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Rs).to(x.device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(Rs).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Rs).to(x.device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "erfcinv(inv_x) * np.pi",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_170": {
                "input": {
                    "value": "Rs.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "center_pts1 - torch.matmul(Rs, center_pts0)",
                            "BinOp"
                        ],
                        [
                            "random_t((N,), limit=float(limit_t))",
                            "Call"
                        ],
                        [
                            "random_pose(N=len(x), range=random_range)",
                            "Call"
                        ],
                        [
                            "ts.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(ts).to(x.device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(ts).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(ts).to(x.device)",
                            "Call"
                        ],
                        [
                            "ts + [v_t * np.random.uniform(-1, 1, 2)[:, None]]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "normal_26": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "std": {
                    "value": "std_noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "pts0.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normal_27": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "std": {
                    "value": "std_noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "pts0.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_50": {
                "input": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.svd(cov[i])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "U.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "loss_util.py": {
        "torch": {
            "sum_13": {
                "variable": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att * x[:, :, None, :, None]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_21": {
                "variable": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att * x[:, :, None, :, None]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_27": {
                "variable": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_centered.transpose(3, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "att * x_centered",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diagonal_31": {
                "variable": {
                    "value": "vol",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(x_centered.transpose(3, 2), att * x_centered)",
                            "Call"
                        ]
                    ]
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim2": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_31": {
                "variable": {
                    "value": "vol",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_87": {
                "variable": {
                    "value": "loss_dict[sum]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(loss_dict.values())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_87": {
                "variable": {
                    "value": "loss_dict[sum]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "var_55": {
                "variable": {
                    "value": "loss_att_amount",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pai.reshape(pai.shape[0], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_55": {
                "variable": {
                    "value": "loss_att_amount",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_83": {
                "variable": {
                    "value": "loss_2cps",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loss_2cps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "loss_2cps + [((kps0_can - kps1) ** 2).sum(1).mean()]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(loss_2cps).mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_83": {
                "variable": {
                    "value": "loss_2cps",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_11": {
                "input": {
                    "value": "pai",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att.sum(dim=3, keepdim=True)",
                            "Call"
                        ],
                        [
                            "att.sum(dim=3, keepdim=True)",
                            "Call"
                        ],
                        [
                            "att.sum(dim=3, keepdim=True)",
                            "Call"
                        ],
                        [
                            "att.sum(dim=3, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_20": {
                "input": {
                    "value": "pai",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att.sum(dim=3, keepdim=True)",
                            "Call"
                        ],
                        [
                            "att.sum(dim=3, keepdim=True)",
                            "Call"
                        ],
                        [
                            "att.sum(dim=3, keepdim=True)",
                            "Call"
                        ],
                        [
                            "att.sum(dim=3, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_67": {
                "variable": {
                    "value": "kps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att * x[:, :, None, :, None]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_67": {
                "variable": {
                    "value": "kps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_80": {
                "input": {
                    "value": "R_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "kps0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kps[:bs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_65": {
                "input": {
                    "value": "pai",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att.sum(dim=3, keepdim=True)",
                            "Call"
                        ],
                        [
                            "att.sum(dim=3, keepdim=True)",
                            "Call"
                        ],
                        [
                            "att.sum(dim=3, keepdim=True)",
                            "Call"
                        ],
                        [
                            "att.sum(dim=3, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "DataLoader_29": {
                "variable": {
                    "value": "data_loader_tr",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_tr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset(data_dump_folder=config.data_dump_folder, indim=config.indim, id=config.cat_id, require_normal=require_normal, num_pts=config.num_pts, mode='train', jitter_type=config.pc_jitter_type)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_43": {
                "variable": {
                    "value": "data_loader_va",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_va",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset(data_dump_folder=config.data_dump_folder, indim=config.indim, id=config.cat_id, require_normal=require_normal, num_pts=config.num_pts, mode='test', jitter_type=config.pc_jitter_type)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_58": {
                "variable": {
                    "value": "data_loader_te",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_te",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset(data_dump_folder=config.data_dump_folder, indim=config.indim, freeze_data=True, id=config.cat_id, require_normal=require_normal, num_pts=config.num_pts, mode='test', jitter_type=config.pc_jitter_type)",
                            "Call"
                        ],
                        [
                            "dataset(data_dump_folder=config.data_dump_folder, indim=config.indim, freeze_data=True, id=config.cat_id, require_normal=require_normal, num_pts=config.num_pts, mode='test', jitter_type=config.pc_jitter_type)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_72": {
                "variable": {
                    "value": "data_loader_te",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_te",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset(data_dump_folder=config.data_dump_folder, indim=config.indim, freeze_data=True, id=config.cat_id, require_normal=require_normal, num_pts=config.num_pts, mode='test', jitter_type=config.pc_jitter_type)",
                            "Call"
                        ],
                        [
                            "dataset(data_dump_folder=config.data_dump_folder, indim=config.indim, freeze_data=True, id=config.cat_id, require_normal=require_normal, num_pts=config.num_pts, mode='test', jitter_type=config.pc_jitter_type)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/acne_ae.py": {
        "torch": {
            "cat_99": {
                "variable": {
                    "value": "gc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[kps[..., None], gc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_144": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_rot0] + x_rots",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_186": {
                "variable": {
                    "value": "gc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[kps_can[..., None], gc[self.num_ref_pcd:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "gc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pose_local, gc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mse_loss_225": {
                "variable": {
                    "value": "loss_beta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beta0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta[:bs]",
                            "Subscript"
                        ],
                        [
                            "beta[:bs]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "beta1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta[bs:]",
                            "Subscript"
                        ],
                        [
                            "beta[bs:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_260": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(R).to(x_can.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x_can",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pc.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(R_can, x) + T_can",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_285": {
                "variable": {
                    "value": "gc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[kps[..., None], gc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_288": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pc_recons",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(gc.transpose(2, 1).squeeze(-1), return_splits=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_288": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.ref_pcd, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_353": {
                "input": {
                    "value": "R_can",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "procruste_pose(kps, kps_ref, std_noise=0)",
                            "Call"
                        ],
                        [
                            "procruste_pose(kps_source, kps_ref, std_noise=noise)",
                            "Call"
                        ],
                        [
                            "procruste_pose(kps, kps_ref, std_noise=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pc.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "pc.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x_rot0] + x_rots, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat([self.ref_pcd, x], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(torch.from_numpy(R).to(x_can.device), x_can)",
                            "Call"
                        ],
                        [
                            "x_.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "pc.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "trans_pc_random(x, random_range=self.config.random_range, return_pose='rt')",
                            "Call"
                        ],
                        [
                            "torch.matmul(rt[0], x) + rt[1]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([x_rot0] + x_rots, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_354": {
                "input": {
                    "value": "R_can",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "procruste_pose(kps, kps_ref, std_noise=0)",
                            "Call"
                        ],
                        [
                            "procruste_pose(kps_source, kps_ref, std_noise=noise)",
                            "Call"
                        ],
                        [
                            "procruste_pose(kps, kps_ref, std_noise=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "kps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pose_local.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(R_can, kps) + T_can",
                            "BinOp"
                        ],
                        [
                            "pose_local.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "pose_local.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "pose_local.squeeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_381": {
                "variable": {
                    "value": "loss_beta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beta0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta[:bs]",
                            "Subscript"
                        ],
                        [
                            "beta[:bs]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "beta1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta[bs:]",
                            "Subscript"
                        ],
                        [
                            "beta[bs:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_261": {
                "ndarray": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rs",
                            "variable"
                        ]
                    ]
                }
            },
            "cat_337": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_rot0] + x_rots",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_94": {
                "input": {
                    "value": "R_can",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "procruste_pose(kps, kps_ref, std_noise=0)",
                            "Call"
                        ],
                        [
                            "procruste_pose(kps_source, kps_ref, std_noise=noise)",
                            "Call"
                        ],
                        [
                            "procruste_pose(kps, kps_ref, std_noise=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "kps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pose_local.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(R_can, kps) + T_can",
                            "BinOp"
                        ],
                        [
                            "pose_local.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "pose_local.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "pose_local.squeeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_178": {
                "input": {
                    "value": "R_can",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "procruste_pose(kps, kps_ref, std_noise=0)",
                            "Call"
                        ],
                        [
                            "procruste_pose(kps_source, kps_ref, std_noise=noise)",
                            "Call"
                        ],
                        [
                            "procruste_pose(kps, kps_ref, std_noise=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "kps_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pose_local[self.num_ref_pcd:].squeeze(-1)",
                            "Call"
                        ],
                        [
                            "pose_local[self.num_ref_pcd:].squeeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_179": {
                "input": {
                    "value": "R_can",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "procruste_pose(kps, kps_ref, std_noise=0)",
                            "Call"
                        ],
                        [
                            "procruste_pose(kps_source, kps_ref, std_noise=noise)",
                            "Call"
                        ],
                        [
                            "procruste_pose(kps, kps_ref, std_noise=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x[self.num_ref_pcd:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_265": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_141": {
                "input": {
                    "value": "rt_1[0].transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "rt_0[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_142": {
                "input": {
                    "value": "rt_1[0].transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "rt_0[1] - rt_1[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_324": {
                "input": {
                    "value": "rt[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pc.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "pc.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x_rot0] + x_rots, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat([self.ref_pcd, x], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(torch.from_numpy(R).to(x_can.device), x_can)",
                            "Call"
                        ],
                        [
                            "x_.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "pc.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "trans_pc_random(x, random_range=self.config.random_range, return_pose='rt')",
                            "Call"
                        ],
                        [
                            "torch.matmul(rt[0], x) + rt[1]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([x_rot0] + x_rots, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_334": {
                "input": {
                    "value": "rt_1[0].transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "rt_0[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_335": {
                "input": {
                    "value": "rt_1[0].transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "rt_0[1] - rt_1[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/model_utils/acne_utils.py": {
        "torch": {
            "Conv2d_14": {
                "variable": {
                    "value": "self.conv_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outc",
                            "variable"
                        ],
                        [
                            "outc",
                            "variable"
                        ],
                        [
                            "indim",
                            "variable"
                        ],
                        [
                            "outc",
                            "variable"
                        ],
                        [
                            "inc",
                            "Method Argument"
                        ],
                        [
                            "inc",
                            "Method Argument"
                        ],
                        [
                            "inc",
                            "Method Argument"
                        ],
                        [
                            "inc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(cn_type.split('-')[-1])",
                            "Call"
                        ],
                        [
                            "int(cn_type.split('-')[-1])",
                            "Call"
                        ],
                        [
                            "int(cn_type.split('-')[-1])",
                            "Call"
                        ],
                        [
                            "self.config.acne_num_g",
                            "Attribute"
                        ],
                        [
                            "num_g",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_32": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_att(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "attention + self.scale * coef[..., None]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_46": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x * a_norm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_127": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x * a_norm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_129": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(a_norm * out ** 2, dim=3, keepdim=True) + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_133": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out * a",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_147": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_211": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_241": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outc",
                            "variable"
                        ],
                        [
                            "outc",
                            "variable"
                        ],
                        [
                            "indim",
                            "variable"
                        ],
                        [
                            "outc",
                            "variable"
                        ],
                        [
                            "inc",
                            "Method Argument"
                        ],
                        [
                            "inc",
                            "Method Argument"
                        ],
                        [
                            "inc",
                            "Method Argument"
                        ],
                        [
                            "inc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.config.acne_dim",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "outc",
                            "Method Argument"
                        ],
                        [
                            "outc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_48": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.norm(self.linear(mean))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outc",
                            "variable"
                        ],
                        [
                            "outc",
                            "variable"
                        ],
                        [
                            "indim",
                            "variable"
                        ],
                        [
                            "outc",
                            "variable"
                        ],
                        [
                            "inc",
                            "Method Argument"
                        ],
                        [
                            "inc",
                            "Method Argument"
                        ],
                        [
                            "inc",
                            "Method Argument"
                        ],
                        [
                            "inc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2 * num_g",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_71": {
                "variable": {
                    "value": "self.weight_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, 1, inc, num_g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_72": {
                "variable": {
                    "value": "self.bias_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, inc, num_g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_75": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1, 1, num_g, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_83": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.permute(0, 2, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "context_vec.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_85": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a.view(a.shape[0], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_138": {
                "variable": {
                    "value": "weight_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "a.squeeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_138": {
                "variable": {
                    "value": "weight_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_139": {
                "variable": {
                    "value": "bias_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bias_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "a.squeeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_139": {
                "variable": {
                    "value": "bias_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_262": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x * a_norm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_21": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "outc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.config.acne_dim",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "outc",
                            "Method Argument"
                        ],
                        [
                            "outc",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outc",
                            "variable"
                        ],
                        [
                            "outc",
                            "variable"
                        ],
                        [
                            "indim",
                            "variable"
                        ],
                        [
                            "outc",
                            "variable"
                        ],
                        [
                            "inc",
                            "Method Argument"
                        ],
                        [
                            "inc",
                            "Method Argument"
                        ],
                        [
                            "inc",
                            "Method Argument"
                        ],
                        [
                            "inc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1 * num_g",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_88": {
                "variable": {
                    "value": "a_l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention[:, :self.num_g, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_89": {
                "variable": {
                    "value": "a_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention[:, self.num_g:, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.config.acne_dim",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "outc",
                            "Method Argument"
                        ],
                        [
                            "outc",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Identity_25": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_38": {
                "input": {
                    "value": "pai",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a.sum(dim=3, keepdim=True)",
                            "Call"
                        ],
                        [
                            "a.sum(dim=3, keepdim=True)",
                            "Call"
                        ],
                        [
                            "att_aligner.sum(dim=3, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_71": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outc",
                            "variable"
                        ],
                        [
                            "outc",
                            "variable"
                        ],
                        [
                            "indim",
                            "variable"
                        ],
                        [
                            "outc",
                            "variable"
                        ],
                        [
                            "inc",
                            "Method Argument"
                        ],
                        [
                            "inc",
                            "Method Argument"
                        ],
                        [
                            "inc",
                            "Method Argument"
                        ],
                        [
                            "inc",
                            "Method Argument"
                        ]
                    ]
                },
                "layout": {
                    "value": "num_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(cn_type.split('-')[-1])",
                            "Call"
                        ],
                        [
                            "int(cn_type.split('-')[-1])",
                            "Call"
                        ],
                        [
                            "int(cn_type.split('-')[-1])",
                            "Call"
                        ],
                        [
                            "self.config.acne_num_g",
                            "Attribute"
                        ],
                        [
                            "num_g",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_72": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outc",
                            "variable"
                        ],
                        [
                            "outc",
                            "variable"
                        ],
                        [
                            "indim",
                            "variable"
                        ],
                        [
                            "outc",
                            "variable"
                        ],
                        [
                            "inc",
                            "Method Argument"
                        ],
                        [
                            "inc",
                            "Method Argument"
                        ],
                        [
                            "inc",
                            "Method Argument"
                        ],
                        [
                            "inc",
                            "Method Argument"
                        ]
                    ]
                },
                "layout": {
                    "value": "num_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(cn_type.split('-')[-1])",
                            "Call"
                        ],
                        [
                            "int(cn_type.split('-')[-1])",
                            "Call"
                        ],
                        [
                            "int(cn_type.split('-')[-1])",
                            "Call"
                        ],
                        [
                            "self.config.acne_num_g",
                            "Attribute"
                        ],
                        [
                            "num_g",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_76": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_102": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_att(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "attention + self.scale * coef[..., None]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_117": {
                "input": {
                    "value": "pai",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a.sum(dim=3, keepdim=True)",
                            "Call"
                        ],
                        [
                            "a.sum(dim=3, keepdim=True)",
                            "Call"
                        ],
                        [
                            "att_aligner.sum(dim=3, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_130": {
                "input": {
                    "value": "a_norm * out ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_152": {
                "in_channels": {
                    "value": "inc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outc",
                            "variable"
                        ],
                        [
                            "outc",
                            "variable"
                        ],
                        [
                            "indim",
                            "variable"
                        ],
                        [
                            "outc",
                            "variable"
                        ],
                        [
                            "inc",
                            "Method Argument"
                        ],
                        [
                            "inc",
                            "Method Argument"
                        ],
                        [
                            "inc",
                            "Method Argument"
                        ],
                        [
                            "inc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.config.acne_dim",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "outc",
                            "Method Argument"
                        ],
                        [
                            "outc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_177": {
                "in_channels": {
                    "value": "inc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outc",
                            "variable"
                        ],
                        [
                            "outc",
                            "variable"
                        ],
                        [
                            "indim",
                            "variable"
                        ],
                        [
                            "outc",
                            "variable"
                        ],
                        [
                            "inc",
                            "Method Argument"
                        ],
                        [
                            "inc",
                            "Method Argument"
                        ],
                        [
                            "inc",
                            "Method Argument"
                        ],
                        [
                            "inc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.config.acne_dim",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "outc",
                            "Method Argument"
                        ],
                        [
                            "outc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_181": {
                "num_groups": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "outc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.config.acne_dim",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "outc",
                            "Method Argument"
                        ],
                        [
                            "outc",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_193": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clamp_260": {
                "input": {
                    "value": "pai",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a.sum(dim=3, keepdim=True)",
                            "Call"
                        ],
                        [
                            "a.sum(dim=3, keepdim=True)",
                            "Call"
                        ],
                        [
                            "att_aligner.sum(dim=3, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_99": {
                "variable": {
                    "value": "coef",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_select.squeeze(3).transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x.squeeze(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_105": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_184": {
                "num_features": {
                    "value": "outc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.config.acne_dim",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "outc",
                            "Method Argument"
                        ],
                        [
                            "outc",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/model_utils/decode_utils.py": {
        "torch": {
            "is_available_13": {
                "variable": {
                    "value": "self.use_cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_47": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_49": {
                "variable": {
                    "value": "xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.float()",
                            "Call"
                        ],
                        [
                            "x.float()",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.th(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "x[:, :, t_dim:]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, None].expand(-1, -1, rand_grid.shape[2], -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "y.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_58": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.float()",
                            "Call"
                        ],
                        [
                            "x.float()",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.th(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "x[:, :, t_dim:]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, None].expand(-1, -1, rand_grid.shape[2], -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_59": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.float()",
                            "Call"
                        ],
                        [
                            "y.float()",
                            "Call"
                        ],
                        [
                            "torch.cat([rand_grid, x], dim=-1)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "y.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_60": {
                "variable": {
                    "value": "zz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.float()",
                            "Call"
                        ],
                        [
                            "x.float()",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.th(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "x[:, :, t_dim:]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, None].expand(-1, -1, rand_grid.shape[2], -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "y.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_65": {
                "variable": {
                    "value": "diag_ind_x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_points_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_66": {
                "variable": {
                    "value": "diag_ind_y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_points_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1d_80": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nlatent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.bottleneck_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_81": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.bottleneck_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(self.bottleneck_size / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_82": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(self.bottleneck_size / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(self.bottleneck_size / 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_83": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(self.bottleneck_size / 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_84": {
                "variable": {
                    "value": "self.th",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_85": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.bottleneck_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_86": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(self.bottleneck_size / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_87": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(self.bottleneck_size / 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_90": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_91": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_92": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_116": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[PointGenCon(nlatent=desc_dim + grid_dim, bottleneck_size=config.decoder_bottleneck_size, outdim=config.indim, config=config) for i in range(0, num_kp)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rand_grid, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_163": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_21": {
                "variable": {
                    "value": "(mins, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.batch_pairwise_dist(gts, preds)",
                            "Call"
                        ],
                        [
                            "P / (atten + 0.001)",
                            "BinOp"
                        ],
                        [
                            "xx + yy - 2 * xy",
                            "BinOp"
                        ],
                        [
                            "rx.transpose(2, 1) + ry - 2 * zz",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_22": {
                "variable": {
                    "value": "loss_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(P, 1)",
                            "Call"
                        ],
                        [
                            "torch.min(P, 2)",
                            "Call"
                        ],
                        [
                            "torch.min(P, 1)",
                            "Call"
                        ],
                        [
                            "torch.min(P, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_23": {
                "variable": {
                    "value": "(mins, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.batch_pairwise_dist(gts, preds)",
                            "Call"
                        ],
                        [
                            "P / (atten + 0.001)",
                            "BinOp"
                        ],
                        [
                            "xx + yy - 2 * xy",
                            "BinOp"
                        ],
                        [
                            "rx.transpose(2, 1) + ry - 2 * zz",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_24": {
                "variable": {
                    "value": "loss_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(P, 1)",
                            "Call"
                        ],
                        [
                            "torch.min(P, 2)",
                            "Call"
                        ],
                        [
                            "torch.min(P, 1)",
                            "Call"
                        ],
                        [
                            "torch.min(P, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_32": {
                "variable": {
                    "value": "(mins, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.batch_pairwise_dist(gts, preds)",
                            "Call"
                        ],
                        [
                            "P / (atten + 0.001)",
                            "BinOp"
                        ],
                        [
                            "xx + yy - 2 * xy",
                            "BinOp"
                        ],
                        [
                            "rx.transpose(2, 1) + ry - 2 * zz",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_33": {
                "variable": {
                    "value": "loss_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(P, 1)",
                            "Call"
                        ],
                        [
                            "torch.min(P, 2)",
                            "Call"
                        ],
                        [
                            "torch.min(P, 1)",
                            "Call"
                        ],
                        [
                            "torch.min(P, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_34": {
                "variable": {
                    "value": "(mins, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.batch_pairwise_dist(gts, preds)",
                            "Call"
                        ],
                        [
                            "P / (atten + 0.001)",
                            "BinOp"
                        ],
                        [
                            "xx + yy - 2 * xy",
                            "BinOp"
                        ],
                        [
                            "rx.transpose(2, 1) + ry - 2 * zz",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_35": {
                "variable": {
                    "value": "loss_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(P, 1)",
                            "Call"
                        ],
                        [
                            "torch.min(P, 2)",
                            "Call"
                        ],
                        [
                            "torch.min(P, 1)",
                            "Call"
                        ],
                        [
                            "torch.min(P, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_106": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1, num_kp, num_points // num_kp, grid_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_154": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_154": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_48": {
                "input": {
                    "value": "y ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_165": {
                "in_features": {
                    "value": "desc_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "desc_dim",
                            "Method Argument"
                        ],
                        [
                            "desc_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "desc_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "desc_dim",
                            "Method Argument"
                        ],
                        [
                            "desc_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_167": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_169": {
                "in_features": {
                    "value": "desc_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "desc_dim",
                            "Method Argument"
                        ],
                        [
                            "desc_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim * num_points",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "network.py": {
        "torch": {
            "Adam_40": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_101": {
                "variable": {
                    "value": "load_res",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pt_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dir_pretrain, self.config.pretrain_pt, 'best_model.pth')",
                            "Call"
                        ],
                        [
                            "pt_file",
                            "Method Argument"
                        ],
                        [
                            "pt_file",
                            "Method Argument"
                        ],
                        [
                            "pt_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_114": {
                "variable": {
                    "value": "load_res",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pt_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dir_pretrain, self.config.pretrain_pt, 'best_model.pth')",
                            "Call"
                        ],
                        [
                            "pt_file",
                            "Method Argument"
                        ],
                        [
                            "pt_file",
                            "Method Argument"
                        ],
                        [
                            "pt_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_25": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_26": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MultiStepLR_46": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=config.learning_rate, weight_decay=config.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[200, 400]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_122": {
                "obj": {
                    "value": "{'iter_idx': self.iter_idx, 'model': self.model.state_dict(), 'optimizer': self.optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "pt_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dir_pretrain, self.config.pretrain_pt, 'best_model.pth')",
                            "Call"
                        ],
                        [
                            "pt_file",
                            "Method Argument"
                        ],
                        [
                            "pt_file",
                            "Method Argument"
                        ],
                        [
                            "pt_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MultiStepLR_51": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=config.learning_rate, weight_decay=config.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[250, 300]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_56": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=config.learning_rate, weight_decay=config.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[150, 200]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_370": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MultiStepLR_61": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=config.learning_rate, weight_decay=config.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[150, 200]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "isnan_133": {
                "input": {
                    "value": "param.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MultiStepLR_66": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=config.learning_rate, weight_decay=config.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[20, 40]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "vis_util.py": {
        "torch": {
            "squeeze_13": {
                "variable": {
                    "value": "label_map",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_13": {
                "input": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}