{
    "modules/my_token_characters_encoder.py": {
        "torch": {
            "Linear_33": {
                "variable": {
                    "value": "self._projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._encoder._module.get_output_dim()",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "projection_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.pop_int('projection_dim', None)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_37": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.pop_float('dropout', 0.0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "modules/simple_tagger.py": {
        "torch": {
            "softmax_140": {
                "variable": {
                    "value": "class_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reshaped_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.view(-1, self.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "in_features": {
                    "value": "self.encoder.get_output_dim()",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "modules/stack_rnn.py": {
        "torch": {
            "cat_252": {
                "variable": {
                    "value": "final_h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "final_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(final_h, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_253": {
                "variable": {
                    "value": "final_c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "final_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(final_c, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(inputs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_91": {
                "tensors": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_99": {
                "tensors": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "layer_dropout_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "layer_dropout_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.cat(layer_dropout_mask, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "recurrent_dropout_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "recurrent_dropout_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.cat(recurrent_dropout_mask, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_185": {
                "tensors": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_88": {
                "*size": {
                    "value": "layer.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.layer_0.input_linearity.weight.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_96": {
                "*size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.layer_0.input_linearity.weight.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_173": {
                "*size": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.layer_0.input_linearity.weight.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_177": {
                "*size": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.layer_0.input_linearity.weight.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "modules/stack_rnn_cell.py": {
        "torch": {
            "sigmoid_102": {
                "variable": {
                    "value": "input_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 0 * self.hidden_size:1 * self.hidden_size] + projected_state[:, 0 * self.hidden_size:1 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_104": {
                "variable": {
                    "value": "forget_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 1 * self.hidden_size:2 * self.hidden_size] + projected_state[:, 1 * self.hidden_size:2 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_106": {
                "variable": {
                    "value": "memory_init",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 2 * self.hidden_size:3 * self.hidden_size] + projected_state[:, 2 * self.hidden_size:3 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_108": {
                "variable": {
                    "value": "output_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 3 * self.hidden_size:4 * self.hidden_size] + projected_state[:, 3 * self.hidden_size:4 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.input_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "6 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_input_projection_bias",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.state_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.input_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_input_projection_bias",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.state_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_114": {
                "variable": {
                    "value": "highway_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 4 * self.hidden_size:5 * self.hidden_size] + projected_state[:, 4 * self.hidden_size:5 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_111": {
                "input": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_gate * memory_init + forget_gate * previous_memory",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "modules/transition_parser_ucca.py": {
        "torch": {
            "Linear_77": {
                "variable": {
                    "value": "self.p_comp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim * 5 + self.ratio_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.word_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.p_s2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim * 3 + self.ratio_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.p_act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim + self.ratio_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.update_concept_node",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim + self.ratio_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.word_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_85": {
                "variable": {
                    "value": "self.pempty_buffer_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_86": {
                "variable": {
                    "value": "self.proot_stack_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.word_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_87": {
                "variable": {
                    "value": "self.pempty_action_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_88": {
                "variable": {
                    "value": "self.pempty_stack_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_90": {
                "variable": {
                    "value": "self._input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_85": {
                "*size": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_86": {
                "*size": {
                    "value": "self.word_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_87": {
                "*size": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_88": {
                "*size": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_497": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_278": {
                "variable": {
                    "value": "ratio_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[len(concept_node[sent_idx]) / (1.0 * sent_len[sent_idx])]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.pempty_action_emb.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_436": {
                "input": {
                    "value": "torch.stack([torch.sum(torch.stack(cur_loss)) for cur_loss in losses if len(cur_loss) > 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_289": {
                "variable": {
                    "value": "p_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[buffer_emb, stack_emb, action_emb]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_290": {
                "variable": {
                    "value": "p_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p_t, ratio_factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_292": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.p_s2h(p_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_293": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h, ratio_factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_softmax_297": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.p_act(h)[torch.tensor(valid_actions, dtype=torch.long, device=h.device)]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_326": {
                "variable": {
                    "value": "stack_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[stack_emb, ratio_factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_327": {
                "variable": {
                    "value": "comp_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.update_concept_node(stack_emb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_377": {
                "variable": {
                    "value": "comp_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[head_rep, mod_rep, action_emb, buffer_emb, stack_emb, ratio_factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_378": {
                "variable": {
                    "value": "comp_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.p_comp(comp_rep)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_437": {
                "tensors": {
                    "value": "cur_loss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_295": {
                "data": {
                    "value": "valid_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "valid_actions + action_id['RIGHT-REMOTE']",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "h.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_316": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_probs[valid_action_tbl[action]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_437": {
                "input": {
                    "value": "torch.stack(cur_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_308": {
                "data": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "valid_actions[0]",
                            "Subscript"
                        ],
                        [
                            "valid_actions[action_idx]",
                            "Subscript"
                        ],
                        [
                            "oracle_actions[sent_idx].pop(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "embedded_text_input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_299": {
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.log_softmax(logits, dim=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}