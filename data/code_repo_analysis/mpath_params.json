{
    "mpath/ganglion.py": {
        "torch": {
            "zeros_27": {
                "variable": {
                    "value": "self.receptors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "_width",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "_height",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "variable": {
                    "value": "self.activations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "_width",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "variable": {
                    "value": "self.baseline",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "_width",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_41": {
                "variable": {
                    "value": "field",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_47": {
                "variable": {
                    "value": "norm_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "self.comp_op(norm_dev, self.baseline)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "pt.abs(norm_dev)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.baseline",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_54": {
                "variable": {
                    "value": "self.activations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "norm_dev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pt.where(self.comp_op(norm_dev, self.baseline), pt.abs(norm_dev), self.baseline)",
                            "Call"
                        ],
                        [
                            "norm_dev",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_49": {
                "input": {
                    "value": "norm_dev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pt.where(self.comp_op(norm_dev, self.baseline), pt.abs(norm_dev), self.baseline)",
                            "Call"
                        ],
                        [
                            "norm_dev",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mpath/layer.py": {
        "torch": {
            "zeros_126": {
                "variable": {
                    "value": "self.potentials",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "_output_shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_129": {
                "variable": {
                    "value": "self.baseline",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.potentials",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_132": {
                "variable": {
                    "value": "self.potential_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.potentials",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_133": {
                "variable": {
                    "value": "self.potential_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.potentials",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_137": {
                "variable": {
                    "value": "self.activations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.potentials",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_244": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-self.threshold_alpha * norm_dev",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "greater_equal_248": {
                "variable": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pt.tanh(norm_dev) - theta",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "self.baseline",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_249": {
                "variable": {
                    "value": "self.activations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "condition": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pt.greater_equal(rho, self.baseline)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pt.tanh(norm_dev) - theta",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "self.activations",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_253": {
                "variable": {
                    "value": "self.potentials",
                    "type": "Attribute",
                    "possible_values": []
                },
                "condition": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pt.greater_equal(rho, self.baseline)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "self.baseline",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.potentials",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tril_275": {
                "variable": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pt.outer(self.activations, self.activations)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_283": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_92": {
                "variable": {
                    "value": "_tau",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pt.linspace(tau_min, tau_max, pt.prod(_output_shape))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "_output_shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_203": {
                "input": {
                    "value": "-self.alpha",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_204": {
                "input": {
                    "value": "-self.activation_alpha",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_192": {
                "input": {
                    "value": "self.potential_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_247": {
                "input": {
                    "value": "norm_dev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._norm_deviation()",
                            "Call"
                        ]
                    ]
                }
            },
            "outer_275": {
                "input": {
                    "value": "self.activations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "vec2": {
                    "value": "self.activations",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_93": {
                "start": {
                    "value": "tau_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_tau[0]",
                            "Subscript"
                        ]
                    ]
                },
                "end": {
                    "value": "tau_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_tau[1]",
                            "Subscript"
                        ]
                    ]
                },
                "steps": {
                    "value": "pt.prod(_output_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "outer_279": {
                "input": {
                    "value": "self.activations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "vec2": {
                    "value": "_input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "prod_93": {
                "input": {
                    "value": "_output_shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "count_nonzero_99": {
                "input": {
                    "value": "pt.any(_tau <= 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "any_99": {
                "input": {
                    "value": "_tau <= 0.0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "mpath/network.py": {
        "torch": {
            "set_default_dtype_24": {
                "d": {
                    "value": "pt.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_25": {
                "t": {
                    "value": "pt.FloatTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_115": {
                "obj": {
                    "value": "self._get_params()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path / 'network.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "mpath/plot.py": {
        "torch": {
            "rand_656": {
                "*size": {
                    "value": "(100, 500)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_667": {
                "*size": {
                    "value": "(100, 500)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_677": {
                "*size": {
                    "value": "(30, 500)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_683": {
                "*size": {
                    "value": "(30,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_695": {
                "*size": {
                    "value": "(10, 500)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_701": {
                "*size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_714": {
                "*size": {
                    "value": "(10, 500)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_720": {
                "*size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "mpath/retina.py": {
        "torch": {
            "zeros_52": {
                "variable": {
                    "value": "self.activations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * _size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_60": {
                "variable": {
                    "value": "self.activations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "pt.stack((self.on.activations, self.off.activations), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "full_33": {
                "variable": {
                    "value": "_tau",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "100.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stack_61": {
                "tensors": {
                    "value": "(self.on.activations, self.off.activations)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mpath/sensor/visual/bipolar.py": {
        "torch": {
            "zeros_28": {
                "variable": {
                    "value": "self.bp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * _source_width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "2 * _source_height",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "variable": {
                    "value": "field",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mpath/sensor/visual/ganglion.py": {
        "torch": {
            "zeros_34": {
                "variable": {
                    "value": "self.activations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "_width",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_38": {
                "variable": {
                    "value": "self.baseline",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "_width",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pad_67": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "center",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pt.ones((center_size, center_size)) * center_weight",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(surround_size, surround_size, surround_size, surround_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "surround_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1.0 / (_size ** 2 - center_size ** 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_86": {
                "variable": {
                    "value": "norm_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "self.comp_op(norm_dev, self.baseline)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "pt.abs(norm_dev)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.baseline",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_93": {
                "variable": {
                    "value": "self.activations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "norm_dev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pt.where(self.comp_op(norm_dev, self.baseline), pt.abs(norm_dev), self.baseline)",
                            "Call"
                        ],
                        [
                            "norm_dev",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_65": {
                "*size": {
                    "value": "(center_size, center_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_88": {
                "input": {
                    "value": "norm_dev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pt.where(self.comp_op(norm_dev, self.baseline), pt.abs(norm_dev), self.baseline)",
                            "Call"
                        ],
                        [
                            "norm_dev",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mpath/sensor/visual/generator.py": {
        "torch": {
            "zeros_135": {
                "variable": {
                    "value": "self.grating",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "_rows",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "_cols",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_47": {
                "indices": {
                    "value": "_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "_values",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.rows, self.cols) if _shape is None else _shape",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "full_62": {
                "size": {
                    "value": "(self.rows,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "_magnitude",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "normal_77": {
                "mean": {
                    "value": "_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "std": {
                    "value": "_sd",
                    "type": "variable",
                    "possible_values": []
                },
                "generator": {
                    "value": "(self.rows,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_108": {
                "input": {
                    "value": "self._sparse(indices, values).to_dense()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.rows,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "roll_165": {
                "variable": {
                    "value": "self.grating",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.grating",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shifts": {
                    "value": "_shift",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "_axis",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "mpath/sensor/visual/receptor.py": {
        "torch": {
            "zeros_431": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.scaled.height, self.scaled.width, self.scaled.depth)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "OneHotCategorical_441": {
                "variable": {
                    "value": "ohc",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pt.zeros((self.scaled.height, self.scaled.width, self.scaled.depth))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_487": {
                "variable": {
                    "value": "frame",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "frame",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_frame(_probe=True)",
                            "Call"
                        ],
                        [
                            "self.frame_op(self.processing, self.source)",
                            "Call"
                        ],
                        [
                            "cv.cvtColor(frame, self.mode)",
                            "Call"
                        ],
                        [
                            "cv.resize(frame, (self.scaled.width, self.scaled.height), interpolation=cv.INTER_AREA)",
                            "Call"
                        ],
                        [
                            "pt.from_numpy(frame).float()",
                            "Call"
                        ],
                        [
                            "frame * self.flatmask",
                            "BinOp"
                        ],
                        [
                            "self._get_frame()",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_585": {
                "variable": {
                    "value": "_frame",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_frame",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ptf.pad(_frame, _padding)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_337": {
                "variable": {
                    "value": "patch_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(patch_rows, patch_cols)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_401": {
                "indices": {
                    "value": "np.array([sparse.rows, sparse.cols])",
                    "type": "Call",
                    "possible_values": []
                },
                "values": {
                    "value": "np.array(sparse.vals)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.scaled.padded.span, self.scaled.padded.span)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "pt.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_587": {
                "input": {
                    "value": "self.receptor_field",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self._stretch(_frame)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_279": {
                "*size": {
                    "value": "self.scaled.padded.height",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.scaled.padded.width",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_504": {
                "input": {
                    "value": "_frame",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ptf.pad(_frame, _padding)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_505": {
                "input": {
                    "value": "_frame",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ptf.pad(_frame, _padding)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_328": {
                "start": {
                    "value": "-halfrf",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "patch_end",
                    "type": "variable",
                    "possible_values": [
                        [
                            "halfrf + 1 if rfsize % 2 == 1 else halfrf",
                            "IfExp"
                        ]
                    ]
                }
            },
            "arange_329": {
                "start": {
                    "value": "-halfrf",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "patch_end",
                    "type": "variable",
                    "possible_values": [
                        [
                            "halfrf + 1 if rfsize % 2 == 1 else halfrf",
                            "IfExp"
                        ]
                    ]
                }
            },
            "repeat_interleave_329": {
                "input": {
                    "value": "rfsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices_by_rf_size.items()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mpath/sensor/visual/retina.py": {
        "torch": {
            "zeros_47": {
                "variable": {
                    "value": "self.activations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * _input_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_119": {
                "variable": {
                    "value": "edrf",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "[rowidx, colidx]",
                    "type": "List",
                    "possible_values": []
                },
                "values": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "size": {
                    "value": "(_ih, _iw)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_129": {
                "variable": {
                    "value": "self.activations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "pt.stack((self.on.activations, self.off.activations), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "full_36": {
                "variable": {
                    "value": "_tau",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(_input_shape,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "100.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_208": {
                "variable": {
                    "value": "retina",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(vrep, retina)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_209": {
                "variable": {
                    "value": "retina",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(retina, vrep)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_212": {
                "variable": {
                    "value": "retina",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hrep, retina)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_213": {
                "variable": {
                    "value": "retina",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(retina, hrep)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_130": {
                "tensors": {
                    "value": "(self.on.activations, self.off.activations)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}