{
    "CPN.py": {
        "tensorflow": {
            "concat_30": {
                "variable": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(aconv6, bconv6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_32": {
                "variable": {
                    "value": "outsz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size, outsz[1], outsz[2], outsz[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_34": {
                "variable": {
                    "value": "concat5",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(deconv5, bconv51)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_39": {
                "variable": {
                    "value": "outsz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size, outsz[1], outsz[2], outsz[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_42": {
                "variable": {
                    "value": "concat4",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(deconv4, bconv41, upflow4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_47": {
                "variable": {
                    "value": "outsz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size, outsz[1], outsz[2], outsz[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_50": {
                "variable": {
                    "value": "concat3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(deconv3, bconv31, upflow3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_55": {
                "variable": {
                    "value": "outsz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size, outsz[1], outsz[2], outsz[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_58": {
                "variable": {
                    "value": "concat2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(deconv2, bconv2, upflow2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_63": {
                "variable": {
                    "value": "outsz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size, outsz[1], outsz[2], outsz[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_66": {
                "variable": {
                    "value": "concat1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(deconv1, bconv1, upflow1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_5": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_6": {
                "input": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "aug_aff.py": {
        "tensorflow": {
            "crop_to_bounding_box_128": {
                "variable": {
                    "value": "img1s",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img1s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_to_bounding_box(img1s, offset_height, offset_width, target_height=imH, target_width=imW)",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(img1s, offset_height, offset_width, target_height=imH, target_width=imW)",
                            "Call"
                        ]
                    ]
                },
                "offset_height": {
                    "value": "offset_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=[], minval=0, maxval=oriH - imH + 1, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape=[], minval=0, maxval=oriH - imH + 1, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "offset_width": {
                    "value": "offset_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=[], minval=0, maxval=oriW - imW + 1, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape=[], minval=0, maxval=oriW - imW + 1, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "target_height": {
                    "value": "imH",
                    "type": "variable",
                    "possible_values": []
                },
                "target_width": {
                    "value": "imW",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "crop_to_bounding_box_129": {
                "variable": {
                    "value": "img2s",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img2s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_to_bounding_box(img2s, offset_height, offset_width, target_height=imH, target_width=imW)",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(img2s, offset_height, offset_width, target_height=imH, target_width=imW)",
                            "Call"
                        ]
                    ]
                },
                "offset_height": {
                    "value": "offset_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=[], minval=0, maxval=oriH - imH + 1, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape=[], minval=0, maxval=oriH - imH + 1, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "offset_width": {
                    "value": "offset_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=[], minval=0, maxval=oriW - imW + 1, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape=[], minval=0, maxval=oriW - imW + 1, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "target_height": {
                    "value": "imH",
                    "type": "variable",
                    "possible_values": []
                },
                "target_width": {
                    "value": "imW",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "crop_to_bounding_box_130": {
                "variable": {
                    "value": "edge1s",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "edge1s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_to_bounding_box(edge1s, offset_height, offset_width, target_height=imH, target_width=imW)",
                            "Call"
                        ]
                    ]
                },
                "offset_height": {
                    "value": "offset_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=[], minval=0, maxval=oriH - imH + 1, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape=[], minval=0, maxval=oriH - imH + 1, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "offset_width": {
                    "value": "offset_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=[], minval=0, maxval=oriW - imW + 1, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape=[], minval=0, maxval=oriW - imW + 1, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "target_height": {
                    "value": "imH",
                    "type": "variable",
                    "possible_values": []
                },
                "target_width": {
                    "value": "imW",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "crop_to_bounding_box_131": {
                "variable": {
                    "value": "edge2s",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "edge2s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_to_bounding_box(edge2s, offset_height, offset_width, target_height=imH, target_width=imW)",
                            "Call"
                        ]
                    ]
                },
                "offset_height": {
                    "value": "offset_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=[], minval=0, maxval=oriH - imH + 1, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape=[], minval=0, maxval=oriH - imH + 1, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "offset_width": {
                    "value": "offset_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=[], minval=0, maxval=oriW - imW + 1, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape=[], minval=0, maxval=oriW - imW + 1, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "target_height": {
                    "value": "imH",
                    "type": "variable",
                    "possible_values": []
                },
                "target_width": {
                    "value": "imW",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "crop_to_bounding_box_132": {
                "variable": {
                    "value": "flows",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "flows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_to_bounding_box(flows, offset_height, offset_width, target_height=imH, target_width=imW)",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(flows, offset_height, offset_width, target_height=imH, target_width=imW)",
                            "Call"
                        ]
                    ]
                },
                "offset_height": {
                    "value": "offset_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=[], minval=0, maxval=oriH - imH + 1, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape=[], minval=0, maxval=oriH - imH + 1, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "offset_width": {
                    "value": "offset_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=[], minval=0, maxval=oriW - imW + 1, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape=[], minval=0, maxval=oriW - imW + 1, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "target_height": {
                    "value": "imH",
                    "type": "variable",
                    "possible_values": []
                },
                "target_width": {
                    "value": "imW",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "crop_to_bounding_box_168": {
                "variable": {
                    "value": "img1s",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img1s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_to_bounding_box(img1s, offset_height, offset_width, target_height=imH, target_width=imW)",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(img1s, offset_height, offset_width, target_height=imH, target_width=imW)",
                            "Call"
                        ]
                    ]
                },
                "offset_height": {
                    "value": "offset_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=[], minval=0, maxval=oriH - imH + 1, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape=[], minval=0, maxval=oriH - imH + 1, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "offset_width": {
                    "value": "offset_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=[], minval=0, maxval=oriW - imW + 1, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape=[], minval=0, maxval=oriW - imW + 1, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "target_height": {
                    "value": "imH",
                    "type": "variable",
                    "possible_values": []
                },
                "target_width": {
                    "value": "imW",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "crop_to_bounding_box_169": {
                "variable": {
                    "value": "img2s",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img2s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_to_bounding_box(img2s, offset_height, offset_width, target_height=imH, target_width=imW)",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(img2s, offset_height, offset_width, target_height=imH, target_width=imW)",
                            "Call"
                        ]
                    ]
                },
                "offset_height": {
                    "value": "offset_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=[], minval=0, maxval=oriH - imH + 1, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape=[], minval=0, maxval=oriH - imH + 1, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "offset_width": {
                    "value": "offset_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=[], minval=0, maxval=oriW - imW + 1, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape=[], minval=0, maxval=oriW - imW + 1, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "target_height": {
                    "value": "imH",
                    "type": "variable",
                    "possible_values": []
                },
                "target_width": {
                    "value": "imW",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "crop_to_bounding_box_172": {
                "variable": {
                    "value": "flows",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "flows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_to_bounding_box(flows, offset_height, offset_width, target_height=imH, target_width=imW)",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(flows, offset_height, offset_width, target_height=imH, target_width=imW)",
                            "Call"
                        ]
                    ]
                },
                "offset_height": {
                    "value": "offset_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=[], minval=0, maxval=oriH - imH + 1, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape=[], minval=0, maxval=oriH - imH + 1, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "offset_width": {
                    "value": "offset_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=[], minval=0, maxval=oriW - imW + 1, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape=[], minval=0, maxval=oriW - imW + 1, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "target_height": {
                    "value": "imH",
                    "type": "variable",
                    "possible_values": []
                },
                "target_width": {
                    "value": "imW",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_6": {
                "variable": {
                    "value": "pie",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "3.14159265",
                    "type": "float",
                    "possible_values": []
                }
            },
            "multiply_11": {
                "variable": {
                    "value": "R_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.divide(R, tf.constant(180.0))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "pie",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(3.14159265)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_12": {
                "variable": {
                    "value": "cosR",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "R_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.divide(R, tf.constant(180.0)), pie)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_13": {
                "variable": {
                    "value": "sinR",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "R_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.divide(R, tf.constant(180.0)), pie)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_14": {
                "variable": {
                    "value": "rotate",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cosR, -sinR, 0.0, sinR, cosR, 0.0, 0.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_15": {
                "variable": {
                    "value": "rotate",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rotate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([cosR, -sinR, 0.0, sinR, cosR, 0.0, 0.0, 0.0, 1.0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(rotate, (-1, 3, 3))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_16": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[S, 0.0, 0.0, 0.0, S, 0.0, 0.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_17": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([S, 0.0, 0.0, 0.0, S, 0.0, 0.0, 0.0, 1.0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(scale, (-1, 3, 3))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_18": {
                "variable": {
                    "value": "transl",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[1.0, 0.0, tx, 0.0, 1.0, ty, 0.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_19": {
                "variable": {
                    "value": "transl",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "transl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([1.0, 0.0, tx, 0.0, 1.0, ty, 0.0, 0.0, 1.0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(transl, (-1, 3, 3))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_20": {
                "a": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([S, 0.0, 0.0, 0.0, S, 0.0, 0.0, 0.0, 1.0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(scale, (-1, 3, 3))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "rotate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([cosR, -sinR, 0.0, sinR, cosR, 0.0, 0.0, 0.0, 1.0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(rotate, (-1, 3, 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_30": {
                "variable": {
                    "value": "tensor_one",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_31": {
                "variable": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.ones(shape=tf.stack([height, 1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(tf.expand_dims(tf.linspace(0.0, tf.cast(width - tensor_one, 'float32'), width), 1), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_33": {
                "variable": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(tf.linspace(0.0, tf.cast(height - tensor_one, 'float32'), height), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.ones(shape=tf.stack([1, width]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_35": {
                "variable": {
                    "value": "x_t_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.ones(shape=tf.stack([height, 1])), tf.transpose(tf.expand_dims(tf.linspace(0.0, tf.cast(width - tensor_one, 'float32'), width), 1), [1, 0]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_36": {
                "variable": {
                    "value": "y_t_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.expand_dims(tf.linspace(0.0, tf.cast(height - tensor_one, 'float32'), height), 1), tf.ones(shape=tf.stack([1, width])))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "subtract_37": {
                "variable": {
                    "value": "x_t_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_t_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_t, (1, -1))",
                            "Call"
                        ],
                        [
                            "tf.subtract(x_t_flat, width * 0.5)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "width * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "subtract_38": {
                "variable": {
                    "value": "y_t_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_t_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y_t, (1, -1))",
                            "Call"
                        ],
                        [
                            "tf.subtract(y_t_flat, height * 0.5)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "height * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_39": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_t_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_t, (1, -1))",
                            "Call"
                        ],
                        [
                            "tf.subtract(x_t_flat, width * 0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_40": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_t_flat, y_t_flat, ones]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_51": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=0, values=[x_t_flat, y_t_flat, ones])",
                            "Call"
                        ],
                        [
                            "meshgrid(height, width)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grid, 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(grid, tf.stack([batchsize]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, tf.stack([batchsize, 3, -1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_52": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=0, values=[x_t_flat, y_t_flat, ones])",
                            "Call"
                        ],
                        [
                            "meshgrid(height, width)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grid, 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(grid, tf.stack([batchsize]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, tf.stack([batchsize, 3, -1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_53": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=0, values=[x_t_flat, y_t_flat, ones])",
                            "Call"
                        ],
                        [
                            "meshgrid(height, width)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grid, 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(grid, tf.stack([batchsize]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, tf.stack([batchsize, 3, -1]))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "tf.stack([batchsize])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_54": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=0, values=[x_t_flat, y_t_flat, ones])",
                            "Call"
                        ],
                        [
                            "meshgrid(height, width)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grid, 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(grid, tf.stack([batchsize]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, tf.stack([batchsize, 3, -1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([batchsize, 3, -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_55": {
                "variable": {
                    "value": "theta_eye",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(transl, tf.matmul(scale, rotate))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(tf.eye(3), 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_56": {
                "variable": {
                    "value": "theta_eye",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "theta_eye",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(theta, tf.expand_dims(tf.eye(3), 0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(theta_eye, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(theta_eye, tf.stack([batchsize]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(theta_eye, tf.stack([batchsize, 3, -1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_57": {
                "variable": {
                    "value": "theta_eye",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_eye",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(theta, tf.expand_dims(tf.eye(3), 0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(theta_eye, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(theta_eye, tf.stack([batchsize]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(theta_eye, tf.stack([batchsize, 3, -1]))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "tf.stack([batchsize])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_58": {
                "variable": {
                    "value": "theta_eye",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "theta_eye",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(theta, tf.expand_dims(tf.eye(3), 0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(theta_eye, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(theta_eye, tf.stack([batchsize]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(theta_eye, tf.stack([batchsize, 3, -1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([batchsize, 3, -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_59": {
                "variable": {
                    "value": "T_g",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "theta_eye",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(theta, tf.expand_dims(tf.eye(3), 0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(theta_eye, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(theta_eye, tf.stack([batchsize]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(theta_eye, tf.stack([batchsize, 3, -1]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=0, values=[x_t_flat, y_t_flat, ones])",
                            "Call"
                        ],
                        [
                            "meshgrid(height, width)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grid, 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(grid, tf.stack([batchsize]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, tf.stack([batchsize, 3, -1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_60": {
                "variable": {
                    "value": "x_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "T_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(theta_eye, grid)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_61": {
                "variable": {
                    "value": "y_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "T_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(theta_eye, grid)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_62": {
                "variable": {
                    "value": "x_s_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(T_g, [0, 0, 0], [-1, 1, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_63": {
                "variable": {
                    "value": "y_s_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(T_g, [0, 1, 0], [-1, 1, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_64": {
                "variable": {
                    "value": "x_f",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_s_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_s, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([batchsize, height, width, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_65": {
                "variable": {
                    "value": "y_f",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_s_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y_s, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([batchsize, height, width, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_66": {
                "variable": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(x_f, y_f)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_76": {
                "variable": {
                    "value": "gx_u_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gx_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gx[:, :, :, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_77": {
                "variable": {
                    "value": "gx_v_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gx_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gx[:, :, :, 1]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_78": {
                "variable": {
                    "value": "gx_uu",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gx_u_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(gx_u, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([batchsize, 1, -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_79": {
                "variable": {
                    "value": "gx_vv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gx_v_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(gx_v, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([batchsize, 1, -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_80": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gx_uu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(gx_u_flat, tf.stack([batchsize, 1, -1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_81": {
                "variable": {
                    "value": "gx_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[gx_uu, gx_vv, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_82": {
                "variable": {
                    "value": "A0A",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "A0",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_83": {
                "variable": {
                    "value": "A0A",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "A0A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(A0, A)",
                            "Call"
                        ],
                        [
                            "tf.reshape(A0A, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(A0A, tf.stack([batchsize]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(A0A, tf.stack([batchsize, 3, -1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_84": {
                "variable": {
                    "value": "A0A",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A0A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(A0, A)",
                            "Call"
                        ],
                        [
                            "tf.reshape(A0A, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(A0A, tf.stack([batchsize]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(A0A, tf.stack([batchsize, 3, -1]))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "tf.stack([batchsize])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_85": {
                "variable": {
                    "value": "A0A",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "A0A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(A0, A)",
                            "Call"
                        ],
                        [
                            "tf.reshape(A0A, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(A0A, tf.stack([batchsize]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(A0A, tf.stack([batchsize, 3, -1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([batchsize, 3, -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_86": {
                "variable": {
                    "value": "flow_out1",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "A0A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(A0, A)",
                            "Call"
                        ],
                        [
                            "tf.reshape(A0A, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(A0A, tf.stack([batchsize]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(A0A, tf.stack([batchsize, 3, -1]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "gx_aug",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([gx_uu, gx_vv, zeros], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_89": {
                "variable": {
                    "value": "flow_out1_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "flow_out1_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flow_out1[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(flow_out1_x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(flow_out1_x, tf.stack([batchsize, height, width, 1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_90": {
                "variable": {
                    "value": "flow_out1_y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "flow_out1_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flow_out1[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(flow_out1_y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(flow_out1_y, tf.stack([batchsize, height, width, 1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_91": {
                "variable": {
                    "value": "flow_out1_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "flow_out1_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flow_out1[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(flow_out1_x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(flow_out1_x, tf.stack([batchsize, height, width, 1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([batchsize, height, width, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_92": {
                "variable": {
                    "value": "flow_out1_y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "flow_out1_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flow_out1[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(flow_out1_y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(flow_out1_y, tf.stack([batchsize, height, width, 1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([batchsize, height, width, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_93": {
                "variable": {
                    "value": "flow_out1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(flow_out1_x, flow_out1_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_95": {
                "variable": {
                    "value": "flow_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "flow_out1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(A0A, gx_aug)",
                            "Call"
                        ],
                        [
                            "tf.concat((flow_out1_x, flow_out1_y), 3)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "flow_out2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aff_flow(A0, imsize, batchsize)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_112": {
                "variable": {
                    "value": "valid_map",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.stack([batchsize, imsize[0], imsize[1], 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_117": {
                "variable": {
                    "value": "A_A0_",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "A_",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "A0_",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_150": {
                "variable": {
                    "value": "valid_map",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.stack([batchsize, imsize[0], imsize[1], 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_155": {
                "variable": {
                    "value": "A_A0_",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "A_",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "A0_",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_159": {
                "variable": {
                    "value": "valid_map_b",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.stack([batchsize, imsize[0], imsize[1], 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_5": {
                "name_or_scope": {
                    "value": "rand_affine",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_25": {
                "name_or_scope": {
                    "value": "meshgrid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_47": {
                "name_or_scope": {
                    "value": "aff_flow",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_70": {
                "name_or_scope": {
                    "value": "flow_transform",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_103": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Rand_R_S_T'",
                            "MethodArgument"
                        ],
                        [
                            "'Rand_R_S_T'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_141": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Rand_R_S_T'",
                            "MethodArgument"
                        ],
                        [
                            "'Rand_R_S_T'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "divide_11": {
                "x": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=[], minval=minR, maxval=maxR, name='sample_rotation')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(180.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_31": {
                "shape": {
                    "value": "tf.stack([height, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_32": {
                "a": {
                    "value": "tf.expand_dims(tf.linspace(0.0, tf.cast(width - tensor_one, 'float32'), width), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_33": {
                "input": {
                    "value": "tf.linspace(0.0, tf.cast(height - tensor_one, 'float32'), height)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_34": {
                "shape": {
                    "value": "tf.stack([1, width])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_53": {
                "values": {
                    "value": "[batchsize]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_54": {
                "values": {
                    "value": "[batchsize, 3, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_55": {
                "input": {
                    "value": "tf.eye(3)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_57": {
                "values": {
                    "value": "[batchsize]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_58": {
                "values": {
                    "value": "[batchsize, 3, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_64": {
                "values": {
                    "value": "[batchsize, height, width, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_65": {
                "values": {
                    "value": "[batchsize, height, width, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_71": {
                "input": {
                    "value": "gx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "backwarp.backwarper(flows, ff1, imsize, name='warped_flow')",
                            "Call"
                        ],
                        [
                            "backwarp.backwarper(flows, ff1, imsize, name='warped_flow')",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_78": {
                "values": {
                    "value": "[batchsize, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_79": {
                "values": {
                    "value": "[batchsize, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_84": {
                "values": {
                    "value": "[batchsize]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_85": {
                "values": {
                    "value": "[batchsize, 3, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_91": {
                "values": {
                    "value": "[batchsize, height, width, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_92": {
                "values": {
                    "value": "[batchsize, height, width, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_104": {
                "input": {
                    "value": "img1s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_to_bounding_box(img1s, offset_height, offset_width, target_height=imH, target_width=imW)",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(img1s, offset_height, offset_width, target_height=imH, target_width=imW)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_142": {
                "input": {
                    "value": "img1s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_to_bounding_box(img1s, offset_height, offset_width, target_height=imH, target_width=imW)",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(img1s, offset_height, offset_width, target_height=imH, target_width=imW)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_11": {
                "value": {
                    "value": "180.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "expand_dims_32": {
                "input": {
                    "value": "tf.linspace(0.0, tf.cast(width - tensor_one, 'float32'), width)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_33": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stop": {
                    "value": "tf.cast(height - tensor_one, 'float32')",
                    "type": "Call",
                    "possible_values": []
                },
                "num": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imsize[0]",
                            "Subscript"
                        ],
                        [
                            "imsize[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_55": {
                "num_rows": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_112": {
                "values": {
                    "value": "[batchsize, imsize[0], imsize[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_150": {
                "values": {
                    "value": "[batchsize, imsize[0], imsize[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_159": {
                "values": {
                    "value": "[batchsize, imsize[0], imsize[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_31": {
                "values": {
                    "value": "[height, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linspace_32": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stop": {
                    "value": "tf.cast(width - tensor_one, 'float32')",
                    "type": "Call",
                    "possible_values": []
                },
                "num": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imsize[1]",
                            "Subscript"
                        ],
                        [
                            "imsize[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_33": {
                "x": {
                    "value": "height - tensor_one",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_34": {
                "values": {
                    "value": "[1, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_32": {
                "x": {
                    "value": "width - tensor_one",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "backwarp.py": {
        "tensorflow": {
            "transpose_12": {
                "variable": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_13": {
                "variable": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(rep, 'int32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_14": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(x, (-1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(rep, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_22": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_23": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "variable": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_27": {
                "variable": {
                    "value": "max_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(im)[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_28": {
                "variable": {
                    "value": "max_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(im)[2] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_31": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_33": {
                "variable": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_35": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(x), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x0, zero, max_x)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype='int32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[2] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_36": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x1, zero, max_x)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype='int32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[2] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_37": {
                "variable": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(y), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y0, zero, max_y)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype='int32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[1] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_38": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y1, zero, max_y)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype='int32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[1] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_51": {
                "variable": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.stack([-1, channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_52": {
                "variable": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_53": {
                "variable": {
                    "value": "Ia",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_y0 + x0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_54": {
                "variable": {
                    "value": "Ib",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_y1 + x0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_55": {
                "variable": {
                    "value": "Ic",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_y0 + x1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_56": {
                "variable": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_y1 + x1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_59": {
                "variable": {
                    "value": "x0_f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(x), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x0, zero, max_x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_60": {
                "variable": {
                    "value": "x1_f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x1, zero, max_x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_61": {
                "variable": {
                    "value": "y0_f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(y), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y0, zero, max_y)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_62": {
                "variable": {
                    "value": "y1_f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y1, zero, max_y)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_63": {
                "variable": {
                    "value": "wa",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x1_f - x) * (y1_f - y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_64": {
                "variable": {
                    "value": "wb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x1_f - x) * (y - y0_f)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_65": {
                "variable": {
                    "value": "wc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x - x0_f) * (y1_f - y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_66": {
                "variable": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x - x0_f) * (y - y0_f)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_67": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[wa * Ia, wb * Ib, wc * Ic, wd * Id]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_76": {
                "variable": {
                    "value": "tensor_one",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_77": {
                "variable": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.ones(shape=tf.stack([height, 1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(tf.expand_dims(tf.linspace(0.0, tf.cast(width - tensor_one, 'float32'), width), 1), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_79": {
                "variable": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(tf.linspace(0.0, tf.cast(height - tensor_one, 'float32'), height), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.ones(shape=tf.stack([1, width]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_82": {
                "variable": {
                    "value": "x_t_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.ones(shape=tf.stack([height, 1])), tf.transpose(tf.expand_dims(tf.linspace(0.0, tf.cast(width - tensor_one, 'float32'), width), 1), [1, 0]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_83": {
                "variable": {
                    "value": "y_t_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.expand_dims(tf.linspace(0.0, tf.cast(height - tensor_one, 'float32'), height), 1), tf.ones(shape=tf.stack([1, width])))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_85": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_t_flat, y_t_flat]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_94": {
                "variable": {
                    "value": "fu",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flow[:, :, :, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(fu, tf.stack([num_batch, 1, -1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([num_batch, 1, -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_95": {
                "variable": {
                    "value": "fv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flow[:, :, :, 1]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(fv, tf.stack([num_batch, 1, -1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([num_batch, 1, -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_96": {
                "variable": {
                    "value": "flow_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fu, fv]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_97": {
                "variable": {
                    "value": "flow_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "flow_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([fu, fv], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(flow_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_103": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=0, values=[x_t_flat, y_t_flat])",
                            "Call"
                        ],
                        [
                            "_meshgrid(out_height, out_width)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grid, 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(grid, tf.stack([num_batch]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, tf.stack([num_batch, 2, -1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_104": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=0, values=[x_t_flat, y_t_flat])",
                            "Call"
                        ],
                        [
                            "_meshgrid(out_height, out_width)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grid, 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(grid, tf.stack([num_batch]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, tf.stack([num_batch, 2, -1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_105": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=0, values=[x_t_flat, y_t_flat])",
                            "Call"
                        ],
                        [
                            "_meshgrid(out_height, out_width)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grid, 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(grid, tf.stack([num_batch]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, tf.stack([num_batch, 2, -1]))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "tf.stack([num_batch])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_106": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=0, values=[x_t_flat, y_t_flat])",
                            "Call"
                        ],
                        [
                            "_meshgrid(out_height, out_width)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grid, 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(grid, tf.stack([num_batch]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, tf.stack([num_batch, 2, -1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([num_batch, 2, -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_109": {
                "variable": {
                    "value": "T_g",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "flow_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([fu, fv], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(flow_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=0, values=[x_t_flat, y_t_flat])",
                            "Call"
                        ],
                        [
                            "_meshgrid(out_height, out_width)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grid, 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(grid, tf.stack([num_batch]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, tf.stack([num_batch, 2, -1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_110": {
                "variable": {
                    "value": "x_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "T_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(flow_flat, grid)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_111": {
                "variable": {
                    "value": "y_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "T_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(flow_flat, grid)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_112": {
                "variable": {
                    "value": "x_s_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(T_g, [0, 0, 0], [-1, 1, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_113": {
                "variable": {
                    "value": "y_s_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(T_g, [0, 1, 0], [-1, 1, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_117": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_transformed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_interpolate(Im, x_s_flat, y_s_flat, imsize)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([num_batch, out_height, out_width, num_channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_120": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'BackWarper'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_11": {
                "name_or_scope": {
                    "value": "_repeat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_15": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_18": {
                "name_or_scope": {
                    "value": "_interpolate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_71": {
                "name_or_scope": {
                    "value": "_meshgrid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_89": {
                "name_or_scope": {
                    "value": "_transform",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_12": {
                "input": {
                    "value": "tf.ones(shape=tf.stack([n_repeats]))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_14": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_20": {
                "input": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_21": {
                "input": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "floor_31": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "floor_33": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y, 'float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_51": {
                "values": {
                    "value": "[-1, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_77": {
                "shape": {
                    "value": "tf.stack([height, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_78": {
                "a": {
                    "value": "tf.expand_dims(tf.linspace(0.0, tf.cast(width - tensor_one, 'float32'), width), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_79": {
                "input": {
                    "value": "tf.linspace(0.0, tf.cast(height - tensor_one, 'float32'), height)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_80": {
                "shape": {
                    "value": "tf.stack([1, width])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_90": {
                "input": {
                    "value": "Im",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_91": {
                "input": {
                    "value": "Im",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_94": {
                "values": {
                    "value": "[num_batch, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_95": {
                "values": {
                    "value": "[num_batch, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_105": {
                "values": {
                    "value": "[num_batch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_106": {
                "values": {
                    "value": "[num_batch, 2, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_117": {
                "values": {
                    "value": "[num_batch, out_height, out_width, num_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_12": {
                "shape": {
                    "value": "tf.stack([n_repeats])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_78": {
                "input": {
                    "value": "tf.linspace(0.0, tf.cast(width - tensor_one, 'float32'), width)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_79": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stop": {
                    "value": "tf.cast(height - tensor_one, 'float32')",
                    "type": "Call",
                    "possible_values": []
                },
                "num": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_27": {
                "input": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_28": {
                "input": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_77": {
                "values": {
                    "value": "[height, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linspace_78": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stop": {
                    "value": "tf.cast(width - tensor_one, 'float32')",
                    "type": "Call",
                    "possible_values": []
                },
                "num": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_79": {
                "x": {
                    "value": "height - tensor_one",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_80": {
                "values": {
                    "value": "[1, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_12": {
                "values": {
                    "value": "[n_repeats]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_78": {
                "x": {
                    "value": "width - tensor_one",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "flowS_basic.py": {
        "tensorflow": {
            "concat_8": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(img1, img2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_21": {
                "variable": {
                    "value": "outsz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size, outsz[1], outsz[2], outsz[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_23": {
                "variable": {
                    "value": "concat5",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(deconv5, conv51)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_28": {
                "variable": {
                    "value": "outsz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size, outsz[1], outsz[2], outsz[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_31": {
                "variable": {
                    "value": "concat4",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(deconv4, conv41, upflow4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_36": {
                "variable": {
                    "value": "outsz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size, outsz[1], outsz[2], outsz[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_39": {
                "variable": {
                    "value": "concat3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(deconv3, conv31, upflow3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_44": {
                "variable": {
                    "value": "outsz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size, outsz[1], outsz[2], outsz[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_47": {
                "variable": {
                    "value": "concat2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(deconv2, conv2, upflow2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_52": {
                "variable": {
                    "value": "outsz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size, outsz[1], outsz[2], outsz[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_55": {
                "variable": {
                    "value": "concat1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(deconv1, conv1, upflow1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_5": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_7": {
                "input": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multiply_30": {
                "x": {
                    "value": "flow5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mylayers.conv(concat5, 'flow5', shape=[3, 3, int(512 * 2 * f), C], stride=1, reuse=reuse, training=training, activation=tf.identity)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_38": {
                "x": {
                    "value": "flow4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mylayers.conv(concat4, 'flow4', shape=[3, 3, int(512 * 2 * f + C), C], stride=1, reuse=reuse, training=training, activation=tf.identity)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_46": {
                "x": {
                    "value": "flow3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mylayers.conv(concat3, 'flow3', shape=[3, 3, int(256 * 2 * f + C), C], stride=1, reuse=reuse, training=training, activation=tf.identity)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_54": {
                "x": {
                    "value": "flow2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mylayers.conv(concat2, 'flow2', shape=[3, 3, int(128 * 2 * f + C), C], stride=1, reuse=reuse, training=training, activation=tf.identity)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_61": {
                "x": {
                    "value": "flow1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mylayers.conv(concat1, 'flow1', shape=[5, 5, int(64 * 2 * f + C), C], stride=1, reuse=reuse, training=training, activation=tf.identity)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_30": {
                "value": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_38": {
                "value": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_46": {
                "value": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_54": {
                "value": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_61": {
                "value": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "gaussian_smooth.py": {
        "tensorflow": {
            "Variable_19": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.convert_to_tensor(kernel)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_17": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "depthwise_conv2d_24": {
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "filter": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_25": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "convert_to_tensor_19": {
                "value": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_raw / kernel_raw.sum()",
                            "BinOp"
                        ],
                        [
                            "gauss_kernel(size, nsig, c_i)",
                            "Call"
                        ],
                        [
                            "make_gauss_var(size, nsig, c_i)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "get_batches.py": {
        "tensorflow": {
            "TFRecordReader_4": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_single_example_6": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "{'img1_raw': tf.FixedLenFeature([IMG_HEIGHT, IMG_WIDTH, 3], tf.float32), 'img2_raw': tf.FixedLenFeature([IMG_HEIGHT, IMG_WIDTH, 3], tf.float32), 'edge1_raw': tf.FixedLenFeature([IMG_HEIGHT, IMG_WIDTH, 1], tf.float32), 'edge2_raw': tf.FixedLenFeature([IMG_HEIGHT, IMG_WIDTH, 1], tf.float32), 'flow_raw': tf.FixedLenFeature([IMG_HEIGHT, IMG_WIDTH, 2], tf.float32)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "string_input_producer_36": {
                "variable": {
                    "value": "filename_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "[filename]",
                    "type": "List",
                    "possible_values": []
                },
                "num_epochs": {
                    "value": "num_epochs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shuffle_batch_44": {
                "variable": {
                    "value": "(img1s, img2s, edge1s, edge2s, flows)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img1, img2, edge1, edge2, flow]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "capacity": {
                    "value": "capp + 3 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "capp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_35": {
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_10": {
                "shape": {
                    "value": "[IMG_HEIGHT, IMG_WIDTH, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_11": {
                "shape": {
                    "value": "[IMG_HEIGHT, IMG_WIDTH, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_12": {
                "shape": {
                    "value": "[IMG_HEIGHT, IMG_WIDTH, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_13": {
                "shape": {
                    "value": "[IMG_HEIGHT, IMG_WIDTH, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_14": {
                "shape": {
                    "value": "[IMG_HEIGHT, IMG_WIDTH, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "get_batches_no_edge.py": {
        "tensorflow": {
            "TFRecordReader_4": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_single_example_6": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "{'img1_raw': tf.FixedLenFeature([IMG_HEIGHT, IMG_WIDTH, 3], tf.float32), 'img2_raw': tf.FixedLenFeature([IMG_HEIGHT, IMG_WIDTH, 3], tf.float32), 'flow_raw': tf.FixedLenFeature([IMG_HEIGHT, IMG_WIDTH, 2], tf.float32)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "string_input_producer_36": {
                "variable": {
                    "value": "filename_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "[filename]",
                    "type": "List",
                    "possible_values": []
                },
                "num_epochs": {
                    "value": "num_epochs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shuffle_batch_44": {
                "variable": {
                    "value": "(img1s, img2s, flows)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img1, img2, flow]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "capacity": {
                    "value": "capp + 3 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "capp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_35": {
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_10": {
                "shape": {
                    "value": "[IMG_HEIGHT, IMG_WIDTH, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_11": {
                "shape": {
                    "value": "[IMG_HEIGHT, IMG_WIDTH, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_14": {
                "shape": {
                    "value": "[IMG_HEIGHT, IMG_WIDTH, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "get_batches_vkitti.py": {
        "tensorflow": {
            "TFRecordReader_4": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_single_example_6": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "{'img1_raw': tf.FixedLenFeature([IMG_HEIGHT, IMG_WIDTH, 3], tf.float32), 'img2_raw': tf.FixedLenFeature([IMG_HEIGHT, IMG_WIDTH, 3], tf.float32), 'flow_raw': tf.FixedLenFeature([IMG_HEIGHT, IMG_WIDTH, 2], tf.float32), 'vmap_raw': tf.FixedLenFeature([IMG_HEIGHT, IMG_WIDTH, 1], tf.float32)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "string_input_producer_38": {
                "variable": {
                    "value": "filename_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "[filename]",
                    "type": "List",
                    "possible_values": []
                },
                "num_epochs": {
                    "value": "num_epochs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shuffle_batch_46": {
                "variable": {
                    "value": "(img1s, img2s, flows, vmaps)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img1, img2, flow, vmap]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "capacity": {
                    "value": "capp + 3 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "capp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_37": {
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_10": {
                "shape": {
                    "value": "[IMG_HEIGHT, IMG_WIDTH, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_11": {
                "shape": {
                    "value": "[IMG_HEIGHT, IMG_WIDTH, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_14": {
                "shape": {
                    "value": "[IMG_HEIGHT, IMG_WIDTH, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_15": {
                "shape": {
                    "value": "[IMG_HEIGHT, IMG_WIDTH, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "loss_layer.py": {
        "tensorflow": {
            "convert_to_tensor_7": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(epsilon)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(epsilon)",
                            "Call"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_9": {
                "variable": {
                    "value": "outsz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[outsz[1], outsz[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "subtract_12": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gtflow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(gtflow, size=outsz)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_13": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.square(diff)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.square(epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_14": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(gtflow, flow)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.square(diff), tf.square(epsilon))",
                            "Call"
                        ],
                        [
                            "tf.pow(diff, tf.convert_to_tensor(cbn))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(diff, axis=3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(vmap, diff)",
                            "Call"
                        ],
                        [
                            "tf.subtract(im1, im1_)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.square(diff), tf.square(epsilon))",
                            "Call"
                        ],
                        [
                            "tf.pow(diff, tf.convert_to_tensor(cbn), name='chamboneir')",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(diff, axis=3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(vmap, diff)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.convert_to_tensor(cbn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_15": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(gtflow, flow)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.square(diff), tf.square(epsilon))",
                            "Call"
                        ],
                        [
                            "tf.pow(diff, tf.convert_to_tensor(cbn))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(diff, axis=3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(vmap, diff)",
                            "Call"
                        ],
                        [
                            "tf.subtract(im1, im1_)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.square(diff), tf.square(epsilon))",
                            "Call"
                        ],
                        [
                            "tf.pow(diff, tf.convert_to_tensor(cbn), name='chamboneir')",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(diff, axis=3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(vmap, diff)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "multiply_16": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(vmap, size=outsz)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(vmap, size=outsz)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(gtflow, flow)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.square(diff), tf.square(epsilon))",
                            "Call"
                        ],
                        [
                            "tf.pow(diff, tf.convert_to_tensor(cbn))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(diff, axis=3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(vmap, diff)",
                            "Call"
                        ],
                        [
                            "tf.subtract(im1, im1_)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.square(diff), tf.square(epsilon))",
                            "Call"
                        ],
                        [
                            "tf.pow(diff, tf.convert_to_tensor(cbn), name='chamboneir')",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(diff, axis=3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(vmap, diff)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_17": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(gtflow, flow)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.square(diff), tf.square(epsilon))",
                            "Call"
                        ],
                        [
                            "tf.pow(diff, tf.convert_to_tensor(cbn))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(diff, axis=3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(vmap, diff)",
                            "Call"
                        ],
                        [
                            "tf.subtract(im1, im1_)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.square(diff), tf.square(epsilon))",
                            "Call"
                        ],
                        [
                            "tf.pow(diff, tf.convert_to_tensor(cbn), name='chamboneir')",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(diff, axis=3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(vmap, diff)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_22": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(weight)",
                            "Call"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "add_32": {
                "x": {
                    "value": "loss5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sup_get_loss(gtflow, flow5, vmap, weight=64.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "loss4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sup_get_loss(gtflow, flow4, vmap, weight=16.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_33": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(diff)",
                            "Call"
                        ],
                        [
                            "tf.add(loss1, tf.add(tf.add(tf.add(loss5, loss4), loss3), loss2))",
                            "Call"
                        ],
                        [
                            "tf.add(loss, loss0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(diff)",
                            "Call"
                        ],
                        [
                            "tf.add(dt1, tf.add(tf.add(tf.add(dt5, dt4), dt3), dt2))",
                            "Call"
                        ],
                        [
                            "tf.add(loss, dt0)",
                            "Call"
                        ],
                        [
                            "tf.add(pt1, tf.add(tf.add(tf.add(pt5, pt4), pt3), pt2))",
                            "Call"
                        ],
                        [
                            "tf.add(loss, pt0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "loss0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sup_get_loss(gtflow, flow0, vmap, weight=1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_34": {
                "variable": {
                    "value": "divideBy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "vmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(vmap, size=outsz)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(vmap, size=outsz)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_38": {
                "variable": {
                    "value": "vars_all",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_39": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_all",
                    "type": "variable",
                    "possible_values": []
                },
                "beta1": {
                    "value": "beta1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradients_40": {
                "variable": {
                    "value": "grads_all",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(diff)",
                            "Call"
                        ],
                        [
                            "tf.add(loss1, tf.add(tf.add(tf.add(loss5, loss4), loss3), loss2))",
                            "Call"
                        ],
                        [
                            "tf.add(loss, loss0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(diff)",
                            "Call"
                        ],
                        [
                            "tf.add(dt1, tf.add(tf.add(tf.add(dt5, dt4), dt3), dt2))",
                            "Call"
                        ],
                        [
                            "tf.add(loss, dt0)",
                            "Call"
                        ],
                        [
                            "tf.add(pt1, tf.add(tf.add(tf.add(pt5, pt4), pt3), pt2))",
                            "Call"
                        ],
                        [
                            "tf.add(loss, pt0)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "vars_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_63": {
                "variable": {
                    "value": "vars_all",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_64": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_all",
                    "type": "variable",
                    "possible_values": []
                },
                "beta1": {
                    "value": "beta1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "add_74": {
                "variable": {
                    "value": "grads_all",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "capped_grads_all_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[ClipIfNotNone(grad, 5000.0) for grad in grads_all_0]",
                            "ListComp"
                        ]
                    ]
                },
                "y": {
                    "value": "capped_grads_all_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[ClipIfNotNone(grad, 5000.0) for grad in grads_all_1]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "convert_to_tensor_117": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(epsilon)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(epsilon)",
                            "Call"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_120": {
                "variable": {
                    "value": "outsz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[outsz[1], outsz[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "subtract_127": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "im1",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "im1_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "backwarp.backwarper(im2, flow, outsz, name=name)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_128": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.square(diff)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.square(epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_129": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(gtflow, flow)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.square(diff), tf.square(epsilon))",
                            "Call"
                        ],
                        [
                            "tf.pow(diff, tf.convert_to_tensor(cbn))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(diff, axis=3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(vmap, diff)",
                            "Call"
                        ],
                        [
                            "tf.subtract(im1, im1_)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.square(diff), tf.square(epsilon))",
                            "Call"
                        ],
                        [
                            "tf.pow(diff, tf.convert_to_tensor(cbn), name='chamboneir')",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(diff, axis=3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(vmap, diff)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.convert_to_tensor(cbn)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "chamboneir",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_130": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(gtflow, flow)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.square(diff), tf.square(epsilon))",
                            "Call"
                        ],
                        [
                            "tf.pow(diff, tf.convert_to_tensor(cbn))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(diff, axis=3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(vmap, diff)",
                            "Call"
                        ],
                        [
                            "tf.subtract(im1, im1_)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.square(diff), tf.square(epsilon))",
                            "Call"
                        ],
                        [
                            "tf.pow(diff, tf.convert_to_tensor(cbn), name='chamboneir')",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(diff, axis=3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(vmap, diff)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "multiply_132": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(vmap, size=outsz)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(vmap, size=outsz)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(gtflow, flow)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.square(diff), tf.square(epsilon))",
                            "Call"
                        ],
                        [
                            "tf.pow(diff, tf.convert_to_tensor(cbn))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(diff, axis=3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(vmap, diff)",
                            "Call"
                        ],
                        [
                            "tf.subtract(im1, im1_)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.square(diff), tf.square(epsilon))",
                            "Call"
                        ],
                        [
                            "tf.pow(diff, tf.convert_to_tensor(cbn), name='chamboneir')",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(diff, axis=3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(vmap, diff)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_133": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(gtflow, flow)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.square(diff), tf.square(epsilon))",
                            "Call"
                        ],
                        [
                            "tf.pow(diff, tf.convert_to_tensor(cbn))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(diff, axis=3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(vmap, diff)",
                            "Call"
                        ],
                        [
                            "tf.subtract(im1, im1_)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.square(diff), tf.square(epsilon))",
                            "Call"
                        ],
                        [
                            "tf.pow(diff, tf.convert_to_tensor(cbn), name='chamboneir')",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(diff, axis=3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(vmap, diff)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_148": {
                "variable": {
                    "value": "dt5",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "get_data_term(im1_5, im2_5, flow5, vmap, name='data_term_5', cbn=cbn)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(w5 * 64.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_149": {
                "variable": {
                    "value": "dt4",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "get_data_term(im1_4, im2_4, flow4, vmap, name='data_term_4', cbn=cbn)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(w4 * 16.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_150": {
                "variable": {
                    "value": "dt3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "get_data_term(im1_3, im2_3, flow3, vmap, name='data_term_3', cbn=cbn)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(w3 * 4.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_151": {
                "variable": {
                    "value": "dt2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "get_data_term(im1_2, im2_2, flow2, vmap, name='data_term_2', cbn=cbn)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(w2 * 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_152": {
                "variable": {
                    "value": "dt1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "get_data_term(im1_1, im2_1, flow1, vmap, name='data_term_1', cbn=cbn)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(w1 * 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_153": {
                "variable": {
                    "value": "dt0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "get_data_term(im1_0, im2_0, flow0, vmap, name='data_term_0', cbn=cbn)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_154": {
                "x": {
                    "value": "dt5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(get_data_term(im1_5, im2_5, flow5, vmap, name='data_term_5', cbn=cbn), tf.constant(w5 * 64.0))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "dt4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(get_data_term(im1_4, im2_4, flow4, vmap, name='data_term_4', cbn=cbn), tf.constant(w4 * 16.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_155": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(diff)",
                            "Call"
                        ],
                        [
                            "tf.add(loss1, tf.add(tf.add(tf.add(loss5, loss4), loss3), loss2))",
                            "Call"
                        ],
                        [
                            "tf.add(loss, loss0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(diff)",
                            "Call"
                        ],
                        [
                            "tf.add(dt1, tf.add(tf.add(tf.add(dt5, dt4), dt3), dt2))",
                            "Call"
                        ],
                        [
                            "tf.add(loss, dt0)",
                            "Call"
                        ],
                        [
                            "tf.add(pt1, tf.add(tf.add(tf.add(pt5, pt4), pt3), pt2))",
                            "Call"
                        ],
                        [
                            "tf.add(loss, pt0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "dt0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(get_data_term(im1_0, im2_0, flow0, vmap, name='data_term_0', cbn=cbn), tf.constant(1.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_156": {
                "variable": {
                    "value": "divideBy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "vmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(vmap, size=outsz)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(vmap, size=outsz)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_160": {
                "variable": {
                    "value": "pt5",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sup_flow_loss(flow5, flow5r, vmap)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(w5 * 0.0625)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_161": {
                "variable": {
                    "value": "pt4",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sup_flow_loss(flow4, flow4r, vmap)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(w4 * 0.0625)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_162": {
                "variable": {
                    "value": "pt3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sup_flow_loss(flow3, flow3r, vmap)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(w3 * 0.0625)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_163": {
                "variable": {
                    "value": "pt2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sup_flow_loss(flow2, flow2r, vmap)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(w2 * 0.125)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_164": {
                "variable": {
                    "value": "pt1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sup_flow_loss(flow1, flow1r, vmap)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(w1 * 0.25)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_165": {
                "variable": {
                    "value": "pt0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sup_flow_loss(flow0, flow0r, vmap)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_166": {
                "x": {
                    "value": "pt5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(sup_flow_loss(flow5, flow5r, vmap), tf.constant(w5 * 0.0625))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "pt4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(sup_flow_loss(flow4, flow4r, vmap), tf.constant(w4 * 0.0625))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_167": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(diff)",
                            "Call"
                        ],
                        [
                            "tf.add(loss1, tf.add(tf.add(tf.add(loss5, loss4), loss3), loss2))",
                            "Call"
                        ],
                        [
                            "tf.add(loss, loss0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(diff)",
                            "Call"
                        ],
                        [
                            "tf.add(dt1, tf.add(tf.add(tf.add(dt5, dt4), dt3), dt2))",
                            "Call"
                        ],
                        [
                            "tf.add(loss, dt0)",
                            "Call"
                        ],
                        [
                            "tf.add(pt1, tf.add(tf.add(tf.add(pt5, pt4), pt3), pt2))",
                            "Call"
                        ],
                        [
                            "tf.add(loss, pt0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "pt0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(sup_flow_loss(flow0, flow0r, vmap), tf.constant(1.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_168": {
                "variable": {
                    "value": "divideBy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "vmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(vmap, size=outsz)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(vmap, size=outsz)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_23": {
                "x": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(weight)",
                            "Call"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "data_term",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sup_flow_loss(gtflow, flow, vmap)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_68": {
                "variable": {
                    "value": "grads_all_0",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "tower_loss[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "vars_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_71": {
                "variable": {
                    "value": "grads_all_1",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "tower_loss[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "vars_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_93": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_94": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=0, values=grads)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, 0)",
                            "Call"
                        ],
                        [
                            "ClipIfNotNone(grad, 5000)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_114": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=0, values=grads)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, 0)",
                            "Call"
                        ],
                        [
                            "ClipIfNotNone(grad, 5000)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-clipvalue",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "clipvalue",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_13": {
                "x": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(epsilon)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(epsilon)",
                            "Call"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_14": {
                "value": {
                    "value": "cbn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "divide_35": {
                "x": {
                    "value": "loss0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sup_get_loss(gtflow, flow0, vmap, weight=1.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "divideBy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(vmap)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(vmap)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(vmap)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_67": {
                "device_name": {
                    "value": "'/gpu:%d' % 0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_70": {
                "device_name": {
                    "value": "'/gpu:%d' % 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_87": {
                "variable": {
                    "value": "expanded_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_128": {
                "x": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(epsilon)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(epsilon)",
                            "Call"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_129": {
                "value": {
                    "value": "cbn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_148": {
                "value": {
                    "value": "w5 * 64.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_149": {
                "value": {
                    "value": "w4 * 16.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_150": {
                "value": {
                    "value": "w3 * 4.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_151": {
                "value": {
                    "value": "w2 * 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_152": {
                "value": {
                    "value": "w1 * 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_153": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "divide_157": {
                "x": {
                    "value": "dt0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(get_data_term(im1_0, im2_0, flow0, vmap, name='data_term_0', cbn=cbn), tf.constant(1.0))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "divideBy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(vmap)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(vmap)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(vmap)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_160": {
                "value": {
                    "value": "w5 * 0.0625",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_161": {
                "value": {
                    "value": "w4 * 0.0625",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_162": {
                "value": {
                    "value": "w3 * 0.0625",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_163": {
                "value": {
                    "value": "w2 * 0.125",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_164": {
                "value": {
                    "value": "w1 * 0.25",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_165": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "divide_169": {
                "x": {
                    "value": "pt0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(sup_flow_loss(flow0, flow0r, vmap), tf.constant(1.0))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "divideBy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(vmap)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(vmap)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(vmap)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "loss_layer_occ.py": {
        "tensorflow": {
            "stack_11": {
                "variable": {
                    "value": "outsz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[outsz[1], outsz[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_18": {
                "variable": {
                    "value": "occ_thresh_f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(tf.constant(0.01 * 1), mag_sq_f)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(0.5 * 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_19": {
                "variable": {
                    "value": "occ_thresh_b",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(tf.constant(0.01 * 1), mag_sq_b)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(0.5 * 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_20": {
                "variable": {
                    "value": "occ_f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "length_sq(flow_diff_f) > occ_thresh_f",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_21": {
                "variable": {
                    "value": "occ_b",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "length_sq(flow_diff_b) > occ_thresh_b",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_26": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(epsilon)",
                            "Call"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_27": {
                "variable": {
                    "value": "cbn",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "cbn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(cbn)",
                            "Call"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_28": {
                "variable": {
                    "value": "occt",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "occt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(occt)",
                            "Call"
                        ],
                        [
                            "1.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "subtract_29": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "im1",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "im1_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "backwarp.backwarper(im2, flow_f, outsz, name=name + 'forward')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_30": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.square(diff)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.square(epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_31": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(im1, im1_)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.square(diff), tf.square(epsilon))",
                            "Call"
                        ],
                        [
                            "tf.pow(diff, cbn, name='chamboneir')",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(diff, axis=3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(vmap, diff)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.multiply(diff, tf.subtract(tf.constant(1.0), occ)), tf.multiply(occt, occ))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "cbn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(cbn)",
                            "Call"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "chamboneir",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_32": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(im1, im1_)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.square(diff), tf.square(epsilon))",
                            "Call"
                        ],
                        [
                            "tf.pow(diff, cbn, name='chamboneir')",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(diff, axis=3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(vmap, diff)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.multiply(diff, tf.subtract(tf.constant(1.0), occ)), tf.multiply(occt, occ))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "multiply_33": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vmap",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(im1, im1_)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.square(diff), tf.square(epsilon))",
                            "Call"
                        ],
                        [
                            "tf.pow(diff, cbn, name='chamboneir')",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(diff, axis=3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(vmap, diff)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.multiply(diff, tf.subtract(tf.constant(1.0), occ)), tf.multiply(occt, occ))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_34": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(diff, tf.subtract(tf.constant(1.0), occ))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.multiply(occt, occ)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_39": {
                "variable": {
                    "value": "outsz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[outsz[1], outsz[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_49": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "loss_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "occ_weighted_diff(im1, im1_, occ_f, vmap=vmap_f, cbn=cbn, occt=occt)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "loss_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "occ_weighted_diff(im2, im2_, occ_b, vmap=vmap_b, cbn=cbn, occt=occt)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_64": {
                "variable": {
                    "value": "dt5",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "get_data_occ(im1_5, im2_5, flow_f5, flow_b5, name='data_term_5', cbn=cbn, occt=occt, vmap_f=vmap_f, vmap_b=vmap_b)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(w5 * 64.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_65": {
                "variable": {
                    "value": "dt4",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "get_data_occ(im1_4, im2_4, flow_f4, flow_b4, name='data_term_4', cbn=cbn, occt=occt, vmap_f=vmap_f, vmap_b=vmap_b)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(w4 * 16.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_66": {
                "variable": {
                    "value": "dt3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "get_data_occ(im1_3, im2_3, flow_f3, flow_b3, name='data_term_3', cbn=cbn, occt=occt, vmap_f=vmap_f, vmap_b=vmap_b)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(w3 * 4.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_67": {
                "variable": {
                    "value": "dt2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "get_data_occ(im1_2, im2_2, flow_f2, flow_b2, name='data_term_2', cbn=cbn, occt=occt, vmap_f=vmap_f, vmap_b=vmap_b)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(w2 * 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_68": {
                "variable": {
                    "value": "dt1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "get_data_occ(im1_1, im2_1, flow_f1, flow_b1, name='data_term_1', cbn=cbn, occt=occt, vmap_f=vmap_f, vmap_b=vmap_b)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(w1 * 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_69": {
                "variable": {
                    "value": "dt0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "get_data_occ(im1_0, im2_0, flow_f0, flow_b0, name='data_term_0', cbn=cbn, occt=occt, vmap_f=vmap_f, vmap_b=vmap_b)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_70": {
                "x": {
                    "value": "dt5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(get_data_occ(im1_5, im2_5, flow_f5, flow_b5, name='data_term_5', cbn=cbn, occt=occt, vmap_f=vmap_f, vmap_b=vmap_b), tf.constant(w5 * 64.0))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "dt4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(get_data_occ(im1_4, im2_4, flow_f4, flow_b4, name='data_term_4', cbn=cbn, occt=occt, vmap_f=vmap_f, vmap_b=vmap_b), tf.constant(w4 * 16.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_71": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(loss_f, loss_b)",
                            "Call"
                        ],
                        [
                            "tf.add(dt1, tf.add(tf.add(tf.add(dt5, dt4), dt3), dt2))",
                            "Call"
                        ],
                        [
                            "tf.add(loss, dt0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "dt0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(get_data_occ(im1_0, im2_0, flow_f0, flow_b0, name='data_term_0', cbn=cbn, occt=occt, vmap_f=vmap_f, vmap_b=vmap_b), tf.constant(1.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_72": {
                "variable": {
                    "value": "divideBy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(vmap_f)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_sum(vmap_b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_7": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_35": {
                "input_tensor": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(im1, im1_)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.square(diff), tf.square(epsilon))",
                            "Call"
                        ],
                        [
                            "tf.pow(diff, cbn, name='chamboneir')",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(diff, axis=3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(vmap, diff)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.multiply(diff, tf.subtract(tf.constant(1.0), occ)), tf.multiply(occt, occ))",
                            "Call"
                        ]
                    ]
                }
            },
            "square_7": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multiply_18": {
                "x": {
                    "value": "tf.constant(0.01 * 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "mag_sq_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "length_sq(flow_f) + length_sq(flow_f_)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_18": {
                "value": {
                    "value": "0.01 * 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_19": {
                "x": {
                    "value": "tf.constant(0.01 * 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "mag_sq_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "length_sq(flow_b) + length_sq(flow_b_)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_19": {
                "value": {
                    "value": "0.01 * 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_30": {
                "x": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(epsilon)",
                            "Call"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "multiply_34": {
                "x": {
                    "value": "occt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(occt)",
                            "Call"
                        ],
                        [
                            "1.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "occ",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_64": {
                "value": {
                    "value": "w5 * 64.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_65": {
                "value": {
                    "value": "w4 * 16.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_66": {
                "value": {
                    "value": "w3 * 4.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_67": {
                "value": {
                    "value": "w2 * 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_68": {
                "value": {
                    "value": "w1 * 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_69": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_72": {
                "input_tensor": {
                    "value": "vmap_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(vmap_b, size=outsz, method=tf.image.ResizeMethod.NEAREST_NEIGHBOR)",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_73": {
                "x": {
                    "value": "dt0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(get_data_occ(im1_0, im2_0, flow_f0, flow_b0, name='data_term_0', cbn=cbn, occt=occt, vmap_f=vmap_f, vmap_b=vmap_b), tf.constant(1.0))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "divideBy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.reduce_sum(vmap_f), tf.reduce_sum(vmap_b))",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_34": {
                "x": {
                    "value": "tf.constant(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "occ",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_34": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "maniFlow.py": {
        "tensorflow": {
            "concat_32": {
                "variable": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(aconv6, bconv6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_34": {
                "variable": {
                    "value": "outsz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size, outsz[1], outsz[2], outsz[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_36": {
                "variable": {
                    "value": "concat5",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(deconv5, bconv51)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_41": {
                "variable": {
                    "value": "outsz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size, outsz[1], outsz[2], outsz[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_44": {
                "variable": {
                    "value": "concat4",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(deconv4, bconv41, upflow4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_49": {
                "variable": {
                    "value": "outsz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size, outsz[1], outsz[2], outsz[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_52": {
                "variable": {
                    "value": "concat3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(deconv3, bconv31, upflow3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_57": {
                "variable": {
                    "value": "outsz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size, outsz[1], outsz[2], outsz[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_60": {
                "variable": {
                    "value": "concat2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(deconv2, bconv2, upflow2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_65": {
                "variable": {
                    "value": "outsz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size, outsz[1], outsz[2], outsz[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_68": {
                "variable": {
                    "value": "concat1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(deconv1, bconv1, upflow1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_5": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_6": {
                "input": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "mylayers.py": {
        "tensorflow": {
            "convert_to_tensor_5": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.5 * (1 + leak)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_6": {
                "variable": {
                    "value": "f2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.5 * (1 - leak)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_7": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(f1, x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.multiply(f2, tf.abs(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_10": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "conv2d_13": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.framework.model_variable('weights', shape=shape, initializer=init_w, trainable=training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.framework.model_variable('weights', shape=shape, initializer=init_w, trainable=training)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_15": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "activation(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(inputs, kernel, rate, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "activation(conv)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.framework.model_variable('biases', shape=[shape[3]], initializer=init_b, trainable=training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.framework.model_variable('biases', shape=[shape[3]], initializer=init_b, trainable=training)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_19": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "atrous_conv2d_22": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.framework.model_variable('weights', shape=shape, initializer=init_w, trainable=training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.framework.model_variable('weights', shape=shape, initializer=init_w, trainable=training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_24": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "activation(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(inputs, kernel, rate, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "activation(conv)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.framework.model_variable('biases', shape=[shape[3]], initializer=init_b, trainable=training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.framework.model_variable('biases', shape=[shape[3]], initializer=init_b, trainable=training)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_4": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_11": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_20": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "multiply_7": {
                "x": {
                    "value": "f2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(0.5 * (1 - leak))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.abs(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_7": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "sup_maniFlow.py": {
        "tensorflow": {
            "concat_7": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(img1, img2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_31": {
                "variable": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "aconv61",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mylayers.conv(aconv6, 'aconv61', shape=[3, 3, int(1024 * f_e), int(512 * f)], stride=1, reuse=reuse, training=training)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "bconv6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mylayers.conv(bconv51, 'bconv6', shape=[3, 3, int(512 * f), int(512 * f)], stride=2, reuse=reuse, training=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_33": {
                "variable": {
                    "value": "outsz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size, outsz[1], outsz[2], outsz[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_35": {
                "variable": {
                    "value": "concat5",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(deconv5, bconv51)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_40": {
                "variable": {
                    "value": "outsz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size, outsz[1], outsz[2], outsz[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_43": {
                "variable": {
                    "value": "concat4",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(deconv4, bconv41, upflow4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_48": {
                "variable": {
                    "value": "outsz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size, outsz[1], outsz[2], outsz[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_51": {
                "variable": {
                    "value": "concat3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(deconv3, bconv31, upflow3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_56": {
                "variable": {
                    "value": "outsz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size, outsz[1], outsz[2], outsz[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_59": {
                "variable": {
                    "value": "concat2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(deconv2, bconv2, upflow2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_64": {
                "variable": {
                    "value": "outsz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size, outsz[1], outsz[2], outsz[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_67": {
                "variable": {
                    "value": "concat1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(deconv1, bconv1, upflow1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_72": {
                "variable": {
                    "value": "outsz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size, outsz[1], outsz[2], outsz[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_5": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_6": {
                "input": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "tensorflow": {
            "subtract_67": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "I1",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "I1_",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_68": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(I1, I1_)",
                            "Call"
                        ],
                        [
                            "tf.square(diff)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(diff, axis=3, keep_dims=True) / tf.constant(3.0)",
                            "BinOp"
                        ],
                        [
                            "tf.sqrt(diff)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_70": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(I1, I1_)",
                            "Call"
                        ],
                        [
                            "tf.square(diff)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(diff, axis=3, keep_dims=True) / tf.constant(3.0)",
                            "BinOp"
                        ],
                        [
                            "tf.sqrt(diff)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_9": {
                "variable": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "imH / tf.shape(flow)[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_10": {
                "variable": {
                    "value": "flow_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(imH / tf.shape(flow)[1], 'float32')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "flow_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(flow, size=[imH, imW], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(ratio, flow_)",
                            "Call"
                        ],
                        [
                            "tf.multiply(flow, tf.constant(20.0))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(flow_, size=[imH, imW], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(flow_, tf.convert_to_tensor(ratio))",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_75": {
                "variable": {
                    "value": "flow_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(flowsmall, size=tf.stack([H, W]), align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(20.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_77": {
                "variable": {
                    "value": "flow_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "flow_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(flow, size=[imH, imW], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(ratio, flow_)",
                            "Call"
                        ],
                        [
                            "tf.multiply(flow, tf.constant(20.0))",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(flow_, size=[imH, imW], align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(flow_, tf.convert_to_tensor(ratio))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.convert_to_tensor(ratio)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_7": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_58": {
                "input": {
                    "value": "flowbig",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_59": {
                "input": {
                    "value": "flowbig",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_69": {
                "input_tensor": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(I1, I1_)",
                            "Call"
                        ],
                        [
                            "tf.square(diff)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(diff, axis=3, keep_dims=True) / tf.constant(3.0)",
                            "BinOp"
                        ],
                        [
                            "tf.sqrt(diff)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_69": {
                "value": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_74": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_62": {
                "values": {
                    "value": "[H, W]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_75": {
                "value": {
                    "value": "20.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "convert_to_tensor_77": {
                "value": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(imH / tf.shape(flow)[1], 'float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_9": {
                "input": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(flowsmall, size=tf.stack([H, W]), align_corners=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}