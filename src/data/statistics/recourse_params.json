{
    "_data_main/process_twomoon_data.py": {
        "sklearn": {
            "make_moons_18": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2000",
                            "Constant"
                        ]
                    ]
                },
                "noise": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "_third_party/bb_recourse.py": {
        "sklearn": {
            "check_random_state_57": {
                "variable": {
                    "value": "rstate",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "rstate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_random_state(rstate)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "StandardScaler_70": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_75": {
                "variable": {
                    "value": "(df[trainx], df[testx], df[traingrp], df[testgrp], df[trainy], df[testy])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data[:, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "data[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "data[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "test_size": {
                    "value": "pct",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "rstate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_random_state(rstate)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "check_random_state_89": {
                "variable": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "StandardScaler_104": {
                "variable": {
                    "value": "self.scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "with_mean": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Ridge_109": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "check_random_state_243": {
                "variable": {
                    "value": "rst",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "np.random.randint(100)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "check_random_state_274": {
                "variable": {
                    "value": "rst",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "np.random.randint(100)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Ridge_193": {
                "variable": {
                    "value": "simple_model",
                    "type": "variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pairwise_distances_178": {
                "variable": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "scaled_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(data - self.scaler.mean_) / self.scaler.scale_",
                            "BinOp"
                        ]
                    ]
                },
                "Y": {
                    "value": "scaled_data[0].reshape(1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "metric": {
                    "value": "distance_metric",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'euclidean'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Ridge_136": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "_third_party/svm_recourse.py": {
        "sklearn": {
            "check_random_state_56": {
                "variable": {
                    "value": "rstate",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "rstate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_random_state(rstate)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "StandardScaler_69": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_74": {
                "variable": {
                    "value": "(df[trainx], df[testx], df[traingrp], df[testgrp], df[trainy], df[testy])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data[:, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "data[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "data[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "test_size": {
                    "value": "pct",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "rstate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_random_state(rstate)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "SVC_393": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "*",
                    "type": "kwargs",
                    "possible_values": []
                }
            },
            "SVC_144": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "*",
                    "type": "kwargs",
                    "possible_values": []
                }
            },
            "GridSearchCV_424": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "cv": {
                    "value": "cvfold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "estimator": {
                    "value": "RecourseSVM(noiter=noiterations)",
                    "type": "Call",
                    "possible_values": []
                },
                "param_grid": {
                    "value": "param_grids[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[[{'lam': lams, 'kernel_fn': ['linear']}], [{'lam': lams, 'kernel_fn': ['poly'], 'degree': [2, 3, 5]}]]",
                            "List"
                        ]
                    ]
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "linear_kernel_105": {
                "X": {
                    "value": "*params",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "loadData.py": {
        "sklearn": {
            "train_test_split_488": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "all_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "all_true_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "0.7",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "RANDOM_SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "54321",
                            "Constant"
                        ]
                    ]
                }
            },
            "train_test_split_507": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "all_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "all_true_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "0.7",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "RANDOM_SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "54321",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "loadModel.py": {
        "sklearn": {
            "accuracy_score_174": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_train[:num_train_samples]",
                            "Subscript"
                        ],
                        [
                            "np.array(y_train)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "model_trained.predict(X_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DecisionTreeClassifier_133": {
                "variable": {
                    "value": "model_pretrain",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GridSearchCV_98": {
                "estimator": {
                    "value": "RecourseSVM()",
                    "type": "Call",
                    "possible_values": []
                },
                "param_grid": {
                    "value": "param_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'lam': lams, 'kernel_fn': ['linear']}]",
                            "List"
                        ],
                        [
                            "[{'C': np.logspace(0, 2, 3), 'kernel': ['linear']}]",
                            "List"
                        ],
                        [
                            "[{'lam': lams, 'kernel_fn': ['poly'], 'degree': [2, 3, 5]}]",
                            "List"
                        ],
                        [
                            "[{'C': np.logspace(0, 2, 3), 'kernel': ['poly'], 'degree': [2, 3, 5]}]",
                            "List"
                        ],
                        [
                            "[{'lam': lams, 'kernel_fn': ['rbf'], 'gamma': np.logspace(-3, 0, 4)}]",
                            "List"
                        ],
                        [
                            "[{'C': np.logspace(0, 2, 3), 'gamma': np.logspace(-3, 0, 4), 'kernel': ['rbf']}]",
                            "List"
                        ],
                        [
                            "[{'lam': lams, 'kernel_fn': ['linear']}, {'lam': lams, 'kernel_fn': ['poly'], 'degree': [2, 3, 5]}, {'lam': lams, 'kernel_fn': ['rbf'], 'gamma': np.logspace(-3, 0, 4)}]",
                            "List"
                        ],
                        [
                            "[{'C': np.logspace(0, 2, 3), 'kernel': ['linear']}, {'C': np.logspace(0, 2, 3), 'kernel': ['poly'], 'degree': [2, 3, 5]}, {'C': np.logspace(0, 2, 3), 'gamma': np.logspace(-3, 0, 4), 'kernel': ['rbf']}]",
                            "List"
                        ]
                    ]
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "RandomForestClassifier_135": {
                "variable": {
                    "value": "model_pretrain",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GridSearchCV_64": {
                "estimator": {
                    "value": "SVC(probability=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "param_grid": {
                    "value": "param_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'lam': lams, 'kernel_fn': ['linear']}]",
                            "List"
                        ],
                        [
                            "[{'C': np.logspace(0, 2, 3), 'kernel': ['linear']}]",
                            "List"
                        ],
                        [
                            "[{'lam': lams, 'kernel_fn': ['poly'], 'degree': [2, 3, 5]}]",
                            "List"
                        ],
                        [
                            "[{'C': np.logspace(0, 2, 3), 'kernel': ['poly'], 'degree': [2, 3, 5]}]",
                            "List"
                        ],
                        [
                            "[{'lam': lams, 'kernel_fn': ['rbf'], 'gamma': np.logspace(-3, 0, 4)}]",
                            "List"
                        ],
                        [
                            "[{'C': np.logspace(0, 2, 3), 'gamma': np.logspace(-3, 0, 4), 'kernel': ['rbf']}]",
                            "List"
                        ],
                        [
                            "[{'lam': lams, 'kernel_fn': ['linear']}, {'lam': lams, 'kernel_fn': ['poly'], 'degree': [2, 3, 5]}, {'lam': lams, 'kernel_fn': ['rbf'], 'gamma': np.logspace(-3, 0, 4)}]",
                            "List"
                        ],
                        [
                            "[{'C': np.logspace(0, 2, 3), 'kernel': ['linear']}, {'C': np.logspace(0, 2, 3), 'kernel': ['poly'], 'degree': [2, 3, 5]}, {'C': np.logspace(0, 2, 3), 'gamma': np.logspace(-3, 0, 4), 'kernel': ['rbf']}]",
                            "List"
                        ]
                    ]
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LogisticRegression_139": {
                "variable": {
                    "value": "model_pretrain",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogisticRegression_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MLPClassifier_141": {
                "variable": {
                    "value": "model_pretrain",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_layer_sizes": {
                    "value": "(10, 10)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "accuracy_score_160": {
                "y_true": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_train[:num_train_samples]",
                            "Subscript"
                        ],
                        [
                            "np.array(y_train)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "model_trained.predict(X_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "accuracy_score_161": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(y_test)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "model_trained.predict(X_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SVC_64": {
                "probability": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MLPClassifier_72": {
                "hidden_layer_sizes": {
                    "value": "(10, 10)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "loadSCM.py": {
        "sklearn": {},
        "torch": {
            "exp_154": {
                "input": {
                    "value": "-2.0 * x1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_192": {
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_192": {
                "input": {
                    "value": "-(x1 + n_samples) ** 2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_172": {
                "input": {
                    "value": "-2.0 * x1 + n_samples",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_191": {
                "input": {
                    "value": "-1 * x1 ** 2 + n_samples",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_235": {
                "input": {
                    "value": "torch.tensor(n_samples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_235": {
                "data": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sign_236": {
                "input": {
                    "value": "torch.tensor(n_samples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_236": {
                "data": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_310": {
                "input": {
                    "value": "-0.1 * x2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "sklearn": {
            "GridSearchCV_502": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "Ridge()",
                    "type": "Call",
                    "possible_values": []
                },
                "param_grid": {
                    "value": "param_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'alpha': np.logspace(-2, 1, 10)}",
                            "Dict"
                        ],
                        [
                            "{'alpha': np.logspace(-2, 1, 5), 'kernel': [RBF(lengthscale) for lengthscale in np.logspace(-2, 1, 5)]}",
                            "Dict"
                        ]
                    ]
                }
            },
            "GridSearchCV_519": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "KernelRidge()",
                    "type": "Call",
                    "possible_values": []
                },
                "param_grid": {
                    "value": "param_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'alpha': np.logspace(-2, 1, 10)}",
                            "Dict"
                        ],
                        [
                            "{'alpha': np.logspace(-2, 1, 5), 'kernel': [RBF(lengthscale) for lengthscale in np.logspace(-2, 1, 5)]}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Ridge_502": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KernelRidge_519": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linear_kernel_1208": {
                "X": {
                    "value": "*params",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "RBF_515": {
                "length_scale": {
                    "value": "lengthscale",
                    "type": "variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_839": {
                "variable": {
                    "value": "X_parents",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "samples_df[parents].to_numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_957": {
                "variable": {
                    "value": "factual_ts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_samples, len(objs.dataset_obj.getInputAttributeNames()))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_958": {
                "variable": {
                    "value": "samples_ts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_samples, len(objs.dataset_obj.getInputAttributeNames()))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_1556": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(action_set_ts.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "action_set_learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "Sequential_169": {
                "variable": {
                    "value": "fixed_model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(data_dim, fixed_model_width)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_177": {
                "variable": {
                    "value": "fixed_model[0].weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(objs.classifier_obj.coefs_[0].astype('float32')).t()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_178": {
                "variable": {
                    "value": "fixed_model[2].weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(objs.classifier_obj.coefs_[1].astype('float32')).t()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_179": {
                "variable": {
                    "value": "fixed_model[4].weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(objs.classifier_obj.coefs_[2].astype('float32')).t()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_180": {
                "variable": {
                    "value": "fixed_model[0].bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(objs.classifier_obj.intercepts_[0].astype('float32'))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_181": {
                "variable": {
                    "value": "fixed_model[2].bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(objs.classifier_obj.intercepts_[1].astype('float32'))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_182": {
                "variable": {
                    "value": "fixed_model[4].bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(objs.classifier_obj.intercepts_[2].astype('float32'))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_231": {
                "variable": {
                    "value": "deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(action_set[key] - factual_instance[key]) / ranges[key] for key in action_set.keys()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "any_969": {
                "input": {
                    "value": "torch.isnan(samples_ts[:, getColumnIndicesFromNames(args, objs, [node])])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_1508": {
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1538": {
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_1602": {
                "variable": {
                    "value": "value_lcb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h(samples_ts)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_1608": {
                "variable": {
                    "value": "loss_constraint",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_constraint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 - value_lcb",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.relu(loss_constraint)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_155": {
                "input": {
                    "value": "torch.nn.functional.linear(x, torch.from_numpy(fixed_model_w).float()) + float(fixed_model_b)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_235": {
                "input": {
                    "value": "deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[(action_set[key] - factual_instance[key]) / ranges[key] for key in action_set.keys()]",
                            "ListComp"
                        ],
                        [
                            "torch.stack([(action_set[key] - factual_instance[key]) / ranges[key] for key in action_set.keys()])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "args.norm_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_969": {
                "input": {
                    "value": "samples_ts[:, getColumnIndicesFromNames(args, objs, [node])]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "isnan_1591": {
                "input": {
                    "value": "torch.std(pred_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_170": {
                "in_features": {
                    "value": "data_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(objs.dataset_obj.getInputAttributeNames())",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "fixed_model_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_172": {
                "in_features": {
                    "value": "fixed_model_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "fixed_model_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_174": {
                "in_features": {
                    "value": "fixed_model_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_177": {
                "data": {
                    "value": "objs.classifier_obj.coefs_[0].astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_178": {
                "data": {
                    "value": "objs.classifier_obj.coefs_[1].astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_179": {
                "data": {
                    "value": "objs.classifier_obj.coefs_[2].astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_180": {
                "data": {
                    "value": "objs.classifier_obj.intercepts_[0].astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_181": {
                "data": {
                    "value": "objs.classifier_obj.intercepts_[1].astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_182": {
                "data": {
                    "value": "objs.classifier_obj.intercepts_[2].astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_654": {
                "input": {
                    "value": "recon_node_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(recon_node_train, axis=1, keepdims=True) + 1",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_655": {
                "input": {
                    "value": "recon_node_validation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(recon_node_validation, axis=1, keepdims=True) + 1",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "any_974": {
                "input": {
                    "value": "torch.isnan(samples_ts[:, getColumnIndicesFromNames(args, objs, parents)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "std_1591": {
                "input": {
                    "value": "pred_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h(samples_ts)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_1604": {
                "input": {
                    "value": "pred_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h(samples_ts)",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_157": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "torch.from_numpy(fixed_model_w).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_974": {
                "input": {
                    "value": "samples_ts[:, getColumnIndicesFromNames(args, objs, parents)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_985": {
                "variable": {
                    "value": "noises",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "objs.scm_obj.noises_distributions[getNoiseStringForNode(node)].sample(samples_ts.shape[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_985": {
                "variable": {
                    "value": "noises",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "std_1604": {
                "input": {
                    "value": "pred_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h(samples_ts)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_159": {
                "ndarray": {
                    "value": "fixed_model_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "objs.classifier_obj.coef_",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_192": {
                "data": {
                    "value": "X_all[:25].to_numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "treeUtils.py": {
        "sklearn": {
            "export_graphviz_111": {
                "variable": {
                    "value": "dot_data",
                    "type": "variable",
                    "possible_values": []
                },
                "decision_tree": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_file": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "feature_names": {
                    "value": "feature_names",
                    "type": "variable",
                    "possible_values": []
                },
                "class_names": {
                    "value": "['0', '1']",
                    "type": "List",
                    "possible_values": []
                },
                "filled": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "rounded": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "special_characters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "_cvae/models.py": {
        "torch": {
            "exp_34": {
                "variable": {
                    "value": "stds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * log_vars",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_35": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, self.latent_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_59": {
                "variable": {
                    "value": "samples_pz",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, self.latent_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_61": {
                "variable": {
                    "value": "stds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * log_vars",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_62": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, self.latent_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "variable": {
                    "value": "self.MLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_139": {
                "variable": {
                    "value": "self.linear_means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_140": {
                "variable": {
                    "value": "self.linear_log_vars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_165": {
                "variable": {
                    "value": "self.MLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_53": {
                "variable": {
                    "value": "x_factual",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x_factual.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "pa_factual",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pa_factual.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "variable": {
                    "value": "pa_counter",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pa_counter.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, pa)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_195": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, pa)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "div_89": {
                "variable": {
                    "value": "pz_over_qz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(pdf_pz)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor(pdf_qz)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_89": {
                "variable": {
                    "value": "pz_over_qz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_91": {
                "variable": {
                    "value": "recon_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(z, pa)",
                            "Call"
                        ],
                        [
                            "self.decoder(samples_pz, pa_counter)",
                            "Call"
                        ],
                        [
                            "self.decoder(samples_qz, pa_counter)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pz_over_qz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_75": {
                "*size": {
                    "value": "[batch_size, self.latent_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_75": {
                "*size": {
                    "value": "[batch_size, self.latent_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_132": {
                "in_features": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_176": {
                "in_features": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Softmax_185": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_89": {
                "data": {
                    "value": "pdf_qz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "diag_81": {
                "input": {
                    "value": "std_pz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "diag_85": {
                "input": {
                    "value": "std_qz",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "_cvae/train.py": {
        "torch": {
            "device_47": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_53": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(args.node_train, args.parents_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_88": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "vae.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "data.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_25": {
                "variable": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "target.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_43": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_121": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "args.node_train.to_numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "variable": {
                    "value": "pa",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "args.parents_train.to_numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_126": {
                "variable": {
                    "value": "MSE_train",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon_x",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(args.node_train.to_numpy()).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor(args.node_validation.to_numpy()).float()",
                            "Call"
                        ],
                        [
                            "self.data[index]",
                            "Subscript"
                        ],
                        [
                            "self.transform(x)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_131": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "args.node_validation.to_numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_132": {
                "variable": {
                    "value": "pa",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "args.parents_validation.to_numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_136": {
                "variable": {
                    "value": "MSE_validation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon_x",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(args.node_train.to_numpy()).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor(args.node_validation.to_numpy()).float()",
                            "Call"
                        ],
                        [
                            "self.data[index]",
                            "Subscript"
                        ],
                        [
                            "self.transform(x)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_45": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_57": {
                "input": {
                    "value": "torch.sum(1 + log_var - mean.pow(2) - log_var.exp(), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_69": {
                "variable": {
                    "value": "CE",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon_x",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(args.node_train.to_numpy()).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor(args.node_validation.to_numpy()).float()",
                            "Call"
                        ],
                        [
                            "self.data[index]",
                            "Subscript"
                        ],
                        [
                            "self.transform(x)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_127": {
                "input": {
                    "value": "torch.sum(1 + log_var - mean.pow(2) - log_var.exp(), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_137": {
                "input": {
                    "value": "torch.sum(1 + log_var - mean.pow(2) - log_var.exp(), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_57": {
                "input": {
                    "value": "1 + log_var - mean.pow(2) - log_var.exp()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_127": {
                "input": {
                    "value": "1 + log_var - mean.pow(2) - log_var.exp()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_137": {
                "input": {
                    "value": "1 + log_var - mean.pow(2) - log_var.exp()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mse_loss_74": {
                "variable": {
                    "value": "MSE",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon_x",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(args.node_train.to_numpy()).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor(args.node_validation.to_numpy()).float()",
                            "Call"
                        ],
                        [
                            "self.data[index]",
                            "Subscript"
                        ],
                        [
                            "self.transform(x)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "gpHelper.py": {
        "torch": {
            "tensor_38": {
                "variable": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "m.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "variable": {
                    "value": "signal_var",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "m.kern.variance",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_40": {
                "variable": {
                    "value": "lengthscales",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "m.kern.lengthscale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_50": {
                "variable": {
                    "value": "noise_var",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "m.Gaussian_noise.variance",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "variable": {
                    "value": "X_train",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "m.X",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "variable": {
                    "value": "Y_train",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "m.Y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_70": {
                "input": {
                    "value": "K_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel.eval(X_new, X_train)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "inv_cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_inverse_covariance(K, noise_var)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "diag_72": {
                "variable": {
                    "value": "pred_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k_new - torch.matmul(torch.matmul(K_new, inv_cov), torch.transpose(K_new, 0, 1))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_72": {
                "variable": {
                    "value": "pred_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_mean.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "inverse_45": {
                "input": {
                    "value": "K + noise_var * torch.eye(K.shape[0])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diag_65": {
                "input": {
                    "value": "noise_posterior_covariance(noise_var, inv_cov)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "any_97": {
                "input": {
                    "value": "torch.isnan(torch.sqrt(var))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_104": {
                "variable": {
                    "value": "X_new",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "X_new.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_58": {
                "input": {
                    "value": "inv_cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_inverse_covariance(K, noise_var)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "other": {
                    "value": "Y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(m.Y)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_71": {
                "input": {
                    "value": "K_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel.eval(X_new, X_train)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "inv_cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_inverse_covariance(K, noise_var)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "isnan_97": {
                "input": {
                    "value": "torch.sqrt(var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_19": {
                "input": {
                    "value": "-0.5 * torch.sum(torch.pow((x1[:, None] - x2) / self.lengthscales, 2), 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_62": {
                "n": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inv_cov.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_71": {
                "input": {
                    "value": "K_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel.eval(X_new, X_train)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_97": {
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_var + noise_var",
                            "BinOp"
                        ],
                        [
                            "pred_var + noise_post_vars[factual_instance]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_100": {
                "*size": {
                    "value": "mean.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_100": {
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_var + noise_var",
                            "BinOp"
                        ],
                        [
                            "pred_var + noise_post_vars[factual_instance]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "eye_45": {
                "n": {
                    "value": "K.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_20": {
                "input": {
                    "value": "torch.pow((x1[:, None] - x2) / self.lengthscales, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_21": {
                "input": {
                    "value": "(x1[:, None] - x2) / self.lengthscales",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "skHelper.py": {
        "torch": {
            "tensor_26": {
                "variable": {
                    "value": "X_train",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "model.X_fit_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_27": {
                "variable": {
                    "value": "Y_train",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "model.Y_fit_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_28": {
                "variable": {
                    "value": "lengthscale",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "model.kernel.length_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "variable": {
                    "value": "lamdba",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "model.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_37": {
                "variable": {
                    "value": "Y_new",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Y_train.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.matmul(inv_cov, K_new)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "variable": {
                    "value": "coef_",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "model.coef_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_46": {
                "variable": {
                    "value": "intercept_",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "model.intercept_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_8": {
                "input": {
                    "value": "-0.5 * torch.sum(torch.pow((x1[:, None] - x2) / lengthscale, 2), 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "inverse_20": {
                "input": {
                    "value": "K + noise_var * torch.eye(K.shape[0])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "variable": {
                    "value": "X_new",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "X_new.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_39": {
                "input": {
                    "value": "inv_cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_inverse_covariance(K, lamdba)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "K_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "computeRBFKernel(X_train, X_new, lengthscale)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_47": {
                "input": {
                    "value": "coef_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(model.coef_, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "X_new.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_9": {
                "input": {
                    "value": "torch.pow((x1[:, None] - x2) / lengthscale, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_10": {
                "input": {
                    "value": "(x1[:, None] - x2) / lengthscale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_20": {
                "n": {
                    "value": "K.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}