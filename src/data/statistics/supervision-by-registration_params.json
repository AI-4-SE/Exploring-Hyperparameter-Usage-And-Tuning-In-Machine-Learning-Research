{
    "lib/xvision/common_eval.py": {
        "sklearn": {
            "auc_53": {
                "x": {
                    "value": "threshold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linspace(0, max_threshold, num=2000)",
                            "Call"
                        ],
                        [
                            "np.linspace(0, max_threshold, num=2000)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "accuracys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(threshold.shape)",
                            "Call"
                        ],
                        [
                            "np.zeros(threshold.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "auc_60": {
                "x": {
                    "value": "threshold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linspace(0, max_threshold, num=2000)",
                            "Call"
                        ],
                        [
                            "np.linspace(0, max_threshold, num=2000)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "accuracys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(threshold.shape)",
                            "Call"
                        ],
                        [
                            "np.zeros(threshold.shape)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "exps/basic_main.py": {
        "torch": {
            "DataLoader_72": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(train_transform, args.sigma, model_config.downsample, args.heatmap_type, args.data_indicator)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_116": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obtain_model(model_config, args.num_pts + 1)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_121": {
                "variable": {
                    "value": "last_info",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "last_info",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logger.last_info()",
                            "Call"
                        ],
                        [
                            "torch.load(last_info)",
                            "Call"
                        ],
                        [
                            "save_checkpoint({'epoch': epoch, 'last_checkpoint': save_path}, logger.last_info(), logger)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_123": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "last_info['last_checkpoint']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_81": {
                "variable": {
                    "value": "eval_vloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_vdata",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(eval_transform, args.sigma, model_config.downsample, args.heatmap_type, args.data_indicator)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_89": {
                "variable": {
                    "value": "eval_iloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_idata",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(eval_transform, args.sigma, model_config.downsample, args.heatmap_type, args.data_indicator)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "exps/eval.py": {
        "torch": {
            "load_35": {
                "variable": {
                    "value": "snapshot",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "snapshot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path(args.model)",
                            "Call"
                        ],
                        [
                            "torch.load(snapshot)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_60": {
                "variable": {
                    "value": "cpu",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "exps/lk_main.py": {
        "torch": {
            "DataLoader_72": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VDataset(train_transform, args.sigma, model_config.downsample, args.heatmap_type, args.data_indicator, args.video_parser)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_118": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obtain_model(model_config, lk_config, args.num_pts + 1)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_143": {
                "variable": {
                    "value": "detector",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net.module.detector",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_123": {
                "variable": {
                    "value": "last_info",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "last_info",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logger.last_info()",
                            "Call"
                        ],
                        [
                            "torch.load(last_info)",
                            "Call"
                        ],
                        [
                            "save_checkpoint({'epoch': epoch, 'last_checkpoint': save_path}, logger.last_info(), logger)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_125": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "last_info['last_checkpoint']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_81": {
                "variable": {
                    "value": "eval_vloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_vdata",
                    "type": "variable",
                    "possible_values": [
                        [
                            "IDataset(eval_transform, args.sigma, model_config.downsample, args.heatmap_type, args.data_indicator)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_89": {
                "variable": {
                    "value": "eval_iloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_idata",
                    "type": "variable",
                    "possible_values": [
                        [
                            "IDataset(eval_transform, args.sigma, model_config.downsample, args.heatmap_type, args.data_indicator)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_134": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "init_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path(args.init_model)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/datasets/GeneralDataset.py": {
        "torch": {
            "from_numpy_155": {
                "variable": {
                    "value": "heatmaps",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "heatmaps.transpose((2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_156": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask.transpose((2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_147": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "points.transpose((1, 0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_150": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.zeros((self.NUM_PTS, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_101": {
                "tensor": {
                    "value": " ",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "lib/datasets/VideoDataset.py": {
        "torch": {
            "from_numpy_154": {
                "variable": {
                    "value": "heatmaps",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "heatmaps.transpose((2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_155": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask.transpose((2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_146": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "points.transpose((1, 0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_149": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.zeros((self.NUM_PTS, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_161": {
                "tensors": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[pil_loader(image) for image in images]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "split_101": {
                "tensor": {
                    "value": " ",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "lib/lk/basic_lk.py": {
        "torch": {
            "stack_39": {
                "variable": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gradiant_x, gradiant_y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mm_41": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weightedJ.view(2, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "J.view(2, -1).transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_of_33": {
                "obj": {
                    "value": "feature_old",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mm_50": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weightedJ.view(2, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "r.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_52": {
                "variable": {
                    "value": "deltap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inverseH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch_inverse(H)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(weightedJ.view(2, -1), r.view(-1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_52": {
                "variable": {
                    "value": "deltap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/lk/basic_lk_batch.py": {
        "torch": {
            "stack_65": {
                "variable": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gradiant_x, gradiant_y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_67": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weightedJ.view(num_pts, 2, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "J.view(num_pts, 2, -1).transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "variable": {
                    "value": "weight_map",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "weight_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Generate_Weight([patch_size * 2 + 1, patch_size * 2 + 1])",
                            "Call"
                        ],
                        [
                            "torch.tensor(weight_map).view(1, 1, 1, patch_size * 2 + 1, patch_size * 2 + 1).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_77": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weightedJ.view(num_pts, 2, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "r.view(num_pts, -1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_79": {
                "variable": {
                    "value": "deltap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inverseH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch_inverse_batch(H)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(weightedJ.view(num_pts, 2, -1), r.view(num_pts, -1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_79": {
                "variable": {
                    "value": "deltap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_111": {
                "tensors": {
                    "value": "back_pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None] * (sequence - 1) + [locations[-1]]",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "lib/lk/basic_utils.py": {
        "torch": {
            "cat_22": {
                "variable": {
                    "value": "inverse",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[d, -b, -c, a]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "affine_parameter",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "affine_parameter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[(crop_box[2] - crop_box[0]) / 2, MU.np2variable(torch.zeros(1), feature.is_cuda, False), (crop_box[0] + crop_box[2]) / 2, MU.np2variable(torch.zeros(1), feature.is_cuda, False), (crop_box[3] - crop_box[1]) / 2, (crop_box[1] + crop_box[3]) / 2]",
                            "List"
                        ],
                        [
                            "torch.cat(affine_parameter).view(2, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "affine_grid_89": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "affine_parameter.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "grid_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Size([1, 1, 2 * patch_size[0] + 1, 2 * patch_size[1] + 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_90": {
                "variable": {
                    "value": "sub_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "feature.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(theta, grid_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_90": {
                "variable": {
                    "value": "sub_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_36": {
                "variable": {
                    "value": "Sobel",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Sobel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[-1.0 / 8, 0, 1.0 / 8], [-2.0 / 8, 0, 2.0 / 8], [-1.0 / 8, 0, 1.0 / 8]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Sobel).type(dtype)",
                            "Call"
                        ],
                        [
                            "Sobel.view(1, 1, 3, 3)",
                            "Call"
                        ],
                        [
                            "np.array([[-1.0 / 8, -2.0 / 8, -1.0 / 8], [0, 0, 0], [1.0 / 8, 2.0 / 8, 1.0 / 8]])",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_43": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.expand(input.size(1), 1, 3, 3).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "input.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_81": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/lk/basic_utils_batch.py": {
        "torch": {
            "cat_36": {
                "variable": {
                    "value": "crop_box",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pts_location - patch_size, pts_location + patch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_44": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "affine_parameter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[(crop_box[:, 2] - crop_box[:, 0]) / 2, crop_box[:, 0] * 0, (crop_box[:, 2] + crop_box[:, 0]) / 2, crop_box[:, 0] * 0, (crop_box[:, 3] - crop_box[:, 1]) / 2, (crop_box[:, 3] + crop_box[:, 1]) / 2]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "affine_grid_47": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(affine_parameter, 1).view(num_pts, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "grid_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Size([num_pts, 1, 2 * patch_size + 1, 2 * patch_size + 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_48": {
                "variable": {
                    "value": "sub_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature.expand(num_pts, C, H, W)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(theta, grid_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_22": {
                "tensors": {
                    "value": "[d, -b, -c, a]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/LK.py": {
        "torch": {
            "stack_35": {
                "tensors": {
                    "value": "batch_back",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/basic_batch.py": {
        "torch": {
            "max_19": {
                "variable": {
                    "value": "(score, index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "heatmap.view(num_pts, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_34": {
                "variable": {
                    "value": "affine_parameter",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_pts, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "affine_grid_42": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "affine_parameter.to(heatmap.device)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "grid_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Size([num_pts, 1, radius * 2 + 1, radius * 2 + 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_43": {
                "variable": {
                    "value": "sub_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "heatmap.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(theta, grid_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_43": {
                "variable": {
                    "value": "sub_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "threshold_44": {
                "variable": {
                    "value": "sub_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.grid_sample(heatmap.unsqueeze(1), grid).squeeze(1)",
                            "Call"
                        ],
                        [
                            "F.threshold(sub_feature, threshold, np.finfo(float).eps)",
                            "Call"
                        ]
                    ]
                },
                "threshold": {
                    "value": "threshold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-06",
                            "MethodArgument"
                        ]
                    ]
                },
                "value": {
                    "value": "np.finfo(float).eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_46": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-radius",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "radius + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_47": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-radius",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "radius + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_49": {
                "variable": {
                    "value": "sum_region",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_feature.view(num_pts, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_55": {
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_50": {
                "input": {
                    "value": "(sub_feature * X).view(num_pts, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_51": {
                "input": {
                    "value": "(sub_feature * Y).view(num_pts, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/cpm_vgg16.py": {
        "torch": {
            "Sequential_27": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, kernel_size=3, dilation=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.CPM_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512, 256, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "stage1",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, 128, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_68": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "stages",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[stage1]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "stagex",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128 + pts_num, 128, kernel_size=7, dilation=1, padding=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_30": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_33": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_37": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_51": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "pts_num",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_99": {
                "tensors": {
                    "value": "batch_scos",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "128 + pts_num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_65": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "pts_num",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_91": {
                "tensors": {
                    "value": "[xfeature, batch_cpms[i - 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/initialization.py": {
        "torch": {}
    },
    "lib/models/model_utils.py": {
        "torch": {}
    },
    "lib/optimizer/opt_utils.py": {
        "torch": {
            "MultiStepLR_24": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(params, lr=config.LR, momentum=config.momentum, weight_decay=config.Decay, nesterov=config.nesterov)",
                            "Call"
                        ],
                        [
                            "torch.optim.RMSprop(params, lr=config.LR, momentum=config.momentum, alpha=config.alpha, eps=config.epsilon, weight_decay=config.weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(params, lr=config.LR, amsgrad=config.amsgrad)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "config.schedule",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "config.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_13": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.Decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "config.nesterov",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_30": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "size_average",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strs[1].lower() == 'avg'",
                            "Compare"
                        ]
                    ]
                }
            },
            "RMSprop_16": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "config.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_20": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "config.amsgrad",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/procedure/basic_eval.py": {
        "torch": {
            "device_34": {
                "variable": {
                    "value": "cpu",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/procedure/basic_train.py": {
        "torch": {
            "device_22": {
                "variable": {
                    "value": "cpu",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "lib/procedure/lk_loss.py": {
        "torch": {
            "mean_87": {
                "input": {
                    "value": "torch.stack(losses)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dist_61": {
                "variable": {
                    "value": "fbak_distance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nextPts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_next[ibatch, iseq, ipts]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "fbakPts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_fbak[ibatch, iseq, ipts]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "dist_62": {
                "variable": {
                    "value": "back_distance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_locs[ibatch, iseq, ipts]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "backPts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_back[ibatch, iseq, ipts]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "dist_63": {
                "variable": {
                    "value": "forw_distance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_locs[ibatch, iseq, ipts]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "nextPts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_next[ibatch, iseq, ipts]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_87": {
                "tensors": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "no_grad_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dist_76": {
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_locs[ibatch, iseq, ipts]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "backPts.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dist_77": {
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_locs[ibatch, iseq, ipts]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "backPts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_back[ibatch, iseq, ipts]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "dist_79": {
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_locs[ibatch, iseq, ipts]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "nextPts.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dist_80": {
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_locs[ibatch, iseq, ipts]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "nextPts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_next[ibatch, iseq, ipts]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "lib/procedure/lk_train.py": {
        "torch": {
            "device_22": {
                "variable": {
                    "value": "cpu",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "lib/procedure/losses.py": {
        "torch": {
            "masked_select_18": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs",
                            "Name"
                        ],
                        [
                            "torch.masked_select(output, masks)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "masked_select_19": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "mask": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "lib/procedure/saver.py": {
        "torch": {
            "save_10": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "lib/procedure/starts.py": {
        "torch": {
            "manual_seed_15": {
                "seed": {
                    "value": "rand_seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_16": {
                "seed": {
                    "value": "rand_seed",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "lib/xvision/evaluation_util.py": {
        "torch": {
            "load_55": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_50": {
                "obj": {
                    "value": "meta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'predictions': self.predictions, 'groundtruth': self.groundtruth, 'image_lists': self.image_lists, 'face_sizes': self.face_sizes}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "lib/xvision/transforms.py": {
        "torch": {
            "is_tensor_90": {
                "obj": {
                    "value": "pic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pic.mul(255).byte()",
                            "Call"
                        ],
                        [
                            "pics",
                            "Name"
                        ]
                    ]
                }
            },
            "from_numpy_134": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pic.transpose((2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_141": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(pic, np.int32, copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_143": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(pic, np.int16, copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}