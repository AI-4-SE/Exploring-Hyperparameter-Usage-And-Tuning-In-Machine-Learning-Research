{
    "cifar_evaluate_all.py": {
        "torch": {
            "is_available_61": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_62": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_60": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_71": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10('../data', train=False, transform=transform_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "cifar_pruning.py": {
        "torch": {
            "is_available_72": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_73": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_67": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_84": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10('../data', train=True, download=True, transform=transform_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_88": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10('../data', train=False, transform=transform_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_110": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_132": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}_{}.pt'.format(args.save_model, epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_112": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_143": {
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_copy.gt(0).float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cifar_training.py": {
        "torch": {
            "is_available_82": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_83": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_77": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_99": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_148": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}_{}.pt'.format(args.save_model, 'full_train')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_96": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_initialization",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_101": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_146": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}_{}.pt'.format(args.save_model, 'early_stop')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "compensated_attacks/initialization_method.py": {
        "torch": {
            "eye_17": {
                "variable": {
                    "value": "identity",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "xvar.size(1) * xvar.size(2) * xvar.size(3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "xvar.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "div_19": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grad",
                            "Name"
                        ],
                        [
                            "torch.div(delta, torch.norm(delta.view(xvar.size(0), -1), p=2, dim=1).view(xvar.size(0), 1, 1, 1).expand_as(grad) + 1e-08)",
                            "Call"
                        ],
                        [
                            "delta * eps_iter",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(xvar + delta.view_as(xvar), min=clip_min, max=clip_max) - xvar",
                            "BinOp"
                        ],
                        [
                            "delta.view_as(y)",
                            "Call"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.norm(delta.view(xvar.size(0), -1), p=2, dim=1).view(xvar.size(0), 1, 1, 1).expand_as(grad) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_34": {
                "variable": {
                    "value": "dy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.transpose(delta, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(new_grad - grad).view(xvar.size(0), xvar.size(1) * xvar.size(2) * xvar.size(3), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_34": {
                "variable": {
                    "value": "dy",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_35": {
                "variable": {
                    "value": "_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(new_grad - grad).view(xvar.size(0), xvar.size(1) * xvar.size(2) * xvar.size(3), 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.transpose(delta, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_36": {
                "variable": {
                    "value": "_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(y, torch.transpose(delta, 1, 2))",
                            "Call"
                        ],
                        [
                            "torch.div(_a, dy.view(xvar.size(0), 1, 1).expand_as(_a))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "dy.view(xvar.size(0), 1, 1).expand_as(_a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_38": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grad",
                            "Name"
                        ],
                        [
                            "torch.div(delta, torch.norm(delta.view(xvar.size(0), -1), p=2, dim=1).view(xvar.size(0), 1, 1, 1).expand_as(grad) + 1e-08)",
                            "Call"
                        ],
                        [
                            "delta * eps_iter",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(xvar + delta.view_as(xvar), min=clip_min, max=clip_max) - xvar",
                            "BinOp"
                        ],
                        [
                            "delta.view_as(y)",
                            "Call"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.transpose(delta, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_39": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(delta, torch.transpose(delta, 1, 2))",
                            "Call"
                        ],
                        [
                            "torch.div(b, dy.view(xvar.size(0), 1, 1).expand_as(b))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "dy.view(xvar.size(0), 1, 1).expand_as(b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_45": {
                "variable": {
                    "value": "new_delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hess_inv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(torch.bmm(torch.transpose(a, 1, 2), identity), a) + b",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "grad.view(xvar.size(0), -1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_45": {
                "variable": {
                    "value": "new_delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_47": {
                "variable": {
                    "value": "new_delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_delta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(hess_inv, grad.view(xvar.size(0), -1, 1)).squeeze(dim=2)",
                            "Call"
                        ],
                        [
                            "torch.div(new_delta, torch.norm(new_delta.view(xvar.size(0), -1), p=2, dim=1).view(xvar.size(0), 1).expand_as(new_delta) + 1e-08)",
                            "Call"
                        ],
                        [
                            "new_delta * eps_equiv",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(new_delta, min=-eps_iter, max=eps_iter)",
                            "Call"
                        ],
                        [
                            "new_delta * eps_iter",
                            "BinOp"
                        ],
                        [
                            "new_delta.view_as(xvar).data",
                            "Attribute"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.norm(new_delta.view(xvar.size(0), -1), p=2, dim=1).view(xvar.size(0), 1).expand_as(new_delta) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_61": {
                "variable": {
                    "value": "rand_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xvar",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_80": {
                "variable": {
                    "value": "rand_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "rand_vector",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.randn_like(xvar)",
                            "Call"
                        ],
                        [
                            "rand_vector * delta",
                            "BinOp"
                        ],
                        [
                            "channel_eps_multiply(rand_vector, delta)",
                            "Call"
                        ],
                        [
                            "torch.clamp(rand_vector + xvar, min=clip_min, max=clip_max) - rand_vector",
                            "BinOp"
                        ],
                        [
                            "channel_clip(rand_vector + xvar, clip_min, clip_max) - rand_vector",
                            "BinOp"
                        ],
                        [
                            "nn.Parameter(rand_vector)",
                            "Call"
                        ],
                        [
                            "rand_vector.requires_grad_()",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_52": {
                "variable": {
                    "value": "new_delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_delta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(hess_inv, grad.view(xvar.size(0), -1, 1)).squeeze(dim=2)",
                            "Call"
                        ],
                        [
                            "torch.div(new_delta, torch.norm(new_delta.view(xvar.size(0), -1), p=2, dim=1).view(xvar.size(0), 1).expand_as(new_delta) + 1e-08)",
                            "Call"
                        ],
                        [
                            "new_delta * eps_equiv",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(new_delta, min=-eps_iter, max=eps_iter)",
                            "Call"
                        ],
                        [
                            "new_delta * eps_iter",
                            "BinOp"
                        ],
                        [
                            "new_delta.view_as(xvar).data",
                            "Attribute"
                        ]
                    ]
                },
                "min": {
                    "value": "-eps_iter",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "eps_iter",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "norm_62": {
                "input": {
                    "value": "rand_vector.view(xvar.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_90": {
                "input": {
                    "value": "hd.view(xvar.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_21": {
                "input": {
                    "value": "xvar + delta.view_as(xvar)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "clip_min",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "max": {
                    "value": "clip_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "transpose_35": {
                "input": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grad",
                            "Name"
                        ],
                        [
                            "torch.div(delta, torch.norm(delta.view(xvar.size(0), -1), p=2, dim=1).view(xvar.size(0), 1, 1, 1).expand_as(grad) + 1e-08)",
                            "Call"
                        ],
                        [
                            "delta * eps_iter",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(xvar + delta.view_as(xvar), min=clip_min, max=clip_max) - xvar",
                            "BinOp"
                        ],
                        [
                            "delta.view_as(y)",
                            "Call"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_38": {
                "input": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grad",
                            "Name"
                        ],
                        [
                            "torch.div(delta, torch.norm(delta.view(xvar.size(0), -1), p=2, dim=1).view(xvar.size(0), 1, 1, 1).expand_as(grad) + 1e-08)",
                            "Call"
                        ],
                        [
                            "delta * eps_iter",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(xvar + delta.view_as(xvar), min=clip_min, max=clip_max) - xvar",
                            "BinOp"
                        ],
                        [
                            "delta.view_as(y)",
                            "Call"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_42": {
                "input": {
                    "value": "torch.transpose(a, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "identity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.eye(xvar.size(1) * xvar.size(2) * xvar.size(3), device=xvar.device).unsqueeze_(0).repeat(xvar.size(0), 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_98": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "eps_equiv * hd",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(init, min=-eps, max=eps)",
                            "Call"
                        ],
                        [
                            "channel_eps_multiply(hd, eps_equiv)",
                            "Call"
                        ],
                        [
                            "channel_eps_clip(init, eps)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-eps",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "norm_19": {
                "input": {
                    "value": "delta.view(xvar.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_47": {
                "input": {
                    "value": "new_delta.view(xvar.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_77": {
                "input": {
                    "value": "rand_vector + xvar",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "clip_min",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "max": {
                    "value": "clip_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "transpose_34": {
                "input": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grad",
                            "Name"
                        ],
                        [
                            "torch.div(delta, torch.norm(delta.view(xvar.size(0), -1), p=2, dim=1).view(xvar.size(0), 1, 1, 1).expand_as(grad) + 1e-08)",
                            "Call"
                        ],
                        [
                            "delta * eps_iter",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(xvar + delta.view_as(xvar), min=clip_min, max=clip_max) - xvar",
                            "BinOp"
                        ],
                        [
                            "delta.view_as(y)",
                            "Call"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_42": {
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "identity - _a",
                            "BinOp"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "compensated_attacks/iterative_projected_gradient.py": {
        "torch": {
            "zeros_like_58": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xvar",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_168": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_199": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "delta_init",
                            "Name"
                        ],
                        [
                            "torch.zeros_like(xvar)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(delta)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(delta)",
                            "Call"
                        ],
                        [
                            "miyato_second_order(x.clone(), y.clone(), self.predict, self.eps, self.loss_fn, delta=self.eps, clip_min=self.clip_min, clip_max=self.clip_max, targeted=self.targeted, norm=self.ord)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(delta)",
                            "Call"
                        ],
                        [
                            "bfgs_direction(x.clone(), y.clone(), self.predict, self.eps, self.loss_fn, clip_min=self.clip_min, clip_max=self.clip_max, targeted=self.targeted, norm=self.ord)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(delta)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_140": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_142": {
                "variable": {
                    "value": "eps_iter",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_171": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "delta_init",
                            "Name"
                        ],
                        [
                            "torch.zeros_like(xvar)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(delta)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(delta)",
                            "Call"
                        ],
                        [
                            "miyato_second_order(x.clone(), y.clone(), self.predict, self.eps, self.loss_fn, delta=self.eps, clip_min=self.clip_min, clip_max=self.clip_max, targeted=self.targeted, norm=self.ord)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(delta)",
                            "Call"
                        ],
                        [
                            "bfgs_direction(x.clone(), y.clone(), self.predict, self.eps, self.loss_fn, clip_min=self.clip_min, clip_max=self.clip_max, targeted=self.targeted, norm=self.ord)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(delta)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_187": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "delta_init",
                            "Name"
                        ],
                        [
                            "torch.zeros_like(xvar)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(delta)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(delta)",
                            "Call"
                        ],
                        [
                            "miyato_second_order(x.clone(), y.clone(), self.predict, self.eps, self.loss_fn, delta=self.eps, clip_min=self.clip_min, clip_max=self.clip_max, targeted=self.targeted, norm=self.ord)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(delta)",
                            "Call"
                        ],
                        [
                            "bfgs_direction(x.clone(), y.clone(), self.predict, self.eps, self.loss_fn, clip_min=self.clip_min, clip_max=self.clip_max, targeted=self.targeted, norm=self.ord)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(delta)",
                            "Call"
                        ]
                    ]
                }
            },
            "std_67": {
                "input": {
                    "value": "outputs.clone().detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_191": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "delta_init",
                            "Name"
                        ],
                        [
                            "torch.zeros_like(xvar)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(delta)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(delta)",
                            "Call"
                        ],
                        [
                            "miyato_second_order(x.clone(), y.clone(), self.predict, self.eps, self.loss_fn, delta=self.eps, clip_min=self.clip_min, clip_max=self.clip_max, targeted=self.targeted, norm=self.ord)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(delta)",
                            "Call"
                        ],
                        [
                            "bfgs_direction(x.clone(), y.clone(), self.predict, self.eps, self.loss_fn, clip_min=self.clip_min, clip_max=self.clip_max, targeted=self.targeted, norm=self.ord)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(delta)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "compensated_attacks/one_step_gradient.py": {
        "torch": {
            "randn_46": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_46": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_47": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.randn(x.size(), device=x.device).sign()",
                            "Call"
                        ],
                        [
                            "nn.Parameter(delta)",
                            "Call"
                        ],
                        [
                            "delta.requires_grad_()",
                            "Call"
                        ],
                        [
                            "self.eps * grad",
                            "BinOp"
                        ],
                        [
                            "clamp(xadv + delta, self.clip_min, self.clip_max) - xadv",
                            "BinOp"
                        ],
                        [
                            "channel_clip(xadv + delta, self.clip_min, self.clip_max) - xadv",
                            "BinOp"
                        ],
                        [
                            "torch.randn(x.size(), device=x.device)",
                            "Call"
                        ],
                        [
                            "normalize_by_pnorm(delta)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(delta)",
                            "Call"
                        ],
                        [
                            "delta.requires_grad_()",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_198": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_200": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.randn(x.size(), device=x.device).sign()",
                            "Call"
                        ],
                        [
                            "nn.Parameter(delta)",
                            "Call"
                        ],
                        [
                            "delta.requires_grad_()",
                            "Call"
                        ],
                        [
                            "self.eps * grad",
                            "BinOp"
                        ],
                        [
                            "clamp(xadv + delta, self.clip_min, self.clip_max) - xadv",
                            "BinOp"
                        ],
                        [
                            "channel_clip(xadv + delta, self.clip_min, self.clip_max) - xadv",
                            "BinOp"
                        ],
                        [
                            "torch.randn(x.size(), device=x.device)",
                            "Call"
                        ],
                        [
                            "normalize_by_pnorm(delta)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(delta)",
                            "Call"
                        ],
                        [
                            "delta.requires_grad_()",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_41": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_194": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "std_66": {
                "input": {
                    "value": "outputs.clone().detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "std_106": {
                "input": {
                    "value": "outputs.clone().detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "std_145": {
                "input": {
                    "value": "outputs.clone().detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "std_215": {
                "input": {
                    "value": "outputs.clone().detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "compensated_attacks/utils.py": {
        "torch": {
            "Tensor_20": {
                "variable": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_24": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_8": {
                "variable": {
                    "value": "eps_tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mul_17": {
                "input": {
                    "value": "eps_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Tensor(eps)",
                            "Call"
                        ],
                        [
                            "eps",
                            "Name"
                        ],
                        [
                            "eps_tensor.to(grad_sign.device)",
                            "Call"
                        ],
                        [
                            "eps_tensor * scale",
                            "BinOp"
                        ],
                        [
                            "eps_tensor.view((1, 3, 1, 1))",
                            "Call"
                        ],
                        [
                            "eps_tensor.repeat(grad_sign.shape[0], 1, grad_sign.shape[2], grad_sign.shape[3])",
                            "Call"
                        ],
                        [
                            "torch.Tensor(eps).to(x.device)",
                            "Call"
                        ],
                        [
                            "eps",
                            "Name"
                        ],
                        [
                            "eps_tensor.to(x.device)",
                            "Call"
                        ],
                        [
                            "eps_tensor.view((1, 3, 1, 1))",
                            "Call"
                        ],
                        [
                            "eps_tensor.repeat(x.shape[0], 1, x.shape[2], x.shape[3])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "grad_sign",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_28": {
                "input": {
                    "value": "torch.min(xadv, u)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_32": {
                "variable": {
                    "value": "eps_tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_39": {
                "input": {
                    "value": "torch.min(x, eps_tensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_28": {
                "input": {
                    "value": "xadv",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "min_39": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "core/adversarial_evaluation_utils.py": {
        "torch": {
            "randint_51": {
                "variable": {
                    "value": "targeted_obj",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "target.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "target.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "target.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_210": {
                "variable": {
                    "value": "masked_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred.eq(target.view_as(pred)).view(-1).nonzero().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_211": {
                "variable": {
                    "value": "masked_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred.eq(target.view_as(pred)).view(-1).nonzero().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_212": {
                "variable": {
                    "value": "masked_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cln_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred.eq(target.view_as(pred)).view(-1).nonzero().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "index_select_222": {
                "variable": {
                    "value": "masked_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tr_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "transfer(data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred.eq(target.view_as(pred)).view(-1).nonzero().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "index_select_244": {
                "variable": {
                    "value": "masked_data_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.index_select(data, 0, mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "mask2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred.eq(masked_target.view_as(pred)).view(-1).nonzero().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_245": {
                "variable": {
                    "value": "masked_target_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.index_select(target, 0, mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "mask2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred.eq(masked_target.view_as(pred)).view(-1).nonzero().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_246": {
                "variable": {
                    "value": "masked_output_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.index_select(cln_output, 0, mask)",
                            "Call"
                        ],
                        [
                            "torch.index_select(tr_output, 0, mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "mask2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred.eq(masked_target.view_as(pred)).view(-1).nonzero().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_280": {
                "variable": {
                    "value": "masked_data_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.index_select(data, 0, mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "mask3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred.eq(masked_target.view_as(pred)).view(-1).nonzero().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_281": {
                "variable": {
                    "value": "masked_target_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.index_select(target, 0, mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "mask3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred.eq(masked_target.view_as(pred)).view(-1).nonzero().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_282": {
                "variable": {
                    "value": "masked_output_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.index_select(cln_output, 0, mask)",
                            "Call"
                        ],
                        [
                            "torch.index_select(tr_output, 0, mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "mask3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred.eq(masked_target.view_as(pred)).view(-1).nonzero().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_339": {
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_220": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_267": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_343": {
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_249": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_288": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_347": {
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_309": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_350": {
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_353": {
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_356": {
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "core/adversarial_training_utils.py": {
        "torch": {
            "CrossEntropyLoss_30": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_84": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_95": {
                "variable": {
                    "value": "random_start_advcorrect",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "target.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "args.nb_random_start",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output, model(data)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_47": {
                "tensors": {
                    "value": "[target, target]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_100": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "advdata.view(clndata.shape[0], -1) - clndata.view(clndata.shape[0], -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gt_101": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.norm(advdata.view(clndata.shape[0], -1) - clndata.view(clndata.shape[0], -1), p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(advdata.view(clndata.shape[0], -1) - clndata.view(clndata.shape[0], -1), p=float('inf'), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "args.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_147": {
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "norm_103": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "advdata.view(clndata.shape[0], -1) - clndata.view(clndata.shape[0], -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gt_104": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.norm(advdata.view(clndata.shape[0], -1) - clndata.view(clndata.shape[0], -1), p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(advdata.view(clndata.shape[0], -1) - clndata.view(clndata.shape[0], -1), p=float('inf'), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "args.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_149": {
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_151": {
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_156": {
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_159": {
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "core/bpda_models.py": {
        "torch": {
            "MaxPool2d_65": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_67": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_108": {
                "variable": {
                    "value": "relu_replace_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LPPool2d_67": {
                "norm_type": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softplus_95": {
                "beta": {
                    "value": "relu_replace_slope_param",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "threshold": {
                    "value": "relu_replace_threshold",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CELU_56": {
                "alpha": {
                    "value": "relu_slope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CELU_102": {
                "alpha": {
                    "value": "relu_replace_slope_param",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Softplus_60": {
                "beta": {
                    "value": "relu_slope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "threshold": {
                    "value": "softplus_threshold",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2.0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "core/count_flops.py": {
        "torch": {
            "rand_121": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "input_res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "224",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input_res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "224",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_121": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "core/data_loader.py": {
        "torch": {
            "SubsetRandomSampler_128": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "train_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_129": {
                "variable": {
                    "value": "valid_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "valid_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_131": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(root=data_dir, train=True, download=True, transform=train_transform)",
                            "Call"
                        ],
                        [
                            "datasets.MNIST(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor()]))",
                            "Call"
                        ],
                        [
                            "datasets.SVHN(root=data_dir, split='train', download=True, transform=train_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(train_idx)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_135": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(root=data_dir, train=True, download=True, transform=valid_transform)",
                            "Call"
                        ],
                        [
                            "datasets.MNIST(root=data_dir, train=True, download=True, transform=valid_transform)",
                            "Call"
                        ],
                        [
                            "datasets.SVHN(root=data_dir, split='train', download=True, transform=valid_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "valid_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(valid_idx)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_207": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(root=data_dir, train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "datasets.MNIST(root=data_dir, train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "datasets.SVHN(root=root_dir, split='test', download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "'CIFAR'",
                            "MethodArgument"
                        ],
                        [
                            "'CIFAR'",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "core/jacobian_regularization.py": {
        "torch": {
            "norm_11": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad.view(data.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_10": {
                "outputs": {
                    "value": "classification_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loss_fn(output, target)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data.requires_grad_()",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "core/mobilenetv1.py": {
        "torch": {
            "randn_59": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1 if isinstance(x, int) else x[1]",
                            "IfExp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Name"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(x * widen_factor) if isinstance(x, int) else int(x[0] * widen_factor)",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(x * widen_factor) if isinstance(x, int) else int(x[0] * widen_factor)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "relu_22": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_23": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(32 * widen_factor)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(32 * widen_factor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(1024 * widen_factor)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_49": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_51": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layers(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "core/mobilenetv2.py": {
        "torch": {
            "randn_107": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(out_planes * width_mult)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(32 * width_mult)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(320 * width_mult)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(1280 * width_mult)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(1280 * width_mult)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_83": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_99": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.relu(self.conv1(x)) if self.spectral_norm else self.relu(self.bn1(self.conv1(x)))",
                            "IfExp"
                        ],
                        [
                            "self.relu(self.conv2(out)) if self.spectral_norm else self.relu(self.bn2(self.conv2(out)))",
                            "IfExp"
                        ],
                        [
                            "self.conv3(out) if self.spectral_norm else self.bn3(self.conv3(out))",
                            "IfExp"
                        ],
                        [
                            "out + self.shortcut(x) if self.stride == 1 else out",
                            "IfExp"
                        ],
                        [
                            "self.relu(self.conv1(x)) if self.spectral_norm else self.relu(self.bn1(self.conv1(x)))",
                            "IfExp"
                        ],
                        [
                            "self.layers(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv2(out)) if self.spectral_norm else self.relu(self.bn2(self.conv2(out)))",
                            "IfExp"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_32": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_37": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_74": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(32 * width_mult)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_80": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(1280 * width_mult)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(out_planes * width_mult)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "core/model_utils.py": {
        "torch": {
            "load_52": {
                "f": {
                    "value": "load_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "core/orthonormal_regularization.py": {
        "torch": {
            "eye_11": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "m.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "w.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_14": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(torch.matmul(m, m.t()) - I).norm(p=order)",
                            "Call"
                        ],
                        [
                            "torch.pow(d, 2)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_18": {
                "variable": {
                    "value": "I_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "m.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "w.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_21": {
                "variable": {
                    "value": "d_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(torch.matmul(m.t(), m) - I_t).norm(p=order)",
                            "Call"
                        ],
                        [
                            "torch.pow(d_t, 2)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_12": {
                "input": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "w.view(w.shape[0], -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "m.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_19": {
                "input": {
                    "value": "m.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "w.view(w.shape[0], -1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "core/pruning_utils.py": {
        "torch": {
            "CrossEntropyLoss_18": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_70": {
                "variable": {
                    "value": "conv_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "total",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "total + size",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sort_78": {
                "variable": {
                    "value": "(y, i)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(total, device=device)",
                            "Call"
                        ],
                        [
                            "m.weight.data.view(-1).abs().clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_114": {
                "variable": {
                    "value": "(y, i)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(total, device=device)",
                            "Call"
                        ],
                        [
                            "m.weight.data.view(-1).abs().clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_95": {
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_copy.gt(0).float().cuda()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "weight_copy.gt(thre).float()",
                            "Call"
                        ],
                        [
                            "weight_copy.gt(thre[num_layer]).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_134": {
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_copy.gt(0).float().cuda()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "weight_copy.gt(thre).float()",
                            "Call"
                        ],
                        [
                            "weight_copy.gt(thre[num_layer]).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_97": {
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_copy.gt(0).float().cuda()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "weight_copy.gt(thre).float()",
                            "Call"
                        ],
                        [
                            "weight_copy.gt(thre[num_layer]).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_137": {
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_copy.gt(0).float().cuda()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "weight_copy.gt(thre).float()",
                            "Call"
                        ],
                        [
                            "weight_copy.gt(thre[num_layer]).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_100": {
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_copy.gt(0).float().cuda()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "weight_copy.gt(thre).float()",
                            "Call"
                        ],
                        [
                            "weight_copy.gt(thre[num_layer]).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_141": {
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_copy.gt(0).float().cuda()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "weight_copy.gt(thre).float()",
                            "Call"
                        ],
                        [
                            "weight_copy.gt(thre[num_layer]).float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "core/simple_models.py": {
        "torch": {
            "Linear_13": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(300 * scale_factor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(300 * scale_factor)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(100 * scale_factor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(100 * scale_factor)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_19": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_20": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(scale_factor * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(scale_factor * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(scale_factor * 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "7 * 7 * int(scale_factor * 4)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_38": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_39": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn1(self.conv1(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv2(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn2(self.conv2(x)))",
                            "IfExp"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn3(self.conv3(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv4(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn4(self.conv4(x)))",
                            "IfExp"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.softplus(self.conv1(x), threshold=2) if self.spectral_norm or not self.batch_norm else F.softplus(self.bn1(self.conv1(x)), threshold=2)",
                            "IfExp"
                        ],
                        [
                            "F.softplus(self.conv2(x), threshold=2) if self.spectral_norm or not self.batch_norm else F.softplus(self.bn2(self.conv2(x)), threshold=2)",
                            "IfExp"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.softplus(self.conv3(x), threshold=2) if self.spectral_norm or not self.batch_norm else F.softplus(self.bn3(self.conv3(x)), threshold=2)",
                            "IfExp"
                        ],
                        [
                            "F.softplus(self.conv4(x), threshold=2) if self.spectral_norm or not self.batch_norm else F.softplus(self.bn4(self.conv4(x)), threshold=2)",
                            "IfExp"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.softplus(self.fc1(x), threshold=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn1(self.conv1(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv2(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn2(self.conv2(x)))",
                            "IfExp"
                        ],
                        [
                            "F.avg_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn3(self.conv3(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv4(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn4(self.conv4(x)))",
                            "IfExp"
                        ],
                        [
                            "F.avg_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn1(self.conv1(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv2(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn2(self.conv2(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv3(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn3(self.conv3(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv4(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn4(self.conv4(x)))",
                            "IfExp"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_41": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_42": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn1(self.conv1(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv2(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn2(self.conv2(x)))",
                            "IfExp"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn3(self.conv3(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv4(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn4(self.conv4(x)))",
                            "IfExp"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.softplus(self.conv1(x), threshold=2) if self.spectral_norm or not self.batch_norm else F.softplus(self.bn1(self.conv1(x)), threshold=2)",
                            "IfExp"
                        ],
                        [
                            "F.softplus(self.conv2(x), threshold=2) if self.spectral_norm or not self.batch_norm else F.softplus(self.bn2(self.conv2(x)), threshold=2)",
                            "IfExp"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.softplus(self.conv3(x), threshold=2) if self.spectral_norm or not self.batch_norm else F.softplus(self.bn3(self.conv3(x)), threshold=2)",
                            "IfExp"
                        ],
                        [
                            "F.softplus(self.conv4(x), threshold=2) if self.spectral_norm or not self.batch_norm else F.softplus(self.bn4(self.conv4(x)), threshold=2)",
                            "IfExp"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.softplus(self.fc1(x), threshold=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn1(self.conv1(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv2(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn2(self.conv2(x)))",
                            "IfExp"
                        ],
                        [
                            "F.avg_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn3(self.conv3(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv4(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn4(self.conv4(x)))",
                            "IfExp"
                        ],
                        [
                            "F.avg_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn1(self.conv1(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv2(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn2(self.conv2(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv3(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn3(self.conv3(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv4(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn4(self.conv4(x)))",
                            "IfExp"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_45": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(scale_factor * 8)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(scale_factor * 8)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(scale_factor * 8)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 if replace_maxpool_with_stride else 1",
                            "IfExp"
                        ],
                        [
                            "2 if replace_maxpool_with_stride else 1",
                            "IfExp"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(scale_factor * 8)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(scale_factor * 16)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(scale_factor * 16)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(scale_factor * 16)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 if replace_maxpool_with_stride else 1",
                            "IfExp"
                        ],
                        [
                            "2 if replace_maxpool_with_stride else 1",
                            "IfExp"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(scale_factor * 16) * 8 * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(scale_factor * 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(scale_factor * 128)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(scale_factor * 8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(scale_factor * 8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_71": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(scale_factor * 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_78": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(scale_factor * 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_95": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn1(self.conv1(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv2(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn2(self.conv2(x)))",
                            "IfExp"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn3(self.conv3(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv4(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn4(self.conv4(x)))",
                            "IfExp"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.softplus(self.conv1(x), threshold=2) if self.spectral_norm or not self.batch_norm else F.softplus(self.bn1(self.conv1(x)), threshold=2)",
                            "IfExp"
                        ],
                        [
                            "F.softplus(self.conv2(x), threshold=2) if self.spectral_norm or not self.batch_norm else F.softplus(self.bn2(self.conv2(x)), threshold=2)",
                            "IfExp"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.softplus(self.conv3(x), threshold=2) if self.spectral_norm or not self.batch_norm else F.softplus(self.bn3(self.conv3(x)), threshold=2)",
                            "IfExp"
                        ],
                        [
                            "F.softplus(self.conv4(x), threshold=2) if self.spectral_norm or not self.batch_norm else F.softplus(self.bn4(self.conv4(x)), threshold=2)",
                            "IfExp"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.softplus(self.fc1(x), threshold=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn1(self.conv1(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv2(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn2(self.conv2(x)))",
                            "IfExp"
                        ],
                        [
                            "F.avg_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn3(self.conv3(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv4(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn4(self.conv4(x)))",
                            "IfExp"
                        ],
                        [
                            "F.avg_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn1(self.conv1(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv2(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn2(self.conv2(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv3(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn3(self.conv3(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv4(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn4(self.conv4(x)))",
                            "IfExp"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_99": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn1(self.conv1(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv2(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn2(self.conv2(x)))",
                            "IfExp"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn3(self.conv3(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv4(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn4(self.conv4(x)))",
                            "IfExp"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.softplus(self.conv1(x), threshold=2) if self.spectral_norm or not self.batch_norm else F.softplus(self.bn1(self.conv1(x)), threshold=2)",
                            "IfExp"
                        ],
                        [
                            "F.softplus(self.conv2(x), threshold=2) if self.spectral_norm or not self.batch_norm else F.softplus(self.bn2(self.conv2(x)), threshold=2)",
                            "IfExp"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.softplus(self.conv3(x), threshold=2) if self.spectral_norm or not self.batch_norm else F.softplus(self.bn3(self.conv3(x)), threshold=2)",
                            "IfExp"
                        ],
                        [
                            "F.softplus(self.conv4(x), threshold=2) if self.spectral_norm or not self.batch_norm else F.softplus(self.bn4(self.conv4(x)), threshold=2)",
                            "IfExp"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.softplus(self.fc1(x), threshold=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn1(self.conv1(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv2(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn2(self.conv2(x)))",
                            "IfExp"
                        ],
                        [
                            "F.avg_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn3(self.conv3(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv4(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn4(self.conv4(x)))",
                            "IfExp"
                        ],
                        [
                            "F.avg_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn1(self.conv1(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv2(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn2(self.conv2(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv3(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn3(self.conv3(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv4(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn4(self.conv4(x)))",
                            "IfExp"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_102": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_109": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn1(self.conv1(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv2(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn2(self.conv2(x)))",
                            "IfExp"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn3(self.conv3(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv4(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn4(self.conv4(x)))",
                            "IfExp"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.softplus(self.conv1(x), threshold=2) if self.spectral_norm or not self.batch_norm else F.softplus(self.bn1(self.conv1(x)), threshold=2)",
                            "IfExp"
                        ],
                        [
                            "F.softplus(self.conv2(x), threshold=2) if self.spectral_norm or not self.batch_norm else F.softplus(self.bn2(self.conv2(x)), threshold=2)",
                            "IfExp"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.softplus(self.conv3(x), threshold=2) if self.spectral_norm or not self.batch_norm else F.softplus(self.bn3(self.conv3(x)), threshold=2)",
                            "IfExp"
                        ],
                        [
                            "F.softplus(self.conv4(x), threshold=2) if self.spectral_norm or not self.batch_norm else F.softplus(self.bn4(self.conv4(x)), threshold=2)",
                            "IfExp"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.softplus(self.fc1(x), threshold=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn1(self.conv1(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv2(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn2(self.conv2(x)))",
                            "IfExp"
                        ],
                        [
                            "F.avg_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn3(self.conv3(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv4(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn4(self.conv4(x)))",
                            "IfExp"
                        ],
                        [
                            "F.avg_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn1(self.conv1(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv2(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn2(self.conv2(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv3(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn3(self.conv3(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv4(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn4(self.conv4(x)))",
                            "IfExp"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_115": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn1(self.conv1(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv2(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn2(self.conv2(x)))",
                            "IfExp"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn3(self.conv3(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv4(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn4(self.conv4(x)))",
                            "IfExp"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.softplus(self.conv1(x), threshold=2) if self.spectral_norm or not self.batch_norm else F.softplus(self.bn1(self.conv1(x)), threshold=2)",
                            "IfExp"
                        ],
                        [
                            "F.softplus(self.conv2(x), threshold=2) if self.spectral_norm or not self.batch_norm else F.softplus(self.bn2(self.conv2(x)), threshold=2)",
                            "IfExp"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.softplus(self.conv3(x), threshold=2) if self.spectral_norm or not self.batch_norm else F.softplus(self.bn3(self.conv3(x)), threshold=2)",
                            "IfExp"
                        ],
                        [
                            "F.softplus(self.conv4(x), threshold=2) if self.spectral_norm or not self.batch_norm else F.softplus(self.bn4(self.conv4(x)), threshold=2)",
                            "IfExp"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.softplus(self.fc1(x), threshold=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn1(self.conv1(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv2(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn2(self.conv2(x)))",
                            "IfExp"
                        ],
                        [
                            "F.avg_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn3(self.conv3(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv4(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn4(self.conv4(x)))",
                            "IfExp"
                        ],
                        [
                            "F.avg_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn1(self.conv1(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv2(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn2(self.conv2(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv3(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn3(self.conv3(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv4(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn4(self.conv4(x)))",
                            "IfExp"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softplus_118": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "threshold": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_93": {
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_94": {
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_97": {
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_98": {
                "input": {
                    "value": "self.bn4(self.conv4(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_123": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn1(self.conv1(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv2(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn2(self.conv2(x)))",
                            "IfExp"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn3(self.conv3(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv4(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn4(self.conv4(x)))",
                            "IfExp"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.softplus(self.conv1(x), threshold=2) if self.spectral_norm or not self.batch_norm else F.softplus(self.bn1(self.conv1(x)), threshold=2)",
                            "IfExp"
                        ],
                        [
                            "F.softplus(self.conv2(x), threshold=2) if self.spectral_norm or not self.batch_norm else F.softplus(self.bn2(self.conv2(x)), threshold=2)",
                            "IfExp"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.softplus(self.conv3(x), threshold=2) if self.spectral_norm or not self.batch_norm else F.softplus(self.bn3(self.conv3(x)), threshold=2)",
                            "IfExp"
                        ],
                        [
                            "F.softplus(self.conv4(x), threshold=2) if self.spectral_norm or not self.batch_norm else F.softplus(self.bn4(self.conv4(x)), threshold=2)",
                            "IfExp"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.softplus(self.fc1(x), threshold=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn1(self.conv1(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv2(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn2(self.conv2(x)))",
                            "IfExp"
                        ],
                        [
                            "F.avg_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn3(self.conv3(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv4(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn4(self.conv4(x)))",
                            "IfExp"
                        ],
                        [
                            "F.avg_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn1(self.conv1(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv2(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn2(self.conv2(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv3(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn3(self.conv3(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv4(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn4(self.conv4(x)))",
                            "IfExp"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_127": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn1(self.conv1(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv2(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn2(self.conv2(x)))",
                            "IfExp"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn3(self.conv3(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv4(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn4(self.conv4(x)))",
                            "IfExp"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.softplus(self.conv1(x), threshold=2) if self.spectral_norm or not self.batch_norm else F.softplus(self.bn1(self.conv1(x)), threshold=2)",
                            "IfExp"
                        ],
                        [
                            "F.softplus(self.conv2(x), threshold=2) if self.spectral_norm or not self.batch_norm else F.softplus(self.bn2(self.conv2(x)), threshold=2)",
                            "IfExp"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.softplus(self.conv3(x), threshold=2) if self.spectral_norm or not self.batch_norm else F.softplus(self.bn3(self.conv3(x)), threshold=2)",
                            "IfExp"
                        ],
                        [
                            "F.softplus(self.conv4(x), threshold=2) if self.spectral_norm or not self.batch_norm else F.softplus(self.bn4(self.conv4(x)), threshold=2)",
                            "IfExp"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.softplus(self.fc1(x), threshold=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn1(self.conv1(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv2(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn2(self.conv2(x)))",
                            "IfExp"
                        ],
                        [
                            "F.avg_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn3(self.conv3(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv4(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn4(self.conv4(x)))",
                            "IfExp"
                        ],
                        [
                            "F.avg_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn1(self.conv1(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv2(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn2(self.conv2(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv3(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn3(self.conv3(x)))",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv4(x)) if self.spectral_norm or not self.batch_norm else F.relu(self.bn4(self.conv4(x)))",
                            "IfExp"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_130": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_105": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "threshold": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softplus_106": {
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "threshold": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softplus_107": {
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "threshold": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softplus_108": {
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "threshold": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softplus_111": {
                "input": {
                    "value": "self.conv3(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "threshold": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softplus_112": {
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "threshold": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softplus_113": {
                "input": {
                    "value": "self.conv4(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "threshold": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softplus_114": {
                "input": {
                    "value": "self.bn4(self.conv4(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "threshold": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_140": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_121": {
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_122": {
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_125": {
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_126": {
                "input": {
                    "value": "self.bn4(self.conv4(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_133": {
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_134": {
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_136": {
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_137": {
                "input": {
                    "value": "self.bn4(self.conv4(x))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "core/spectral_norm.py": {
        "torch": {
            "Parameter_59": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data.new(height).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_60": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data.new(width).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_63": {
                "variable": {
                    "value": "w_bar",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mv_36": {
                "input": {
                    "value": "torch.t(w.view(height, -1).data)",
                    "type": "Call",
                    "possible_values": []
                },
                "vec": {
                    "value": "u.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mv_37": {
                "input": {
                    "value": "w.view(height, -1).data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "vec": {
                    "value": "v.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_36": {
                "input": {
                    "value": "w.view(height, -1).data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "core/tinyimagenet_bpda_models.py": {
        "torch": {
            "Sequential_72": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * 2 * 2, 1024)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_63": {
                "variable": {
                    "value": "maxpool",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "in_features": {
                    "value": "512 * 2 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_76": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_79": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "variable": {
                    "value": "relu_replace_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "variable": {
                    "value": "relu_replace_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_65": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softplus_22": {
                "beta": {
                    "value": "relu_replace_slope_param",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2.0",
                            "MethodArgument"
                        ],
                        [
                            "2.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "threshold": {
                    "value": "relu_replace_threshold",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2.0",
                            "MethodArgument"
                        ],
                        [
                            "2.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softplus_53": {
                "beta": {
                    "value": "relu_replace_slope_param",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2.0",
                            "MethodArgument"
                        ],
                        [
                            "2.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "threshold": {
                    "value": "relu_replace_threshold",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2.0",
                            "MethodArgument"
                        ],
                        [
                            "2.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LPPool2d_65": {
                "norm_type": {
                    "value": "maxpool_sub_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CELU_27": {
                "alpha": {
                    "value": "relu_replace_slope_param",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2.0",
                            "MethodArgument"
                        ],
                        [
                            "2.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "CELU_58": {
                "alpha": {
                    "value": "relu_replace_slope_param",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2.0",
                            "MethodArgument"
                        ],
                        [
                            "2.0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "core/tinyimagenet_vgg.py": {
        "torch": {
            "AdaptiveAvgPool2d_11": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_12": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * width * 2 * 2, 1024)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_27": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_48": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "variable": {
                    "value": "conv2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "in_features": {
                    "value": "512 * width * 2 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_16": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_19": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_56": {
                "num_features": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "core/tinyimagenet_wrn.py": {
        "torch": {
            "Conv2d_7": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_92": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "flatten_148": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_120": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_134": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "core/wrn.py": {
        "torch": {
            "Conv2d_31": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_108": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nChannels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_135": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "avg_pool2d_161": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.relu1(x) if self.spectral_norm else self.relu1(self.bn1(x))",
                            "IfExp"
                        ],
                        [
                            "self.relu2(self.conv1(out if self.equalInOut else x)) if self.spectral_norm else self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "IfExp"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out) if self.spectral_norm else self.relu(self.bn1(out))",
                            "IfExp"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_66": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.relu1(x) if self.spectral_norm else self.relu1(self.bn1(x))",
                            "IfExp"
                        ],
                        [
                            "self.relu2(self.conv1(out if self.equalInOut else x)) if self.spectral_norm else self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "IfExp"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out) if self.spectral_norm else self.relu(self.bn1(out))",
                            "IfExp"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_68": {
                "input": {
                    "value": "x if self.equalInOut else self.convShortcut(x)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "other": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.relu1(x) if self.spectral_norm else self.relu1(self.bn1(x))",
                            "IfExp"
                        ],
                        [
                            "self.relu2(self.conv1(out if self.equalInOut else x)) if self.spectral_norm else self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "IfExp"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out) if self.spectral_norm else self.relu(self.bn1(out))",
                            "IfExp"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_85": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BatchNorm2d_128": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_130": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_132": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "places365_evaluate_all.py": {
        "torch": {
            "is_available_53": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_54": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_65": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(data_dir, transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_52": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_70": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'./places365_pretrained/wideresnet18_places365.pth.tar'",
                            "Constant"
                        ],
                        [
                            "'./places365_pretrained/%s_places365.pth.tar' % arch",
                            "BinOp"
                        ],
                        [
                            "'./places365_pretrained/%s_places365.pth.tar' % arch",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_78": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'./places365_pretrained/wideresnet18_places365.pth.tar'",
                            "Constant"
                        ],
                        [
                            "'./places365_pretrained/%s_places365.pth.tar' % arch",
                            "BinOp"
                        ],
                        [
                            "'./places365_pretrained/%s_places365.pth.tar' % arch",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_86": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'./places365_pretrained/wideresnet18_places365.pth.tar'",
                            "Constant"
                        ],
                        [
                            "'./places365_pretrained/%s_places365.pth.tar' % arch",
                            "BinOp"
                        ],
                        [
                            "'./places365_pretrained/%s_places365.pth.tar' % arch",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "places365_pretrained/places365_bpda_models.py": {
        "torch": {
            "Sequential_107": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, kernel_size=11, stride=4, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_122": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(6, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_123": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_67": {
                "variable": {
                    "value": "maxpool_replace_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_105": {
                "variable": {
                    "value": "maxpool_replace_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_108": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_114": {
                "in_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_116": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_125": {
                "in_features": {
                    "value": "256 * 6 * 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_128": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_130": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "365",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "variable": {
                    "value": "relu_replace_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "variable": {
                    "value": "relu_replace_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_65": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_100": {
                "variable": {
                    "value": "relu_replace_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_103": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softplus_25": {
                "beta": {
                    "value": "relu_replace_slope_param",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2.0",
                            "MethodArgument"
                        ],
                        [
                            "2.0",
                            "MethodArgument"
                        ],
                        [
                            "2.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "threshold": {
                    "value": "relu_replace_threshold",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2.0",
                            "MethodArgument"
                        ],
                        [
                            "2.0",
                            "MethodArgument"
                        ],
                        [
                            "2.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softplus_55": {
                "beta": {
                    "value": "relu_replace_slope_param",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2.0",
                            "MethodArgument"
                        ],
                        [
                            "2.0",
                            "MethodArgument"
                        ],
                        [
                            "2.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "threshold": {
                    "value": "relu_replace_threshold",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2.0",
                            "MethodArgument"
                        ],
                        [
                            "2.0",
                            "MethodArgument"
                        ],
                        [
                            "2.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LPPool2d_65": {
                "norm_type": {
                    "value": "maxpool_sub_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softplus_93": {
                "beta": {
                    "value": "relu_replace_slope_param",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2.0",
                            "MethodArgument"
                        ],
                        [
                            "2.0",
                            "MethodArgument"
                        ],
                        [
                            "2.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "threshold": {
                    "value": "relu_replace_threshold",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2.0",
                            "MethodArgument"
                        ],
                        [
                            "2.0",
                            "MethodArgument"
                        ],
                        [
                            "2.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LPPool2d_103": {
                "norm_type": {
                    "value": "maxpool_sub_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CELU_30": {
                "alpha": {
                    "value": "relu_replace_slope_param",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2.0",
                            "MethodArgument"
                        ],
                        [
                            "2.0",
                            "MethodArgument"
                        ],
                        [
                            "2.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "CELU_60": {
                "alpha": {
                    "value": "relu_replace_slope_param",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2.0",
                            "MethodArgument"
                        ],
                        [
                            "2.0",
                            "MethodArgument"
                        ],
                        [
                            "2.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "CELU_98": {
                "alpha": {
                    "value": "relu_replace_slope_param",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2.0",
                            "MethodArgument"
                        ],
                        [
                            "2.0",
                            "MethodArgument"
                        ],
                        [
                            "2.0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "places365_pretrained/wideresnet.py": {
        "torch": {
            "Conv2d_21": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_103": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_110": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_111": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_126": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_127": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_129": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "svhn_evaluate_all.py": {
        "torch": {
            "is_available_59": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_60": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_58": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_69": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.SVHN('../data', split='test', download=True, transform=transform_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "svhn_training.py": {
        "torch": {
            "is_available_84": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_85": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_79": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_102": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(args.momentum, args.adam_beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_150": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}_{}.pt'.format(args.save_model, 'full_train')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_99": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_initialization",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_104": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_148": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}_{}.pt'.format(args.save_model, 'early_stop')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tinyimagenet_evaluate_all.py": {
        "torch": {
            "is_available_62": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_63": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_61": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_69": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(os.path.join(data_dir, 'train'), transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_72": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(os.path.join(data_dir, 'test'), transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tinyimagenet_training.py": {
        "torch": {
            "is_available_87": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_88": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_97": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(os.path.join(data_dir, 'train'), train_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_98": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(os.path.join(data_dir, 'val'), val_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_82": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_107": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(args.momentum, args.adam_beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_156": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}_{}.pt'.format(args.save_model, 'full_train')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_104": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_initialization",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_109": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_154": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}_{}.pt'.format(args.save_model, 'early_stop')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}