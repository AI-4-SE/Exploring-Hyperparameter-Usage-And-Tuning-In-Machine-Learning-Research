{
    "models/vgg.py": {
        "tensorflow": {
            "constant_60": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_61": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "127.5",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_24": {
                "images": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "ORIGINAL_VGG_16_SHAPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(224, 224, 3)",
                            "Tuple"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_gaussian_blur.py": {
        "tensorflow": {}
    },
    "tests/test_norm_utils.py": {
        "tensorflow": {
            "convert_to_tensor_13": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.reshape(np.array([[1, 2], [3, 4]], dtype=np.float32), newshape=[1, 2, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x1)",
                            "Call"
                        ],
                        [
                            "np.reshape(np.array([[1, 2], [3, 4]], dtype=np.float32), newshape=[1, 2, 2, 1])",
                            "Call"
                        ],
                        [
                            "np.reshape(np.array([[-1.5, -0.5], [0.5, 1.5]], dtype=np.float32), newshape=[1, 2, 2, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_17": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.reshape(np.array([[1, 2], [3, 4]], dtype=np.float32), newshape=[1, 2, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_vgg.py": {
        "tensorflow": {}
    },
    "utils/contextual_similarity_utills.py": {
        "tensorflow": {
            "l2_normalize_14": {
                "variable": {
                    "value": "y_true_vgg",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_true_vgg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(y_true_vgg, axis=-1)",
                            "Call"
                        ],
                        [
                            "normalize_inputs(y_true_vgg, y_pred_vgg)",
                            "Call"
                        ],
                        [
                            "y_true_vgg",
                            "Method Argument"
                        ],
                        [
                            "y_true_vgg",
                            "Method Argument"
                        ],
                        [
                            "y_true_vgg",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "l2_normalize_15": {
                "variable": {
                    "value": "y_pred_vgg",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred_vgg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(y_pred_vgg, axis=-1)",
                            "Call"
                        ],
                        [
                            "normalize_inputs(y_true_vgg, y_pred_vgg)",
                            "Call"
                        ],
                        [
                            "y_pred_vgg",
                            "Method Argument"
                        ],
                        [
                            "y_pred_vgg",
                            "Method Argument"
                        ],
                        [
                            "y_pred_vgg",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_40": {
                "variable": {
                    "value": "cosine_distances",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "cosine_distances_per_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_min_45": {
                "variable": {
                    "value": "div",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "raw_distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "raw_distances",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_51": {
                "variable": {
                    "value": "cs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(b - scaled_distances) / sigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_52": {
                "variable": {
                    "value": "reduce_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "calculate_contextual_similarity(relative_dist, sigma, b)",
                            "Call"
                        ],
                        [
                            "tf.exp((b - scaled_distances) / sigma)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "divide_53": {
                "variable": {
                    "value": "cs_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "calculate_contextual_similarity(relative_dist, sigma, b)",
                            "Call"
                        ],
                        [
                            "tf.exp((b - scaled_distances) / sigma)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "reduce_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(cs, axis=3, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "extract_image_patches_58": {
                "variable": {
                    "value": "patches_as_depth_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "vgg_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vgg_features",
                            "Method Argument"
                        ]
                    ]
                },
                "ksizes": {
                    "value": "[1, patch_size, patch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "rates": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "patches_as_depth_vectors",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_64": {
                "variable": {
                    "value": "patches_NHWC",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "patches_as_depth_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.extract_image_patches(images=vgg_features, ksizes=[1, patch_size, patch_size, 1], strides=[1, 1, 1, 1], rates=[1, 1, 1, 1], padding='VALID', name='patches_as_depth_vectors')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, patch_size, patch_size, patches_as_depth_vectors.shape[3].value]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "patches_PHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_69": {
                "variable": {
                    "value": "patches_HWCN",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "patches_NHWC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(patches_as_depth_vectors, shape=[-1, patch_size, patch_size, patches_as_depth_vectors.shape[3].value], name='patches_PHWC')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 3, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "patches_HWCP",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_29": {
                "variable": {
                    "value": "y_pred_vgg_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred_vgg[i, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_30": {
                "variable": {
                    "value": "y_true_vgg_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_true_vgg[i, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_35": {
                "variable": {
                    "value": "cosine_dist_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred_vgg_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(y_pred_vgg[i, :, :, :], 0)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "patches_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "extract_patches(y_true_vgg_i)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "use_cudnn_on_gpu": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "cosine_dist",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_7": {
                "name": {
                    "value": "contextual_similarity",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "utils/gaussian_utils.py": {
        "tensorflow": {
            "Normal_6": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "einsum_8": {
                "variable": {
                    "value": "gauss_kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "i,j->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d.prob(tf.range(start=-size, limit=size + 1, dtype=tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d.prob(tf.range(start=-size, limit=size + 1, dtype=tf.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_13": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask[:, :, :, 0], 3)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_14": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_23": {
                "variable": {
                    "value": "m_w",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[m_w, m_w, m_w]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_7": {
                "start": {
                    "value": "-size",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "limit": {
                    "value": "size + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_9": {
                "input_tensor": {
                    "value": "gauss_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.einsum('i,j->ij', vals, vals)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_22": {
                "input": {
                    "value": "m_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neg_mask + m_w",
                            "BinOp"
                        ]
                    ]
                },
                "filter": {
                    "value": "gaussian_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gaussian_kernel(size=gaussian_kernel_size, mean=0.0, std=gaussian_kernel_std)",
                            "Call"
                        ],
                        [
                            "gaussian_filter[:, :, tf.newaxis, tf.newaxis]",
                            "Subscript"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "utils/id_mrf.py": {
        "tensorflow": {
            "reduce_sum_19": {
                "variable": {
                    "value": "id_mrf_loss_total",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "id_mrf_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "convert_to_tensor_43": {
                "variable": {
                    "value": "y_pred_vgg",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "y_pred_vgg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other_utils.crop_quarters(y_pred_vgg)",
                            "Call"
                        ],
                        [
                            "sampling_utils.random_pooling([y_pred_vgg, y_true_vgg, mask_resized], output_1d_size=config['max_sampling_1d_size'], batch_size=batch_size)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(y_pred_vgg, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "y_pred_vgg",
                            "Method Argument"
                        ],
                        [
                            "y_pred_vgg",
                            "Method Argument"
                        ],
                        [
                            "y_pred_vgg",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_44": {
                "variable": {
                    "value": "y_true_vgg",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "y_true_vgg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other_utils.crop_quarters(y_true_vgg)",
                            "Call"
                        ],
                        [
                            "sampling_utils.random_pooling([y_pred_vgg, y_true_vgg, mask_resized], output_1d_size=config['max_sampling_1d_size'], batch_size=batch_size)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(y_true_vgg, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "y_true_vgg",
                            "Method Argument"
                        ],
                        [
                            "y_true_vgg",
                            "Method Argument"
                        ],
                        [
                            "y_true_vgg",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_49": {
                "variable": {
                    "value": "cs_sim_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "contextual_similarity_utills.calculate_cs(y_true_vgg, y_pred_vgg, batch_size, nnsigma)",
                            "Call"
                        ],
                        [
                            "cs * tf.expand_dims(mask_resized[:, :, :, 0], 3)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "height_width_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_50": {
                "variable": {
                    "value": "contextual_similarities",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cs_sim_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(cs, axis=height_width_axis)",
                            "Call"
                        ],
                        [
                            "cs_sim_max",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_52": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.log(contextual_similarities)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_57": {
                "variable": {
                    "value": "mask_one_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_58": {
                "variable": {
                    "value": "num_mask_pixels",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mask_one_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(mask[:, :, :, 0], 3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_59": {
                "variable": {
                    "value": "sum_maximum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cs_sim_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(cs, axis=height_width_axis)",
                            "Call"
                        ],
                        [
                            "cs_sim_max",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_47": {
                "input": {
                    "value": "mask_resized[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_51": {
                "x": {
                    "value": "contextual_similarities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(cs_sim_max, axis=[1])",
                            "Call"
                        ],
                        [
                            "sum_maximum / num_mask_pixels",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "utils/norm_utils.py": {
        "tensorflow": {
            "moments_9": {
                "variable": {
                    "value": "(meanT, varT)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred_vgg",
                    "type": "variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "axes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0, 1, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "norm_22": {
                "variable": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "ord": {
                    "value": "euclidean",
                    "type": "str",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_24": {
                "variable": {
                    "value": "norms_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.norm(features, ord='euclidean', axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "divide_25": {
                "variable": {
                    "value": "features_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "norms_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(norms, axis=3)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/other_utils.py": {
        "tensorflow": {
            "concat_12": {
                "variable": {
                    "value": "feature_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "quarters_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_18": {
                "variable": {
                    "value": "mask_resized",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, h)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "slice_8": {
                "input_": {
                    "value": "feature_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(quarters_list, axis=0)",
                            "Call"
                        ],
                        [
                            "feature_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "quarter_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[N, round(fH / 2), round(fW / 2), fC]",
                            "List"
                        ]
                    ]
                }
            },
            "slice_9": {
                "input_": {
                    "value": "feature_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(quarters_list, axis=0)",
                            "Call"
                        ],
                        [
                            "feature_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, round(fH / 2), 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "quarter_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[N, round(fH / 2), round(fW / 2), fC]",
                            "List"
                        ]
                    ]
                }
            },
            "slice_10": {
                "input_": {
                    "value": "feature_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(quarters_list, axis=0)",
                            "Call"
                        ],
                        [
                            "feature_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, round(fW / 2), 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "quarter_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[N, round(fH / 2), round(fW / 2), fC]",
                            "List"
                        ]
                    ]
                }
            },
            "slice_11": {
                "input_": {
                    "value": "feature_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(quarters_list, axis=0)",
                            "Call"
                        ],
                        [
                            "feature_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, round(fH / 2), round(fW / 2), 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "quarter_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[N, round(fH / 2), round(fW / 2), fC]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "utils/sampling_utils.py": {
        "tensorflow": {
            "reshape_34": {
                "variable": {
                    "value": "tensor_NSC",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tensor_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_in",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, S, C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_38": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tensor_NSC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tensor_in, [batch_size, S, C])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random_sampling(feats[0], output_1d_size ** 2, H, W, C, batch_size)",
                            "Call"
                        ],
                        [
                            "tf.gather(shuffled_indices, list(range(n)), axis=0) if indices is None else indices",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_24": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "feats_sampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, output_1d_size, output_1d_size, C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_12": {
                "value": {
                    "value": "feats_i",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gather_37": {
                "params": {
                    "value": "shuffled_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_shuffle(all_indices)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "list(range(n))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_6": {
                "value": {
                    "value": "feats[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "utils/training_utils.py": {
        "tensorflow": {
            "set_verbosity_49": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}