{
    "mace.py": {
        "tensorflow": {
            "MeanSquaredError_381": {
                "variable": {
                    "value": "mse",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BinaryCrossentropy_382": {
                "variable": {
                    "value": "kl",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_383": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Mean_385": {
                "variable": {
                    "value": "train_mse_dense",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_mse_dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Mean_386": {
                "variable": {
                    "value": "train_kl",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_kl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Mean_387": {
                "variable": {
                    "value": "train_revelance",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_kl_uniform",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Mean_388": {
                "variable": {
                    "value": "train_loss_cos",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_coss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Mean_389": {
                "variable": {
                    "value": "train_loss_triplet",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_triplet",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_391": {
                "variable": {
                    "value": "train_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_acc",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_392": {
                "variable": {
                    "value": "test_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "test_acc",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_393": {
                "variable": {
                    "value": "rev_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "rev_acc",
                    "type": "str",
                    "possible_values": []
                }
            },
            "read_file_242": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "names[k]",
                            "Subscript"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ]
                    ]
                }
            },
            "decode_jpeg_243": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "names[k]",
                            "Subscript"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_image_dtype_244": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "names[k]",
                            "Subscript"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_245": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "names[k]",
                            "Subscript"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[224, 224]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "read_file_249": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "names[k]",
                            "Subscript"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ]
                    ]
                }
            },
            "decode_jpeg_250": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "names[k]",
                            "Subscript"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_image_dtype_251": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "names[k]",
                            "Subscript"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_252": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "names[k]",
                            "Subscript"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[224, 224]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_fn_256": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "read_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "names[k]",
                            "Subscript"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_269": {
                "variable": {
                    "value": "anchors_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(num_concepts,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "maxval": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ],
                        [
                            "32",
                            "Constant"
                        ],
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_301": {
                "variable": {
                    "value": "transposed_prototype",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "local_prototypes",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_302": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "transposed_prototype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(local_prototypes, [2, 0, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size * num_concepts, embedding_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_305": {
                "variable": {
                    "value": "concepts_range",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(num_concepts)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "broadcast_to_306": {
                "variable": {
                    "value": "column_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "concepts_range",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.range(num_concepts), -1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(num_concepts, batch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_307": {
                "variable": {
                    "value": "column_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "column_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.broadcast_to(concepts_range, (num_concepts, batch_size))",
                            "Call"
                        ],
                        [
                            "tf.reshape(column_mask, (num_concepts * batch_size, 1))",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.broadcast_to(column_mask, (num_concepts * batch_size, num_concepts)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(num_concepts * batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_308": {
                "variable": {
                    "value": "column_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.broadcast_to(column_mask, (num_concepts * batch_size, num_concepts))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_312": {
                "variable": {
                    "value": "positive_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "concepts_range",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.range(num_concepts), -1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "column_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.broadcast_to(concepts_range, (num_concepts, batch_size))",
                            "Call"
                        ],
                        [
                            "tf.reshape(column_mask, (num_concepts * batch_size, 1))",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.broadcast_to(column_mask, (num_concepts * batch_size, num_concepts)))",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_not_313": {
                "variable": {
                    "value": "negative_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "positive_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.math.equal(concepts_range, column_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_317": {
                "variable": {
                    "value": "anchors",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(transposed_prototype, (batch_size * num_concepts, embedding_size))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "anchor_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_anchors(batch_size, num_concepts)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_323": {
                "variable": {
                    "value": "masked_positive",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pairwise_distance",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pairwise_dist_map(anchors, embeddings)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "positive_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.math.equal(concepts_range, column_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_324": {
                "variable": {
                    "value": "masked_positive",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_positive",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(pairwise_distance, positive_mask)",
                            "Call"
                        ],
                        [
                            "tf.reshape(masked_positive, (num_concepts, batch_size))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(num_concepts, batch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_mean_325": {
                "variable": {
                    "value": "avg_positive",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masked_positive",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(pairwise_distance, positive_mask)",
                            "Call"
                        ],
                        [
                            "tf.reshape(masked_positive, (num_concepts, batch_size))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "boolean_mask_328": {
                "variable": {
                    "value": "masked_negative",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pairwise_distance",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pairwise_dist_map(anchors, embeddings)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "negative_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.math.logical_not(positive_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_329": {
                "variable": {
                    "value": "masked_negative",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_negative",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(pairwise_distance, negative_mask)",
                            "Call"
                        ],
                        [
                            "tf.reshape(masked_negative, (num_concepts, batch_size * (num_concepts - 1)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(num_concepts, batch_size * (num_concepts - 1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_330": {
                "variable": {
                    "value": "hardest_negative",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_negative(avg_positive, masked_negative)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_332": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.math.maximum(masked_positive - hardest_negative + margin, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_348": {
                "variable": {
                    "value": "p_prototypes",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "prototypes",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_349": {
                "variable": {
                    "value": "p_prototypes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_prototypes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(prototypes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(p_prototypes, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_351": {
                "variable": {
                    "value": "p_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "p_prototypes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(prototypes, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(p_prototypes, -1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_353": {
                "variable": {
                    "value": "pairwise",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(p_ - p_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_355": {
                "variable": {
                    "value": "hardest_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pairwise",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(p_ - p_t), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(n_ - n_t), axis=2)",
                            "Call"
                        ],
                        [
                            "eye + pairwise * tf.cast(semi_masked, dtype=tf.float32)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_356": {
                "variable": {
                    "value": "hardest_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "hardest_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.math.reduce_mean(pairwise, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(hardest_p, [1, 0])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_359": {
                "variable": {
                    "value": "n_prototypes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prototypes",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_361": {
                "variable": {
                    "value": "n_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "n_prototypes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(prototypes, -1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_363": {
                "variable": {
                    "value": "pairwise",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(n_ - n_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_364": {
                "variable": {
                    "value": "semi_masked",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pairwise",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(p_ - p_t), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(n_ - n_t), axis=2)",
                            "Call"
                        ],
                        [
                            "eye + pairwise * tf.cast(semi_masked, dtype=tf.float32)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(hardest_p, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_not_365": {
                "variable": {
                    "value": "not_semi_masked",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "semi_masked",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.math.greater(pairwise, tf.expand_dims(hardest_p, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_min_370": {
                "variable": {
                    "value": "hardest_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pairwise",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(p_ - p_t), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(n_ - n_t), axis=2)",
                            "Call"
                        ],
                        [
                            "eye + pairwise * tf.cast(semi_masked, dtype=tf.float32)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_372": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.math.maximum(hardest_p - hardest_n + margin, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "read_file_502": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "names[k]",
                            "Subscript"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ]
                    ]
                }
            },
            "decode_jpeg_503": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "names[k]",
                            "Subscript"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_image_dtype_504": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "names[k]",
                            "Subscript"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_505": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "names[k]",
                            "Subscript"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[224, 224]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_517": {
                "variable": {
                    "value": "concept_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x[0] for x in all_outputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_519": {
                "variable": {
                    "value": "class_prototype",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x[1] for x in all_outputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_521": {
                "variable": {
                    "value": "class_protoweight",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x[2] for x in all_outputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_522": {
                "variable": {
                    "value": "class_protoweight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_protoweight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([x[2] for x in all_outputs], 2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(class_protoweight)",
                            "Call"
                        ],
                        [
                            "[[] for i in range(self.num_classes)]",
                            "ListComp"
                        ],
                        [
                            "[[] for i in range(self.num_classes)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "concat_524": {
                "variable": {
                    "value": "relevance",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x[3] for x in all_outputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_552": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer_weights[i].weights[0]",
                            "Subscript"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[32 for i in range(10)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_30": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_33": {
                "variable": {
                    "value": "self.dense_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_34": {
                "variable": {
                    "value": "self.dense_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_35": {
                "variable": {
                    "value": "self.dense_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Lambda_36": {
                "variable": {
                    "value": "self.l2_normalize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "function": {
                    "value": "lambda x: tf.math.l2_normalize(x, axis=-1)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reduce_sum_44": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(output)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clip_by_norm_62": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "w * tf.cast(tf.math.greater_equal(w, 0.0), tf.float32)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_norm(w, self.max_value, axes=[self.axis])",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "self.max_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axes": {
                    "value": "[self.axis]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2D_79": {
                "variable": {
                    "value": "self.feature_extract",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.num_prototypes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Activation_86": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_89": {
                "variable": {
                    "value": "self.final_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "first_dense_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unstack_108": {
                "variable": {
                    "value": "concept_maps",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "concept_maps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.feature_extract(inputs)",
                            "Call"
                        ],
                        [
                            "tf.unstack(concept_maps, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.feature_extract(inputs)",
                            "Call"
                        ],
                        [
                            "tf.unstack(concept_maps, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_142": {
                "variable": {
                    "value": "relevances",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "relevances",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat(relevances, axis=1)",
                            "Call"
                        ],
                        [
                            "self.softmax(relevances)",
                            "Call"
                        ],
                        [
                            "tf.concat(relevances, axis=1)",
                            "Call"
                        ],
                        [
                            "self.softmax(relevances)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_144": {
                "variable": {
                    "value": "expanded_relevances",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relevances",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat(relevances, axis=1)",
                            "Call"
                        ],
                        [
                            "self.softmax(relevances)",
                            "Call"
                        ],
                        [
                            "tf.concat(relevances, axis=1)",
                            "Call"
                        ],
                        [
                            "self.softmax(relevances)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_147": {
                "variable": {
                    "value": "concepts",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "concepts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat(concepts, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "broadcast_to_149": {
                "variable": {
                    "value": "expanded_relevances",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "expanded_relevances",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(relevances, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.broadcast_to(expanded_relevances, [batch_size, self.num_classes, 32 * self.proto_per_class])",
                            "Call"
                        ],
                        [
                            "tf.reshape(expanded_relevances, concepts.shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, self.num_classes, 32 * self.proto_per_class]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_150": {
                "variable": {
                    "value": "expanded_relevances",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "expanded_relevances",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(relevances, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.broadcast_to(expanded_relevances, [batch_size, self.num_classes, 32 * self.proto_per_class])",
                            "Call"
                        ],
                        [
                            "tf.reshape(expanded_relevances, concepts.shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "concepts.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unstack_162": {
                "variable": {
                    "value": "concept_maps",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "concept_maps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.feature_extract(inputs)",
                            "Call"
                        ],
                        [
                            "tf.unstack(concept_maps, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.feature_extract(inputs)",
                            "Call"
                        ],
                        [
                            "tf.unstack(concept_maps, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_196": {
                "variable": {
                    "value": "relevances",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "relevances",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat(relevances, axis=1)",
                            "Call"
                        ],
                        [
                            "self.softmax(relevances)",
                            "Call"
                        ],
                        [
                            "tf.concat(relevances, axis=1)",
                            "Call"
                        ],
                        [
                            "self.softmax(relevances)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "map_fn_276": {
                "fn": {
                    "value": "lambda x: tf.reduce_sum(tf.square(x - embeddings), axis=1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "anchors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather(embeddings, anchor_indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_282": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "nanchors",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "panchor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "boolean_mask_283": {
                "variable": {
                    "value": "applied_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "nanchors",
                    "type": "Variable",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.math.greater(nanchors, panchor)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_min_284": {
                "variable": {
                    "value": "semi_hard_negative",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "applied_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(nanchors, mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "map_fn_288": {
                "fn": {
                    "value": "lambda x: get_negative(x[0], x[1])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "(avg_positive, masked_negative)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_553": {
                "input": {
                    "value": "tf.matmul(prototype, a[j])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_135": {
                "variable": {
                    "value": "cps",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "cprototypes",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_189": {
                "variable": {
                    "value": "cps",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "cprototypes",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "broadcast_to_309": {
                "input": {
                    "value": "column_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.broadcast_to(concepts_range, (num_concepts, batch_size))",
                            "Call"
                        ],
                        [
                            "tf.reshape(column_mask, (num_concepts * batch_size, 1))",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.broadcast_to(column_mask, (num_concepts * batch_size, num_concepts)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(num_concepts * batch_size, num_concepts)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "maximum_333": {
                "x": {
                    "value": "masked_positive - hardest_negative + margin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_353": {
                "x": {
                    "value": "p_ - p_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_363": {
                "x": {
                    "value": "n_ - n_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_364": {
                "input": {
                    "value": "hardest_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.math.reduce_mean(pairwise, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(hardest_p, [1, 0])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_367": {
                "x": {
                    "value": "not_semi_masked",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.math.logical_not(semi_masked)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_373": {
                "x": {
                    "value": "hardest_p - hardest_n + margin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GradientTape_398": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_409": {
                "variable": {
                    "value": "prototype",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "cp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "class_prototypes",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_422": {
                "input": {
                    "value": "final_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_428": {
                "input": {
                    "value": "final_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_429": {
                "input": {
                    "value": "final_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_553": {
                "a": {
                    "value": "prototype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack(cp, axis=2)",
                            "Call"
                        ],
                        [
                            "0 * prototype",
                            "BinOp"
                        ],
                        [
                            "0 * prototype",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "a[j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "top_k_574": {
                "variable": {
                    "value": "(values, indexes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_rel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "new_c_pw",
                            "Name"
                        ]
                    ]
                },
                "k": {
                    "value": "k2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "gather_575": {
                "variable": {
                    "value": "cm",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "c_m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "concept_maps[i * 10 + j]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "indexes",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_44": {
                "x": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dense_1(flattened_input)",
                            "Call"
                        ],
                        [
                            "self.dense_2(output)",
                            "Call"
                        ],
                        [
                            "self.dense_3(output)",
                            "Call"
                        ],
                        [
                            "self.l2_normalize(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_61": {
                "x": {
                    "value": "tf.math.greater_equal(w, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_85": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_276": {
                "input_tensor": {
                    "value": "tf.square(x - embeddings)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_finite_285": {
                "x": {
                    "value": "semi_hard_negative",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_min(applied_map)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_285": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_368": {
                "x": {
                    "value": "semi_masked",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.math.greater(pairwise, tf.expand_dims(hardest_p, -1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "read_file_580": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "names[k]",
                            "Subscript"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ]
                    ]
                }
            },
            "decode_jpeg_581": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "names[k]",
                            "Subscript"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_image_dtype_582": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "names[k]",
                            "Subscript"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_583": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ],
                        [
                            "names[k]",
                            "Subscript"
                        ],
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[224, 224]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_585": {
                "variable": {
                    "value": "cmi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cmi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cm[k]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(cmi, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "resize_586": {
                "variable": {
                    "value": "map_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "cmi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cm[k]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(cmi, -1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[224, 224]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_36": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "greater_equal_61": {
                "x": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "w * tf.cast(tf.math.greater_equal(w, 0.0), tf.float32)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_norm(w, self.max_value, axes=[self.axis])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "square_276": {
                "x": {
                    "value": "x - embeddings",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_410": {
                "a": {
                    "value": "prototype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack(cp, axis=2)",
                            "Call"
                        ],
                        [
                            "0 * prototype",
                            "BinOp"
                        ],
                        [
                            "0 * prototype",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_588": {
                "input_tensor": {
                    "value": "map_img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize(cmi, [224, 224])",
                            "Call"
                        ],
                        [
                            "map_img * image",
                            "BinOp"
                        ],
                        [
                            "map_img / tf.reduce_max(map_img)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "model/resnet50.py": {
        "tensorflow": {
            "ResNet50_17": {
                "variable": {
                    "value": "self.base_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "include_top": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "classes": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_19": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_20": {
                "variable": {
                    "value": "self.pre_final_dense_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "pre_final_1",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_21": {
                "variable": {
                    "value": "self.dropout_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_26": {
                "variable": {
                    "value": "self.dropout_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_27": {
                "variable": {
                    "value": "self.final_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "10_classes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Activation_28": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_23": {
                "variable": {
                    "value": "self.pre_final_dense_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "pre_final_2",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_25": {
                "variable": {
                    "value": "self.pre_final_dense_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "pre_final_2",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "model/vgg_model.py": {
        "tensorflow": {
            "get_file_16": {
                "variable": {
                    "value": "weights_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "fname": {
                    "value": "vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5",
                    "type": "str",
                    "possible_values": []
                },
                "origin": {
                    "value": "WEIGHTS_PATH",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'https://github.com/fchollet/deep-learning-models/releases/download/v0.1/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5'",
                            "Constant"
                        ]
                    ]
                },
                "cache_subdir": {
                    "value": "models",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_29": {
                "variable": {
                    "value": "self.conv_1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "block1_conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_33": {
                "variable": {
                    "value": "self.conv_1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "block1_conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPool2D_37": {
                "variable": {
                    "value": "self.maxpool_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "block1_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_38": {
                "variable": {
                    "value": "self.dropout_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2D_41": {
                "variable": {
                    "value": "self.conv_2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "block2_conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_45": {
                "variable": {
                    "value": "self.conv_2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "block2_conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPool2D_50": {
                "variable": {
                    "value": "self.maxpool_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "block2_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_51": {
                "variable": {
                    "value": "self.dropout_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2D_54": {
                "variable": {
                    "value": "self.conv_3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "block3_conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_59": {
                "variable": {
                    "value": "self.conv_3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "block3_conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_64": {
                "variable": {
                    "value": "self.conv_3_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "block3_conv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling2D_69": {
                "variable": {
                    "value": "self.maxpool_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "block3_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_70": {
                "variable": {
                    "value": "self.dropout_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2D_73": {
                "variable": {
                    "value": "self.conv_4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "block4_conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_78": {
                "variable": {
                    "value": "self.conv_4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "block4_conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_83": {
                "variable": {
                    "value": "self.conv_4_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "block4_conv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling2D_88": {
                "variable": {
                    "value": "self.maxpool_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "block4_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_89": {
                "variable": {
                    "value": "self.dropout_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2D_92": {
                "variable": {
                    "value": "self.conv_5_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "block5_conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_97": {
                "variable": {
                    "value": "self.conv_5_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "block5_conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_102": {
                "variable": {
                    "value": "self.conv_5_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "block5_conv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling2D_107": {
                "variable": {
                    "value": "self.maxpool_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "block5_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_109": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "flatten",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_198": {
                "variable": {
                    "value": "self.pre_final_dense_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "pre_final_1",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_199": {
                "variable": {
                    "value": "self.dropout_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_204": {
                "variable": {
                    "value": "self.dropout_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_205": {
                "variable": {
                    "value": "self.final_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "10_classes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Activation_206": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_201": {
                "variable": {
                    "value": "self.pre_final_dense_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "pre_final_2",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_203": {
                "variable": {
                    "value": "self.pre_final_dense_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "pre_final_2",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "resnet_base_model.py": {
        "tensorflow": {
            "SparseCategoricalCrossentropy_54": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_57": {
                "variable": {
                    "value": "train_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_58": {
                "variable": {
                    "value": "train_accuracy",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Mean_60": {
                "variable": {
                    "value": "test_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "test_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_61": {
                "variable": {
                    "value": "test_accuracy",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "test_accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "read_file_39": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ]
                    ]
                }
            },
            "decode_jpeg_40": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_image_dtype_41": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_42": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[224, 224]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GradientTape_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "vgg_base_model.py": {
        "tensorflow": {
            "SparseCategoricalCrossentropy_53": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_56": {
                "variable": {
                    "value": "train_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_57": {
                "variable": {
                    "value": "train_accuracy",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Mean_59": {
                "variable": {
                    "value": "test_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "test_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_60": {
                "variable": {
                    "value": "test_accuracy",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "test_accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "read_file_39": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ]
                    ]
                }
            },
            "decode_jpeg_40": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_image_dtype_41": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_42": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [224, 224])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[224, 224]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GradientTape_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}